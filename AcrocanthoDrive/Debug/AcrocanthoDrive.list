
AcrocanthoDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007ba4  08007ba4  00008ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb4  08007bb4  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb4  08007bb4  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb4  08007bb4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00008bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00008bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007bbc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08007bc8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007bc8  000092f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001955c  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b6  00000000  00000000  00022598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00025750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001285  00000000  00000000  00026f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adf1  00000000  00000000  000281bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a951  00000000  00000000  00052fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115057  00000000  00000000  0006d8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000680c  00000000  00000000  0018299c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001891a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b8c 	.word	0x08007b8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007b8c 	.word	0x08007b8c

08000218 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "ang.h"

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  : i2cHandle_(i2cHandle), readStart_(false), txComplete_(false), rxComplete_(false), actAngle_(0.0f) {}
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	711a      	strb	r2, [r3, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	715a      	strb	r2, [r3, #5]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	719a      	strb	r2, [r3, #6]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f04f 0200 	mov.w	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <_ZN3Ang4readEv>:

void Ang::read() {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  if (!readStart_) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	f083 0301 	eor.w	r3, r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00c      	beq.n	8000280 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000266:	230c      	movs	r3, #12
 8000268:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&i2cHandle_, AS5600ADDR, &readRegAddr, 1);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	f107 020f 	add.w	r2, r7, #15
 8000272:	2301      	movs	r3, #1
 8000274:	216c      	movs	r1, #108	@ 0x6c
 8000276:	f003 ffbf 	bl	80041f8 <HAL_I2C_Master_Transmit_DMA>
    readStart_ = true;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2201      	movs	r2, #1
 800027e:	711a      	strb	r2, [r3, #4]
  }
}
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
 8000294:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <LL_CORDIC_Config+0x44>)
 800029c:	4013      	ands	r3, r2
 800029e:	68b9      	ldr	r1, [r7, #8]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4311      	orrs	r1, r2
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	4311      	orrs	r1, r2
 80002a8:	69ba      	ldr	r2, [r7, #24]
 80002aa:	4311      	orrs	r1, r2
 80002ac:	69fa      	ldr	r2, [r7, #28]
 80002ae:	4311      	orrs	r1, r2
 80002b0:	6a3a      	ldr	r2, [r7, #32]
 80002b2:	4311      	orrs	r1, r2
 80002b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002b6:	430a      	orrs	r2, r1
 80002b8:	431a      	orrs	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	ff87f800 	.word	0xff87f800

080002d0 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	605a      	str	r2, [r3, #4]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af04      	add	r7, sp, #16
 800030a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800030e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000310:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6493      	str	r3, [r2, #72]	@ 0x48
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800031a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8000324:	2300      	movs	r3, #0
 8000326:	9303      	str	r3, [sp, #12]
 8000328:	2300      	movs	r3, #0
 800032a:	9302      	str	r3, [sp, #8]
 800032c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2300      	movs	r3, #0
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2300      	movs	r3, #0
 8000338:	2250      	movs	r2, #80	@ 0x50
 800033a:	2100      	movs	r1, #0
 800033c:	4804      	ldr	r0, [pc, #16]	@ (8000350 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 800033e:	f7ff ffa3 	bl	8000288 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40021000 	.word	0x40021000
 8000350:	40020c00 	.word	0x40020c00

08000354 <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4619      	mov	r1, r3
 8000362:	4817      	ldr	r0, [pc, #92]	@ (80003c0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8000364:	f7ff ffb4 	bl	80002d0 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8000368:	4815      	ldr	r0, [pc, #84]	@ (80003c0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 800036a:	f7ff ffbf 	bl	80002ec <LL_CORDIC_ReadData>
 800036e:	4603      	mov	r3, r0
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f88f 	bl	8000494 <_ZN10Acrocantho6Cordic8from_q31Em>
 8000376:	eef0 7a40 	vmov.f32	s15, s0
 800037a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 800037e:	4810      	ldr	r0, [pc, #64]	@ (80003c0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8000380:	f7ff ffb4 	bl	80002ec <LL_CORDIC_ReadData>
 8000384:	4603      	mov	r3, r0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f884 	bl	8000494 <_ZN10Acrocantho6Cordic8from_q31Em>
 800038c:	eef0 7a40 	vmov.f32	s15, s0
 8000390:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	f107 0210 	add.w	r2, r7, #16
 800039c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80003a4:	69ba      	ldr	r2, [r7, #24]
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	ee07 2a10 	vmov	s14, r2
 80003ac:	ee07 3a90 	vmov	s15, r3
  };
 80003b0:	eeb0 0a47 	vmov.f32	s0, s14
 80003b4:	eef0 0a67 	vmov.f32	s1, s15
 80003b8:	3720      	adds	r7, #32
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020c00 	.word	0x40020c00

080003c4 <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	@ 0x28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 80003d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80003d8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800048c <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 80003dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003e0:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 80003e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80003e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003ec:	ee17 3a90 	vmov	r3, s15
 80003f0:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	ee07 3a90 	vmov	s15, r3
 80003f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000404:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 8000408:	edd7 7a06 	vldr	s15, [r7, #24]
 800040c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000414:	d507      	bpl.n	8000426 <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 8000416:	edd7 7a06 	vldr	s15, [r7, #24]
 800041a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800041e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000422:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 8000426:	edd7 7a06 	vldr	s15, [r7, #24]
 800042a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800042e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000436:	dd06      	ble.n	8000446 <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8000438:	edd7 7a06 	vldr	s15, [r7, #24]
 800043c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000444:	e001      	b.n	800044a <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8000446:	edd7 7a06 	vldr	s15, [r7, #24]
 800044a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000490 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 800044e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8000456:	ee17 1a90 	vmov	r1, s15
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f7ff ff7a 	bl	8000354 <_ZNK10Acrocantho6CordicclEl>
 8000460:	eeb0 7a40 	vmov.f32	s14, s0
 8000464:	eef0 7a60 	vmov.f32	s15, s1
 8000468:	ed87 7a04 	vstr	s14, [r7, #16]
 800046c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000470:	693a      	ldr	r2, [r7, #16]
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	ee07 2a10 	vmov	s14, r2
 8000478:	ee07 3a90 	vmov	s15, r3
  }
 800047c:	eeb0 0a47 	vmov.f32	s0, s14
 8000480:	eef0 0a67 	vmov.f32	s1, s15
 8000484:	3728      	adds	r7, #40	@ 0x28
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40c90fdb 	.word	0x40c90fdb
 8000490:	4f800000 	.word	0x4f800000

08000494 <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	ee07 3a90 	vmov	s15, r3
 80004a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80004bc <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 80004aa:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 80004ae:	eeb0 0a67 	vmov.f32	s0, s15
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	30000000 	.word	0x30000000

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	@ 0x28
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ff7e 	bl	80013c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f839 	bl	8000540 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fb7d 	bl	8000bcc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80004d2:	f000 fb49 	bl	8000b68 <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 80004d6:	f000 fa79 	bl	80009cc <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 80004da:	f000 f887 	bl	80005ec <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80004de:	f000 f91b 	bl	8000718 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 80004e2:	f000 f9d5 	bl	8000890 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 80004e6:	f000 fa1f 	bl	8000928 <_ZL12MX_I2C1_Initv>
  MX_CORDIC_Init();
 80004ea:	f000 f9b9 	bl	8000860 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Acrocantho::Cordic cordic;
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff06 	bl	8000304 <_ZN10Acrocantho6CordicC1Ev>
  float a;
  float b;

  Ang ang(hi2c1);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	490e      	ldr	r1, [pc, #56]	@ (8000538 <main+0x78>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe8a 	bl	8000218 <_ZN3AngC1ER19__I2C_HandleTypeDef>

  while (1)
  {
    /* USER CODE END WHILE */
    Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800053c <main+0x7c>
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff59 	bl	80003c4 <_ZNK10Acrocantho6Cordic7radiansEf>
 8000512:	eeb0 7a40 	vmov.f32	s14, s0
 8000516:	eef0 7a60 	vmov.f32	s15, s1
 800051a:	ed87 7a01 	vstr	s14, [r7, #4]
 800051e:	edc7 7a02 	vstr	s15, [r7, #8]
    a = result.c;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
    b = result.s;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	623b      	str	r3, [r7, #32]

    ang.read();
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe8e 	bl	8000250 <_ZN3Ang4readEv>



    /* USER CODE BEGIN 3 */
  }
 8000534:	bf00      	nop
 8000536:	e7e5      	b.n	8000504 <main+0x44>
 8000538:	2000018c 	.word	0x2000018c
 800053c:	40490fdb 	.word	0x40490fdb

08000540 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	@ 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 faef 	bl	8007b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000562:	2000      	movs	r0, #0
 8000564:	f005 fc66 	bl	8005e34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	@ 0x40
 8000574:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057e:	2304      	movs	r3, #4
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000582:	2355      	movs	r3, #85	@ 0x55
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fd00 	bl	8005f9c <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80005ac:	f000 fb8e 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fff9 	bl	80065c0 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf14      	ite	ne
 80005d4:	2301      	movne	r3, #1
 80005d6:	2300      	moveq	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80005de:	f000 fb75 	bl	8000ccc <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	@ 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b092      	sub	sp, #72	@ 0x48
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	223c      	movs	r2, #60	@ 0x3c
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fa94 	bl	8007b32 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b41      	ldr	r3, [pc, #260]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b3f      	ldr	r3, [pc, #252]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b3b      	ldr	r3, [pc, #236]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b3a      	ldr	r3, [pc, #232]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b34      	ldr	r3, [pc, #208]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b2d      	ldr	r3, [pc, #180]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4829      	ldr	r0, [pc, #164]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 800066a:	f000 fff9 	bl	8001660 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 800067e:	f000 fb25 	bl	8000ccc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000682:	2305      	movs	r3, #5
 8000684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000686:	2300      	movs	r3, #0
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800068a:	2300      	movs	r3, #0
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000692:	4619      	mov	r1, r3
 8000694:	481e      	ldr	r0, [pc, #120]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 8000696:	f002 fac5 	bl	8002c24 <HAL_ADCEx_MultiModeConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80006aa:	f000 fb0f 	bl	8000ccc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <_ZL12MX_ADC1_Initv+0x128>)
 80006b0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006b2:	2309      	movs	r3, #9
 80006b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	@ 0x7f
 80006bc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80006be:	2304      	movs	r3, #4
 80006c0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4808      	ldr	r0, [pc, #32]	@ (8000710 <_ZL12MX_ADC1_Initv+0x124>)
 80006f0:	f001 fd6c 	bl	80021cc <HAL_ADCEx_InjectedConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8000704:	f000 fae2 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3748      	adds	r7, #72	@ 0x48
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	04300002 	.word	0x04300002

08000718 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	@ 0x40
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	223c      	movs	r2, #60	@ 0x3c
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f007 fa04 	bl	8007b32 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800072a:	4b48      	ldr	r3, [pc, #288]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800072c:	4a48      	ldr	r2, [pc, #288]	@ (8000850 <_ZL12MX_ADC2_Initv+0x138>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000730:	4b46      	ldr	r3, [pc, #280]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000732:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000736:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000738:	4b44      	ldr	r3, [pc, #272]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073e:	4b43      	ldr	r3, [pc, #268]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000744:	4b41      	ldr	r3, [pc, #260]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800074a:	4b40      	ldr	r3, [pc, #256]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800074c:	2201      	movs	r2, #1
 800074e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000750:	4b3e      	ldr	r3, [pc, #248]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000752:	2208      	movs	r2, #8
 8000754:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075c:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800075e:	2200      	movs	r2, #0
 8000760:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000762:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000764:	2201      	movs	r2, #1
 8000766:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b38      	ldr	r3, [pc, #224]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b36      	ldr	r3, [pc, #216]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b34      	ldr	r3, [pc, #208]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800077a:	2200      	movs	r2, #0
 800077c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800077e:	4b33      	ldr	r3, [pc, #204]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000786:	4831      	ldr	r0, [pc, #196]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000788:	f000 ff6a 	bl	8001660 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 800079c:	f000 fa96 	bl	8000ccc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80007a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <_ZL12MX_ADC2_Initv+0x13c>)
 80007a2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007a4:	2309      	movs	r3, #9
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007ac:	237f      	movs	r3, #127	@ 0x7f
 80007ae:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007b0:	2304      	movs	r3, #4
 80007b2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80007b8:	2303      	movs	r3, #3
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481c      	ldr	r0, [pc, #112]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 80007da:	f001 fcf7 	bl	80021cc <HAL_ADCEx_InjectedConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 80007ee:	f000 fa6d 	bl	8000ccc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <_ZL12MX_ADC2_Initv+0x140>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80007f6:	f240 130f 	movw	r3, #271	@ 0x10f
 80007fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4812      	ldr	r0, [pc, #72]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 8000802:	f001 fce3 	bl	80021cc <HAL_ADCEx_InjectedConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8000816:	f000 fa59 	bl	8000ccc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <_ZL12MX_ADC2_Initv+0x144>)
 800081c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800081e:	f240 2315 	movw	r3, #533	@ 0x215
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <_ZL12MX_ADC2_Initv+0x134>)
 800082a:	f001 fccf 	bl	80021cc <HAL_ADCEx_InjectedConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 800083e:	f000 fa45 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3740      	adds	r7, #64	@ 0x40
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000094 	.word	0x20000094
 8000850:	50000100 	.word	0x50000100
 8000854:	08600004 	.word	0x08600004
 8000858:	0c900008 	.word	0x0c900008
 800085c:	10c00010 	.word	0x10c00010

08000860 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <_ZL14MX_CORDIC_Initv+0x28>)
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <_ZL14MX_CORDIC_Initv+0x2c>)
 8000868:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800086a:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZL14MX_CORDIC_Initv+0x28>)
 800086c:	f002 fae2 	bl	8002e34 <HAL_CORDIC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8000880:	f000 fa24 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000100 	.word	0x20000100
 800088c:	40020c00 	.word	0x40020c00

08000890 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <_ZL14MX_FDCAN1_Initv+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008bc:	2201      	movs	r2, #1
 80008be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008c2:	2205      	movs	r2, #5
 80008c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008c8:	220b      	movs	r2, #11
 80008ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ce:	2238      	movs	r2, #56	@ 0x38
 80008d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008d4:	220b      	movs	r2, #11
 80008d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008da:	2205      	movs	r2, #5
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000902:	4807      	ldr	r0, [pc, #28]	@ (8000920 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000904:	f002 fec0 	bl	8003688 <HAL_FDCAN_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf14      	ite	ne
 800090e:	2301      	movne	r3, #1
 8000910:	2300      	moveq	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <_ZL14MX_FDCAN1_Initv+0x8c>
  {
    Error_Handler();
 8000918:	f000 f9d8 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000128 	.word	0x20000128
 8000924:	40006400 	.word	0x40006400

08000928 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 800092e:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <_ZL12MX_I2C1_Initv+0x9c>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000934:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <_ZL12MX_I2C1_Initv+0xa0>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	4817      	ldr	r0, [pc, #92]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000964:	f003 fbad 	bl	80040c2 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000978:	f000 f9a8 	bl	8000ccc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 8000980:	f005 f9a0 	bl	8005cc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000994:	f000 f99a 	bl	8000ccc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <_ZL12MX_I2C1_Initv+0x98>)
 800099c:	f005 f9dd 	bl	8005d5a <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f98c 	bl	8000ccc <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80009b4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009b8:	f005 fa1c 	bl	8005df4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000018c 	.word	0x2000018c
 80009c4:	40005400 	.word	0x40005400
 80009c8:	4052060f 	.word	0x4052060f

080009cc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b098      	sub	sp, #96	@ 0x60
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2234      	movs	r2, #52	@ 0x34
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f007 f89a 	bl	8007b32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fe:	4b58      	ldr	r3, [pc, #352]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a00:	4a58      	ldr	r2, [pc, #352]	@ (8000b64 <_ZL12MX_TIM1_Initv+0x198>)
 8000a02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a04:	4b56      	ldr	r3, [pc, #344]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a0a:	4b55      	ldr	r3, [pc, #340]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000a10:	4b53      	ldr	r3, [pc, #332]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a12:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b51      	ldr	r3, [pc, #324]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000a1e:	4b50      	ldr	r3, [pc, #320]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a24:	4b4e      	ldr	r3, [pc, #312]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a2a:	484d      	ldr	r0, [pc, #308]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a2c:	f006 f9fa 	bl	8006e24 <HAL_TIM_PWM_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000a40:	f000 f944 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a44:	2320      	movs	r3, #32
 8000a46:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000a48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a56:	4619      	mov	r1, r3
 8000a58:	4841      	ldr	r0, [pc, #260]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a5a:	f006 ff2d 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f92d 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	@ 0x60
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4832      	ldr	r0, [pc, #200]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000a98:	f006 fa1c 	bl	8006ed4 <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8000aac:	f000 f90e 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4829      	ldr	r0, [pc, #164]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000aba:	f006 fa0b 	bl	8006ed4 <HAL_TIM_PWM_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8000ace:	f000 f8fd 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4821      	ldr	r0, [pc, #132]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000adc:	f006 f9fa 	bl	8006ed4 <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf14      	ite	ne
 8000ae6:	2301      	movne	r3, #1
 8000ae8:	2300      	moveq	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000af0:	f000 f8ec 	bl	8000ccc <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000af4:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000af6:	f007 f809 	bl	8007b0c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000b06:	2314      	movs	r3, #20
 8000b08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000b38:	f006 ff54 	bl	80079e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8000b4c:	f000 f8be 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <_ZL12MX_TIM1_Initv+0x194>)
 8000b52:	f000 fb25 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3760      	adds	r7, #96	@ 0x60
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002a0 	.word	0x200002a0
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <_ZL11MX_DMA_Initv+0x60>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200b      	movs	r0, #11
 8000ba4:	f002 fa53 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f002 fa6a 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200c      	movs	r0, #12
 8000bb4:	f002 fa4b 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bb8:	200c      	movs	r0, #12
 8000bba:	f002 fa62 	bl	8003082 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b38      	ldr	r3, [pc, #224]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a31      	ldr	r2, [pc, #196]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2120      	movs	r1, #32
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4a:	f003 f9ff 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4818      	ldr	r0, [pc, #96]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000c66:	f003 f86f 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f003 f85e 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca6:	f003 f84f 	bl	8003d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2028      	movs	r0, #40	@ 0x28
 8000cb0:	f002 f9cd 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb4:	2028      	movs	r0, #40	@ 0x28
 8000cb6:	f002 f9e4 	bl	8003082 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d0e:	f005 f935 	bl	8005f7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0a0      	sub	sp, #128	@ 0x80
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	2254      	movs	r2, #84	@ 0x54
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f006 fef6 	bl	8007b32 <memset>
  if(hadc->Instance==ADC1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d4e:	d146      	bne.n	8000dde <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 fe11 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d6c:	f7ff ffae 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d70:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a41      	ldr	r2, [pc, #260]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000d78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d7a:	4b40      	ldr	r3, [pc, #256]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a3e      	ldr	r2, [pc, #248]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000d88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a38      	ldr	r2, [pc, #224]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc8:	f002 ffbe 	bl	8003d48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f002 f93c 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dd6:	2012      	movs	r0, #18
 8000dd8:	f002 f953 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ddc:	e04a      	b.n	8000e74 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <HAL_ADC_MspInit+0x164>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d145      	bne.n	8000e74 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fdc5 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8000e04:	f7ff ff62 	bl	8000ccc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000e10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_ADC_MspInit+0x15c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10b      	bne.n	8000e32 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_ADC_MspInit+0x160>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c2      	movs	r3, #194	@ 0xc2
 8000e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f002 ff72 	bl	8003d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2012      	movs	r0, #18
 8000e6a:	f002 f8f0 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e6e:	2012      	movs	r0, #18
 8000e70:	f002 f907 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3780      	adds	r7, #128	@ 0x80
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002ec 	.word	0x200002ec
 8000e80:	40021000 	.word	0x40021000
 8000e84:	50000100 	.word	0x50000100

08000e88 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_CORDIC_MspInit+0x38>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10b      	bne.n	8000eb2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_CORDIC_MspInit+0x3c>)
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_CORDIC_MspInit+0x3c>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <HAL_CORDIC_MspInit+0x3c>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09e      	sub	sp, #120	@ 0x78
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2254      	movs	r2, #84	@ 0x54
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f006 fe22 	bl	8007b32 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a28      	ldr	r2, [pc, #160]	@ (8000f94 <HAL_FDCAN_MspInit+0xcc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d149      	bne.n	8000f8c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000efe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f02:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 fd3d 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f14:	f7ff feda 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_FDCAN_MspInit+0xd0>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f48:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f002 feee 	bl	8003d48 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2015      	movs	r0, #21
 8000f72:	f002 f86c 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f76:	2015      	movs	r0, #21
 8000f78:	f002 f883 	bl	8003082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2016      	movs	r0, #22
 8000f82:	f002 f864 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000f86:	2016      	movs	r0, #22
 8000f88:	f002 f87b 	bl	8003082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3778      	adds	r7, #120	@ 0x78
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40006400 	.word	0x40006400
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0a0      	sub	sp, #128	@ 0x80
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	2254      	movs	r2, #84	@ 0x54
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f006 fdb8 	bl	8007b32 <memset>
  if(hi2c->Instance==I2C1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8001144 <HAL_I2C_MspInit+0x1a8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 80b6 	bne.w	800113a <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fce:	2340      	movs	r3, #64	@ 0x40
 8000fd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fcd4 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fe71 	bl	8000ccc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b51      	ldr	r3, [pc, #324]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	4a50      	ldr	r2, [pc, #320]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100e:	4b4e      	ldr	r3, [pc, #312]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800101a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800101e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102c:	2304      	movs	r3, #4
 800102e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103a:	f002 fe85 	bl	8003d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800103e:	2380      	movs	r3, #128	@ 0x80
 8001040:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104e:	2304      	movs	r3, #4
 8001050:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001056:	4619      	mov	r1, r3
 8001058:	483c      	ldr	r0, [pc, #240]	@ (800114c <HAL_I2C_MspInit+0x1b0>)
 800105a:	f002 fe75 	bl	8003d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001068:	6593      	str	r3, [r2, #88]	@ 0x58
 800106a:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <HAL_I2C_MspInit+0x1ac>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001076:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 8001078:	4a36      	ldr	r2, [pc, #216]	@ (8001154 <HAL_I2C_MspInit+0x1b8>)
 800107a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 800107e:	2210      	movs	r2, #16
 8001080:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001082:	4b33      	ldr	r3, [pc, #204]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001088:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800108e:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 80010ae:	f002 f803 	bl	80030b8 <HAL_DMA_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80010b8:	f7ff fe08 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a24      	ldr	r2, [pc, #144]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c2:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <HAL_I2C_MspInit+0x1b4>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010ca:	4a24      	ldr	r2, [pc, #144]	@ (800115c <HAL_I2C_MspInit+0x1c0>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010d0:	2211      	movs	r2, #17
 80010d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010d6:	2210      	movs	r2, #16
 80010d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010da:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010fe:	4816      	ldr	r0, [pc, #88]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 8001100:	f001 ffda 	bl	80030b8 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800110a:	f7ff fddf 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
 8001114:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_I2C_MspInit+0x1bc>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	201f      	movs	r0, #31
 8001120:	f001 ff95 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001124:	201f      	movs	r0, #31
 8001126:	f001 ffac 	bl	8003082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2020      	movs	r0, #32
 8001130:	f001 ff8d 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001134:	2020      	movs	r0, #32
 8001136:	f001 ffa4 	bl	8003082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800113a:	bf00      	nop
 800113c:	3780      	adds	r7, #128	@ 0x80
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40005400 	.word	0x40005400
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400
 8001150:	200001e0 	.word	0x200001e0
 8001154:	40020008 	.word	0x40020008
 8001158:	20000240 	.word	0x20000240
 800115c:	4002001c 	.word	0x4002001c

08001160 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_TIM_PWM_MspInit+0x38>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10b      	bne.n	800118a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_TIM_PWM_MspInit+0x3c>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <HAL_TIM_PWM_MspInit+0x3c>)
 8001178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800117c:	6613      	str	r3, [r2, #96]	@ 0x60
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <HAL_TIM_PWM_MspInit+0x3c>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1f      	ldr	r2, [pc, #124]	@ (800123c <HAL_TIM_MspPostInit+0x9c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d138      	bne.n	8001234 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <HAL_TIM_MspPostInit+0xa0>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <HAL_TIM_MspPostInit+0xa4>)
 800120e:	f002 fd9b 	bl	8003d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001212:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001224:	2306      	movs	r3, #6
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <HAL_TIM_MspPostInit+0xa8>)
 8001230:	f002 fd8a 	bl	8003d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	@ 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800
 8001248:	48000400 	.word	0x48000400

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f8e3 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Channel1_IRQHandler+0x10>)
 80012b2:	f002 f88b 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001e0 	.word	0x200001e0

080012c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Channel2_IRQHandler+0x10>)
 80012c6:	f002 f881 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000240 	.word	0x20000240

080012d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <ADC1_2_IRQHandler+0x14>)
 80012da:	f000 fb7d 	bl	80019d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <ADC1_2_IRQHandler+0x18>)
 80012e0:	f000 fb7a 	bl	80019d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000028 	.word	0x20000028
 80012ec:	20000094 	.word	0x20000094

080012f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <FDCAN1_IT0_IRQHandler+0x10>)
 80012f6:	f002 fb21 	bl	800393c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000128 	.word	0x20000128

08001304 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <FDCAN1_IT1_IRQHandler+0x10>)
 800130a:	f002 fb17 	bl	800393c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000128 	.word	0x20000128

08001318 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <I2C1_EV_IRQHandler+0x10>)
 800131e:	f003 f87f 	bl	8004420 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000018c 	.word	0x2000018c

0800132c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <I2C1_ER_IRQHandler+0x10>)
 8001332:	f003 f88f 	bl	8004454 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000018c 	.word	0x2000018c

08001340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001344:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001348:	f002 fe98 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001376:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f006 fbcf 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff f88b 	bl	80004c0 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c0:	200002f4 	.word	0x200002f4

080013c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC3_IRQHandler>

080013c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f001 fe31 	bl	8003038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f80e 	bl	80013f8 <HAL_InitTick>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e001      	b.n	80013ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e8:	f7ff fc76 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ec:	79fb      	ldrb	r3, [r7, #7]

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <HAL_InitTick+0x68>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d022      	beq.n	8001452 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_InitTick+0x6c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <HAL_InitTick+0x68>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001418:	fbb1 f3f3 	udiv	r3, r1, r3
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fe3c 	bl	800309e <HAL_SYSTICK_Config>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	d809      	bhi.n	8001446 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001432:	2200      	movs	r2, #0
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	f001 fe08 	bl	800304e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0x70>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e007      	b.n	8001456 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e004      	b.n	8001456 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000008 	.word	0x20000008
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x1c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x20>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <HAL_IncTick+0x1c>)
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	200002f0 	.word	0x200002f0
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200002f0 	.word	0x200002f0

080014a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 031f 	and.w	r3, r3, #31
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001562:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6093      	str	r3, [r2, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800158a:	d101      	bne.n	8001590 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015b2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015da:	d101      	bne.n	80015e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <LL_ADC_IsEnabled+0x18>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_IsEnabled+0x1a>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d101      	bne.n	800162c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b08      	cmp	r3, #8
 800164c:	d101      	bne.n	8001652 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1a9      	b.n	80019ce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fb49 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff68 	bl	8001576 <LL_ADC_IsDeepPowerDownEnabled>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff4e 	bl	8001552 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff83 	bl	80015c6 <LL_ADC_IsInternalRegulatorEnabled>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d115      	bne.n	80016f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff67 	bl	800159e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001944 <HAL_ADC_Init+0x2e4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	4a9c      	ldr	r2, [pc, #624]	@ (8001948 <HAL_ADC_Init+0x2e8>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e4:	e002      	b.n	80016ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f9      	bne.n	80016e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff65 	bl	80015c6 <LL_ADC_IsInternalRegulatorEnabled>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001706:	f043 0210 	orr.w	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff76 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 8001728:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 8142 	bne.w	80019bc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 813e 	bne.w	80019bc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001744:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001748:	f043 0202 	orr.w	r2, r3, #2
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff4a 	bl	80015ee <LL_ADC_IsEnabled>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d141      	bne.n	80017e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001768:	d004      	beq.n	8001774 <HAL_ADC_Init+0x114>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a77      	ldr	r2, [pc, #476]	@ (800194c <HAL_ADC_Init+0x2ec>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d10f      	bne.n	8001794 <HAL_ADC_Init+0x134>
 8001774:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001778:	f7ff ff39 	bl	80015ee <LL_ADC_IsEnabled>
 800177c:	4604      	mov	r4, r0
 800177e:	4873      	ldr	r0, [pc, #460]	@ (800194c <HAL_ADC_Init+0x2ec>)
 8001780:	f7ff ff35 	bl	80015ee <LL_ADC_IsEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	4323      	orrs	r3, r4
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	e012      	b.n	80017ba <HAL_ADC_Init+0x15a>
 8001794:	486e      	ldr	r0, [pc, #440]	@ (8001950 <HAL_ADC_Init+0x2f0>)
 8001796:	f7ff ff2a 	bl	80015ee <LL_ADC_IsEnabled>
 800179a:	4604      	mov	r4, r0
 800179c:	486d      	ldr	r0, [pc, #436]	@ (8001954 <HAL_ADC_Init+0x2f4>)
 800179e:	f7ff ff26 	bl	80015ee <LL_ADC_IsEnabled>
 80017a2:	4603      	mov	r3, r0
 80017a4:	431c      	orrs	r4, r3
 80017a6:	486c      	ldr	r0, [pc, #432]	@ (8001958 <HAL_ADC_Init+0x2f8>)
 80017a8:	f7ff ff21 	bl	80015ee <LL_ADC_IsEnabled>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4323      	orrs	r3, r4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Init+0x172>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a5f      	ldr	r2, [pc, #380]	@ (800194c <HAL_ADC_Init+0x2ec>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Init+0x176>
 80017d2:	4a62      	ldr	r2, [pc, #392]	@ (800195c <HAL_ADC_Init+0x2fc>)
 80017d4:	e000      	b.n	80017d8 <HAL_ADC_Init+0x178>
 80017d6:	4a62      	ldr	r2, [pc, #392]	@ (8001960 <HAL_ADC_Init+0x300>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f7ff fe62 	bl	80014a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f5b      	ldrb	r3, [r3, #29]
 80017e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001802:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800180e:	2b01      	cmp	r3, #1
 8001810:	d106      	bne.n	8001820 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	3b01      	subs	r3, #1
 8001818:	045b      	lsls	r3, r3, #17
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b48      	ldr	r3, [pc, #288]	@ (8001964 <HAL_ADC_Init+0x304>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	430b      	orrs	r3, r1
 800184e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fee5 	bl	800163a <LL_ADC_INJ_IsConversionOngoing>
 8001870:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d17f      	bne.n	8001978 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d17c      	bne.n	8001978 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001882:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800188a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80018be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6911      	ldr	r1, [r2, #16]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018de:	e013      	b.n	8001908 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001904:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12a      	bne.n	8001968 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001934:	430a      	orrs	r2, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	e019      	b.n	8001978 <HAL_ADC_Init+0x318>
 8001944:	20000000 	.word	0x20000000
 8001948:	053e2d63 	.word	0x053e2d63
 800194c:	50000100 	.word	0x50000100
 8001950:	50000400 	.word	0x50000400
 8001954:	50000500 	.word	0x50000500
 8001958:	50000600 	.word	0x50000600
 800195c:	50000300 	.word	0x50000300
 8001960:	50000700 	.word	0x50000700
 8001964:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10c      	bne.n	800199a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f023 010f 	bic.w	r1, r3, #15
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
 8001998:	e007      	b.n	80019aa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 020f 	bic.w	r2, r2, #15
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019ba:	e007      	b.n	80019cc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop

080019d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x30>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a8e      	ldr	r2, [pc, #568]	@ (8001c3c <HAL_ADC_IRQHandler+0x264>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_IRQHandler+0x34>
 8001a08:	4b8d      	ldr	r3, [pc, #564]	@ (8001c40 <HAL_ADC_IRQHandler+0x268>)
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_IRQHandler+0x36>
 8001a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001c44 <HAL_ADC_IRQHandler+0x26c>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fd83 	bl	800151a <LL_ADC_GetMultimode>
 8001a14:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d017      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x78>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fbb7 	bl	80021b6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_ADC_IRQHandler+0x8c>
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10b      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8094 	beq.w	8001b98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 808e 	beq.w	8001b98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd18 	bl	80014ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d072      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a64      	ldr	r2, [pc, #400]	@ (8001c3c <HAL_ADC_IRQHandler+0x264>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0xea>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_ADC_IRQHandler+0x270>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d002      	beq.n	8001abe <HAL_ADC_IRQHandler+0xe6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	e003      	b.n	8001ac6 <HAL_ADC_IRQHandler+0xee>
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <HAL_ADC_IRQHandler+0x274>)
 8001ac0:	e001      	b.n	8001ac6 <HAL_ADC_IRQHandler+0xee>
 8001ac2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d008      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d002      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d104      	bne.n	8001aea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	e014      	b.n	8001b14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a53      	ldr	r2, [pc, #332]	@ (8001c3c <HAL_ADC_IRQHandler+0x264>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_ADC_IRQHandler+0x130>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a53      	ldr	r2, [pc, #332]	@ (8001c48 <HAL_ADC_IRQHandler+0x270>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d002      	beq.n	8001b04 <HAL_ADC_IRQHandler+0x12c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e003      	b.n	8001b0c <HAL_ADC_IRQHandler+0x134>
 8001b04:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_ADC_IRQHandler+0x274>)
 8001b06:	e001      	b.n	8001b0c <HAL_ADC_IRQHandler+0x134>
 8001b08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d135      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d12e      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fd6f 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11a      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 020c 	bic.w	r2, r2, #12
 8001b4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d112      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b70:	e00b      	b.n	8001b8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	f043 0210 	orr.w	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f984 	bl	8001e98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	220c      	movs	r2, #12
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_ADC_IRQHandler+0x1d4>
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80b3 	beq.w	8001d1e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80ad 	beq.w	8001d1e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fc87 	bl	80014f4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001be6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fc6e 	bl	80014ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bf2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_ADC_IRQHandler+0x264>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <HAL_ADC_IRQHandler+0x23a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_ADC_IRQHandler+0x270>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d002      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x236>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_IRQHandler+0x23e>
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_ADC_IRQHandler+0x274>)
 8001c10:	e001      	b.n	8001c16 <HAL_ADC_IRQHandler+0x23e>
 8001c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d002      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d10f      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	e01f      	b.n	8001c7a <HAL_ADC_IRQHandler+0x2a2>
 8001c3a:	bf00      	nop
 8001c3c:	50000100 	.word	0x50000100
 8001c40:	50000300 	.word	0x50000300
 8001c44:	50000700 	.word	0x50000700
 8001c48:	50000500 	.word	0x50000500
 8001c4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a8b      	ldr	r2, [pc, #556]	@ (8001e84 <HAL_ADC_IRQHandler+0x4ac>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x296>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	@ (8001e88 <HAL_ADC_IRQHandler+0x4b0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x292>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e003      	b.n	8001c72 <HAL_ADC_IRQHandler+0x29a>
 8001c6a:	4b88      	ldr	r3, [pc, #544]	@ (8001e8c <HAL_ADC_IRQHandler+0x4b4>)
 8001c6c:	e001      	b.n	8001c72 <HAL_ADC_IRQHandler+0x29a>
 8001c6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d047      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x2c2>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03f      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d13a      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca4:	2b40      	cmp	r3, #64	@ 0x40
 8001ca6:	d133      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d12e      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fcbf 	bl	800163a <LL_ADC_INJ_IsConversionOngoing>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d112      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf6:	e00b      	b.n	8001d10 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	f043 0210 	orr.w	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa28 	bl	8002166 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2260      	movs	r2, #96	@ 0x60
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d011      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x374>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8b4 	bl	8001eac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x3a4>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fa0e 	bl	800218e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <HAL_ADC_IRQHandler+0x3d4>
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00d      	beq.n	8001dac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa00 	bl	80021a2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d043      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x466>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03e      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e021      	b.n	8001e12 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x410>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a28      	ldr	r2, [pc, #160]	@ (8001e84 <HAL_ADC_IRQHandler+0x4ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_IRQHandler+0x414>
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_ADC_IRQHandler+0x4b8>)
 8001dea:	e000      	b.n	8001dee <HAL_ADC_IRQHandler+0x416>
 8001dec:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <HAL_ADC_IRQHandler+0x4bc>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fba1 	bl	8001536 <LL_ADC_GetMultiDMATransfer>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	e008      	b.n	8001e12 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10e      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f043 0202 	orr.w	r2, r3, #2
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f845 	bl	8001ec0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d018      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x4a2>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d013      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f043 0208 	orr.w	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f980 	bl	800217a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	@ 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	50000100 	.word	0x50000100
 8001e88:	50000500 	.word	0x50000500
 8001e8c:	50000400 	.word	0x50000400
 8001e90:	50000300 	.word	0x50000300
 8001e94:	50000700 	.word	0x50000700

08001e98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_SetCommonPathInternalCh>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_GetCommonPathInternalCh>:
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <LL_ADC_SetOffset>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3360      	adds	r3, #96	@ 0x60
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <LL_ADC_SetOffset+0x44>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	03fff000 	.word	0x03fff000

08001f60 <LL_ADC_GetOffsetChannel>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3360      	adds	r3, #96	@ 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetOffsetState>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	@ 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetOffsetSign>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3360      	adds	r3, #96	@ 0x60
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetOffsetSaturation>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3360      	adds	r3, #96	@ 0x60
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	615a      	str	r2, [r3, #20]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_SetChannelSamplingTime>:
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3314      	adds	r3, #20
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0e5b      	lsrs	r3, r3, #25
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	0d1b      	lsrs	r3, r3, #20
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2107      	movs	r1, #7
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	401a      	ands	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	0d1b      	lsrs	r3, r3, #20
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	431a      	orrs	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <LL_ADC_SetChannelSingleDiff>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0318 	and.w	r3, r3, #24
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020d0:	40d9      	lsrs	r1, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	400b      	ands	r3, r1
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	0007ffff 	.word	0x0007ffff

080020f4 <LL_ADC_IsEnabled>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <LL_ADC_IsEnabled+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_ADC_IsEnabled+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_ADC_REG_IsConversionOngoing>:
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d101      	bne.n	8002132 <LL_ADC_REG_IsConversionOngoing+0x18>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d101      	bne.n	8002158 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0b6      	sub	sp, #216	@ 0xd8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80021f0:	2302      	movs	r3, #2
 80021f2:	f000 bcfd 	b.w	8002bf0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800220a:	2b01      	cmp	r3, #1
 800220c:	d130      	bne.n	8002270 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d179      	bne.n	800230a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002232:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800223e:	e007      	b.n	8002250 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800224c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002256:	4b84      	ldr	r3, [pc, #528]	@ (8002468 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002262:	430b      	orrs	r3, r1
 8002264:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800226c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800226e:	e04c      	b.n	800230a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11d      	bne.n	80022b4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800229c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022a8:	e004      	b.n	80022b4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002468 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	430b      	orrs	r3, r1
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff16 	bl	8002140 <LL_ADC_INJ_IsConversionOngoing>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d124      	bne.n	8002364 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002320:	2b00      	cmp	r3, #0
 8002322:	d112      	bne.n	800234a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002334:	055a      	lsls	r2, r3, #21
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800233c:	051b      	lsls	r3, r3, #20
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	e00c      	b.n	8002364 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800235a:	055a      	lsls	r2, r3, #21
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fed6 	bl	800211a <LL_ADC_REG_IsConversionOngoing>
 800236e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fee2 	bl	8002140 <LL_ADC_INJ_IsConversionOngoing>
 800237c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 822e 	bne.w	80027e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800238a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8229 	bne.w	80027e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d116      	bne.n	80023d2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80023bc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80023be:	e01f      	b.n	8002400 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80023ce:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80023d0:	e016      	b.n	8002400 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d109      	bne.n	80023f0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80023ee:	e007      	b.n	8002400 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80023fe:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002406:	2b01      	cmp	r3, #1
 8002408:	d110      	bne.n	800242c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241c:	430b      	orrs	r3, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0202 	orr.w	r2, r2, #2
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e007      	b.n	800243c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0202 	bic.w	r2, r2, #2
 800243a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002444:	d112      	bne.n	800246c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	f7ff fdff 	bl	8002054 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fde5 	bl	800202e <LL_ADC_SetSamplingTimeCommonConfig>
 8002464:	e011      	b.n	800248a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8002466:	bf00      	nop
 8002468:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002478:	461a      	mov	r2, r3
 800247a:	f7ff fdeb 	bl	8002054 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fdd2 	bl	800202e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d022      	beq.n	80024f2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6919      	ldr	r1, [r3, #16]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024bc:	f7ff fd2c 	bl	8001f18 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6919      	ldr	r1, [r3, #16]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	461a      	mov	r2, r3
 80024ce:	f7ff fd78 	bl	8001fc2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80024e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e6:	e000      	b.n	80024ea <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80024e8:	2300      	movs	r3, #0
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7ff fd84 	bl	8001ff8 <LL_ADC_SetOffsetSaturation>
 80024f0:	e179      	b.n	80027e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fd31 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fd26 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	e01e      	b.n	800255c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd1b 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800253c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002540:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e004      	b.n	800255a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8002550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	e018      	b.n	80025a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800258c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e004      	b.n	80025a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800259c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fcea 	bl	8001f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fcce 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fcc3 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	e01e      	b.n	8002622 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fcb8 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800260a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e004      	b.n	8002620 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8002616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	e018      	b.n	800266c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800264e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002652:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e004      	b.n	800266c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8002662:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fc87 	bl	8001f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fc6b 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2102      	movs	r1, #2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fc60 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	e01e      	b.n	80026e8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2102      	movs	r1, #2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fc55 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e004      	b.n	80026e6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80026dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	e014      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800270e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e004      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8002720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272a:	429a      	cmp	r2, r3
 800272c:	d106      	bne.n	800273c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	2102      	movs	r1, #2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fc28 	bl	8001f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2103      	movs	r1, #3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fc0c 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2103      	movs	r1, #3
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fc01 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	e017      	b.n	8002798 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2103      	movs	r1, #3
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fbf6 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002782:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e003      	b.n	8002796 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800278e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	e011      	b.n	80027d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80027be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80027cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	2103      	movs	r1, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fbd3 	bl	8001f8c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc82 	bl	80020f4 <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 813d 	bne.w	8002a72 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	461a      	mov	r2, r3
 8002806:	f7ff fc51 	bl	80020ac <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4aa2      	ldr	r2, [pc, #648]	@ (8002a98 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	f040 812e 	bne.w	8002a72 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2b09      	cmp	r3, #9
 8002834:	bf94      	ite	ls
 8002836:	2301      	movls	r3, #1
 8002838:	2300      	movhi	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	e019      	b.n	8002872 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800284c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800285a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b09      	cmp	r3, #9
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002872:	2b00      	cmp	r3, #0
 8002874:	d079      	beq.n	800296a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	3301      	adds	r3, #1
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002890:	e015      	b.n	80028be <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80028ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	069b      	lsls	r3, r3, #26
 80028ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_ADCEx_InjectedConfigChannel+0x712>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	e017      	b.n	800290e <HAL_ADCEx_InjectedConfigChannel+0x742>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80028fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	ea42 0103 	orr.w	r1, r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	3301      	adds	r3, #1
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	051b      	lsls	r3, r3, #20
 8002932:	e018      	b.n	8002966 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8002950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002966:	430b      	orrs	r3, r1
 8002968:	e07e      	b.n	8002a68 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	3301      	adds	r3, #1
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002984:	e015      	b.n	80029b2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e003      	b.n	80029aa <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	069b      	lsls	r3, r3, #26
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	e017      	b.n	8002a02 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	61bb      	str	r3, [r7, #24]
  return result;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	ea42 0103 	orr.w	r1, r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	3b1e      	subs	r3, #30
 8002a26:	051b      	lsls	r3, r3, #20
 8002a28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	e01b      	b.n	8002a66 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  return result;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b1e      	subs	r3, #30
 8002a60:	051b      	lsls	r3, r3, #20
 8002a62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a66:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f7ff faf1 	bl	8002054 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80b2 	beq.w	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a88:	d004      	beq.n	8002a94 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8002a96:	e008      	b.n	8002aaa <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8002a98:	407f0000 	.word	0x407f0000
 8002a9c:	80080000 	.word	0x80080000
 8002aa0:	50000100 	.word	0x50000100
 8002aa4:	50000300 	.word	0x50000300
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fa25 	bl	8001efa <LL_ADC_GetCommonPathInternalCh>
 8002ab0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	@ (8002bfc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8002c00 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d139      	bne.n	8002b3c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d133      	bne.n	8002b3c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a48      	ldr	r2, [pc, #288]	@ (8002c04 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d17a      	bne.n	8002bde <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af0:	d004      	beq.n	8002afc <HAL_ADCEx_InjectedConfigChannel+0x930>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a44      	ldr	r2, [pc, #272]	@ (8002c08 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8002afc:	4a43      	ldr	r2, [pc, #268]	@ (8002c0c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002afe:	e000      	b.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8002b00:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7ff f9e1 	bl	8001ed4 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8002b12:	4b3f      	ldr	r3, [pc, #252]	@ (8002c10 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	4a3e      	ldr	r2, [pc, #248]	@ (8002c14 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	099a      	lsrs	r2, r3, #6
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002b2a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3a:	e050      	b.n	8002bde <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a35      	ldr	r2, [pc, #212]	@ (8002c18 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d125      	bne.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2c      	ldr	r2, [pc, #176]	@ (8002c08 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d104      	bne.n	8002b66 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	@ (8002c1c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d03d      	beq.n	8002be2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b6e:	d004      	beq.n	8002b7a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8002b7a:	4a24      	ldr	r2, [pc, #144]	@ (8002c0c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002b7c:	e000      	b.n	8002b80 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7ff f9a2 	bl	8001ed4 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b90:	e027      	b.n	8002be2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d123      	bne.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11d      	bne.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	@ (8002c08 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bba:	d004      	beq.n	8002bc6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8002bc6:	4a11      	ldr	r2, [pc, #68]	@ (8002c0c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002bc8:	e000      	b.n	8002bcc <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8002bca:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f7ff f97c 	bl	8001ed4 <LL_ADC_SetCommonPathInternalCh>
 8002bdc:	e002      	b.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	37d8      	adds	r7, #216	@ 0xd8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	50000700 	.word	0x50000700
 8002bfc:	c3210000 	.word	0xc3210000
 8002c00:	90c00010 	.word	0x90c00010
 8002c04:	50000600 	.word	0x50000600
 8002c08:	50000100 	.word	0x50000100
 8002c0c:	50000300 	.word	0x50000300
 8002c10:	20000000 	.word	0x20000000
 8002c14:	053e2d63 	.word	0x053e2d63
 8002c18:	c7520000 	.word	0xc7520000
 8002c1c:	50000500 	.word	0x50000500
 8002c20:	cb840000 	.word	0xcb840000

08002c24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b0a1      	sub	sp, #132	@ 0x84
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0e7      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5a:	d102      	bne.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	e009      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	@ (8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	e001      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0be      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fa3f 	bl	800211a <LL_ADC_REG_IsConversionOngoing>
 8002c9c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa39 	bl	800211a <LL_ADC_REG_IsConversionOngoing>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 80a0 	bne.w	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 809c 	bne.w	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a55      	ldr	r2, [pc, #340]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ccc:	4b56      	ldr	r3, [pc, #344]	@ (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002cce:	e000      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002cd0:	4b56      	ldr	r3, [pc, #344]	@ (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002cd2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d04b      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d00:	d004      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a45      	ldr	r2, [pc, #276]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10f      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002d0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d10:	f7ff f9f0 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d14:	4604      	mov	r4, r0
 8002d16:	4841      	ldr	r0, [pc, #260]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d18:	f7ff f9ec 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4323      	orrs	r3, r4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e012      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002d2c:	483c      	ldr	r0, [pc, #240]	@ (8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d2e:	f7ff f9e1 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d32:	4604      	mov	r4, r0
 8002d34:	483b      	ldr	r0, [pc, #236]	@ (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d36:	f7ff f9dd 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	431c      	orrs	r4, r3
 8002d3e:	483c      	ldr	r0, [pc, #240]	@ (8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d40:	f7ff f9d8 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4323      	orrs	r3, r4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d056      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d5e:	f023 030f 	bic.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d70:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d72:	e047      	b.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10f      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d98:	f7ff f9ac 	bl	80020f4 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	481f      	ldr	r0, [pc, #124]	@ (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002da0:	f7ff f9a8 	bl	80020f4 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e012      	b.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002db4:	481a      	ldr	r0, [pc, #104]	@ (8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002db6:	f7ff f99d 	bl	80020f4 <LL_ADC_IsEnabled>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4819      	ldr	r0, [pc, #100]	@ (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002dbe:	f7ff f999 	bl	80020f4 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	431c      	orrs	r4, r3
 8002dc6:	481a      	ldr	r0, [pc, #104]	@ (8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002dc8:	f7ff f994 	bl	80020f4 <LL_ADC_IsEnabled>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4323      	orrs	r3, r4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002de6:	f023 030f 	bic.w	r3, r3, #15
 8002dea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002dec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dee:	e009      	b.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e02:	e000      	b.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3784      	adds	r7, #132	@ 0x84
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	50000400 	.word	0x50000400
 8002e24:	50000500 	.word	0x50000500
 8002e28:	50000300 	.word	0x50000300
 8002e2c:	50000700 	.word	0x50000700
 8002e30:	50000600 	.word	0x50000600

08002e34 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e023      	b.n	8002e8e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f814 	bl	8000e88 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	@ (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	@ (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	@ (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	@ 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
         );
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	@ 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003004:	d301      	bcc.n	800300a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003006:	2301      	movs	r3, #1
 8003008:	e00f      	b.n	800302a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <SysTick_Config+0x40>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003012:	210f      	movs	r1, #15
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f7ff ff8e 	bl	8002f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <SysTick_Config+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003022:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <SysTick_Config+0x40>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	e000e010 	.word	0xe000e010

08003038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff29 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff40 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff90 	bl	8002f8c <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5f 	bl	8002f38 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff33 	bl	8002efc <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa4 	bl	8002ff4 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e08d      	b.n	80031e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_DMA_Init+0x138>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d80f      	bhi.n	80030f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <HAL_DMA_Init+0x13c>)
 80030de:	4413      	add	r3, r2
 80030e0:	4a45      	ldr	r2, [pc, #276]	@ (80031f8 <HAL_DMA_Init+0x140>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a42      	ldr	r2, [pc, #264]	@ (80031fc <HAL_DMA_Init+0x144>)
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <HAL_DMA_Init+0x148>)
 80030fe:	4413      	add	r3, r2
 8003100:	4a3d      	ldr	r2, [pc, #244]	@ (80031f8 <HAL_DMA_Init+0x140>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a3c      	ldr	r2, [pc, #240]	@ (8003204 <HAL_DMA_Init+0x14c>)
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa2c 	bl	80035c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003174:	d102      	bne.n	800317c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003190:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_DMA_Init+0x104>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d80c      	bhi.n	80031bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa4c 	bl	8003640 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	e008      	b.n	80031ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40020407 	.word	0x40020407
 80031f4:	bffdfff8 	.word	0xbffdfff8
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	40020000 	.word	0x40020000
 8003200:	bffdfbf8 	.word	0xbffdfbf8
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Start_IT+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e066      	b.n	80032f6 <HAL_DMA_Start_IT+0xee>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d155      	bne.n	80032e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f970 	bl	8003546 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 020e 	orr.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00f      	b.n	80032a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 020a 	orr.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e005      	b.n	80032f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d00d      	beq.n	8003332 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e047      	b.n	80033c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 020e 	bic.w	r2, r2, #14
 8003340:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800337e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
    }
  }
  return status;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d026      	beq.n	8003446 <HAL_DMA_IRQHandler+0x7a>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d021      	beq.n	8003446 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d107      	bne.n	8003420 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	2104      	movs	r1, #4
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d071      	beq.n	8003520 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003444:	e06c      	b.n	8003520 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2202      	movs	r2, #2
 8003450:	409a      	lsls	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02e      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d029      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 020a 	bic.w	r2, r2, #10
 8003480:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2102      	movs	r1, #2
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d038      	beq.n	8003520 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80034b6:	e033      	b.n	8003520 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2208      	movs	r2, #8
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02a      	beq.n	8003522 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d025      	beq.n	8003522 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 020e 	bic.w	r2, r2, #14
 80034e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003520:	bf00      	nop
 8003522:	bf00      	nop
}
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003538:	b2db      	uxtb	r3, r3
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800355c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b10      	cmp	r3, #16
 8003592:	d108      	bne.n	80035a6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035a4:	e007      	b.n	80035b6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	60da      	str	r2, [r3, #12]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d802      	bhi.n	80035de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80035d8:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e001      	b.n	80035e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80035e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3b08      	subs	r3, #8
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	009a      	lsls	r2, r3, #2
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0b      	ldr	r2, [pc, #44]	@ (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800360e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2201      	movs	r2, #1
 8003618:	409a      	lsls	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40020407 	.word	0x40020407
 8003630:	40020800 	.word	0x40020800
 8003634:	40020820 	.word	0x40020820
 8003638:	cccccccd 	.word	0xcccccccd
 800363c:	40020880 	.word	0x40020880

08003640 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	461a      	mov	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003662:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3b01      	subs	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	1000823f 	.word	0x1000823f
 8003684:	40020940 	.word	0x40020940

08003688 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e147      	b.n	800392a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fc0a 	bl	8000ec8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0210 	bic.w	r2, r2, #16
 80036c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c4:	f7fd fee4 	bl	8001490 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036ca:	e012      	b.n	80036f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036cc:	f7fd fee0 	bl	8001490 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d90b      	bls.n	80036f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e11b      	b.n	800392a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d0e5      	beq.n	80036cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003710:	f7fd febe 	bl	8001490 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003716:	e012      	b.n	800373e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003718:	f7fd feba 	bl	8001490 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b0a      	cmp	r3, #10
 8003724:	d90b      	bls.n	800373e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0f5      	b.n	800392a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0e5      	beq.n	8003718 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0202 	orr.w	r2, r2, #2
 800375a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a74      	ldr	r2, [pc, #464]	@ (8003934 <HAL_FDCAN_Init+0x2ac>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d103      	bne.n	800376e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003766:	4a74      	ldr	r2, [pc, #464]	@ (8003938 <HAL_FDCAN_Init+0x2b0>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7c1b      	ldrb	r3, [r3, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d108      	bne.n	8003788 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003784:	619a      	str	r2, [r3, #24]
 8003786:	e007      	b.n	8003798 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003796:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7c5b      	ldrb	r3, [r3, #17]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037ae:	619a      	str	r2, [r3, #24]
 80037b0:	e007      	b.n	80037c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7c9b      	ldrb	r3, [r3, #18]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d108      	bne.n	80037dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e007      	b.n	80037ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003810:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0210 	bic.w	r2, r2, #16
 8003820:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0204 	orr.w	r2, r2, #4
 8003838:	619a      	str	r2, [r3, #24]
 800383a:	e02c      	b.n	8003896 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d028      	beq.n	8003896 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d01c      	beq.n	8003886 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800385a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0210 	orr.w	r2, r2, #16
 800386a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d110      	bne.n	8003896 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	e007      	b.n	8003896 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	3b01      	subs	r3, #1
 800389c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ca:	d115      	bne.n	80038f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	3b01      	subs	r3, #1
 80038d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	3b01      	subs	r3, #1
 80038e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	3b01      	subs	r3, #1
 80038ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80038f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9ae 	bl	8003c70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40006400 	.word	0x40006400
 8003938:	40006500 	.word	0x40006500

0800393c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	@ 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003958:	4013      	ands	r3, r2
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003970:	4013      	ands	r3, r2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003988:	4013      	ands	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003996:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	4013      	ands	r3, r2
 80039a2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80039ae:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d006      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2240      	movs	r2, #64	@ 0x40
 80039e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f921 	bl	8003c30 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d019      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d014      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a0a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003a24:	6939      	ldr	r1, [r7, #16]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8e3 	bl	8003bf2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8a2 	bl	8003b86 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8a2 	bl	8003b9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8a2 	bl	8003bb2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f89b 	bl	8003bc8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d018      	beq.n	8003ace <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003aae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4013      	ands	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f887 	bl	8003bdc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f88b 	bl	8003c08 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003b0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f883 	bl	8003c1c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00f      	beq.n	8003b40 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003b4e:	69f9      	ldr	r1, [r7, #28]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f881 	bl	8003c58 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f863 	bl	8003c44 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3730      	adds	r7, #48	@ 0x30
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003c7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	@ (8003d40 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d103      	bne.n	8003c8e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003c8c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	@ (8003d44 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003c9e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cae:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	041a      	lsls	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	061a      	lsls	r2, r3, #24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e005      	b.n	8003d22 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3f3      	bcc.n	8003d16 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	4000a400 	.word	0x4000a400
 8003d40:	40006800 	.word	0x40006800
 8003d44:	40006c00 	.word	0x40006c00

08003d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d56:	e15a      	b.n	800400e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 814c 	beq.w	8004008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d005      	beq.n	8003d88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d130      	bne.n	8003dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0201 	and.w	r2, r3, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d017      	beq.n	8003e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d123      	bne.n	8003e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a6 	beq.w	8004008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800402c <HAL_GPIO_Init+0x2e4>)
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800402c <HAL_GPIO_Init+0x2e4>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ec8:	4b58      	ldr	r3, [pc, #352]	@ (800402c <HAL_GPIO_Init+0x2e4>)
 8003eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed4:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_GPIO_Init+0x2e8>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	220f      	movs	r2, #15
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003efe:	d01f      	beq.n	8003f40 <HAL_GPIO_Init+0x1f8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a4c      	ldr	r2, [pc, #304]	@ (8004034 <HAL_GPIO_Init+0x2ec>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d019      	beq.n	8003f3c <HAL_GPIO_Init+0x1f4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004038 <HAL_GPIO_Init+0x2f0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <HAL_GPIO_Init+0x1f0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a4a      	ldr	r2, [pc, #296]	@ (800403c <HAL_GPIO_Init+0x2f4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00d      	beq.n	8003f34 <HAL_GPIO_Init+0x1ec>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a49      	ldr	r2, [pc, #292]	@ (8004040 <HAL_GPIO_Init+0x2f8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <HAL_GPIO_Init+0x1e8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a48      	ldr	r2, [pc, #288]	@ (8004044 <HAL_GPIO_Init+0x2fc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_GPIO_Init+0x1e4>
 8003f28:	2305      	movs	r3, #5
 8003f2a:	e00a      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	e008      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f30:	2304      	movs	r3, #4
 8003f32:	e006      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f34:	2303      	movs	r3, #3
 8003f36:	e004      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e002      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_GPIO_Init+0x1fa>
 8003f40:	2300      	movs	r3, #0
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	f002 0203 	and.w	r2, r2, #3
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	4093      	lsls	r3, r2
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f52:	4937      	ldr	r1, [pc, #220]	@ (8004030 <HAL_GPIO_Init+0x2e8>)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	3302      	adds	r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f60:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f84:	4a30      	ldr	r2, [pc, #192]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fae:	4a26      	ldr	r2, [pc, #152]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fb4:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <HAL_GPIO_Init+0x300>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f ae9d 	bne.w	8003d58 <HAL_GPIO_Init+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40021000 	.word	0x40021000
 8004030:	40010000 	.word	0x40010000
 8004034:	48000400 	.word	0x48000400
 8004038:	48000800 	.word	0x48000800
 800403c:	48000c00 	.word	0x48000c00
 8004040:	48001000 	.word	0x48001000
 8004044:	48001400 	.word	0x48001400
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004068:	e002      	b.n	8004070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004086:	4b08      	ldr	r3, [pc, #32]	@ (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f806 	bl	80040ac <HAL_GPIO_EXTI_Callback>
  }
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e08d      	b.n	80041f0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fc ff57 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2224      	movs	r2, #36	@ 0x24
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004112:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004122:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	e006      	b.n	800414a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004148:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d108      	bne.n	8004164 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e007      	b.n	8004174 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004172:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004186:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004196:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69d9      	ldr	r1, [r3, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	@ 0x28
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	460b      	mov	r3, r1
 8004206:	817b      	strh	r3, [r7, #10]
 8004208:	4613      	mov	r3, r2
 800420a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	f040 80ef 	bne.w	80043fc <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422c:	d101      	bne.n	8004232 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
 8004230:	e0e5      	b.n	80043fe <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_I2C_Master_Transmit_DMA+0x48>
 800423c:	2302      	movs	r3, #2
 800423e:	e0de      	b.n	80043fe <HAL_I2C_Master_Transmit_DMA+0x206>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2221      	movs	r2, #33	@ 0x21
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2210      	movs	r2, #16
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	893a      	ldrh	r2, [r7, #8]
 8004268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a66      	ldr	r2, [pc, #408]	@ (8004408 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800426e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a66      	ldr	r2, [pc, #408]	@ (800440c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004274:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2bff      	cmp	r3, #255	@ 0xff
 800427e:	d906      	bls.n	800428e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	22ff      	movs	r2, #255	@ 0xff
 8004284:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	e007      	b.n	800429e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004298:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800429c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01a      	beq.n	80042dc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d074      	beq.n	80043ce <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	4a47      	ldr	r2, [pc, #284]	@ (8004410 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80042f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	4a46      	ldr	r2, [pc, #280]	@ (8004414 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80042fa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800431c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004322:	f7fe ff71 	bl	8003208 <HAL_DMA_Start_IT>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d13a      	bne.n	80043a6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004330:	e013      	b.n	800435a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e051      	b.n	80043fe <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3301      	adds	r3, #1
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	4b2c      	ldr	r3, [pc, #176]	@ (8004418 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f001 fb95 	bl	8005a9c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800438c:	2110      	movs	r1, #16
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 fbb6 	bl	8005b00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e028      	b.n	80043f8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e017      	b.n	80043fe <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a12      	ldr	r2, [pc, #72]	@ (800441c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	8979      	ldrh	r1, [r7, #10]
 80043da:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f001 fb5a 	bl	8005a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043f0:	2101      	movs	r1, #1
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f001 fb84 	bl	8005b00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	ffff0000 	.word	0xffff0000
 800440c:	08004a1b 	.word	0x08004a1b
 8004410:	0800599b 	.word	0x0800599b
 8004414:	08005a31 	.word	0x08005a31
 8004418:	80002000 	.word	0x80002000
 800441c:	080045db 	.word	0x080045db

08004420 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
  }
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00f      	beq.n	8004496 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004494:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00f      	beq.n	80044c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f043 0208 	orr.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00f      	beq.n	80044ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	f043 0202 	orr.w	r2, r3, #2
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 030b 	and.w	r3, r3, #11
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 f911 	bl	8005724 <I2C_ITError>
  }
}
 8004502:	bf00      	nop
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
 8004566:	4613      	mov	r3, r2
 8004568:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af02      	add	r7, sp, #8
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <I2C_Master_ISR_IT+0x1e>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e113      	b.n	8004820 <I2C_Master_ISR_IT+0x246>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2210      	movs	r2, #16
 800461a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f001 f992 	bl	8005952 <I2C_Flush_TXDR>
 800462e:	e0e4      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d022      	beq.n	8004680 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01d      	beq.n	8004680 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800467e:	e0bc      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d128      	bne.n	80046dc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01e      	beq.n	80046dc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a8 	beq.w	80047fa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80046da:	e08e      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d05c      	beq.n	80047a0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d057      	beq.n	80047a0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d040      	beq.n	800477c <I2C_Master_ISR_IT+0x1a2>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d13c      	bne.n	800477c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2bff      	cmp	r3, #255	@ 0xff
 8004718:	d90e      	bls.n	8004738 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22ff      	movs	r2, #255	@ 0xff
 800471e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	b2da      	uxtb	r2, r3
 8004726:	8a79      	ldrh	r1, [r7, #18]
 8004728:	2300      	movs	r3, #0
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f001 f9b3 	bl	8005a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004736:	e032      	b.n	800479e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800474a:	d00b      	beq.n	8004764 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004750:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004756:	8a79      	ldrh	r1, [r7, #18]
 8004758:	2000      	movs	r0, #0
 800475a:	9000      	str	r0, [sp, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f001 f99d 	bl	8005a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004762:	e01c      	b.n	800479e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	8a79      	ldrh	r1, [r7, #18]
 800476c:	2300      	movs	r3, #0
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f001 f991 	bl	8005a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800477a:	e010      	b.n	800479e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800478a:	d003      	beq.n	8004794 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fcb0 	bl	80050f2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004792:	e032      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 ffc4 	bl	8005724 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800479c:	e02d      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
 800479e:	e02c      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d027      	beq.n	80047fa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d022      	beq.n	80047fa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d119      	bne.n	80047f2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047cc:	d015      	beq.n	80047fa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d6:	d108      	bne.n	80047ea <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	e007      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fc81 	bl	80050f2 <I2C_ITMasterSeqCplt>
 80047f0:	e003      	b.n	80047fa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047f2:	2140      	movs	r1, #64	@ 0x40
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 ff95 	bl	8005724 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800480e:	6979      	ldr	r1, [r7, #20]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fd07 	bl	8005224 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <I2C_Slave_ISR_IT+0x24>
 8004848:	2302      	movs	r3, #2
 800484a:	e0e2      	b.n	8004a12 <I2C_Slave_ISR_IT+0x1ea>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004868:	6939      	ldr	r1, [r7, #16]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fda2 	bl	80053b4 <I2C_ITSlaveCplt>
 8004870:	e0ca      	b.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d04b      	beq.n	8004914 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004882:	2b00      	cmp	r3, #0
 8004884:	d046      	beq.n	8004914 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d128      	bne.n	80048e2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b28      	cmp	r3, #40	@ 0x28
 800489a:	d108      	bne.n	80048ae <I2C_Slave_ISR_IT+0x86>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048a2:	d104      	bne.n	80048ae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fee8 	bl	800567c <I2C_ITListenCplt>
 80048ac:	e031      	b.n	8004912 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b29      	cmp	r3, #41	@ 0x29
 80048b8:	d10e      	bne.n	80048d8 <I2C_Slave_ISR_IT+0xb0>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048c0:	d00a      	beq.n	80048d8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f001 f841 	bl	8005952 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fc4b 	bl	800516c <I2C_ITSlaveSeqCplt>
 80048d6:	e01c      	b.n	8004912 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2210      	movs	r2, #16
 80048de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80048e0:	e08f      	b.n	8004a02 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <I2C_Slave_ISR_IT+0xdc>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004902:	d17e      	bne.n	8004a02 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004908:	4619      	mov	r1, r3
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 ff0a 	bl	8005724 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004910:	e077      	b.n	8004a02 <I2C_Slave_ISR_IT+0x1da>
 8004912:	e076      	b.n	8004a02 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02f      	beq.n	800497e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02a      	beq.n	800497e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d14b      	bne.n	8004a06 <I2C_Slave_ISR_IT+0x1de>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004974:	d047      	beq.n	8004a06 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fbf8 	bl	800516c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800497c:	e043      	b.n	8004a06 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004992:	6939      	ldr	r1, [r7, #16]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb28 	bl	8004fea <I2C_ITAddrCplt>
 800499a:	e035      	b.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d030      	beq.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02b      	beq.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d018      	beq.n	80049ec <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049ea:	e00d      	b.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049f2:	d002      	beq.n	80049fa <I2C_Slave_ISR_IT+0x1d2>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fbb6 	bl	800516c <I2C_ITSlaveSeqCplt>
 8004a00:	e002      	b.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004a06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b088      	sub	sp, #32
 8004a1e:	af02      	add	r7, sp, #8
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <I2C_Master_ISR_DMA+0x1a>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0d9      	b.n	8004be8 <I2C_Master_ISR_DMA+0x1ce>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5c:	f043 0204 	orr.w	r2, r3, #4
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a64:	2120      	movs	r1, #32
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 f84a 	bl	8005b00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 ff70 	bl	8005952 <I2C_Flush_TXDR>
 8004a72:	e0b4      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d071      	beq.n	8004b62 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d06c      	beq.n	8004b62 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a96:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d04e      	beq.n	8004b40 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d906      	bls.n	8004ac8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004ac0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e010      	b.n	8004aea <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ada:	d003      	beq.n	8004ae4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e002      	b.n	8004aea <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ae8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	8a79      	ldrh	r1, [r7, #18]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 ffcf 	bl	8005a9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b22      	cmp	r3, #34	@ 0x22
 8004b1a:	d108      	bne.n	8004b2e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b2c:	e057      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b3e:	e04e      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b4e:	d003      	beq.n	8004b58 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 face 	bl	80050f2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004b56:	e042      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004b58:	2140      	movs	r1, #64	@ 0x40
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fde2 	bl	8005724 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004b60:	e03d      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d028      	beq.n	8004bbe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d023      	beq.n	8004bbe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d119      	bne.n	8004bb4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8e:	d025      	beq.n	8004bdc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b98:	d108      	bne.n	8004bac <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ba8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004baa:	e017      	b.n	8004bdc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 faa0 	bl	80050f2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004bb2:	e013      	b.n	8004bdc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004bb4:	2140      	movs	r1, #64	@ 0x40
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fdb4 	bl	8005724 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004bbc:	e00e      	b.n	8004bdc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fb25 	bl	8005224 <I2C_ITMasterCplt>
 8004bda:	e000      	b.n	8004bde <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004bdc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8004e34 <I2C_Mem_ISR_DMA+0x244>)
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <I2C_Mem_ISR_DMA+0x1e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e10e      	b.n	8004e2c <I2C_Mem_ISR_DMA+0x23c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d011      	beq.n	8004c4e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c3e:	2120      	movs	r1, #32
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 ff5d 	bl	8005b00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fe83 	bl	8005952 <I2C_Flush_TXDR>
 8004c4c:	e0e9      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c74:	e0d5      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05f      	beq.n	8004d40 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d05a      	beq.n	8004d40 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 ffbb 	bl	8005c08 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004c92:	2110      	movs	r1, #16
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 ff33 	bl	8005b00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d048      	beq.n	8004d36 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2bff      	cmp	r3, #255	@ 0xff
 8004cac:	d910      	bls.n	8004cd0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	22ff      	movs	r2, #255	@ 0xff
 8004cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fee7 	bl	8005a9c <I2C_TransferConfig>
 8004cce:	e011      	b.n	8004cf4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	b299      	uxth	r1, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fed4 	bl	8005a9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b22      	cmp	r3, #34	@ 0x22
 8004d10:	d108      	bne.n	8004d24 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d22:	e07e      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d34:	e075      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d36:	2140      	movs	r1, #64	@ 0x40
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fcf3 	bl	8005724 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004d3e:	e070      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d05d      	beq.n	8004e06 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d058      	beq.n	8004e06 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d54:	2101      	movs	r1, #1
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 ff56 	bl	8005c08 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fece 	bl	8005b00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b22      	cmp	r3, #34	@ 0x22
 8004d6e:	d101      	bne.n	8004d74 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004d70:	4b31      	ldr	r3, [pc, #196]	@ (8004e38 <I2C_Mem_ISR_DMA+0x248>)
 8004d72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2bff      	cmp	r3, #255	@ 0xff
 8004d7c:	d910      	bls.n	8004da0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	22ff      	movs	r2, #255	@ 0xff
 8004d82:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d88:	b299      	uxth	r1, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fe7f 	bl	8005a9c <I2C_TransferConfig>
 8004d9e:	e011      	b.n	8004dc4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	b299      	uxth	r1, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe6c 	bl	8005a9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b22      	cmp	r3, #34	@ 0x22
 8004de0:	d108      	bne.n	8004df4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004df0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004df2:	e016      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e02:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e04:	e00d      	b.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fa01 	bl	8005224 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	80002000 	.word	0x80002000
 8004e38:	80002400 	.word	0x80002400

08004e3c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <I2C_Slave_ISR_DMA+0x24>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0c0      	b.n	8004fe2 <I2C_Slave_ISR_DMA+0x1a6>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fa98 	bl	80053b4 <I2C_ITSlaveCplt>
 8004e84:	e0a8      	b.n	8004fd8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8095 	beq.w	8004fbc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 808f 	beq.w	8004fbc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d07d      	beq.n	8004fae <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d128      	bne.n	8004f4e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b28      	cmp	r3, #40	@ 0x28
 8004f06:	d108      	bne.n	8004f1a <I2C_Slave_ISR_DMA+0xde>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f0e:	d104      	bne.n	8004f1a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fbb2 	bl	800567c <I2C_ITListenCplt>
 8004f18:	e048      	b.n	8004fac <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b29      	cmp	r3, #41	@ 0x29
 8004f24:	d10e      	bne.n	8004f44 <I2C_Slave_ISR_DMA+0x108>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f2c:	d00a      	beq.n	8004f44 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fd0b 	bl	8005952 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f915 	bl	800516c <I2C_ITSlaveSeqCplt>
 8004f42:	e033      	b.n	8004fac <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2210      	movs	r2, #16
 8004f4a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004f4c:	e034      	b.n	8004fb8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2210      	movs	r2, #16
 8004f54:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f043 0204 	orr.w	r2, r3, #4
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f68:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <I2C_Slave_ISR_DMA+0x13c>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f76:	d11f      	bne.n	8004fb8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b21      	cmp	r3, #33	@ 0x21
 8004f7c:	d002      	beq.n	8004f84 <I2C_Slave_ISR_DMA+0x148>
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b29      	cmp	r3, #41	@ 0x29
 8004f82:	d103      	bne.n	8004f8c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2221      	movs	r2, #33	@ 0x21
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f8a:	e008      	b.n	8004f9e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b22      	cmp	r3, #34	@ 0x22
 8004f90:	d002      	beq.n	8004f98 <I2C_Slave_ISR_DMA+0x15c>
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f96:	d102      	bne.n	8004f9e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2222      	movs	r2, #34	@ 0x22
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbbd 	bl	8005724 <I2C_ITError>
      if (treatdmanack == 1U)
 8004faa:	e005      	b.n	8004fb8 <I2C_Slave_ISR_DMA+0x17c>
 8004fac:	e004      	b.n	8004fb8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004fb6:	e00f      	b.n	8004fd8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8004fb8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004fba:	e00d      	b.n	8004fd8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f809 	bl	8004fea <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005000:	2b28      	cmp	r3, #40	@ 0x28
 8005002:	d16a      	bne.n	80050da <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	0c1b      	lsrs	r3, r3, #16
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b29b      	uxth	r3, r3
 800501e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005022:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005030:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800503e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d138      	bne.n	80050ba <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	09db      	lsrs	r3, r3, #7
 800504c:	b29a      	uxth	r2, r3
 800504e:	89bb      	ldrh	r3, [r7, #12]
 8005050:	4053      	eors	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	f003 0306 	and.w	r3, r3, #6
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11c      	bne.n	8005096 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800505c:	897b      	ldrh	r3, [r7, #10]
 800505e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506e:	2b02      	cmp	r3, #2
 8005070:	d13b      	bne.n	80050ea <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2208      	movs	r2, #8
 800507e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005088:	89ba      	ldrh	r2, [r7, #12]
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	4619      	mov	r1, r3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fa63 	bl	800455a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005094:	e029      	b.n	80050ea <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800509a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fdb2 	bl	8005c08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050ac:	89ba      	ldrh	r2, [r7, #12]
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fa51 	bl	800455a <HAL_I2C_AddrCallback>
}
 80050b8:	e017      	b.n	80050ea <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fda2 	bl	8005c08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050cc:	89ba      	ldrh	r2, [r7, #12]
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fa41 	bl	800455a <HAL_I2C_AddrCallback>
}
 80050d8:	e007      	b.n	80050ea <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2208      	movs	r2, #8
 80050e0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b21      	cmp	r3, #33	@ 0x21
 800510c:	d115      	bne.n	800513a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2211      	movs	r2, #17
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005122:	2101      	movs	r1, #1
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fd6f 	bl	8005c08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff f9e9 	bl	800450a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005138:	e014      	b.n	8005164 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2212      	movs	r2, #18
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800514e:	2102      	movs	r1, #2
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fd59 	bl	8005c08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff f9dd 	bl	800451e <HAL_I2C_MasterRxCpltCallback>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e00c      	b.n	80051ba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b29      	cmp	r3, #41	@ 0x29
 80051c4:	d112      	bne.n	80051ec <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2228      	movs	r2, #40	@ 0x28
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2221      	movs	r2, #33	@ 0x21
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051d4:	2101      	movs	r1, #1
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fd16 	bl	8005c08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff f9a4 	bl	8004532 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051ea:	e017      	b.n	800521c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051f6:	d111      	bne.n	800521c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2228      	movs	r2, #40	@ 0x28
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2222      	movs	r2, #34	@ 0x22
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005206:	2102      	movs	r1, #2
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fcfd 	bl	8005c08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff f995 	bl	8004546 <HAL_I2C_SlaveRxCpltCallback>
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2220      	movs	r2, #32
 8005238:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b21      	cmp	r3, #33	@ 0x21
 8005244:	d107      	bne.n	8005256 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fcdd 	bl	8005c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2211      	movs	r2, #17
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
 8005254:	e00c      	b.n	8005270 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b22      	cmp	r3, #34	@ 0x22
 8005260:	d106      	bne.n	8005270 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005262:	2102      	movs	r1, #2
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fccf 	bl	8005c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2212      	movs	r2, #18
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b4c      	ldr	r3, [pc, #304]	@ (80053ac <I2C_ITMasterCplt+0x188>)
 800527c:	400b      	ands	r3, r1
 800527e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a49      	ldr	r2, [pc, #292]	@ (80053b0 <I2C_ITMasterCplt+0x18c>)
 800528a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b60      	cmp	r3, #96	@ 0x60
 80052b4:	d10a      	bne.n	80052cc <I2C_ITMasterCplt+0xa8>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80052ca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fb40 	bl	8005952 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b60      	cmp	r3, #96	@ 0x60
 80052e2:	d002      	beq.n	80052ea <I2C_ITMasterCplt+0xc6>
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fa17 	bl	8005724 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052f6:	e054      	b.n	80053a2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b21      	cmp	r3, #33	@ 0x21
 8005302:	d124      	bne.n	800534e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	d10b      	bne.n	8005336 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff f92b 	bl	800458a <HAL_I2C_MemTxCpltCallback>
}
 8005334:	e035      	b.n	80053a2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff f8df 	bl	800450a <HAL_I2C_MasterTxCpltCallback>
}
 800534c:	e029      	b.n	80053a2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b22      	cmp	r3, #34	@ 0x22
 8005358:	d123      	bne.n	80053a2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d10b      	bne.n	800538c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff f90a 	bl	800459e <HAL_I2C_MemRxCpltCallback>
}
 800538a:	e00a      	b.n	80053a2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff f8be 	bl	800451e <HAL_I2C_MasterRxCpltCallback>
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	fe00e800 	.word	0xfe00e800
 80053b0:	ffff0000 	.word	0xffff0000

080053b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2220      	movs	r2, #32
 80053de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053e0:	7afb      	ldrb	r3, [r7, #11]
 80053e2:	2b21      	cmp	r3, #33	@ 0x21
 80053e4:	d002      	beq.n	80053ec <I2C_ITSlaveCplt+0x38>
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	2b29      	cmp	r3, #41	@ 0x29
 80053ea:	d108      	bne.n	80053fe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80053ec:	f248 0101 	movw	r1, #32769	@ 0x8001
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fc09 	bl	8005c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2221      	movs	r2, #33	@ 0x21
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80053fc:	e019      	b.n	8005432 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	2b22      	cmp	r3, #34	@ 0x22
 8005402:	d002      	beq.n	800540a <I2C_ITSlaveCplt+0x56>
 8005404:	7afb      	ldrb	r3, [r7, #11]
 8005406:	2b2a      	cmp	r3, #42	@ 0x2a
 8005408:	d108      	bne.n	800541c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800540a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fbfa 	bl	8005c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2222      	movs	r2, #34	@ 0x22
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30
 800541a:	e00a      	b.n	8005432 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	2b28      	cmp	r3, #40	@ 0x28
 8005420:	d107      	bne.n	8005432 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005422:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fbee 	bl	8005c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005440:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4b89      	ldr	r3, [pc, #548]	@ (8005674 <I2C_ITSlaveCplt+0x2c0>)
 800544e:	400b      	ands	r3, r1
 8005450:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa7d 	bl	8005952 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d013      	beq.n	800548a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005470:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01f      	beq.n	80054ba <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005488:	e017      	b.n	80054ba <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	d049      	beq.n	80055ba <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800552c:	2b00      	cmp	r3, #0
 800552e:	d044      	beq.n	80055ba <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d128      	bne.n	800558c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b28      	cmp	r3, #40	@ 0x28
 8005544:	d108      	bne.n	8005558 <I2C_ITSlaveCplt+0x1a4>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554c:	d104      	bne.n	8005558 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f893 	bl	800567c <I2C_ITListenCplt>
 8005556:	e030      	b.n	80055ba <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b29      	cmp	r3, #41	@ 0x29
 8005562:	d10e      	bne.n	8005582 <I2C_ITSlaveCplt+0x1ce>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800556a:	d00a      	beq.n	8005582 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2210      	movs	r2, #16
 8005572:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f9ec 	bl	8005952 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fdf6 	bl	800516c <I2C_ITSlaveSeqCplt>
 8005580:	e01b      	b.n	80055ba <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2210      	movs	r2, #16
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	e016      	b.n	80055ba <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2210      	movs	r2, #16
 8005592:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005598:	f043 0204 	orr.w	r2, r3, #4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <I2C_ITSlaveCplt+0x1fa>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ac:	d105      	bne.n	80055ba <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8b5 	bl	8005724 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8a4 	bl	8005724 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b28      	cmp	r3, #40	@ 0x28
 80055e6:	d141      	bne.n	800566c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f846 	bl	800567c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055f0:	e03c      	b.n	800566c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055fa:	d014      	beq.n	8005626 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fdb5 	bl	800516c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <I2C_ITSlaveCplt+0x2c4>)
 8005606:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fe ffa9 	bl	8004576 <HAL_I2C_ListenCpltCallback>
}
 8005624:	e022      	b.n	800566c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b22      	cmp	r3, #34	@ 0x22
 8005630:	d10e      	bne.n	8005650 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fe ff7c 	bl	8004546 <HAL_I2C_SlaveRxCpltCallback>
}
 800564e:	e00d      	b.n	800566c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fe ff63 	bl	8004532 <HAL_I2C_SlaveTxCpltCallback>
}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	fe00e800 	.word	0xfe00e800
 8005678:	ffff0000 	.word	0xffff0000

0800567c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a25      	ldr	r2, [pc, #148]	@ (8005720 <I2C_ITListenCplt+0xa4>)
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d022      	beq.n	80056f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d012      	beq.n	80056f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f043 0204 	orr.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fa83 	bl	8005c08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fe ff2f 	bl	8004576 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffff0000 	.word	0xffff0000

08005724 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005734:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a6d      	ldr	r2, [pc, #436]	@ (80058f8 <I2C_ITError+0x1d4>)
 8005742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b28      	cmp	r3, #40	@ 0x28
 800575a:	d005      	beq.n	8005768 <I2C_ITError+0x44>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b29      	cmp	r3, #41	@ 0x29
 8005760:	d002      	beq.n	8005768 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b2a      	cmp	r3, #42	@ 0x2a
 8005766:	d10b      	bne.n	8005780 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005768:	2103      	movs	r1, #3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa4c 	bl	8005c08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2228      	movs	r2, #40	@ 0x28
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a60      	ldr	r2, [pc, #384]	@ (80058fc <I2C_ITError+0x1d8>)
 800577c:	635a      	str	r2, [r3, #52]	@ 0x34
 800577e:	e030      	b.n	80057e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005780:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa3f 	bl	8005c08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8e1 	bl	8005952 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b60      	cmp	r3, #96	@ 0x60
 800579a:	d01f      	beq.n	80057dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d114      	bne.n	80057dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d109      	bne.n	80057d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2210      	movs	r2, #16
 80057c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2220      	movs	r2, #32
 80057da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d039      	beq.n	8005864 <I2C_ITError+0x140>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b11      	cmp	r3, #17
 80057f4:	d002      	beq.n	80057fc <I2C_ITError+0xd8>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b21      	cmp	r3, #33	@ 0x21
 80057fa:	d133      	bne.n	8005864 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800580a:	d107      	bne.n	800581c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800581a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	4618      	mov	r0, r3
 8005822:	f7fd fe82 	bl	800352a <HAL_DMA_GetState>
 8005826:	4603      	mov	r3, r0
 8005828:	2b01      	cmp	r3, #1
 800582a:	d017      	beq.n	800585c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	4a33      	ldr	r2, [pc, #204]	@ (8005900 <I2C_ITError+0x1dc>)
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	4618      	mov	r0, r3
 8005842:	f7fd fd5c 	bl	80032fe <HAL_DMA_Abort_IT>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d04d      	beq.n	80058e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005856:	4610      	mov	r0, r2
 8005858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800585a:	e045      	b.n	80058e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f851 	bl	8005904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005862:	e041      	b.n	80058e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d039      	beq.n	80058e0 <I2C_ITError+0x1bc>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b12      	cmp	r3, #18
 8005870:	d002      	beq.n	8005878 <I2C_ITError+0x154>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b22      	cmp	r3, #34	@ 0x22
 8005876:	d133      	bne.n	80058e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005886:	d107      	bne.n	8005898 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005896:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589c:	4618      	mov	r0, r3
 800589e:	f7fd fe44 	bl	800352a <HAL_DMA_GetState>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d017      	beq.n	80058d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	4a14      	ldr	r2, [pc, #80]	@ (8005900 <I2C_ITError+0x1dc>)
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd fd1e 	bl	80032fe <HAL_DMA_Abort_IT>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d011      	beq.n	80058ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058d2:	4610      	mov	r0, r2
 80058d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058d6:	e009      	b.n	80058ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f813 	bl	8005904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058de:	e005      	b.n	80058ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f80f 	bl	8005904 <I2C_TreatErrorCallback>
  }
}
 80058e6:	e002      	b.n	80058ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ec:	bf00      	nop
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	ffff0000 	.word	0xffff0000
 80058fc:	08004829 	.word	0x08004829
 8005900:	08005a5f 	.word	0x08005a5f

08005904 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b60      	cmp	r3, #96	@ 0x60
 8005916:	d10e      	bne.n	8005936 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fe fe49 	bl	80045c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005934:	e009      	b.n	800594a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe fe34 	bl	80045b2 <HAL_I2C_ErrorCallback>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d103      	bne.n	8005970 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d007      	beq.n	800598e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	619a      	str	r2, [r3, #24]
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059b6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80059c2:	2120      	movs	r1, #32
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f89b 	bl	8005b00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80059ca:	e02d      	b.n	8005a28 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2bff      	cmp	r3, #255	@ 0xff
 80059e2:	d903      	bls.n	80059ec <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	22ff      	movs	r2, #255	@ 0xff
 80059e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059ea:	e004      	b.n	80059f6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	4619      	mov	r1, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3328      	adds	r3, #40	@ 0x28
 8005a06:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a0c:	f7fd fbfc 	bl	8003208 <HAL_DMA_Start_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005a16:	2110      	movs	r1, #16
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff fe83 	bl	8005724 <I2C_ITError>
}
 8005a1e:	e003      	b.n	8005a28 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005a20:	2140      	movs	r1, #64	@ 0x40
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f86c 	bl	8005b00 <I2C_Enable_IRQ>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a4c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005a4e:	2110      	movs	r1, #16
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fe67 	bl	8005724 <I2C_ITError>
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	2200      	movs	r2, #0
 8005a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a88:	2200      	movs	r2, #0
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff ff39 	bl	8005904 <I2C_TreatErrorCallback>
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	817b      	strh	r3, [r7, #10]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ab4:	7a7b      	ldrb	r3, [r7, #9]
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005abc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005aca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	0d5b      	lsrs	r3, r3, #21
 8005ad6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ada:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <I2C_TransferConfig+0x60>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	ea02 0103 	and.w	r1, r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	03ff63ff 	.word	0x03ff63ff

08005b00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	4a39      	ldr	r2, [pc, #228]	@ (8005bfc <I2C_Enable_IRQ+0xfc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d032      	beq.n	8005b80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005b1e:	4a38      	ldr	r2, [pc, #224]	@ (8005c00 <I2C_Enable_IRQ+0x100>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d02d      	beq.n	8005b80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005b28:	4a36      	ldr	r2, [pc, #216]	@ (8005c04 <I2C_Enable_IRQ+0x104>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d028      	beq.n	8005b80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da03      	bge.n	8005b3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b3e:	887b      	ldrh	r3, [r7, #2]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005b4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005b60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d103      	bne.n	8005b70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b70:	887b      	ldrh	r3, [r7, #2]
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d133      	bne.n	8005bde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f043 0320 	orr.w	r3, r3, #32
 8005b7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b7e:	e02e      	b.n	8005bde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da03      	bge.n	8005b90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005ba0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ba2:	887b      	ldrh	r3, [r7, #2]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005bb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005bb4:	887b      	ldrh	r3, [r7, #2]
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d103      	bne.n	8005bc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005bc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d103      	bne.n	8005bd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	2b40      	cmp	r3, #64	@ 0x40
 8005bd4:	d103      	bne.n	8005bde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	08004a1b 	.word	0x08004a1b
 8005c00:	08004e3d 	.word	0x08004e3d
 8005c04:	08004bf1 	.word	0x08004bf1

08005c08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005c28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c36:	2b28      	cmp	r3, #40	@ 0x28
 8005c38:	d003      	beq.n	8005c42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c42:	887b      	ldrh	r3, [r7, #2]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00f      	beq.n	8005c6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c60:	2b28      	cmp	r3, #40	@ 0x28
 8005c62:	d003      	beq.n	8005c6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	da03      	bge.n	8005c7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c7c:	887b      	ldrh	r3, [r7, #2]
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d103      	bne.n	8005c8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005c88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d103      	bne.n	8005c98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f043 0320 	orr.w	r3, r3, #32
 8005c96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	2b40      	cmp	r3, #64	@ 0x40
 8005c9c:	d103      	bne.n	8005ca6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d138      	bne.n	8005d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e032      	b.n	8005d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	@ 0x24
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d139      	bne.n	8005de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e033      	b.n	8005de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2224      	movs	r2, #36	@ 0x24
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e08:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	4905      	ldr	r1, [pc, #20]	@ (8005e30 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	40010000 	.word	0x40010000

08005e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d141      	bne.n	8005ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e42:	4b4b      	ldr	r3, [pc, #300]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4e:	d131      	bne.n	8005eb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e50:	4b47      	ldr	r3, [pc, #284]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e56:	4a46      	ldr	r2, [pc, #280]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e60:	4b43      	ldr	r3, [pc, #268]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e68:	4a41      	ldr	r2, [pc, #260]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e70:	4b40      	ldr	r3, [pc, #256]	@ (8005f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2232      	movs	r2, #50	@ 0x32
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	0c9b      	lsrs	r3, r3, #18
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e86:	e002      	b.n	8005e8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e8e:	4b38      	ldr	r3, [pc, #224]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9a:	d102      	bne.n	8005ea2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f2      	bne.n	8005e88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ea2:	4b33      	ldr	r3, [pc, #204]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eae:	d158      	bne.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e057      	b.n	8005f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eba:	4a2d      	ldr	r2, [pc, #180]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ec4:	e04d      	b.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d141      	bne.n	8005f52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ece:	4b28      	ldr	r3, [pc, #160]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	d131      	bne.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005edc:	4b24      	ldr	r3, [pc, #144]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee2:	4a23      	ldr	r2, [pc, #140]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eec:	4b20      	ldr	r3, [pc, #128]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005efc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2232      	movs	r2, #50	@ 0x32
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	0c9b      	lsrs	r3, r3, #18
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f12:	e002      	b.n	8005f1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f26:	d102      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f2      	bne.n	8005f14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f2e:	4b10      	ldr	r3, [pc, #64]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3a:	d112      	bne.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e011      	b.n	8005f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f46:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f50:	e007      	b.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f52:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f5a:	4a05      	ldr	r2, [pc, #20]	@ (8005f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40007000 	.word	0x40007000
 8005f74:	20000000 	.word	0x20000000
 8005f78:	431bde83 	.word	0x431bde83

08005f7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f8a:	6093      	str	r3, [r2, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40007000 	.word	0x40007000

08005f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e2fe      	b.n	80065ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d075      	beq.n	80060a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fba:	4b97      	ldr	r3, [pc, #604]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc4:	4b94      	ldr	r3, [pc, #592]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	d102      	bne.n	8005fda <HAL_RCC_OscConfig+0x3e>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d002      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x44>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d10b      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d05b      	beq.n	80060a4 <HAL_RCC_OscConfig+0x108>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d157      	bne.n	80060a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e2d9      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006000:	d106      	bne.n	8006010 <HAL_RCC_OscConfig+0x74>
 8006002:	4b85      	ldr	r3, [pc, #532]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a84      	ldr	r2, [pc, #528]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e01d      	b.n	800604c <HAL_RCC_OscConfig+0xb0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0x98>
 800601a:	4b7f      	ldr	r3, [pc, #508]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a7e      	ldr	r2, [pc, #504]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b7c      	ldr	r3, [pc, #496]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7b      	ldr	r2, [pc, #492]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e00b      	b.n	800604c <HAL_RCC_OscConfig+0xb0>
 8006034:	4b78      	ldr	r3, [pc, #480]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a77      	ldr	r2, [pc, #476]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 800603a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4b75      	ldr	r3, [pc, #468]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a74      	ldr	r2, [pc, #464]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800604a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d013      	beq.n	800607c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fb fa1c 	bl	8001490 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800605c:	f7fb fa18 	bl	8001490 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	@ 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e29e      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800606e:	4b6a      	ldr	r3, [pc, #424]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0xc0>
 800607a:	e014      	b.n	80060a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fb fa08 	bl	8001490 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006084:	f7fb fa04 	bl	8001490 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	@ 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e28a      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006096:	4b60      	ldr	r3, [pc, #384]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0xe8>
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d075      	beq.n	800619e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b2:	4b59      	ldr	r3, [pc, #356]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060bc:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	d102      	bne.n	80060d2 <HAL_RCC_OscConfig+0x136>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d002      	beq.n	80060d8 <HAL_RCC_OscConfig+0x13c>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d11f      	bne.n	8006118 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_OscConfig+0x154>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e25d      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f0:	4b49      	ldr	r3, [pc, #292]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	4946      	ldr	r1, [pc, #280]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006104:	4b45      	ldr	r3, [pc, #276]	@ (800621c <HAL_RCC_OscConfig+0x280>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7fb f975 	bl	80013f8 <HAL_InitTick>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d043      	beq.n	800619c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e249      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d023      	beq.n	8006168 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006120:	4b3d      	ldr	r3, [pc, #244]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3c      	ldr	r2, [pc, #240]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fb f9b0 	bl	8001490 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006134:	f7fb f9ac 	bl	8001490 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e232      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006146:	4b34      	ldr	r3, [pc, #208]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006152:	4b31      	ldr	r3, [pc, #196]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	492d      	ldr	r1, [pc, #180]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
 8006166:	e01a      	b.n	800619e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006168:	4b2b      	ldr	r3, [pc, #172]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 800616e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fb f98c 	bl	8001490 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800617c:	f7fb f988 	bl	8001490 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e20e      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800618e:	4b22      	ldr	r3, [pc, #136]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x1e0>
 800619a:	e000      	b.n	800619e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800619c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d041      	beq.n	800622e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01c      	beq.n	80061ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b2:	4b19      	ldr	r3, [pc, #100]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b8:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fb f965 	bl	8001490 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ca:	f7fb f961 	bl	8001490 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1e7      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0ef      	beq.n	80061ca <HAL_RCC_OscConfig+0x22e>
 80061ea:	e020      	b.n	800622e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061f2:	4a09      	ldr	r2, [pc, #36]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fc:	f7fb f948 	bl	8001490 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006202:	e00d      	b.n	8006220 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006204:	f7fb f944 	bl	8001490 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d906      	bls.n	8006220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e1ca      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006220:	4b8c      	ldr	r3, [pc, #560]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1ea      	bne.n	8006204 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80a6 	beq.w	8006388 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800623c:	2300      	movs	r3, #0
 800623e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006240:	4b84      	ldr	r3, [pc, #528]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_RCC_OscConfig+0x2b4>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x2b6>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	4b7f      	ldr	r3, [pc, #508]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	4a7e      	ldr	r2, [pc, #504]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800625c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006260:	6593      	str	r3, [r2, #88]	@ 0x58
 8006262:	4b7c      	ldr	r3, [pc, #496]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800626e:	2301      	movs	r3, #1
 8006270:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006272:	4b79      	ldr	r3, [pc, #484]	@ (8006458 <HAL_RCC_OscConfig+0x4bc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627a:	2b00      	cmp	r3, #0
 800627c:	d118      	bne.n	80062b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627e:	4b76      	ldr	r3, [pc, #472]	@ (8006458 <HAL_RCC_OscConfig+0x4bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a75      	ldr	r2, [pc, #468]	@ (8006458 <HAL_RCC_OscConfig+0x4bc>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800628a:	f7fb f901 	bl	8001490 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006292:	f7fb f8fd 	bl	8001490 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e183      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006458 <HAL_RCC_OscConfig+0x4bc>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d108      	bne.n	80062ca <HAL_RCC_OscConfig+0x32e>
 80062b8:	4b66      	ldr	r3, [pc, #408]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062be:	4a65      	ldr	r2, [pc, #404]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062c8:	e024      	b.n	8006314 <HAL_RCC_OscConfig+0x378>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d110      	bne.n	80062f4 <HAL_RCC_OscConfig+0x358>
 80062d2:	4b60      	ldr	r3, [pc, #384]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062f2:	e00f      	b.n	8006314 <HAL_RCC_OscConfig+0x378>
 80062f4:	4b57      	ldr	r3, [pc, #348]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fa:	4a56      	ldr	r2, [pc, #344]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006304:	4b53      	ldr	r3, [pc, #332]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	4a52      	ldr	r2, [pc, #328]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f023 0304 	bic.w	r3, r3, #4
 8006310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d016      	beq.n	800634a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631c:	f7fb f8b8 	bl	8001490 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006322:	e00a      	b.n	800633a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fb f8b4 	bl	8001490 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e138      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800633a:	4b46      	ldr	r3, [pc, #280]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0ed      	beq.n	8006324 <HAL_RCC_OscConfig+0x388>
 8006348:	e015      	b.n	8006376 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634a:	f7fb f8a1 	bl	8001490 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006350:	e00a      	b.n	8006368 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f7fb f89d 	bl	8001490 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e121      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006368:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ed      	bne.n	8006352 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637c:	4b35      	ldr	r3, [pc, #212]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	4a34      	ldr	r2, [pc, #208]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006386:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d03c      	beq.n	800640e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01c      	beq.n	80063d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800639c:	4b2d      	ldr	r3, [pc, #180]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800639e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ac:	f7fb f870 	bl	8001490 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063b4:	f7fb f86c 	bl	8001490 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0f2      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063c6:	4b23      	ldr	r3, [pc, #140]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80063c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ef      	beq.n	80063b4 <HAL_RCC_OscConfig+0x418>
 80063d4:	e01b      	b.n	800640e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80063d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e6:	f7fb f853 	bl	8001490 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ee:	f7fb f84f 	bl	8001490 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0d5      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006400:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006402:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1ef      	bne.n	80063ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80c9 	beq.w	80065aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b0c      	cmp	r3, #12
 8006422:	f000 8083 	beq.w	800652c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d15e      	bne.n	80064ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642e:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a08      	ldr	r2, [pc, #32]	@ (8006454 <HAL_RCC_OscConfig+0x4b8>)
 8006434:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fb f829 	bl	8001490 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006440:	e00c      	b.n	800645c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006442:	f7fb f825 	bl	8001490 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d905      	bls.n	800645c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e0ab      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
 8006454:	40021000 	.word	0x40021000
 8006458:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800645c:	4b55      	ldr	r3, [pc, #340]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ec      	bne.n	8006442 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006468:	4b52      	ldr	r3, [pc, #328]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	4b52      	ldr	r3, [pc, #328]	@ (80065b8 <HAL_RCC_OscConfig+0x61c>)
 800646e:	4013      	ands	r3, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6a11      	ldr	r1, [r2, #32]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006478:	3a01      	subs	r2, #1
 800647a:	0112      	lsls	r2, r2, #4
 800647c:	4311      	orrs	r1, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006482:	0212      	lsls	r2, r2, #8
 8006484:	4311      	orrs	r1, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800648a:	0852      	lsrs	r2, r2, #1
 800648c:	3a01      	subs	r2, #1
 800648e:	0552      	lsls	r2, r2, #21
 8006490:	4311      	orrs	r1, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006496:	0852      	lsrs	r2, r2, #1
 8006498:	3a01      	subs	r2, #1
 800649a:	0652      	lsls	r2, r2, #25
 800649c:	4311      	orrs	r1, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064a2:	06d2      	lsls	r2, r2, #27
 80064a4:	430a      	orrs	r2, r1
 80064a6:	4943      	ldr	r1, [pc, #268]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ac:	4b41      	ldr	r3, [pc, #260]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a40      	ldr	r2, [pc, #256]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064b8:	4b3e      	ldr	r3, [pc, #248]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a3d      	ldr	r2, [pc, #244]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fa ffe4 	bl	8001490 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064cc:	f7fa ffe0 	bl	8001490 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e066      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064de:	4b35      	ldr	r3, [pc, #212]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x530>
 80064ea:	e05e      	b.n	80065aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ec:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a30      	ldr	r2, [pc, #192]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 80064f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fa ffca 	bl	8001490 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006500:	f7fa ffc6 	bl	8001490 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e04c      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006512:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800651e:	4b25      	ldr	r3, [pc, #148]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	4924      	ldr	r1, [pc, #144]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 8006524:	4b25      	ldr	r3, [pc, #148]	@ (80065bc <HAL_RCC_OscConfig+0x620>)
 8006526:	4013      	ands	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
 800652a:	e03e      	b.n	80065aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e039      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006538:	4b1e      	ldr	r3, [pc, #120]	@ (80065b4 <HAL_RCC_OscConfig+0x618>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0203 	and.w	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	429a      	cmp	r2, r3
 800654a:	d12c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	3b01      	subs	r3, #1
 8006558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d123      	bne.n	80065a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d11b      	bne.n	80065a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d113      	bne.n	80065a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	3b01      	subs	r3, #1
 800658c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800658e:	429a      	cmp	r2, r3
 8006590:	d109      	bne.n	80065a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	3b01      	subs	r3, #1
 80065a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d001      	beq.n	80065aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40021000 	.word	0x40021000
 80065b8:	019f800c 	.word	0x019f800c
 80065bc:	feeefffc 	.word	0xfeeefffc

080065c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e11e      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d8:	4b91      	ldr	r3, [pc, #580]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d910      	bls.n	8006608 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e6:	4b8e      	ldr	r3, [pc, #568]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 020f 	bic.w	r2, r3, #15
 80065ee:	498c      	ldr	r1, [pc, #560]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d001      	beq.n	8006608 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e106      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d073      	beq.n	80066fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d129      	bne.n	8006670 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800661c:	4b81      	ldr	r3, [pc, #516]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0f4      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800662c:	f000 f966 	bl	80068fc <RCC_GetSysClockFreqFromPLLSource>
 8006630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4a7c      	ldr	r2, [pc, #496]	@ (8006828 <HAL_RCC_ClockConfig+0x268>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d93f      	bls.n	80066ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800663a:	4b7a      	ldr	r3, [pc, #488]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800664e:	2b00      	cmp	r3, #0
 8006650:	d033      	beq.n	80066ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006656:	2b00      	cmp	r3, #0
 8006658:	d12f      	bne.n	80066ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800665a:	4b72      	ldr	r3, [pc, #456]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006662:	4a70      	ldr	r2, [pc, #448]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 8006664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006668:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e024      	b.n	80066ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d107      	bne.n	8006688 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006678:	4b6a      	ldr	r3, [pc, #424]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0c6      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006688:	4b66      	ldr	r3, [pc, #408]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0be      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006698:	f000 f8ce 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 800669c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4a61      	ldr	r2, [pc, #388]	@ (8006828 <HAL_RCC_ClockConfig+0x268>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d909      	bls.n	80066ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ae:	4a5d      	ldr	r2, [pc, #372]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80066b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4957      	ldr	r1, [pc, #348]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066cc:	f7fa fee0 	bl	8001490 <HAL_GetTick>
 80066d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d4:	f7fa fedc 	bl	8001490 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e095      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ea:	4b4e      	ldr	r3, [pc, #312]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 020c 	and.w	r2, r3, #12
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d1eb      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d023      	beq.n	8006750 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006714:	4b43      	ldr	r3, [pc, #268]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4a42      	ldr	r2, [pc, #264]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800671a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800671e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800672c:	4b3d      	ldr	r3, [pc, #244]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006734:	4a3b      	ldr	r2, [pc, #236]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 8006736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800673a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673c:	4b39      	ldr	r3, [pc, #228]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4936      	ldr	r1, [pc, #216]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
 800674e:	e008      	b.n	8006762 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b80      	cmp	r3, #128	@ 0x80
 8006754:	d105      	bne.n	8006762 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006756:	4b33      	ldr	r3, [pc, #204]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	4a32      	ldr	r2, [pc, #200]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 800675c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006760:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006762:	4b2f      	ldr	r3, [pc, #188]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d21d      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006770:	4b2b      	ldr	r3, [pc, #172]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 020f 	bic.w	r2, r3, #15
 8006778:	4929      	ldr	r1, [pc, #164]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006780:	f7fa fe86 	bl	8001490 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fa fe82 	bl	8001490 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e03b      	b.n	8006816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <HAL_RCC_ClockConfig+0x260>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d1ed      	bne.n	8006788 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4917      	ldr	r1, [pc, #92]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d6:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	490f      	ldr	r1, [pc, #60]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067ea:	f000 f825 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <HAL_RCC_ClockConfig+0x264>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	490c      	ldr	r1, [pc, #48]	@ (800682c <HAL_RCC_ClockConfig+0x26c>)
 80067fc:	5ccb      	ldrb	r3, [r1, r3]
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	fa22 f303 	lsr.w	r3, r2, r3
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <HAL_RCC_ClockConfig+0x270>)
 8006808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800680a:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <HAL_RCC_ClockConfig+0x274>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fa fdf2 	bl	80013f8 <HAL_InitTick>
 8006814:	4603      	mov	r3, r0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40022000 	.word	0x40022000
 8006824:	40021000 	.word	0x40021000
 8006828:	04c4b400 	.word	0x04c4b400
 800682c:	08007ba4 	.word	0x08007ba4
 8006830:	20000000 	.word	0x20000000
 8006834:	20000004 	.word	0x20000004

08006838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b04      	cmp	r3, #4
 8006848:	d102      	bne.n	8006850 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800684a:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e047      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006850:	4b27      	ldr	r3, [pc, #156]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 030c 	and.w	r3, r3, #12
 8006858:	2b08      	cmp	r3, #8
 800685a:	d102      	bne.n	8006862 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800685c:	4b26      	ldr	r3, [pc, #152]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e03e      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006862:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b0c      	cmp	r3, #12
 800686c:	d136      	bne.n	80068dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800686e:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006878:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	3301      	adds	r3, #1
 8006884:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d10c      	bne.n	80068a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800688c:	4a1a      	ldr	r2, [pc, #104]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006896:	68d2      	ldr	r2, [r2, #12]
 8006898:	0a12      	lsrs	r2, r2, #8
 800689a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	617b      	str	r3, [r7, #20]
      break;
 80068a4:	e00c      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068a6:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	4a10      	ldr	r2, [pc, #64]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b0:	68d2      	ldr	r2, [r2, #12]
 80068b2:	0a12      	lsrs	r2, r2, #8
 80068b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	617b      	str	r3, [r7, #20]
      break;
 80068be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	0e5b      	lsrs	r3, r3, #25
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	3301      	adds	r3, #1
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e001      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068e0:	693b      	ldr	r3, [r7, #16]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000
 80068f4:	00f42400 	.word	0x00f42400
 80068f8:	016e3600 	.word	0x016e3600

080068fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006902:	4b1e      	ldr	r3, [pc, #120]	@ (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800690c:	4b1b      	ldr	r3, [pc, #108]	@ (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d10c      	bne.n	800693a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006920:	4a17      	ldr	r2, [pc, #92]	@ (8006980 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	4a14      	ldr	r2, [pc, #80]	@ (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800692a:	68d2      	ldr	r2, [r2, #12]
 800692c:	0a12      	lsrs	r2, r2, #8
 800692e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	617b      	str	r3, [r7, #20]
    break;
 8006938:	e00c      	b.n	8006954 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800693a:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	4a0e      	ldr	r2, [pc, #56]	@ (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006944:	68d2      	ldr	r2, [r2, #12]
 8006946:	0a12      	lsrs	r2, r2, #8
 8006948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]
    break;
 8006952:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006954:	4b09      	ldr	r3, [pc, #36]	@ (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	0e5b      	lsrs	r3, r3, #25
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	3301      	adds	r3, #1
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800696e:	687b      	ldr	r3, [r7, #4]
}
 8006970:	4618      	mov	r0, r3
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40021000 	.word	0x40021000
 8006980:	016e3600 	.word	0x016e3600
 8006984:	00f42400 	.word	0x00f42400

08006988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006990:	2300      	movs	r3, #0
 8006992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006994:	2300      	movs	r3, #0
 8006996:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8098 	beq.w	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069aa:	4b43      	ldr	r3, [pc, #268]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	4b40      	ldr	r3, [pc, #256]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ba:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ce:	2301      	movs	r3, #1
 80069d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4b3a      	ldr	r3, [pc, #232]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a39      	ldr	r2, [pc, #228]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069de:	f7fa fd57 	bl	8001490 <HAL_GetTick>
 80069e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e4:	e009      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fa fd53 	bl	8001490 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d902      	bls.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	74fb      	strb	r3, [r7, #19]
        break;
 80069f8:	e005      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fa:	4b30      	ldr	r3, [pc, #192]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0ef      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d159      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d019      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a28:	4b23      	ldr	r3, [pc, #140]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a34:	4b20      	ldr	r3, [pc, #128]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a44:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a54:	4a18      	ldr	r2, [pc, #96]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fa fd13 	bl	8001490 <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6c:	e00b      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fa fd0f 	bl	8001490 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d902      	bls.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	74fb      	strb	r3, [r7, #19]
            break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a86:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ec      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9a:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	4903      	ldr	r1, [pc, #12]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	74bb      	strb	r3, [r7, #18]
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac4:	7c7b      	ldrb	r3, [r7, #17]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aca:	4ba7      	ldr	r3, [pc, #668]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	4aa6      	ldr	r2, [pc, #664]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae2:	4ba1      	ldr	r3, [pc, #644]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae8:	f023 0203 	bic.w	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	499d      	ldr	r1, [pc, #628]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b04:	4b98      	ldr	r3, [pc, #608]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0a:	f023 020c 	bic.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4995      	ldr	r1, [pc, #596]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b26:	4b90      	ldr	r3, [pc, #576]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	498c      	ldr	r1, [pc, #560]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b48:	4b87      	ldr	r3, [pc, #540]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4984      	ldr	r1, [pc, #528]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	497b      	ldr	r1, [pc, #492]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b8c:	4b76      	ldr	r3, [pc, #472]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	4973      	ldr	r1, [pc, #460]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bae:	4b6e      	ldr	r3, [pc, #440]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	496a      	ldr	r1, [pc, #424]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bd0:	4b65      	ldr	r3, [pc, #404]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4962      	ldr	r1, [pc, #392]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	4959      	ldr	r1, [pc, #356]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c14:	4b54      	ldr	r3, [pc, #336]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c1a:	f023 0203 	bic.w	r2, r3, #3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	4951      	ldr	r1, [pc, #324]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b4c      	ldr	r3, [pc, #304]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c44:	4948      	ldr	r1, [pc, #288]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d015      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c58:	4b43      	ldr	r3, [pc, #268]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c66:	4940      	ldr	r1, [pc, #256]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c76:	d105      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c78:	4b3b      	ldr	r3, [pc, #236]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c90:	4b35      	ldr	r3, [pc, #212]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9e:	4932      	ldr	r1, [pc, #200]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cae:	d105      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc8:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	4924      	ldr	r1, [pc, #144]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce6:	d105      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a1e      	ldr	r2, [pc, #120]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d00:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0e:	4916      	ldr	r1, [pc, #88]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d1e:	d105      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d20:	4b11      	ldr	r3, [pc, #68]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a10      	ldr	r2, [pc, #64]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d019      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	4908      	ldr	r1, [pc, #32]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d58:	4b03      	ldr	r3, [pc, #12]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d62:	60d3      	str	r3, [r2, #12]
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d78:	4b29      	ldr	r3, [pc, #164]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d86:	4926      	ldr	r1, [pc, #152]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d96:	d105      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d98:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006da2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006db0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dbe:	4918      	ldr	r1, [pc, #96]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dce:	d105      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dd0:	4b13      	ldr	r3, [pc, #76]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006de8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df6:	490a      	ldr	r1, [pc, #40]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e06:	d105      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4a04      	ldr	r2, [pc, #16]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000

08006e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e049      	b.n	8006eca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fa f988 	bl	8001160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f000 f94a 	bl	80070fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e0ff      	b.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b14      	cmp	r3, #20
 8006efe:	f200 80f0 	bhi.w	80070e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	080070e3 	.word	0x080070e3
 8006f10:	080070e3 	.word	0x080070e3
 8006f14:	080070e3 	.word	0x080070e3
 8006f18:	08006f9d 	.word	0x08006f9d
 8006f1c:	080070e3 	.word	0x080070e3
 8006f20:	080070e3 	.word	0x080070e3
 8006f24:	080070e3 	.word	0x080070e3
 8006f28:	08006fdf 	.word	0x08006fdf
 8006f2c:	080070e3 	.word	0x080070e3
 8006f30:	080070e3 	.word	0x080070e3
 8006f34:	080070e3 	.word	0x080070e3
 8006f38:	0800701f 	.word	0x0800701f
 8006f3c:	080070e3 	.word	0x080070e3
 8006f40:	080070e3 	.word	0x080070e3
 8006f44:	080070e3 	.word	0x080070e3
 8006f48:	08007061 	.word	0x08007061
 8006f4c:	080070e3 	.word	0x080070e3
 8006f50:	080070e3 	.word	0x080070e3
 8006f54:	080070e3 	.word	0x080070e3
 8006f58:	080070a1 	.word	0x080070a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 f97e 	bl	8007264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0208 	orr.w	r2, r2, #8
 8006f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0204 	bic.w	r2, r2, #4
 8006f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6999      	ldr	r1, [r3, #24]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	619a      	str	r2, [r3, #24]
      break;
 8006f9a:	e0a5      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f9f8 	bl	8007398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	619a      	str	r2, [r3, #24]
      break;
 8006fdc:	e084      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fa6b 	bl	80074c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0208 	orr.w	r2, r2, #8
 8006ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0204 	bic.w	r2, r2, #4
 8007008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69d9      	ldr	r1, [r3, #28]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	61da      	str	r2, [r3, #28]
      break;
 800701c:	e064      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fadd 	bl	80075e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	021a      	lsls	r2, r3, #8
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	61da      	str	r2, [r3, #28]
      break;
 800705e:	e043      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fb50 	bl	800770c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0208 	orr.w	r2, r2, #8
 800707a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0204 	bic.w	r2, r2, #4
 800708a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800709e:	e023      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fb9a 	bl	80077e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80070e0:	e002      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	75fb      	strb	r3, [r7, #23]
      break;
 80070e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a4c      	ldr	r2, [pc, #304]	@ (8007240 <TIM_Base_SetConfig+0x144>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d017      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711a:	d013      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a49      	ldr	r2, [pc, #292]	@ (8007244 <TIM_Base_SetConfig+0x148>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00f      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a48      	ldr	r2, [pc, #288]	@ (8007248 <TIM_Base_SetConfig+0x14c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a47      	ldr	r2, [pc, #284]	@ (800724c <TIM_Base_SetConfig+0x150>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a46      	ldr	r2, [pc, #280]	@ (8007250 <TIM_Base_SetConfig+0x154>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0x48>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a45      	ldr	r2, [pc, #276]	@ (8007254 <TIM_Base_SetConfig+0x158>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d108      	bne.n	8007156 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a39      	ldr	r2, [pc, #228]	@ (8007240 <TIM_Base_SetConfig+0x144>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d023      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d01f      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a36      	ldr	r2, [pc, #216]	@ (8007244 <TIM_Base_SetConfig+0x148>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01b      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a35      	ldr	r2, [pc, #212]	@ (8007248 <TIM_Base_SetConfig+0x14c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d017      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a34      	ldr	r2, [pc, #208]	@ (800724c <TIM_Base_SetConfig+0x150>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a33      	ldr	r2, [pc, #204]	@ (8007250 <TIM_Base_SetConfig+0x154>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00f      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a33      	ldr	r2, [pc, #204]	@ (8007258 <TIM_Base_SetConfig+0x15c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00b      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a32      	ldr	r2, [pc, #200]	@ (800725c <TIM_Base_SetConfig+0x160>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a31      	ldr	r2, [pc, #196]	@ (8007260 <TIM_Base_SetConfig+0x164>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_Base_SetConfig+0xaa>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007254 <TIM_Base_SetConfig+0x158>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d108      	bne.n	80071b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a18      	ldr	r2, [pc, #96]	@ (8007240 <TIM_Base_SetConfig+0x144>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <TIM_Base_SetConfig+0x110>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007250 <TIM_Base_SetConfig+0x154>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00f      	beq.n	800720c <TIM_Base_SetConfig+0x110>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007258 <TIM_Base_SetConfig+0x15c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00b      	beq.n	800720c <TIM_Base_SetConfig+0x110>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a19      	ldr	r2, [pc, #100]	@ (800725c <TIM_Base_SetConfig+0x160>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <TIM_Base_SetConfig+0x110>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a18      	ldr	r2, [pc, #96]	@ (8007260 <TIM_Base_SetConfig+0x164>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_Base_SetConfig+0x110>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <TIM_Base_SetConfig+0x158>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b01      	cmp	r3, #1
 8007224:	d105      	bne.n	8007232 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f023 0201 	bic.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]
  }
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40013400 	.word	0x40013400
 8007254:	40015000 	.word	0x40015000
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400
 8007260:	40014800 	.word	0x40014800

08007264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f023 0201 	bic.w	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 0302 	bic.w	r3, r3, #2
 80072b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <TIM_OC1_SetConfig+0x11c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <TIM_OC1_SetConfig+0x88>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007384 <TIM_OC1_SetConfig+0x120>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00f      	beq.n	80072ec <TIM_OC1_SetConfig+0x88>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007388 <TIM_OC1_SetConfig+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00b      	beq.n	80072ec <TIM_OC1_SetConfig+0x88>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a2d      	ldr	r2, [pc, #180]	@ (800738c <TIM_OC1_SetConfig+0x128>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d007      	beq.n	80072ec <TIM_OC1_SetConfig+0x88>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a2c      	ldr	r2, [pc, #176]	@ (8007390 <TIM_OC1_SetConfig+0x12c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC1_SetConfig+0x88>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007394 <TIM_OC1_SetConfig+0x130>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0308 	bic.w	r3, r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <TIM_OC1_SetConfig+0x11c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <TIM_OC1_SetConfig+0xd2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1c      	ldr	r2, [pc, #112]	@ (8007384 <TIM_OC1_SetConfig+0x120>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_OC1_SetConfig+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a1b      	ldr	r2, [pc, #108]	@ (8007388 <TIM_OC1_SetConfig+0x124>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_OC1_SetConfig+0xd2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a1a      	ldr	r2, [pc, #104]	@ (800738c <TIM_OC1_SetConfig+0x128>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_OC1_SetConfig+0xd2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a19      	ldr	r2, [pc, #100]	@ (8007390 <TIM_OC1_SetConfig+0x12c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_OC1_SetConfig+0xd2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a18      	ldr	r2, [pc, #96]	@ (8007394 <TIM_OC1_SetConfig+0x130>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d111      	bne.n	800735a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800733c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	621a      	str	r2, [r3, #32]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800
 8007394:	40015000 	.word	0x40015000

08007398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f023 0210 	bic.w	r2, r3, #16
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0320 	bic.w	r3, r3, #32
 80073e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a2c      	ldr	r2, [pc, #176]	@ (80074a8 <TIM_OC2_SetConfig+0x110>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_OC2_SetConfig+0x74>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a2b      	ldr	r2, [pc, #172]	@ (80074ac <TIM_OC2_SetConfig+0x114>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_OC2_SetConfig+0x74>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <TIM_OC2_SetConfig+0x118>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d10d      	bne.n	8007428 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1f      	ldr	r2, [pc, #124]	@ (80074a8 <TIM_OC2_SetConfig+0x110>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <TIM_OC2_SetConfig+0xc0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <TIM_OC2_SetConfig+0x114>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00f      	beq.n	8007458 <TIM_OC2_SetConfig+0xc0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a1e      	ldr	r2, [pc, #120]	@ (80074b4 <TIM_OC2_SetConfig+0x11c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_OC2_SetConfig+0xc0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a1d      	ldr	r2, [pc, #116]	@ (80074b8 <TIM_OC2_SetConfig+0x120>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_OC2_SetConfig+0xc0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a1c      	ldr	r2, [pc, #112]	@ (80074bc <TIM_OC2_SetConfig+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_OC2_SetConfig+0xc0>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a17      	ldr	r2, [pc, #92]	@ (80074b0 <TIM_OC2_SetConfig+0x118>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d113      	bne.n	8007480 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800745e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40013400 	.word	0x40013400
 80074b0:	40015000 	.word	0x40015000
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800

080074c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800750c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2b      	ldr	r2, [pc, #172]	@ (80075cc <TIM_OC3_SetConfig+0x10c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_OC3_SetConfig+0x72>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2a      	ldr	r2, [pc, #168]	@ (80075d0 <TIM_OC3_SetConfig+0x110>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC3_SetConfig+0x72>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a29      	ldr	r2, [pc, #164]	@ (80075d4 <TIM_OC3_SetConfig+0x114>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10d      	bne.n	800754e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800754c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1e      	ldr	r2, [pc, #120]	@ (80075cc <TIM_OC3_SetConfig+0x10c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <TIM_OC3_SetConfig+0xbe>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <TIM_OC3_SetConfig+0x110>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00f      	beq.n	800757e <TIM_OC3_SetConfig+0xbe>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1d      	ldr	r2, [pc, #116]	@ (80075d8 <TIM_OC3_SetConfig+0x118>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00b      	beq.n	800757e <TIM_OC3_SetConfig+0xbe>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1c      	ldr	r2, [pc, #112]	@ (80075dc <TIM_OC3_SetConfig+0x11c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d007      	beq.n	800757e <TIM_OC3_SetConfig+0xbe>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1b      	ldr	r2, [pc, #108]	@ (80075e0 <TIM_OC3_SetConfig+0x120>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d003      	beq.n	800757e <TIM_OC3_SetConfig+0xbe>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a16      	ldr	r2, [pc, #88]	@ (80075d4 <TIM_OC3_SetConfig+0x114>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d113      	bne.n	80075a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800758c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40015000 	.word	0x40015000
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40014400 	.word	0x40014400
 80075e0:	40014800 	.word	0x40014800

080075e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800761e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	031b      	lsls	r3, r3, #12
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2c      	ldr	r2, [pc, #176]	@ (80076f4 <TIM_OC4_SetConfig+0x110>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_OC4_SetConfig+0x74>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2b      	ldr	r2, [pc, #172]	@ (80076f8 <TIM_OC4_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC4_SetConfig+0x74>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a2a      	ldr	r2, [pc, #168]	@ (80076fc <TIM_OC4_SetConfig+0x118>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10d      	bne.n	8007674 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800765e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	031b      	lsls	r3, r3, #12
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a1f      	ldr	r2, [pc, #124]	@ (80076f4 <TIM_OC4_SetConfig+0x110>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <TIM_OC4_SetConfig+0xc0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1e      	ldr	r2, [pc, #120]	@ (80076f8 <TIM_OC4_SetConfig+0x114>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00f      	beq.n	80076a4 <TIM_OC4_SetConfig+0xc0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a1e      	ldr	r2, [pc, #120]	@ (8007700 <TIM_OC4_SetConfig+0x11c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00b      	beq.n	80076a4 <TIM_OC4_SetConfig+0xc0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <TIM_OC4_SetConfig+0x120>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d007      	beq.n	80076a4 <TIM_OC4_SetConfig+0xc0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <TIM_OC4_SetConfig+0x124>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC4_SetConfig+0xc0>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a17      	ldr	r2, [pc, #92]	@ (80076fc <TIM_OC4_SetConfig+0x118>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d113      	bne.n	80076cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	019b      	lsls	r3, r3, #6
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	019b      	lsls	r3, r3, #6
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40012c00 	.word	0x40012c00
 80076f8:	40013400 	.word	0x40013400
 80076fc:	40015000 	.word	0x40015000
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800

0800770c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800773a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	041b      	lsls	r3, r3, #16
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a19      	ldr	r2, [pc, #100]	@ (80077c8 <TIM_OC5_SetConfig+0xbc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <TIM_OC5_SetConfig+0x82>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a18      	ldr	r2, [pc, #96]	@ (80077cc <TIM_OC5_SetConfig+0xc0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00f      	beq.n	800778e <TIM_OC5_SetConfig+0x82>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a17      	ldr	r2, [pc, #92]	@ (80077d0 <TIM_OC5_SetConfig+0xc4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00b      	beq.n	800778e <TIM_OC5_SetConfig+0x82>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a16      	ldr	r2, [pc, #88]	@ (80077d4 <TIM_OC5_SetConfig+0xc8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d007      	beq.n	800778e <TIM_OC5_SetConfig+0x82>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a15      	ldr	r2, [pc, #84]	@ (80077d8 <TIM_OC5_SetConfig+0xcc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_OC5_SetConfig+0x82>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a14      	ldr	r2, [pc, #80]	@ (80077dc <TIM_OC5_SetConfig+0xd0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d109      	bne.n	80077a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40013400 	.word	0x40013400
 80077d0:	40014000 	.word	0x40014000
 80077d4:	40014400 	.word	0x40014400
 80077d8:	40014800 	.word	0x40014800
 80077dc:	40015000 	.word	0x40015000

080077e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800780e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	051b      	lsls	r3, r3, #20
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1a      	ldr	r2, [pc, #104]	@ (80078a0 <TIM_OC6_SetConfig+0xc0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <TIM_OC6_SetConfig+0x84>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a19      	ldr	r2, [pc, #100]	@ (80078a4 <TIM_OC6_SetConfig+0xc4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00f      	beq.n	8007864 <TIM_OC6_SetConfig+0x84>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a18      	ldr	r2, [pc, #96]	@ (80078a8 <TIM_OC6_SetConfig+0xc8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00b      	beq.n	8007864 <TIM_OC6_SetConfig+0x84>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a17      	ldr	r2, [pc, #92]	@ (80078ac <TIM_OC6_SetConfig+0xcc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC6_SetConfig+0x84>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a16      	ldr	r2, [pc, #88]	@ (80078b0 <TIM_OC6_SetConfig+0xd0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC6_SetConfig+0x84>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a15      	ldr	r2, [pc, #84]	@ (80078b4 <TIM_OC6_SetConfig+0xd4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d109      	bne.n	8007878 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800786a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	029b      	lsls	r3, r3, #10
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40013400 	.word	0x40013400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800
 80078b4:	40015000 	.word	0x40015000

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e074      	b.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a34      	ldr	r2, [pc, #208]	@ (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a33      	ldr	r2, [pc, #204]	@ (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a31      	ldr	r2, [pc, #196]	@ (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a21      	ldr	r2, [pc, #132]	@ (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d022      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d01d      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1f      	ldr	r2, [pc, #124]	@ (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d018      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1d      	ldr	r2, [pc, #116]	@ (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1c      	ldr	r2, [pc, #112]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00e      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a15      	ldr	r2, [pc, #84]	@ (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a18      	ldr	r2, [pc, #96]	@ (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a11      	ldr	r2, [pc, #68]	@ (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d10c      	bne.n	80079a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4313      	orrs	r3, r2
 800799e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40013400 	.word	0x40013400
 80079d0:	40015000 	.word	0x40015000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40014000 	.word	0x40014000

080079e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e078      	b.n	8007af2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007b00 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1b      	ldr	r2, [pc, #108]	@ (8007b04 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d11c      	bne.n	8007ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab0:	051b      	lsls	r3, r3, #20
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40013400 	.word	0x40013400
 8007b08:	40015000 	.word	0x40015000

08007b0c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007b22:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <memset>:
 8007b32:	4402      	add	r2, r0
 8007b34:	4603      	mov	r3, r0
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d100      	bne.n	8007b3c <memset+0xa>
 8007b3a:	4770      	bx	lr
 8007b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b40:	e7f9      	b.n	8007b36 <memset+0x4>
	...

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4d0d      	ldr	r5, [pc, #52]	@ (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	@ (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1b64      	subs	r4, r4, r5
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2600      	movs	r6, #0
 8007b50:	42a6      	cmp	r6, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4d0b      	ldr	r5, [pc, #44]	@ (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	@ (8007b88 <__libc_init_array+0x44>)
 8007b58:	f000 f818 	bl	8007b8c <_init>
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2600      	movs	r6, #0
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6c:	4798      	blx	r3
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b76:	4798      	blx	r3
 8007b78:	3601      	adds	r6, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	08007bb4 	.word	0x08007bb4
 8007b80:	08007bb4 	.word	0x08007bb4
 8007b84:	08007bb4 	.word	0x08007bb4
 8007b88:	08007bb8 	.word	0x08007bb8

08007b8c <_init>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr

08007b98 <_fini>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr
