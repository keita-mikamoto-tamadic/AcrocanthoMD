
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d7b8  0800d7b8  0000e7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7d8  0800d7d8  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7d8  0800d7d8  0000f06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7d8  0800d7d8  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0800d7d8  0800d7d8  0000e7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000020  0800d800  0800d800  0000e800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800d820  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  2000006c  0800d88c  0000f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800d88c  0000f7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049de7  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000083ab  00000000  00000000  00058e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002658  00000000  00000000  00061230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d3c  00000000  00000000  00063888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bb2  00000000  00000000  000655c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7d4  00000000  00000000  00096176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d319  00000000  00000000  000c094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001edc63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad58  00000000  00000000  001edca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001f8a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d7a0 	.word	0x0800d7a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	0800d7a0 	.word	0x0800d7a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <_ZN3Ang7raw2radEt>:

  void elecAngVel();

  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000a8c <_ZN3Ang7raw2radEt+0x38>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000a90 <_ZN3Ang7raw2radEt+0x3c>
 8000a76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a7a:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40c90fdb 	.word	0x40c90fdb
 8000a90:	45800000 	.word	0x45800000
 8000a94:	00000000 	.word	0x00000000

08000a98 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TASK_TIME * static_cast<float>(compTime));
 8000aa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000b20 <_ZN3Ang8raw2radsEs+0x88>
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000b24 <_ZN3Ang8raw2radsEs+0x8c>
 8000abc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ac0:	ee16 0a90 	vmov	r0, s13
 8000ac4:	f7ff fd0c 	bl	80004e0 <__aeabi_f2d>
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460d      	mov	r5, r1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7b9b      	ldrb	r3, [r3, #14]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad8:	ee17 0a90 	vmov	r0, s15
 8000adc:	f7ff fd00 	bl	80004e0 <__aeabi_f2d>
 8000ae0:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b18 <_ZN3Ang8raw2radsEs+0x80>)
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	f7ff fd53 	bl	8000590 <__aeabi_dmul>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4620      	mov	r0, r4
 8000af0:	4629      	mov	r1, r5
 8000af2:	f7ff fe77 	bl	80007e4 <__aeabi_ddiv>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	f7ff ff59 	bl	80009b4 <__aeabi_d2f>
 8000b02:	4603      	mov	r3, r0
 8000b04:	ee07 3a90 	vmov	s15, r3
  }
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	f3af 8000 	nop.w
 8000b18:	be86607f 	.word	0xbe86607f
 8000b1c:	3f1a35b3 	.word	0x3f1a35b3
 8000b20:	40c90fdb 	.word	0x40c90fdb
 8000b24:	45800000 	.word	0x45800000

08000b28 <_ZN6CanCom7getDataEv>:
  void rxFifo0Callback(uint32_t RxFifo0ITs);
  void handleRxData();
  void rxTask();
  void txTask();

  CanData* getData() { return data.get(); }
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fafb 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
extern I2C_HandleTypeDef hi2c1;

Ang ang(hi2c1);
extern CanCom cancom;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fb23 	bl	800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x6c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	731a      	strb	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	735a      	strb	r2, [r3, #13]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	739a      	strb	r2, [r3, #14]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	82da      	strh	r2, [r3, #22]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	831a      	strh	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	42480000 	.word	0x42480000

08000bb4 <_ZN3Ang4readEv>:

void Ang::read() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b1b      	ldrb	r3, [r3, #12]
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00c      	beq.n	8000be4 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	216c      	movs	r1, #108	@ 0x6c
 8000bda:	f008 fc49 	bl	8009470 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	731a      	strb	r2, [r3, #12]
  }
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00c      	beq.n	8000c24 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 0214 	add.w	r2, r3, #20
 8000c14:	2302      	movs	r3, #2
 8000c16:	216c      	movs	r1, #108	@ 0x6c
 8000c18:	f008 fd3e 	bl	8009698 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  }
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  read();
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffbd 	bl	8000bb4 <_ZN3Ang4readEv>
  receive();
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffd6 	bl	8000bec <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d033      	beq.n	8000cbe <_ZN3Ang8getAngleEv+0x92>
    rawAngPast = rawAng;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8ada      	ldrh	r2, [r3, #22]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	831a      	strh	r2, [r3, #24]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7d1b      	ldrb	r3, [r3, #20]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	7d52      	ldrb	r2, [r2, #21]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	82da      	strh	r2, [r3, #22]
    mechAngPast = data->mechAng;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 facd 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	61da      	str	r2, [r3, #28]
    data->mechAng = raw2rad(rawAng);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	8add      	ldrh	r5, [r3, #22]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fac3 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4629      	mov	r1, r5
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fede 	bl	8000a54 <_ZN3Ang7raw2radEt>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	edc4 7a02 	vstr	s15, [r4, #8]
    
    readStart = false;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
    i2c_rx_complete = false;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    // 速度時間割りのためのカウンタ保存
    compTime = comp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b5a      	ldrb	r2, [r3, #13]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	739a      	strb	r2, [r3, #14]
    comp = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	735a      	strb	r2, [r3, #13]

  } else ++comp;

}
 8000cbc:	e005      	b.n	8000cca <_ZN3Ang8getAngleEv+0x9e>
  } else ++comp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7b5b      	ldrb	r3, [r3, #13]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	735a      	strb	r2, [r3, #13]
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}

08000cd2 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000cd2:	b5b0      	push	{r4, r5, r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  if (comp) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7b5b      	ldrb	r3, [r3, #13]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d13c      	bne.n	8000d5c <_ZN3Ang6getVelEv+0x8a>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8ada      	ldrh	r2, [r3, #22]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8b1b      	ldrh	r3, [r3, #24]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	841a      	strh	r2, [r3, #32]

    // 0またぎ判定処理
    if (diff > ANG_RESL_12BIT / 2) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cfe:	db0a      	blt.n	8000d16 <_ZN3Ang6getVelEv+0x44>
      diff -= ANG_RESL_12BIT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	841a      	strh	r2, [r3, #32]
 8000d14:	e00f      	b.n	8000d36 <_ZN3Ang6getVelEv+0x64>
    } else if (diff < -ANG_RESL_12BIT / 2) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d1c:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000d20:	dc09      	bgt.n	8000d36 <_ZN3Ang6getVelEv+0x64>
      diff += ANG_RESL_12BIT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	841a      	strh	r2, [r3, #32]
    }
    
    data->actVel = raw2rads(diff);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fa68 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d44:	4604      	mov	r4, r0
 8000d46:	4629      	mov	r1, r5
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fea5 	bl	8000a98 <_ZN3Ang8raw2radsEs>
 8000d4e:	eef0 7a40 	vmov.f32	s15, s0
 8000d52:	edc4 7a04 	vstr	s15, [r4, #16]
    mechAngleVelLPF();
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f80e 	bl	8000d78 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fa58 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d6c:	8313      	strh	r3, [r2, #24]
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d78 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d8a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e40 <_ZN3Ang15mechAngleVelLPFEv+0xc8>
 8000d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TASK_TIME * static_cast<float>(compTime)) / timeConst;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7b9b      	ldrb	r3, [r3, #14]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000daa:	ee17 0a90 	vmov	r0, s15
 8000dae:	f7ff fb97 	bl	80004e0 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	@ (adr r3, 8000e38 <_ZN3Ang15mechAngleVelLPFEv+0xc0>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fbea 	bl	8000590 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fb8b 	bl	80004e0 <__aeabi_f2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4620      	mov	r0, r4
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff fd07 	bl	80007e4 <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fde9 	bl	80009b4 <__aeabi_d2f>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60bb      	str	r3, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fa13 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fa02 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e16:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9f9 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	ee78 7a88 	vadd.f32	s15, s17, s16
 8000e28:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	ecbd 8b02 	vpop	{d8}
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	be86607f 	.word	0xbe86607f
 8000e3c:	3f1a35b3 	.word	0x3f1a35b3
 8000e40:	40c90fdb 	.word	0x40c90fdb

08000e44 <_ZN3Ang7elecAngEf>:

float Ang::elecAng(float _eofs) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	ed87 0a00 	vstr	s0, [r7]
  // comp = 0のときサンプル値更新あり
  // 次の更新まで2周期を補間するので3で割った値を足す
  if (comp == 0) rawElecComp = rawAng;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7b5b      	ldrb	r3, [r3, #13]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <_ZN3Ang7elecAngEf+0x1e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8ada      	ldrh	r2, [r3, #22]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000e60:	e00f      	b.n	8000e82 <_ZN3Ang7elecAngEf+0x3e>
  else rawElecComp = rawAng + (diff / 3);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	8ada      	ldrh	r2, [r3, #22]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <_ZN3Ang7elecAngEf+0xcc>)
 8000e6e:	fb81 0103 	smull	r0, r1, r1, r3
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1acb      	subs	r3, r1, r3
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	859a      	strh	r2, [r3, #44]	@ 0x2c
  
  // 電気角反転
  static uint16_t elecAngtemp_ = 0;
  if (elecAngDir > 0) {
    elecAngtemp_ = rawElecComp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000e88:	801a      	strh	r2, [r3, #0]

  // CWとCCWを切替
  static float ofs_ = 0.0f;
  if (rotDir > 0) {
    ofs_ = _eofs + user2pi;
  }else ofs_ = _eofs; // 極性反転不要
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6013      	str	r3, [r2, #0]

  static uint16_t offset_ = 0;
  static uint16_t elecAngtemp2_ = 0;
  
  offset_ = static_cast<uint16_t>(ofs_ * static_cast<float>(ANG_RESL_12BIT) / user2pi);
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e9e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eaa:	ee17 3a90 	vmov	r3, s15
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
  elecAngtemp2_ = (elecAngtemp_ * polePairs + offset_) % ANG_RESL_12BIT;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <_ZN3Ang7elecAngEf+0xe4>)
 8000ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	12d9      	asrs	r1, r3, #11
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	1a5b      	subs	r3, r3, r1
 8000ede:	1ad1      	subs	r1, r2, r3
 8000ee0:	b28a      	uxth	r2, r1
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee4:	801a      	strh	r2, [r3, #0]

  return static_cast<float>(elecAngtemp2_) / static_cast<float>(ANG_RESL_12BIT) * user2pi;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	55555556 	.word	0x55555556
 8000f14:	200000b8 	.word	0x200000b8
 8000f18:	200000bc 	.word	0x200000bc
 8000f1c:	457ff000 	.word	0x457ff000
 8000f20:	40c90fdb 	.word	0x40c90fdb
 8000f24:	200000c0 	.word	0x200000c0
 8000f28:	80080081 	.word	0x80080081
 8000f2c:	200000c2 	.word	0x200000c2

08000f30 <_ZN3Ang14elecAngVirtualEf>:

float Ang::elecAngVirtual(float _virFreqRef) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	ed87 0a00 	vstr	s0, [r7]
  // 仮想電気角
  static float _theta = 0.0f;
  // タスク周期で分割して足しこむ
  float _deltatheta = _virFreqRef * TASK_TIME;
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a327      	add	r3, pc, #156	@ (adr r3, 8000fe0 <_ZN3Ang14elecAngVirtualEf+0xb0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd2e 	bl	80009b4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  _theta += _deltatheta;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

  // 0~1の範囲に収める
  if (_theta > 1.0f) _theta -= 1.0f;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd09      	ble.n	8000f98 <_ZN3Ang14elecAngVirtualEf+0x68>
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
  if (_theta < 0.0f) _theta += 1.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <_ZN3Ang14elecAngVirtualEf+0x8c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

  // ラジアンで返却
  return _theta * user2pi;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fdc <_ZN3Ang14elecAngVirtualEf+0xac>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	200000c4 	.word	0x200000c4
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	be86607f 	.word	0xbe86607f
 8000fe4:	3f1a35b3 	.word	0x3f1a35b3

08000fe8 <_ZN3Ang11elecAngleInEv>:

void Ang::elecAngleIn(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	ed2d 8b02 	vpush	{d8}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8000ff4:	481f      	ldr	r0, [pc, #124]	@ (8001074 <_ZN3Ang11elecAngleInEv+0x8c>)
 8000ff6:	f7ff fd97 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8000ffa:	60f8      	str	r0, [r7, #12]
  
  data->elecAngTest = elecAng(EOFS);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f908 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001004:	4604      	mov	r4, r0
 8001006:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff1a 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	edc4 7a07 	vstr	s15, [r4, #28]
  if (candata->virAngFreq > 0.0f) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	edd3 7a03 	vldr	s15, [r3, #12]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	dd11      	ble.n	800104c <_ZN3Ang11elecAngleInEv+0x64>
    data->elecAng = elecAngVirtual(candata->virAngFreq);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	ed93 8a03 	vldr	s16, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8ef 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001036:	4604      	mov	r4, r0
 8001038:	eeb0 0a48 	vmov.f32	s0, s16
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff77 	bl	8000f30 <_ZN3Ang14elecAngVirtualEf>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	edc4 7a00 	vstr	s15, [r4]
  } else {
    data->elecAng = elecAng(EOFS);
  }
}
 800104a:	e00d      	b.n	8001068 <_ZN3Ang11elecAngleInEv+0x80>
    data->elecAng = elecAng(EOFS);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f8e0 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001054:	4604      	mov	r4, r0
 8001056:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fef2 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	edc4 7a00 	vstr	s15, [r4]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	ecbd 8b02 	vpop	{d8}
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	200000c8 	.word	0x200000c8
 8001078:	40425c14 	.word	0x40425c14

0800107c <_ZNK3Ang14prepareCanDataEPhj>:

int16_t Ang::compAng() {
  return 0;
}

void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  memcpy(buffer, &(data->elecAng), sizeof(data->elecAng));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8c2 	bl	8001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001090:	4603      	mov	r3, r0
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80010e6:	f7ff ffdc 	bl	80010a2 <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000088 	.word	0x20000088

080010f8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001102:	f7ff ffdc 	bl	80010be <_ZN3Ang19i2cMasterRxCallbackEv>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000088 	.word	0x20000088

08001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f884 	bl	800122c <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f885 	bl	8001248 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN3Ang7AngDataC1Ev>:
  struct AngData{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	831a      	strh	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80011a4:	2020      	movs	r0, #32
 80011a6:	f00c f947 	bl	800d438 <_Znwj>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461c      	mov	r4, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	2320      	movs	r3, #32
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f00c fa21 	bl	800d5fc <memset>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ffc4 	bl	8001148 <_ZN3Ang7AngDataC1Ev>
 80011c0:	4621      	mov	r1, r4
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f85e 	bl	8001284 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f861 	bl	80012a2 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80011e0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f866 	bl	80012bc <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>
 80011f0:	4604      	mov	r4, r0
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 f86f 	bl	80012d6 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80011f8:	4603      	mov	r3, r0
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4620      	mov	r0, r4
 8001200:	f000 f874 	bl	80012ec <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>
	__ptr = pointer();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
      }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}

08001214 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	return get();
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff79 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 8001222:	4603      	mov	r3, r0
      }
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f868 	bl	800130c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800123c:	4603      	mov	r3, r0
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f867 	bl	8001326 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8001258:	4603      	mov	r3, r0
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f863 	bl	8001340 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffe6 	bl	8001264 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f85b 	bl	8001368 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f85b 	bl	8001382 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_+0x18>
 80012fc:	2120      	movs	r1, #32
 80012fe:	4618      	mov	r0, r3
 8001300:	f00c f898 	bl	800d434 <_ZdlPvj>
      }
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f840 	bl	800139c <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f83f 	bl	80013b4 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f83d 	bl	80013cc <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa5 	bl	80012a2 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001358:	4602      	mov	r2, r0
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f837 	bl	80013e6 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001378:	4603      	mov	r3, r0
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f836 	bl	80013fe <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f836 	bl	8001416 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f837 	bl	8001430 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f837 	bl	800144a <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f83b 	bl	800146a <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f83c 	bl	8001484 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f83b 	bl	800149c <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>
 8001426:	4603      	mov	r3, r0
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f839 	bl	80014b2 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>
 8001440:	4603      	mov	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f838 	bl	80014c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f840 	bl	80014e0 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f841 	bl	80014fc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f840 	bl	8001512 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>:
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>:
      _Tuple_impl()
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f82a 	bl	800152a <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>:
      constexpr _Head_base()
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f810 	bl	8001540 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_ZN3AngD1Ev>:
class Ang {
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe35 	bl	80011d0 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_Z41__static_initialization_and_destruction_0ii>:
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d108      	bne.n	8001592 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001586:	4293      	cmp	r3, r2
 8001588:	d103      	bne.n	8001592 <_Z41__static_initialization_and_destruction_0ii+0x22>
Ang ang(hi2c1);
 800158a:	4909      	ldr	r1, [pc, #36]	@ (80015b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800158e:	f7ff fad9 	bl	8000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80015a4:	f7ff ffd7 	bl	8001556 <_ZN3AngD1Ev>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200004a8 	.word	0x200004a8
 80015b4:	20000088 	.word	0x20000088

080015b8 <_GLOBAL__sub_I_ang>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ffd5 	bl	8001570 <_Z41__static_initialization_and_destruction_0ii>
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_GLOBAL__sub_D_ang>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ffcd 	bl	8001570 <_Z41__static_initialization_and_destruction_0ii>
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:
extern FDCAN_HandleTypeDef hfdcan1;

CanCom cancom(hfdcan1);
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
    data(std::make_unique<CanData>()) {}
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f9a9 	bl	800193c <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    data(std::make_unique<CanData>()) {}
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	609a      	str	r2, [r3, #8]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <_ZN6CanCom12initTxHeaderEmbb+0x28>
 8001634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001638:	e000      	b.n	800163c <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 800163a:	2200      	movs	r2, #0
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	60da      	str	r2, [r3, #12]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2208      	movs	r2, #8
 800164a:	615a      	str	r2, [r3, #20]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 8001658:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800165c:	e000      	b.n	8001660 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 800165e:	2200      	movs	r2, #0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	61da      	str	r2, [r3, #28]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 800166a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800166e:	e000      	b.n	8001672 <_ZN6CanCom12initTxHeaderEmbb+0x60>
 8001670:	2200      	movs	r2, #0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	621a      	str	r2, [r3, #32]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
  txHeader.MessageMarker = 0;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 800168e:	b580      	push	{r7, lr}
 8001690:	b088      	sub	sp, #32
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d902      	bls.n	80016a6 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 80016a0:	f002 fa56 	bl	8003b50 <Error_Handler>
 80016a4:	e02a      	b.n	80016fc <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e00c      	b.n	80016ce <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	f107 0214 	add.w	r2, r7, #20
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	460a      	mov	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3ee      	bcc.n	80016b4 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6858      	ldr	r0, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3308      	adds	r3, #8
 80016de:	f107 0214 	add.w	r2, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	f006 ffc4 	bl	8008670 <HAL_FDCAN_AddMessageToTxFifoQ>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 80016f8:	f002 fa2a 	bl	8003b50 <Error_Handler>
  }
}
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d028      	beq.n	8001768 <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6858      	ldr	r0, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	335c      	adds	r3, #92	@ 0x5c
 8001724:	2140      	movs	r1, #64	@ 0x40
 8001726:	f006 ffe7 	bl	80086f8 <HAL_FDCAN_GetRxMessage>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 800173a:	f002 fa09 	bl	8003b50 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f007 f8de 	bl	8008908 <HAL_FDCAN_ActivateNotification>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 800175c:	f002 f9f8 	bl	8003b50 <Error_Handler>
    }

    canRxInterrupt = true;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  }
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b01      	cmp	r3, #1
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d043      	beq.n	8001816 <_ZN6CanCom12handleRxDataEv+0xa6>
    data->genFuncRef = rxData[0];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f90f 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800179e:	7013      	strb	r3, [r2, #0]
    data->drvMdRef = rxData[1];
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f906 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80017b0:	7053      	strb	r3, [r2, #1]
    data->voltDRef = static_cast<float>(rxData[2]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 405e 	ldrb.w	r4, [r3, #94]	@ 0x5e
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f8fa 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	ee07 4a90 	vmov	s15, r4
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	edc3 7a01 	vstr	s15, [r3, #4]
    data->voltQRef = static_cast<float>(rxData[3]);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 405f 	ldrb.w	r4, [r3, #95]	@ 0x5f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f8ec 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80017dc:	4603      	mov	r3, r0
 80017de:	ee07 4a90 	vmov	s15, r4
 80017e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e6:	edc3 7a02 	vstr	s15, [r3, #8]
    data->virAngFreq = static_cast<float>(rxData[4]);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 4060 	ldrb.w	r4, [r3, #96]	@ 0x60
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f8de 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	ee07 4a90 	vmov	s15, r4
 80017fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001802:	edc3 7a03 	vstr	s15, [r3, #12]

    canRxInterrupt = false;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    canTxFlag = true;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  handleRxData();
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <_ZN6CanCom12handleRxDataEv>
  uint8_t currentGenFuncRef = data->genFuncRef;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f8c0 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001834:	4603      	mov	r3, r0
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <_ZN6CanCom6rxTaskEv+0x38>
    data->genFuncCheck = false;   
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f8b3 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800184e:	4603      	mov	r3, r0
 8001850:	2200      	movs	r2, #0
 8001852:	741a      	strb	r2, [r3, #16]
    return;
 8001854:	e00a      	b.n	800186c <_ZN6CanCom6rxTaskEv+0x4e>
  }
  data->genFuncCheck = true;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f8ab 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800185e:	4603      	mov	r3, r0
 8001860:	2201      	movs	r2, #1
 8001862:	741a      	strb	r2, [r3, #16]
  prevGenFuncRef = currentGenFuncRef;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d019      	beq.n	80018bc <_ZN6CanCom6txTaskEv+0x48>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f892 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001890:	4603      	mov	r3, r0
 8001892:	3311      	adds	r3, #17
 8001894:	2208      	movs	r2, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480a      	ldr	r0, [pc, #40]	@ (80018c4 <_ZN6CanCom6txTaskEv+0x50>)
 800189a:	f7ff fbef 	bl	800107c <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f887 	bl	80019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	3311      	adds	r3, #17
 80018aa:	2208      	movs	r2, #8
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff feed 	bl	800168e <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000088 	.word	0x20000088

080018c8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 80018d6:	f7ff ff14 	bl	8001702 <_ZN6CanCom15rxFifo0CallbackEm>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000c8 	.word	0x200000c8

080018e8 <_ZN6CanCom7CanDataC1Ev>:
  struct CanData {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	705a      	strb	r2, [r3, #1]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	741a      	strb	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3311      	adds	r3, #17
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3319      	adds	r3, #25
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001944:	2024      	movs	r0, #36	@ 0x24
 8001946:	f00b fd77 	bl	800d438 <_Znwj>
 800194a:	4603      	mov	r3, r0
 800194c:	461c      	mov	r4, r3
 800194e:	4620      	mov	r0, r4
 8001950:	2324      	movs	r3, #36	@ 0x24
 8001952:	461a      	mov	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	f00b fe51 	bl	800d5fc <memset>
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff ffc4 	bl	80018e8 <_ZN6CanCom7CanDataC1Ev>
 8001960:	4621      	mov	r1, r4
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f842 	bl	80019ec <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}

08001970 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f845 	bl	8001a0a <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001980:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f84a 	bl	8001a24 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>
 8001990:	4604      	mov	r4, r0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f853 	bl	8001a3e <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8001998:	4603      	mov	r3, r0
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4620      	mov	r0, r4
 80019a0:	f000 f858 	bl	8001a54 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>
	__ptr = pointer();
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
      }
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	return get();
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fbb6 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 80019c2:	4603      	mov	r3, r0
      }
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f849 	bl	8001a74 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffe6 	bl	80019cc <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f841 	bl	8001a9c <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f841 	bl	8001ab6 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_+0x18>
 8001a64:	2124      	movs	r1, #36	@ 0x24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00b fce4 	bl	800d434 <_ZdlPvj>
      }
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f825 	bl	8001ad0 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffbf 	bl	8001a0a <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f81f 	bl	8001aea <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f81e 	bl	8001b02 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f81d 	bl	8001b1a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f821 	bl	8001b3a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f822 	bl	8001b54 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f822 	bl	8001b6c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f82a 	bl	8001b84 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f82b 	bl	8001ba0 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f82a 	bl	8001bb6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>:
      _Tuple_impl()
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f82a 	bl	8001bce <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>:
      constexpr _Head_base()
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f810 	bl	8001be4 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_ZN6CanComD1Ev>:
class CanCom {
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff feb3 	bl	8001970 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_Z41__static_initialization_and_destruction_0ii>:
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d103      	bne.n	8001c36 <_Z41__static_initialization_and_destruction_0ii+0x22>
CanCom cancom(hfdcan1);
 8001c2e:	4909      	ldr	r1, [pc, #36]	@ (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001c32:	f7ff fcd1 	bl	80015d8 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d102      	bne.n	8001c4c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c46:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001c48:	f7ff ffd7 	bl	8001bfa <_ZN6CanComD1Ev>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000444 	.word	0x20000444
 8001c58:	200000c8 	.word	0x200000c8

08001c5c <_GLOBAL__sub_I_cancom>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ffd5 	bl	8001c14 <_Z41__static_initialization_and_destruction_0ii>
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_GLOBAL__sub_D_cancom>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff ffcd 	bl	8001c14 <_Z41__static_initialization_and_destruction_0ii>
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZNK3Ang10getAngDataEv>:
  void elecAngleIn();
  void i2cMasterTxCallback();
  void i2cMasterRxCallback();
  void prepareCanData(uint8_t* buffer, size_t bufferSize) const;
  
  AngData* getAngData() const { return data.get(); }
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fa44 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZNK4Util11getUtilDataEv>:
public:
  Util();
  
  void genFuncCtrl();

  UtilData* getUtilData() const { return data.get(); }
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fc72 	bl	800258a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN12ElecangCalibC1Ev>:
extern Ang ang;
extern UserTask usertask;
extern Util util;
extern CanCom cancom;

ElecangCalib::ElecangCalib()
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ElecangCalibData>()){}
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fc90 	bl	80025e0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	711a      	strb	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	332c      	adds	r3, #44	@ 0x2c
 8001d0c:	22f0      	movs	r2, #240	@ 0xf0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00b fc73 	bl	800d5fc <memset>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8001d1c:	22f0      	movs	r2, #240	@ 0xf0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00b fc6b 	bl	800d5fc <memset>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN12ElecangCalib10elecCalSeqEv>:

void ElecangCalib::elecCalSeq(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	ed2d 8b02 	vpush	{d8}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8001d3c:	48c1      	ldr	r0, [pc, #772]	@ (8002044 <_ZN12ElecangCalib10elecCalSeqEv+0x314>)
 8001d3e:	f7ff ffaa 	bl	8001c96 <_ZNK4Util11getUtilDataEv>
 8001d42:	60f8      	str	r0, [r7, #12]
  CanCom::CanData* candata = cancom.getData();
 8001d44:	48c0      	ldr	r0, [pc, #768]	@ (8002048 <_ZN12ElecangCalib10elecCalSeqEv+0x318>)
 8001d46:	f7fe feef 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8001d4a:	60b8      	str	r0, [r7, #8]

  static SeqID_t seqID = INIT;
  static SeqID_t seqID_prev = STEP00;
  float elecAngOfsCur = 0.0f;
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  float ecalVoltDRef = STIMUL_VOLTDREF;
 8001d52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d56:	613b      	str	r3, [r7, #16]
  
  if (candata->voltQRef > STIMUL_VOLTDREF) ecalVoltDRef = candata->voltQRef;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	dd02      	ble.n	8001d72 <_ZN12ElecangCalib10elecCalSeqEv+0x42>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
  
  switch (seqID) {
 8001d72:	4bb6      	ldr	r3, [pc, #728]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	f200 81e4 	bhi.w	8002144 <_ZN12ElecangCalib10elecCalSeqEv+0x414>
 8001d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <_ZN12ElecangCalib10elecCalSeqEv+0x54>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001ddb 	.word	0x08001ddb
 8001d88:	08001e15 	.word	0x08001e15
 8001d8c:	08001e8f 	.word	0x08001e8f
 8001d90:	08001ed1 	.word	0x08001ed1
 8001d94:	08001f53 	.word	0x08001f53
 8001d98:	08002145 	.word	0x08002145
 8001d9c:	08002145 	.word	0x08002145
 8001da0:	08002145 	.word	0x08002145
 8001da4:	08002145 	.word	0x08002145
 8001da8:	08002145 	.word	0x08002145
 8001dac:	08002145 	.word	0x08002145
 8001db0:	08002145 	.word	0x08002145
 8001db4:	08002145 	.word	0x08002145
 8001db8:	08001dc9 	.word	0x08001dc9
 8001dbc:	08002095 	.word	0x08002095
 8001dc0:	08002145 	.word	0x08002145
 8001dc4:	08002069 	.word	0x08002069
    case INIT:
      if (utildata->eCalib) {
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 81bd 	beq.w	800214c <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
        seqID = STEP00;
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001dd8:	e1b8      	b.n	800214c <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
    // 正の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRPに正の回転方向でのオフセット値を記録
    case STEP00:
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsRP, CALIB_ROUGH)){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3308      	adds	r3, #8
 8001dde:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8002050 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001de2:	4619      	mov	r1, r3
 8001de4:	edd7 0a05 	vldr	s1, [r7, #20]
 8001de8:	ed97 0a04 	vldr	s0, [r7, #16]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f9c3 	bl	8002178 <_ZN12ElecangCalib8calibSubEffPff>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 81ab 	beq.w	8002150 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
        seqID_prev = STEP00;
 8001dfa:	4b96      	ldr	r3, [pc, #600]	@ (8002054 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d101      	bne.n	8001e0c <_ZN12ElecangCalib10elecCalSeqEv+0xdc>
 8001e08:	2210      	movs	r2, #16
 8001e0a:	e000      	b.n	8001e0e <_ZN12ElecangCalib10elecCalSeqEv+0xde>
 8001e0c:	220e      	movs	r2, #14
 8001e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001e10:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001e12:	e19d      	b.n	8002150 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
    // 正の電圧印可 電気角オフセット遷移はelecAngOfsRPからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFPに正の回転方向での詳細オフセット値を記録
    case STEP01:
      elecAngOfsCur = elecAngOfsRP - (FINE_WIDTH / 2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e1a:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8002058 <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e22:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d507      	bpl.n	8001e44 <_ZN12ElecangCalib10elecCalSeqEv+0x114>
 8001e34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e38:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800205c <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e40:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsFP, CALIB_FINE)){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3310      	adds	r3, #16
 8001e48:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8002060 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	edd7 0a05 	vldr	s1, [r7, #20]
 8001e52:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f98e 	bl	8002178 <_ZN12ElecangCalib8calibSubEffPff>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8178 	beq.w	8002154 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
        seqID_prev = STEP01;
 8001e64:	4b7b      	ldr	r3, [pc, #492]	@ (8002054 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	d101      	bne.n	8001e76 <_ZN12ElecangCalib10elecCalSeqEv+0x146>
 8001e72:	2210      	movs	r2, #16
 8001e74:	e000      	b.n	8001e78 <_ZN12ElecangCalib10elecCalSeqEv+0x148>
 8001e76:	220e      	movs	r2, #14
 8001e78:	4b74      	ldr	r3, [pc, #464]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001e7a:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsPlus = elecAngOfsFP;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fbeb 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	6013      	str	r3, [r2, #0]
      }
      break;
 8001e8c:	e162      	b.n	8002154 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
      
    // 負の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRMに負の回転方向でのオフセット値を記録
    case STEP02:
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsRM, CALIB_ROUGH)){
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	eef1 7a67 	vneg.f32	s15, s15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8002050 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	edd7 0a05 	vldr	s1, [r7, #20]
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f965 	bl	8002178 <_ZN12ElecangCalib8calibSubEffPff>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8151 	beq.w	8002158 <_ZN12ElecangCalib10elecCalSeqEv+0x428>
        seqID_prev = STEP02;
 8001eb6:	4b67      	ldr	r3, [pc, #412]	@ (8002054 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	791b      	ldrb	r3, [r3, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d101      	bne.n	8001ec8 <_ZN12ElecangCalib10elecCalSeqEv+0x198>
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	e000      	b.n	8001eca <_ZN12ElecangCalib10elecCalSeqEv+0x19a>
 8001ec8:	220e      	movs	r2, #14
 8001eca:	4b60      	ldr	r3, [pc, #384]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001ecc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001ece:	e143      	b.n	8002158 <_ZN12ElecangCalib10elecCalSeqEv+0x428>
    // 負の電圧印可 電気角オフセット遷移はelecAngOfsRMからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFMに正の回転方向での詳細オフセット値を記録
    case STEP03:
      elecAngOfsCur = elecAngOfsRM - (FINE_WIDTH / 2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ed6:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002058 <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ede:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d507      	bpl.n	8001f00 <_ZN12ElecangCalib10elecCalSeqEv+0x1d0>
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800205c <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001efc:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsFM, CALIB_FINE)){
 8001f00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f04:	eef1 7a67 	vneg.f32	s15, s15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8002060 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001f10:	4619      	mov	r1, r3
 8001f12:	edd7 0a05 	vldr	s1, [r7, #20]
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f92c 	bl	8002178 <_ZN12ElecangCalib8calibSubEffPff>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 811a 	beq.w	800215c <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
        seqID_prev = STEP03;
 8001f28:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d101      	bne.n	8001f3a <_ZN12ElecangCalib10elecCalSeqEv+0x20a>
 8001f36:	2210      	movs	r2, #16
 8001f38:	e000      	b.n	8001f3c <_ZN12ElecangCalib10elecCalSeqEv+0x20c>
 8001f3a:	220e      	movs	r2, #14
 8001f3c:	4b43      	ldr	r3, [pc, #268]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001f3e:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsMinus = elecAngOfsFM;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fb89 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	6053      	str	r3, [r2, #4]
      }
      break;
 8001f50:	e104      	b.n	800215c <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
      
    case STEP04:
      // 最終オフセット値算出
      if (!utildata->eCalib) { seqID = END; break; }
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <_ZN12ElecangCalib10elecCalSeqEv+0x238>
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001f62:	2210      	movs	r2, #16
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e0fa      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
      if (((elecAngOfsFP + userpi) < elecAngOfsFM) || (elecAngOfsFM < (elecAngOfsFP - userpi))) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f6e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002064 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	d40e      	bmi.n	8001fa4 <_ZN12ElecangCalib10elecCalSeqEv+0x274>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f92:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002064 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001f96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	d517      	bpl.n	8001fd4 <_ZN12ElecangCalib10elecCalSeqEv+0x2a4>
        data->elecAngOfs = ((elecAngOfsFP + elecAngOfsFM) / 2) - userpi;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001fb8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fb4b 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8002064 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001fca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001fce:	edc3 7a04 	vstr	s15, [r3, #16]
 8001fd2:	e012      	b.n	8001ffa <_ZN12ElecangCalib10elecCalSeqEv+0x2ca>
      } else {
        data->elecAngOfs = (elecAngOfsFP + elecAngOfsFM) / 2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fe0:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb37 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ff2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ff6:	edc3 7a04 	vstr	s15, [r3, #16]
      }
      if (data->elecAngOfs <= 0.0f) data->elecAngOfs += user2pi;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fb2c 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8002002:	4603      	mov	r3, r0
 8002004:	edd3 7a04 	vldr	s15, [r3, #16]
 8002008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	bf94      	ite	ls
 8002012:	2301      	movls	r3, #1
 8002014:	2300      	movhi	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <_ZN12ElecangCalib10elecCalSeqEv+0x306>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fb1b 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8002024:	4603      	mov	r3, r0
 8002026:	edd3 7a04 	vldr	s15, [r3, #16]
 800202a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800205c <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 800202e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002032:	edc3 7a04 	vstr	s15, [r3, #16]
      seqID = END;
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8002038:	2210      	movs	r2, #16
 800203a:	701a      	strb	r2, [r3, #0]
      seqID_prev = IDLE;
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 800203e:	220e      	movs	r2, #14
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	e08c      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
 8002044:	20000650 	.word	0x20000650
 8002048:	200000c8 	.word	0x200000c8
 800204c:	20000000 	.word	0x20000000
 8002050:	3dd67750 	.word	0x3dd67750
 8002054:	2000033c 	.word	0x2000033c
 8002058:	3e99999a 	.word	0x3e99999a
 800205c:	40c90fdb 	.word	0x40c90fdb
 8002060:	3c23d70b 	.word	0x3c23d70b
 8002064:	40490fdb 	.word	0x40490fdb
      
    case END:
      data->drvMd = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 faf5 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8002070:	4603      	mov	r3, r0
 8002072:	2200      	movs	r2, #0
 8002074:	721a      	strb	r2, [r3, #8]
      data->voltQRef = 0.0f;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 faee 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 800207e:	4603      	mov	r3, r0
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
      utildata->eCalib = false;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
      seqID = INIT;
 800208c:	4b37      	ldr	r3, [pc, #220]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 800208e:	220d      	movs	r2, #13
 8002090:	701a      	strb	r2, [r3, #0]
      break;
 8002092:	e064      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    case IDLE:
      if (idleCount++ < 1000) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6191      	str	r1, [r2, #24]
 800209e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020a2:	4293      	cmp	r3, r2
 80020a4:	bfd4      	ite	le
 80020a6:	2301      	movle	r3, #1
 80020a8:	2300      	movgt	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00f      	beq.n	80020d0 <_ZN12ElecangCalib10elecCalSeqEv+0x3a0>
        data->drvMd = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fad1 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	721a      	strb	r2, [r3, #8]
        data->voltQRef = 0.0f;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 faca 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
        break;
 80020ce:	e046      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>

      } else {
        idleCount = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
        switch (seqID_prev)
 80020d6:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <_ZN12ElecangCalib10elecCalSeqEv+0x440>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b0e      	cmp	r3, #14
 80020dc:	d830      	bhi.n	8002140 <_ZN12ElecangCalib10elecCalSeqEv+0x410>
 80020de:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <_ZN12ElecangCalib10elecCalSeqEv+0x3b4>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	08002121 	.word	0x08002121
 80020e8:	08002129 	.word	0x08002129
 80020ec:	08002131 	.word	0x08002131
 80020f0:	08002139 	.word	0x08002139
 80020f4:	08002141 	.word	0x08002141
 80020f8:	08002141 	.word	0x08002141
 80020fc:	08002141 	.word	0x08002141
 8002100:	08002141 	.word	0x08002141
 8002104:	08002141 	.word	0x08002141
 8002108:	08002141 	.word	0x08002141
 800210c:	08002141 	.word	0x08002141
 8002110:	08002141 	.word	0x08002141
 8002114:	08002141 	.word	0x08002141
 8002118:	08002141 	.word	0x08002141
 800211c:	08002141 	.word	0x08002141
        {
        case STEP00:
          seqID = STEP01;
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
          break;
 8002126:	e00c      	b.n	8002142 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP01:
          seqID = STEP02;
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
          break;
 800212e:	e008      	b.n	8002142 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP02:
          seqID = STEP03;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8002132:	2203      	movs	r2, #3
 8002134:	701a      	strb	r2, [r3, #0]
          break;
 8002136:	e004      	b.n	8002142 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP03:
          seqID = STEP04;
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 800213a:	2204      	movs	r2, #4
 800213c:	701a      	strb	r2, [r3, #0]
          break;
 800213e:	e000      	b.n	8002142 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case IDLE:
          break;  

        default:
          break;
 8002140:	bf00      	nop
        }
      }
      break;
 8002142:	e00c      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    default:
      seqID = INIT;
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8002146:	220d      	movs	r2, #13
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e008      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 800214c:	bf00      	nop
 800214e:	e006      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8002150:	bf00      	nop
 8002152:	e004      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8002154:	bf00      	nop
 8002156:	e002      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8002158:	bf00      	nop
 800215a:	e000      	b.n	800215e <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 800215c:	bf00      	nop
  }

}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	ecbd 8b02 	vpop	{d8}
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000
 8002170:	2000033c 	.word	0x2000033c
 8002174:	00000000 	.word	0x00000000

08002178 <_ZN12ElecangCalib8calibSubEffPff>:

bool ElecangCalib::calibSub(float _voltDRef, float _elecAngOfsCur, float *_elecAngOfsMax, float _calDelta) {
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b08a      	sub	sp, #40	@ 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6178      	str	r0, [r7, #20]
 8002180:	ed87 0a04 	vstr	s0, [r7, #16]
 8002184:	edc7 0a03 	vstr	s1, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	ed87 1a01 	vstr	s2, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 800218e:	48aa      	ldr	r0, [pc, #680]	@ (8002438 <_ZN12ElecangCalib8calibSubEffPff+0x2c0>)
 8002190:	f7ff fd74 	bl	8001c7c <_ZNK3Ang10getAngDataEv>
 8002194:	61f8      	str	r0, [r7, #28]
  Util::UtilData* utildata = util.getUtilData();
 8002196:	48a9      	ldr	r0, [pc, #676]	@ (800243c <_ZN12ElecangCalib8calibSubEffPff+0x2c4>)
 8002198:	f7ff fd7d 	bl	8001c96 <_ZNK4Util11getUtilDataEv>
 800219c:	61b8      	str	r0, [r7, #24]
  bool returnVal = false;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  // forloop用
  float velOutMax_ = 0.0f;
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  
  switch (seqIDSub) {
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	f200 81d4 	bhi.w	800255c <_ZN12ElecangCalib8calibSubEffPff+0x3e4>
 80021b4:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <_ZN12ElecangCalib8calibSubEffPff+0x44>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	08002201 	.word	0x08002201
 80021c0:	080022c9 	.word	0x080022c9
 80021c4:	08002409 	.word	0x08002409
 80021c8:	0800255d 	.word	0x0800255d
 80021cc:	0800255d 	.word	0x0800255d
 80021d0:	0800255d 	.word	0x0800255d
 80021d4:	0800255d 	.word	0x0800255d
 80021d8:	0800255d 	.word	0x0800255d
 80021dc:	0800255d 	.word	0x0800255d
 80021e0:	0800255d 	.word	0x0800255d
 80021e4:	0800255d 	.word	0x0800255d
 80021e8:	0800255d 	.word	0x0800255d
 80021ec:	0800255d 	.word	0x0800255d
 80021f0:	0800255d 	.word	0x0800255d
 80021f4:	0800255d 	.word	0x0800255d
 80021f8:	08002539 	.word	0x08002539
 80021fc:	0800250f 	.word	0x0800250f
    case STEP00:
      // Standby
      data->drvMd = 1;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fa29 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8002208:	4603      	mov	r3, r0
 800220a:	2201      	movs	r2, #1
 800220c:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa22 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	60d3      	str	r3, [r2, #12]
      elecAngOfsVal = _elecAngOfsCur;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
      angdata->elecAng += elecAngOfsVal;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	ed93 7a00 	vldr	s14, [r3]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	edd3 7a08 	vldr	s15, [r3, #32]
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <_ZN12ElecangCalib8calibSubEffPff+0xd6>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	220f      	movs	r2, #15
 800224a:	711a      	strb	r2, [r3, #4]
 800224c:	e18a      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < STANDBY_COUNT) {
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	61d1      	str	r1, [r2, #28]
 8002258:	f241 3287 	movw	r2, #4999	@ 0x1387
 800225c:	4293      	cmp	r3, r2
 800225e:	bfd4      	ite	le
 8002260:	2301      	movle	r3, #1
 8002262:	2300      	movgt	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d027      	beq.n	80022ba <_ZN12ElecangCalib8calibSubEffPff+0x142>
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f936 	bl	80004e0 <__aeabi_f2d>
 8002274:	a36c      	add	r3, pc, #432	@ (adr r3, 8002428 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f989 	bl	8000590 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f928 	bl	80004e0 <__aeabi_f2d>
 8002290:	a367      	add	r3, pc, #412	@ (adr r3, 8002430 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f97b 	bl	8000590 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fd ffbf 	bl	8000224 <__adddf3>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fb81 	bl	80009b4 <__aeabi_d2f>
 80022b2:	4602      	mov	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
      } else {
        count = 0;
        seqIDSub = STEP01;
      }
      break;
 80022b8:	e154      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        count = 0;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2200      	movs	r2, #0
 80022be:	61da      	str	r2, [r3, #28]
        seqIDSub = STEP01;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2201      	movs	r2, #1
 80022c4:	711a      	strb	r2, [r3, #4]
      break;
 80022c6:	e14d      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP01:
      // Run
      data->drvMd = 1;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f9c5 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2201      	movs	r2, #1
 80022d4:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f9be 	bl	800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	60d3      	str	r3, [r2, #12]
      angdata->elecAng += elecAngOfsVal;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80022f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <_ZN12ElecangCalib8calibSubEffPff+0x198>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	220f      	movs	r2, #15
 800230c:	711a      	strb	r2, [r3, #4]
 800230e:	e129      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < CALIB_COUNT) {
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	1c59      	adds	r1, r3, #1
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	61d1      	str	r1, [r2, #28]
 800231a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800231e:	4293      	cmp	r3, r2
 8002320:	bfd4      	ite	le
 8002322:	2301      	movle	r3, #1
 8002324:	2300      	movgt	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03b      	beq.n	80023a4 <_ZN12ElecangCalib8calibSubEffPff+0x22c>
        if (user2pi < angdata->elecAng) angdata->elecAng -= user2pi;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002440 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 8002336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	dd09      	ble.n	8002354 <_ZN12ElecangCalib8calibSubEffPff+0x1dc>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002440 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 800234a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	edc3 7a00 	vstr	s15, [r3]
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8c1 	bl	80004e0 <__aeabi_f2d>
 800235e:	a332      	add	r3, pc, #200	@ (adr r3, 8002428 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe f914 	bl	8000590 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8b3 	bl	80004e0 <__aeabi_f2d>
 800237a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002430 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f906 	bl	8000590 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4620      	mov	r0, r4
 800238a:	4629      	mov	r1, r5
 800238c:	f7fd ff4a 	bl	8000224 <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fb0c 	bl	80009b4 <__aeabi_d2f>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
        } else {
          indexnum = 0;
          seqIDSub = STEP02;
        }
      }
      break;
 80023a2:	e0df      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        if (indexnum < CALIB_NUM) {
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	2b3b      	cmp	r3, #59	@ 0x3b
 80023aa:	d826      	bhi.n	80023fa <_ZN12ElecangCalib8calibSubEffPff+0x282>
          count = 0;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
          velOut[indexnum] = velOutAxLast;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	330a      	adds	r3, #10
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3304      	adds	r3, #4
 80023c4:	601a      	str	r2, [r3, #0]
          elecAngOfs[indexnum] = elecAngOfsVal;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6a12      	ldr	r2, [r2, #32]
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	3346      	adds	r3, #70	@ 0x46
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3304      	adds	r3, #4
 80023d8:	601a      	str	r2, [r3, #0]
          elecAngOfsVal += _calDelta;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80023e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	edc3 7a08 	vstr	s15, [r3, #32]
          indexnum++;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80023f8:	e0b4      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
          indexnum = 0;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
          seqIDSub = STEP02;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2202      	movs	r2, #2
 8002404:	711a      	strb	r2, [r3, #4]
      break;
 8002406:	e0ad      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP02:
      // Mesuring
      
      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <_ZN12ElecangCalib8calibSubEffPff+0x2a6>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	220f      	movs	r2, #15
 800241a:	711a      	strb	r2, [r3, #4]
 800241c:	e0a2      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24
 8002424:	e068      	b.n	80024f8 <_ZN12ElecangCalib8calibSubEffPff+0x380>
 8002426:	bf00      	nop
 8002428:	1b24ce90 	.word	0x1b24ce90
 800242c:	3feff5b5 	.word	0x3feff5b5
 8002430:	b662dffe 	.word	0xb662dffe
 8002434:	3f5495c9 	.word	0x3f5495c9
 8002438:	20000088 	.word	0x20000088
 800243c:	20000650 	.word	0x20000650
 8002440:	40c90fdb 	.word	0x40c90fdb
        if ((_voltDRef > 0.0f) && (velOut[indexnum] >= velOutMax_)) {
 8002444:	edd7 7a04 	vldr	s15, [r7, #16]
 8002448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002450:	dd23      	ble.n	800249a <_ZN12ElecangCalib8calibSubEffPff+0x322>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	330a      	adds	r3, #10
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3304      	adds	r3, #4
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ed97 7a08 	vldr	s14, [r7, #32]
 8002468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d813      	bhi.n	800249a <_ZN12ElecangCalib8calibSubEffPff+0x322>
          velOutMax_ = velOut[indexnum];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	330a      	adds	r3, #10
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3304      	adds	r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	3346      	adds	r3, #70	@ 0x46
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e029      	b.n	80024ee <_ZN12ElecangCalib8calibSubEffPff+0x376>
        }
        else if ((_voltDRef < 0.0f) && (velOut[indexnum] <= velOutMax_)) {
 800249a:	edd7 7a04 	vldr	s15, [r7, #16]
 800249e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	d522      	bpl.n	80024ee <_ZN12ElecangCalib8calibSubEffPff+0x376>
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	330a      	adds	r3, #10
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80024be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	db12      	blt.n	80024ee <_ZN12ElecangCalib8calibSubEffPff+0x376>
          velOutMax_ = velOut[indexnum];
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	330a      	adds	r3, #10
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	3346      	adds	r3, #70	@ 0x46
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	2b3b      	cmp	r3, #59	@ 0x3b
 80024fe:	d9a1      	bls.n	8002444 <_ZN12ElecangCalib8calibSubEffPff+0x2cc>
        }
      }
      indexnum = 0;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
      seqIDSub = END;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2210      	movs	r2, #16
 800250a:	711a      	strb	r2, [r3, #4]

      break;
 800250c:	e02a      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
      
    case END:
      // End
      count = 0;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
      returnVal = true;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      seqIDSub = STEP00;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	711a      	strb	r2, [r3, #4]
      break;
 8002536:	e015      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case FAIL:
      // キャンセル処理
      count = 0;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
      returnVal = true;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      
      break;
 800255a:	e003      	b.n	8002564 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    default:
    seqIDSub = STEP00;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	711a      	strb	r2, [r3, #4]
    break;
 8002562:	bf00      	nop
  } 
  return returnVal;
 8002564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bdb0      	pop	{r4, r5, r7, pc}

08002570 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f879 	bl	8002672 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002580:	4603      	mov	r3, r0
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f87a 	bl	800268e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 800259a:	4603      	mov	r3, r0
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>:
#define CALIB_NUM       (60)                           /* 分割数 [-] */

class ElecangCalib
{
public:
  struct ElecangCalibData
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	721a      	strb	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80025e8:	2014      	movs	r0, #20
 80025ea:	f00a ff25 	bl	800d438 <_Znwj>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461c      	mov	r4, r3
 80025f2:	4622      	mov	r2, r4
 80025f4:	2300      	movs	r3, #0
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	6053      	str	r3, [r2, #4]
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	60d3      	str	r3, [r2, #12]
 80025fe:	6113      	str	r3, [r2, #16]
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff ffcf 	bl	80025a4 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>
 8002606:	4621      	mov	r1, r4
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f85e 	bl	80026ca <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}

08002616 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002616:	b590      	push	{r4, r7, lr}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f861 	bl	80026e8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002626:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f866 	bl	8002702 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>
 8002636:	4604      	mov	r4, r0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f86f 	bl	800271c <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800263e:	4603      	mov	r3, r0
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4620      	mov	r0, r4
 8002646:	f000 f874 	bl	8002732 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>
	__ptr = pointer();
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
      }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}

0800265a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
	return get();
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff84 	bl	8002570 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8002668:	4603      	mov	r3, r0
      }
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f868 	bl	8002752 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002682:	4603      	mov	r3, r0
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f867 	bl	800276c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800269e:	4603      	mov	r3, r0
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f863 	bl	8002786 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ffe6 	bl	80026aa <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f85b 	bl	80027ae <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f85b 	bl	80027c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002712:	4603      	mov	r3, r0
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_+0x18>
 8002742:	2114      	movs	r1, #20
 8002744:	4618      	mov	r0, r3
 8002746:	f00a fe75 	bl	800d434 <_ZdlPvj>
      }
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f840 	bl	80027e2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002762:	4603      	mov	r3, r0
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f83f 	bl	80027fa <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f83d 	bl	8002812 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ffa5 	bl	80026e8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 800279e:	4602      	mov	r2, r0
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f837 	bl	800282c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80027be:	4603      	mov	r3, r0
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f836 	bl	8002844 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80027d8:	4603      	mov	r3, r0
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f836 	bl	800285c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f837 	bl	8002876 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002808:	4603      	mov	r3, r0
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f837 	bl	8002890 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f83b 	bl	80028b0 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f83c 	bl	80028ca <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002852:	4603      	mov	r3, r0
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f83b 	bl	80028e2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>
 800286c:	4603      	mov	r3, r0
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f839 	bl	80028f8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f838 	bl	800290e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f840 	bl	8002926 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f841 	bl	8002942 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f840 	bl	8002958 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>
 80028d8:	4603      	mov	r3, r0
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>:
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>:
      _Tuple_impl()
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f82a 	bl	8002970 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>:
      constexpr _Head_base()
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f810 	bl	8002986 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>
 8002966:	4603      	mov	r3, r0
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_ZN12ElecangCalibD1Ev>:
class ElecangCalib
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fe35 	bl	8002616 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <_Z41__static_initialization_and_destruction_0ii>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d102      	bne.n	80029d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
ElecangCalib elecangcalib;
 80029d2:	4809      	ldr	r0, [pc, #36]	@ (80029f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029d4:	f7ff f96c 	bl	8001cb0 <_ZN12ElecangCalibC1Ev>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d102      	bne.n	80029ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029e8:	4803      	ldr	r0, [pc, #12]	@ (80029f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029ea:	f7ff ffd7 	bl	800299c <_ZN12ElecangCalibD1Ev>
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000130 	.word	0x20000130

080029fc <_GLOBAL__sub_I_elecangcalib>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff ffd7 	bl	80029b8 <_Z41__static_initialization_and_destruction_0ii>
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_GLOBAL__sub_D_elecangcalib>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff ffcf 	bl	80029b8 <_Z41__static_initialization_and_destruction_0ii>
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <LL_CORDIC_Config+0x44>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4311      	orrs	r1, r2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	ff87f800 	.word	0xff87f800

08002a64 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a70:	4a0e      	ldr	r2, [pc, #56]	@ (8002aac <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8002a84:	2300      	movs	r3, #0
 8002a86:	9303      	str	r3, [sp, #12]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2250      	movs	r2, #80	@ 0x50
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4804      	ldr	r0, [pc, #16]	@ (8002ab0 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 8002a9e:	f7ff ffbd 	bl	8002a1c <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40020c00 	.word	0x40020c00

08002ab4 <_ZN10Acrocantho15ClarkeTransformC1Efff>:
  }
};

// 3相→αβ(Clark)変換
struct ClarkeTransform {
  ClarkeTransform(float curU, float curV, float curW)
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ac0:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ac4:	ed87 1a00 	vstr	s2, [r7]
    : alpha(absqrt1 * curU),
 8002ac8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002acc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002b0c <_ZN10Acrocantho15ClarkeTransformC1Efff+0x58>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
      beta((absqrt2 * curU) + (absqrt3 * curV)) {}
 8002ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ade:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002b10 <_ZN10Acrocantho15ClarkeTransformC1Efff+0x5c>
 8002ae2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aea:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002b14 <_ZN10Acrocantho15ClarkeTransformC1Efff+0x60>
 8002aee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	edc3 7a01 	vstr	s15, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	3f9cc472 	.word	0x3f9cc472
 8002b10:	3f3504f4 	.word	0x3f3504f4
 8002b14:	3fb504f4 	.word	0x3fb504f4

08002b18 <_ZN10Acrocantho13ParkTransformC1ERKNS_6SinCosEff>:
  const float beta;
};

// αβ→dq(Park)変換
struct ParkTransform {
  ParkTransform(const SinCos& sc, float alpha, float beta)
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b26:	edc7 0a00 	vstr	s1, [r7]
    : id(sc.c * alpha + sc.s * beta),
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	edd3 6a00 	vldr	s13, [r3]
 8002b3e:	edd7 7a00 	vldr	s15, [r7]
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
      iq(-sc.s * alpha + sc.c * beta) {}
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eeb1 7a67 	vneg.f32	s14, s15
 8002b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b68:	edd7 7a00 	vldr	s15, [r7]
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	edc3 7a01 	vstr	s15, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>:

// 逆変換準備(逆Park変換)
struct TrigonTransform {
  /* f4t_trigon1 : V_d*cos - V_q*sin */
  /* f4t_trigon2 : V_d*sin + V_q*cos */
  TrigonTransform(const SinCos& sc, float vd, float vq)
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b96:	edc7 0a00 	vstr	s1, [r7]
    : _trigon1(sc.c * vd - sc.s * vq),
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	edd3 6a00 	vldr	s13, [r3]
 8002bae:	edd7 7a00 	vldr	s15, [r7]
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
      _trigon2(sc.s * vd + sc.c * vq) {}
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bd4:	edd7 7a00 	vldr	s15, [r7]
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	edc3 7a01 	vstr	s15, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_ZN10Acrocantho22InverseClarkeTransformC1Eff>:
  const float _trigon2;
};

// 逆Clarke変換
struct InverseClarkeTransform {
  InverseClarkeTransform(float _tri1, float _tri2)
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c00:	edc7 0a01 	vstr	s1, [r7, #4]
      : u_ini(_tri1 * invsqrt1),
 8002c04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c08:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002c6c <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x78>
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	edc3 7a00 	vstr	s15, [r3]
        v_ini(-(_tri1 * invsqrt3) + _tri2 * invsqrt2),
 8002c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c1a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002c70 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x7c>
 8002c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c26:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002c74 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x80>
 8002c2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	edc3 7a01 	vstr	s15, [r3, #4]
        w_ini(-(_tri1 * invsqrt3) - _tri2 * invsqrt2) {}
 8002c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002c74 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x80>
 8002c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c44:	eeb1 7a67 	vneg.f32	s14, s15
 8002c48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c4c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002c70 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x7c>
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	3f5105eb 	.word	0x3f5105eb
 8002c70:	3f3504f3 	.word	0x3f3504f3
 8002c74:	3ed105eb 	.word	0x3ed105eb

08002c78 <_ZN7SensCur7getDataEv>:
  SensCur();
  
  bool sensCurInit();
  void sensCurIN();

  SensCurData* getData() { return data.get(); }
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f8ad 	bl	8002de2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN3FocC1Ev>:
extern Ang ang;
extern SensCur senscur;

using namespace Acrocantho;

Foc::Foc()
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
    : data(std::make_unique<FocData>()) {}
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f8cc 	bl	8002e3a <_ZSt11make_uniqueIN3Foc7FocDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE>:

void Foc::forwardCtrl(const SinCos _sc){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	eeb0 7a40 	vmov.f32	s14, s0
 8002cb8:	eef0 7a60 	vmov.f32	s15, s1
 8002cbc:	ed87 7a01 	vstr	s14, [r7, #4]
 8002cc0:	edc7 7a02 	vstr	s15, [r7, #8]
  SensCur::SensCurData* senscurdata = senscur.getData();
 8002cc4:	481e      	ldr	r0, [pc, #120]	@ (8002d40 <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE+0x94>)
 8002cc6:	f7ff ffd7 	bl	8002c78 <_ZN7SensCur7getDataEv>
 8002cca:	6278      	str	r0, [r7, #36]	@ 0x24
  Cordic cordic;
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fec7 	bl	8002a64 <_ZN10Acrocantho6CordicC1Ev>
  
  // Clarke transform
  ClarkeTransform ct(senscurdata->curU, senscurdata->curV, senscurdata->curW);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	eeb0 1a66 	vmov.f32	s2, s13
 8002cf0:	eef0 0a47 	vmov.f32	s1, s14
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fedb 	bl	8002ab4 <_ZN10Acrocantho15ClarkeTransformC1Efff>
  
  // Park transform
  ParkTransform pt(_sc, ct.alpha, ct.beta);
 8002cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d02:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d06:	1d3a      	adds	r2, r7, #4
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	eef0 0a47 	vmov.f32	s1, s14
 8002d10:	eeb0 0a67 	vmov.f32	s0, s15
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fefe 	bl	8002b18 <_ZN10Acrocantho13ParkTransformC1ERKNS_6SinCosEff>
  data->id = pt.id;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f8c8 	bl	8002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6013      	str	r3, [r2, #0]
  data->iq = pt.iq;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f8c1 	bl	8002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6053      	str	r3, [r2, #4]
  
}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	@ 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000624 	.word	0x20000624

08002d44 <_ZN3Foc11inverseCtrlEN10Acrocantho6SinCosEff>:

void Foc::inverseCtrl(const SinCos _sc, float _vd, float _vq){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	@ 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6178      	str	r0, [r7, #20]
 8002d4c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d50:	eef0 7a60 	vmov.f32	s15, s1
 8002d54:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d58:	edc7 1a01 	vstr	s3, [r7, #4]
 8002d5c:	ed87 7a03 	vstr	s14, [r7, #12]
 8002d60:	edc7 7a04 	vstr	s15, [r7, #16]
  TrigonTransform tt(_sc, _vd, _vq);
 8002d64:	f107 020c 	add.w	r2, r7, #12
 8002d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d6c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002d70:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff06 	bl	8002b88 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>
  
  // Inverse Clarke transform
  InverseClarkeTransform ict(tt._trigon1, tt._trigon2);
 8002d7c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002d80:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	eef0 0a47 	vmov.f32	s1, s14
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff2f 	bl	8002bf4 <_ZN10Acrocantho22InverseClarkeTransformC1Eff>
  
  data->vu = ict.u_ini;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f88b 	bl	8002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	6093      	str	r3, [r2, #8]
  data->vv = ict.v_ini;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f884 	bl	8002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	60d3      	str	r3, [r2, #12]
  data->vw = ict.w_ini;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f87d 	bl	8002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	6113      	str	r3, [r2, #16]
}
 8002dc0:	bf00      	nop
 8002dc2:	3730      	adds	r7, #48	@ 0x30
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f87a 	bl	8002ecc <_ZNKSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f87b 	bl	8002ee8 <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZN3Foc7FocDataC1Ev>:
#include "user_math.h"


class Foc {
public:
  struct FocData {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <_ZSt11make_uniqueIN3Foc7FocDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8002e3a:	b590      	push	{r4, r7, lr}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002e42:	2014      	movs	r0, #20
 8002e44:	f00a faf8 	bl	800d438 <_Znwj>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461c      	mov	r4, r3
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	2300      	movs	r3, #0
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	6053      	str	r3, [r2, #4]
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
 8002e58:	6113      	str	r3, [r2, #16]
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff ffce 	bl	8002dfc <_ZN3Foc7FocDataC1Ev>
 8002e60:	4621      	mov	r1, r4
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f85e 	bl	8002f24 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f861 	bl	8002f42 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002e80:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f866 	bl	8002f5c <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE11get_deleterEv>
 8002e90:	4604      	mov	r4, r0
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f86f 	bl	8002f76 <_ZSt4moveIRPN3Foc7FocDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 f874 	bl	8002f8c <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_>
	__ptr = pointer();
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
      }
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	return get();
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff83 	bl	8002dc8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>
 8002ec2:	4603      	mov	r3, r0
      }
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZNKSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f868 	bl	8002fac <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002edc:	4603      	mov	r3, r0
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f867 	bl	8002fc6 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZNSt15__uniq_ptr_dataIN3Foc7FocDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f863 	bl	8002fe0 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EEC1EPS1_>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffe6 	bl	8002f04 <_ZNSt15__uniq_ptr_dataIN3Foc7FocDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f85b 	bl	8003008 <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f85b 	bl	8003022 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZSt4moveIRPN3Foc7FocDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_+0x18>
 8002f9c:	2114      	movs	r1, #20
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f00a fa48 	bl	800d434 <_ZdlPvj>
      }
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f840 	bl	800303c <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f83f 	bl	8003054 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f83d 	bl	800306c <_ZNSt5tupleIJPN3Foc7FocDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa5 	bl	8002f42 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f837 	bl	8003086 <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003018:	4603      	mov	r3, r0
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f836 	bl	800309e <_ZSt3getILj1EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003032:	4603      	mov	r3, r0
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f836 	bl	80030b6 <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 800304a:	4603      	mov	r3, r0
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f837 	bl	80030d0 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8003062:	4603      	mov	r3, r0
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <_ZNSt5tupleIJPN3Foc7FocDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f837 	bl	80030ea <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEEC1Ev>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f83b 	bl	800310a <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8003094:	4603      	mov	r3, r0
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZSt3getILj1EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f83c 	bl	8003124 <_ZSt12__get_helperILj1ESt14default_deleteIN3Foc7FocDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f83b 	bl	800313c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERKS3_>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f839 	bl	8003152 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f838 	bl	8003168 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEEC1Ev>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f840 	bl	8003180 <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EEC1Ev>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f841 	bl	800319c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERS3_>
 800311a:	4603      	mov	r3, r0
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_ZSt12__get_helperILj1ESt14default_deleteIN3Foc7FocDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f840 	bl	80031b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEE7_M_headERS4_>
 8003132:	4603      	mov	r3, r0
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>:
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEEC1Ev>:
      _Tuple_impl()
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f82a 	bl	80031ca <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EEC1Ev>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EEC1Ev>:
      constexpr _Head_base()
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f810 	bl	80031e0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EE7_M_headERS4_>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_ZN3FocD1Ev>:
class Foc {
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fe35 	bl	8002e70 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_Z41__static_initialization_and_destruction_0ii>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003226:	4293      	cmp	r3, r2
 8003228:	d102      	bne.n	8003230 <_Z41__static_initialization_and_destruction_0ii+0x20>
Foc foc;
 800322a:	4809      	ldr	r0, [pc, #36]	@ (8003250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800322c:	f7ff fd31 	bl	8002c92 <_ZN3FocC1Ev>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800323c:	4293      	cmp	r3, r2
 800323e:	d102      	bne.n	8003246 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003240:	4803      	ldr	r0, [pc, #12]	@ (8003250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003242:	f7ff ffd8 	bl	80031f6 <_ZN3FocD1Ev>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000340 	.word	0x20000340

08003254 <_GLOBAL__sub_I_foc>:
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
 8003258:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800325c:	2001      	movs	r0, #1
 800325e:	f7ff ffd7 	bl	8003210 <_Z41__static_initialization_and_destruction_0ii>
 8003262:	bd80      	pop	{r7, pc}

08003264 <_GLOBAL__sub_D_foc>:
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
 8003268:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff ffcf 	bl	8003210 <_Z41__static_initialization_and_destruction_0ii>
 8003272:	bd80      	pop	{r7, pc}

08003274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800327a:	f002 facc 	bl	8005816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800327e:	f000 f88b 	bl	8003398 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003282:	f000 fbcf 	bl	8003a24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003286:	f000 fb9b 	bl	80039c0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800328a:	f000 f8db 	bl	8003444 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800328e:	f000 f96f 	bl	8003570 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8003292:	f000 fa29 	bl	80036e8 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8003296:	f000 fa73 	bl	8003780 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 800329a:	f000 fac3 	bl	8003824 <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 800329e:	f000 fa0b 	bl	80036b8 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032a2:	217f      	movs	r1, #127	@ 0x7f
 80032a4:	4837      	ldr	r0, [pc, #220]	@ (8003384 <main+0x110>)
 80032a6:	f003 fc19 	bl	8006adc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032aa:	217f      	movs	r1, #127	@ 0x7f
 80032ac:	4836      	ldr	r0, [pc, #216]	@ (8003388 <main+0x114>)
 80032ae:	f003 fc15 	bl	8006adc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80032b2:	4834      	ldr	r0, [pc, #208]	@ (8003384 <main+0x110>)
 80032b4:	f002 fe16 	bl	8005ee4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80032b8:	4833      	ldr	r0, [pc, #204]	@ (8003388 <main+0x114>)
 80032ba:	f002 fe13 	bl	8005ee4 <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80032be:	4831      	ldr	r0, [pc, #196]	@ (8003384 <main+0x110>)
 80032c0:	f003 fc6e 	bl	8006ba0 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80032c4:	2100      	movs	r1, #0
 80032c6:	4831      	ldr	r0, [pc, #196]	@ (800338c <main+0x118>)
 80032c8:	f009 f866 	bl	800c398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80032cc:	2104      	movs	r1, #4
 80032ce:	482f      	ldr	r0, [pc, #188]	@ (800338c <main+0x118>)
 80032d0:	f009 f862 	bl	800c398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80032d4:	2108      	movs	r1, #8
 80032d6:	482d      	ldr	r0, [pc, #180]	@ (800338c <main+0x118>)
 80032d8:	f009 f85e 	bl	800c398 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80032dc:	2100      	movs	r1, #0
 80032de:	482b      	ldr	r0, [pc, #172]	@ (800338c <main+0x118>)
 80032e0:	f009 fe84 	bl	800cfec <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80032e4:	2104      	movs	r1, #4
 80032e6:	4829      	ldr	r0, [pc, #164]	@ (800338c <main+0x118>)
 80032e8:	f009 fe80 	bl	800cfec <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80032ec:	2108      	movs	r1, #8
 80032ee:	4827      	ldr	r0, [pc, #156]	@ (800338c <main+0x118>)
 80032f0:	f009 fe7c 	bl	800cfec <HAL_TIMEx_PWMN_Start>
  
  // ゲートドライバON
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fe:	f005 ffe1 	bl	80092c4 <HAL_GPIO_WritePin>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800330e:	2301      	movs	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	4619      	mov	r1, r3
 8003320:	481b      	ldr	r0, [pc, #108]	@ (8003390 <main+0x11c>)
 8003322:	f005 f923 	bl	800856c <HAL_FDCAN_ConfigFilter>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <main+0xc6>
    {
        // フィルタ設定エラー
        Error_Handler();
 8003336:	f000 fc0b 	bl	8003b50 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 800333a:	4815      	ldr	r0, [pc, #84]	@ (8003390 <main+0x11c>)
 800333c:	f005 f970 	bl	8008620 <HAL_FDCAN_Start>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <main+0xe0>
	  Error_Handler();
 8003350:	f000 fbfe 	bl	8003b50 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8003354:	2200      	movs	r2, #0
 8003356:	2101      	movs	r1, #1
 8003358:	480d      	ldr	r0, [pc, #52]	@ (8003390 <main+0x11c>)
 800335a:	f005 fad5 	bl	8008908 <HAL_FDCAN_ActivateNotification>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <main+0xfe>
    /* Notification Error */
    Error_Handler();
 800336e:	f000 fbef 	bl	8003b50 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fb75 	bl	8002a64 <_ZN10Acrocantho6CordicC1Ev>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    usertask.idleTask();
 800337a:	4806      	ldr	r0, [pc, #24]	@ (8003394 <main+0x120>)
 800337c:	f001 ff80 	bl	8005280 <_ZN8UserTask8idleTaskEv>
 8003380:	e7fb      	b.n	800337a <main+0x106>
 8003382:	bf00      	nop
 8003384:	20000344 	.word	0x20000344
 8003388:	200003b0 	.word	0x200003b0
 800338c:	200005bc 	.word	0x200005bc
 8003390:	20000444 	.word	0x20000444
 8003394:	20000640 	.word	0x20000640

08003398 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b094      	sub	sp, #80	@ 0x50
 800339c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	2238      	movs	r2, #56	@ 0x38
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f00a f928 	bl	800d5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f007 ff9c 	bl	800b2f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033ca:	2340      	movs	r3, #64	@ 0x40
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ce:	2302      	movs	r3, #2
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033d2:	2302      	movs	r3, #2
 80033d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80033d6:	2304      	movs	r3, #4
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80033da:	2355      	movs	r3, #85	@ 0x55
 80033dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033de:	2302      	movs	r3, #2
 80033e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033e2:	2302      	movs	r3, #2
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033e6:	2302      	movs	r3, #2
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ea:	f107 0318 	add.w	r3, r7, #24
 80033ee:	4618      	mov	r0, r3
 80033f0:	f008 f836 	bl	800b460 <HAL_RCC_OscConfig>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003404:	f000 fba4 	bl	8003b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003408:	230f      	movs	r3, #15
 800340a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800340c:	2303      	movs	r3, #3
 800340e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	2104      	movs	r1, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f008 fb2f 	bl	800ba84 <HAL_RCC_ClockConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8003436:	f000 fb8b 	bl	8003b50 <Error_Handler>
  }
}
 800343a:	bf00      	nop
 800343c:	3750      	adds	r7, #80	@ 0x50
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b092      	sub	sp, #72	@ 0x48
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800344a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003456:	463b      	mov	r3, r7
 8003458:	223c      	movs	r2, #60	@ 0x3c
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f00a f8cd 	bl	800d5fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003464:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003468:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800346a:	4b3f      	ldr	r3, [pc, #252]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 800346c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003470:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003472:	4b3d      	ldr	r3, [pc, #244]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003478:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800347e:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003484:	4b38      	ldr	r3, [pc, #224]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800348a:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 800348c:	2204      	movs	r2, #4
 800348e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003490:	4b35      	ldr	r3, [pc, #212]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003496:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003498:	2200      	movs	r2, #0
 800349a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800349c:	4b32      	ldr	r3, [pc, #200]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 800349e:	2201      	movs	r2, #1
 80034a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034a2:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80034aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034c0:	4829      	ldr	r0, [pc, #164]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034c2:	f002 fb53 	bl	8005b6c <HAL_ADC_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 80034d6:	f000 fb3b 	bl	8003b50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 80034da:	2305      	movs	r3, #5
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80034de:	2300      	movs	r3, #0
 80034e0:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80034ea:	4619      	mov	r1, r3
 80034ec:	481e      	ldr	r0, [pc, #120]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 80034ee:	f004 f9b1 	bl	8007854 <HAL_ADCEx_MultiModeConfigChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8003502:	f000 fb25 	bl	8003b50 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <_ZL12MX_ADC1_Initv+0x128>)
 8003508:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800350a:	2309      	movs	r3, #9
 800350c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8003512:	237f      	movs	r3, #127	@ 0x7f
 8003514:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8003516:	2304      	movs	r3, #4
 8003518:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003542:	463b      	mov	r3, r7
 8003544:	4619      	mov	r1, r3
 8003546:	4808      	ldr	r0, [pc, #32]	@ (8003568 <_ZL12MX_ADC1_Initv+0x124>)
 8003548:	f003 fc58 	bl	8006dfc <HAL_ADCEx_InjectedConfigChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 800355c:	f000 faf8 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	3748      	adds	r7, #72	@ 0x48
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000344 	.word	0x20000344
 800356c:	04300002 	.word	0x04300002

08003570 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b090      	sub	sp, #64	@ 0x40
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	223c      	movs	r2, #60	@ 0x3c
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f00a f83d 	bl	800d5fc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003582:	4b48      	ldr	r3, [pc, #288]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 8003584:	4a48      	ldr	r2, [pc, #288]	@ (80036a8 <_ZL12MX_ADC2_Initv+0x138>)
 8003586:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003588:	4b46      	ldr	r3, [pc, #280]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 800358a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800358e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003590:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003596:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800359c:	4b41      	ldr	r3, [pc, #260]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80035a2:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80035a8:	4b3e      	ldr	r3, [pc, #248]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035ae:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80035ba:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035bc:	2201      	movs	r2, #1
 80035be:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035c0:	4b38      	ldr	r3, [pc, #224]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80035c8:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035d0:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80035d6:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035de:	4831      	ldr	r0, [pc, #196]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 80035e0:	f002 fac4 	bl	8005b6c <HAL_ADC_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80035f4:	f000 faac 	bl	8003b50 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80035f8:	4b2c      	ldr	r3, [pc, #176]	@ (80036ac <_ZL12MX_ADC2_Initv+0x13c>)
 80035fa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80035fc:	2309      	movs	r3, #9
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8003604:	237f      	movs	r3, #127	@ 0x7f
 8003606:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8003608:	2304      	movs	r3, #4
 800360a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003610:	2303      	movs	r3, #3
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8003620:	2300      	movs	r3, #0
 8003622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4619      	mov	r1, r3
 8003630:	481c      	ldr	r0, [pc, #112]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 8003632:	f003 fbe3 	bl	8006dfc <HAL_ADCEx_InjectedConfigChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8003646:	f000 fa83 	bl	8003b50 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <_ZL12MX_ADC2_Initv+0x140>)
 800364c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800364e:	f240 130f 	movw	r3, #271	@ 0x10f
 8003652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4812      	ldr	r0, [pc, #72]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 800365a:	f003 fbcf 	bl	8006dfc <HAL_ADCEx_InjectedConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 800366e:	f000 fa6f 	bl	8003b50 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <_ZL12MX_ADC2_Initv+0x144>)
 8003674:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8003676:	f240 2315 	movw	r3, #533	@ 0x215
 800367a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4808      	ldr	r0, [pc, #32]	@ (80036a4 <_ZL12MX_ADC2_Initv+0x134>)
 8003682:	f003 fbbb 	bl	8006dfc <HAL_ADCEx_InjectedConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8003696:	f000 fa5b 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800369a:	bf00      	nop
 800369c:	3740      	adds	r7, #64	@ 0x40
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200003b0 	.word	0x200003b0
 80036a8:	50000100 	.word	0x50000100
 80036ac:	08600004 	.word	0x08600004
 80036b0:	0c900008 	.word	0x0c900008
 80036b4:	10c00010 	.word	0x10c00010

080036b8 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80036bc:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <_ZL14MX_CORDIC_Initv+0x28>)
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <_ZL14MX_CORDIC_Initv+0x2c>)
 80036c0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80036c2:	4807      	ldr	r0, [pc, #28]	@ (80036e0 <_ZL14MX_CORDIC_Initv+0x28>)
 80036c4:	f004 f9ce 	bl	8007a64 <HAL_CORDIC_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 80036d8:	f000 fa3a 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000041c 	.word	0x2000041c
 80036e4:	40020c00 	.word	0x40020c00

080036e8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80036ec:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 80036ee:	4a23      	ldr	r2, [pc, #140]	@ (800377c <_ZL14MX_FDCAN1_Initv+0x94>)
 80036f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80036f2:	4b21      	ldr	r3, [pc, #132]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003706:	2200      	movs	r2, #0
 8003708:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800370a:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800370c:	2200      	movs	r2, #0
 800370e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003710:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003712:	2200      	movs	r2, #0
 8003714:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8003716:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003718:	2205      	movs	r2, #5
 800371a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 800371c:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800371e:	220b      	movs	r2, #11
 8003720:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003724:	2238      	movs	r2, #56	@ 0x38
 8003726:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800372a:	220b      	movs	r2, #11
 800372c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003730:	2205      	movs	r2, #5
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003736:	2204      	movs	r2, #4
 8003738:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800373a:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800373c:	220c      	movs	r2, #12
 800373e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003740:	4b0d      	ldr	r3, [pc, #52]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003742:	2204      	movs	r2, #4
 8003744:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8003746:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003748:	2201      	movs	r2, #1
 800374a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800374c:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800374e:	2200      	movs	r2, #0
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003752:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003754:	2200      	movs	r2, #0
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003758:	4807      	ldr	r0, [pc, #28]	@ (8003778 <_ZL14MX_FDCAN1_Initv+0x90>)
 800375a:	f004 fdad 	bl	80082b8 <HAL_FDCAN_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800376e:	f000 f9ef 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000444 	.word	0x20000444
 800377c:	40006400 	.word	0x40006400

08003780 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003784:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 8003786:	4a25      	ldr	r2, [pc, #148]	@ (800381c <_ZL12MX_I2C1_Initv+0x9c>)
 8003788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 800378a:	4b23      	ldr	r3, [pc, #140]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 800378c:	4a24      	ldr	r2, [pc, #144]	@ (8003820 <_ZL12MX_I2C1_Initv+0xa0>)
 800378e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003796:	4b20      	ldr	r3, [pc, #128]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 8003798:	2201      	movs	r2, #1
 800379a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800379c:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037b4:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ba:	4817      	ldr	r0, [pc, #92]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037bc:	f005 fdbd 	bl	800933a <HAL_I2C_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80037d0:	f000 f9be 	bl	8003b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037d4:	2100      	movs	r1, #0
 80037d6:	4810      	ldr	r0, [pc, #64]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037d8:	f007 fcd6 	bl	800b188 <HAL_I2CEx_ConfigAnalogFilter>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80037ec:	f000 f9b0 	bl	8003b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037f0:	2100      	movs	r1, #0
 80037f2:	4809      	ldr	r0, [pc, #36]	@ (8003818 <_ZL12MX_I2C1_Initv+0x98>)
 80037f4:	f007 fd13 	bl	800b21e <HAL_I2CEx_ConfigDigitalFilter>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003808:	f000 f9a2 	bl	8003b50 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800380c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003810:	f007 fd52 	bl	800b2b8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200004a8 	.word	0x200004a8
 800381c:	40005400 	.word	0x40005400
 8003820:	4052060f 	.word	0x4052060f

08003824 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b098      	sub	sp, #96	@ 0x60
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800382a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	2234      	movs	r2, #52	@ 0x34
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f009 fed3 	bl	800d5fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003856:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003858:	4a58      	ldr	r2, [pc, #352]	@ (80039bc <_ZL12MX_TIM1_Initv+0x198>)
 800385a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800385c:	4b56      	ldr	r3, [pc, #344]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003862:	4b55      	ldr	r3, [pc, #340]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003864:	2220      	movs	r2, #32
 8003866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8003868:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 800386a:	f242 1233 	movw	r2, #8499	@ 0x2133
 800386e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b51      	ldr	r3, [pc, #324]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8003876:	4b50      	ldr	r3, [pc, #320]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003878:	2201      	movs	r2, #1
 800387a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800387c:	4b4e      	ldr	r3, [pc, #312]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003882:	484d      	ldr	r0, [pc, #308]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003884:	f008 fd30 	bl	800c2e8 <HAL_TIM_PWM_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8003898:	f000 f95a 	bl	8003b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800389c:	2320      	movs	r3, #32
 800389e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80038a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038ae:	4619      	mov	r1, r3
 80038b0:	4841      	ldr	r0, [pc, #260]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 80038b2:	f009 fc5d 	bl	800d170 <HAL_TIMEx_MasterConfigSynchronization>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 80038c6:	f000 f943 	bl	8003b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ca:	2360      	movs	r3, #96	@ 0x60
 80038cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038d2:	2300      	movs	r3, #0
 80038d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038d6:	2300      	movs	r3, #0
 80038d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038da:	2300      	movs	r3, #0
 80038dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	4832      	ldr	r0, [pc, #200]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 80038f0:	f008 fe64 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8003904:	f000 f924 	bl	8003b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003908:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800390c:	2204      	movs	r2, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4829      	ldr	r0, [pc, #164]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003912:	f008 fe53 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8003926:	f000 f913 	bl	8003b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800392a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800392e:	2208      	movs	r2, #8
 8003930:	4619      	mov	r1, r3
 8003932:	4821      	ldr	r0, [pc, #132]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003934:	f008 fe42 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8003948:	f000 f902 	bl	8003b50 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800394c:	481a      	ldr	r0, [pc, #104]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 800394e:	f009 fd39 	bl	800d3c4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800395e:	2314      	movs	r3, #20
 8003960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800396a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003982:	2300      	movs	r3, #0
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003986:	2300      	movs	r3, #0
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	4619      	mov	r1, r3
 800398e:	480a      	ldr	r0, [pc, #40]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 8003990:	f009 fc84 	bl	800d29c <HAL_TIMEx_ConfigBreakDeadTime>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf14      	ite	ne
 800399a:	2301      	movne	r3, #1
 800399c:	2300      	moveq	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 80039a4:	f000 f8d4 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039a8:	4803      	ldr	r0, [pc, #12]	@ (80039b8 <_ZL12MX_TIM1_Initv+0x194>)
 80039aa:	f001 f987 	bl	8004cbc <HAL_TIM_MspPostInit>

}
 80039ae:	bf00      	nop
 80039b0:	3760      	adds	r7, #96	@ 0x60
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200005bc 	.word	0x200005bc
 80039bc:	40012c00 	.word	0x40012c00

080039c0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80039c6:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ca:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80039d2:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80039ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003a20 <_ZL11MX_DMA_Initv+0x60>)
 80039ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	200b      	movs	r0, #11
 80039fc:	f004 f93f 	bl	8007c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a00:	200b      	movs	r0, #11
 8003a02:	f004 f956 	bl	8007cb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	200c      	movs	r0, #12
 8003a0c:	f004 f937 	bl	8007c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003a10:	200c      	movs	r0, #12
 8003a12:	f004 f94e 	bl	8007cb2 <HAL_NVIC_EnableIRQ>

}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000

08003a24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	4a42      	ldr	r2, [pc, #264]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a46:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a52:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a56:	4a3c      	ldr	r2, [pc, #240]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6e:	4a36      	ldr	r2, [pc, #216]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a76:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a86:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <_ZL12MX_GPIO_Initv+0x124>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8003aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa4:	f005 fc0e 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aae:	4827      	ldr	r0, [pc, #156]	@ (8003b4c <_ZL12MX_GPIO_Initv+0x128>)
 8003ab0:	f005 fc08 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4820      	ldr	r0, [pc, #128]	@ (8003b4c <_ZL12MX_GPIO_Initv+0x128>)
 8003acc:	f005 fa78 	bl	8008fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003ae0:	230c      	movs	r3, #12
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aee:	f005 fa67 	bl	8008fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8003af2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8003af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b0e:	f005 fa57 	bl	8008fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4808      	ldr	r0, [pc, #32]	@ (8003b4c <_ZL12MX_GPIO_Initv+0x128>)
 8003b2c:	f005 fa48 	bl	8008fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	2028      	movs	r0, #40	@ 0x28
 8003b36:	f004 f8a2 	bl	8007c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b3a:	2028      	movs	r0, #40	@ 0x28
 8003b3c:	f004 f8b9 	bl	8007cb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	@ 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	48000800 	.word	0x48000800

08003b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b54:	b672      	cpsid	i
}
 8003b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <Error_Handler+0x8>

08003b5c <_ZNK12ElecangCalib7getDataEv>:
public:
  ElecangCalib();
  
  void elecCalSeq();

  ElecangCalibData* getData() const { return data.get(); }
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fd02 	bl	8002570 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN11ModeControlC1Ev>:
extern UserTask usertask;
extern CanCom cancom;
extern Util util;
extern ElecangCalib elecangcalib;

ModeControl::ModeControl()
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ModeControlData>()){}
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f8c5 	bl	8003d10 <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	711a      	strb	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	751a      	strb	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_ZN11ModeControl8modeCtrlEv>:


void ModeControl::modeCtrl(){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  float voltQRef_ = 0.0f;
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
  float voltDRef_ = 0.0f;
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]
  
  refCtrl();
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f837 	bl	8003c3c <_ZN11ModeControl7refCtrlEv>
  
  switch (s_drvMdRef) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d81a      	bhi.n	8003c0c <_ZN11ModeControl8modeCtrlEv+0x58>
 8003bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <_ZN11ModeControl8modeCtrlEv+0x28>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003bff 	.word	0x08003bff
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c15 	.word	0x08003c15
    case CTRLMODE_NONE:
      voltQRef_ = 0.0f;
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
      voltDRef_ = 0.0f;
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
      break;
 8003bfc:	e00b      	b.n	8003c16 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VOLT:
      voltDRef_ = s_voltDRef;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	60bb      	str	r3, [r7, #8]
      voltQRef_ = s_voltQRef;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60fb      	str	r3, [r7, #12]
      break;
 8003c0a:	e004      	b.n	8003c16 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VEL:
      break;
    case CTRLMODE_POS:
      break;
    default:
      mode = CTRLMODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	751a      	strb	r2, [r3, #20]
      break;
 8003c12:	e000      	b.n	8003c16 <_ZN11ModeControl8modeCtrlEv+0x62>
      break;
 8003c14:	bf00      	nop
  }
  
  data->voltDRef = voltDRef_;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f8b5 	bl	8003d88 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6053      	str	r3, [r2, #4]
  data->voltQRef = voltQRef_;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f8ae 	bl	8003d88 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6093      	str	r3, [r2, #8]
  
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <_ZN11ModeControl7refCtrlEv>:

void ModeControl::refCtrl(){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8003c44:	4819      	ldr	r0, [pc, #100]	@ (8003cac <_ZN11ModeControl7refCtrlEv+0x70>)
 8003c46:	f7fe f826 	bl	8001c96 <_ZNK4Util11getUtilDataEv>
 8003c4a:	6178      	str	r0, [r7, #20]
  CanCom::CanData* candata = cancom.getData();
 8003c4c:	4818      	ldr	r0, [pc, #96]	@ (8003cb0 <_ZN11ModeControl7refCtrlEv+0x74>)
 8003c4e:	f7fc ff6b 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8003c52:	6138      	str	r0, [r7, #16]
  ElecangCalib::ElecangCalibData* elecangcalibdata = elecangcalib.getData();
 8003c54:	4817      	ldr	r0, [pc, #92]	@ (8003cb4 <_ZN11ModeControl7refCtrlEv+0x78>)
 8003c56:	f7ff ff81 	bl	8003b5c <_ZNK12ElecangCalib7getDataEv>
 8003c5a:	60f8      	str	r0, [r7, #12]

  if (usertask.servoCheck()) {
 8003c5c:	4816      	ldr	r0, [pc, #88]	@ (8003cb8 <_ZN11ModeControl7refCtrlEv+0x7c>)
 8003c5e:	f001 fb9b 	bl	8005398 <_ZN8UserTask10servoCheckEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <_ZN11ModeControl7refCtrlEv+0x66>
    // 電気角キャリブ
    if (utildata->eCalib) {
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <_ZN11ModeControl7refCtrlEv+0x4e>
      s_drvMdRef = elecangcalibdata->drvMd;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	7a1a      	ldrb	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	711a      	strb	r2, [r3, #4]
      s_voltQRef = elecangcalibdata->voltQRef;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
      s_voltDRef = 0.0f;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
      s_drvMdRef = candata->drvMdRef;
      s_voltDRef = candata->voltDRef;
      s_voltQRef = candata->voltQRef;
    }
  }
 8003c88:	e00b      	b.n	8003ca2 <_ZN11ModeControl7refCtrlEv+0x66>
      s_drvMdRef = candata->drvMdRef;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	785a      	ldrb	r2, [r3, #1]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	711a      	strb	r2, [r3, #4]
      s_voltDRef = candata->voltDRef;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60da      	str	r2, [r3, #12]
      s_voltQRef = candata->voltQRef;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000650 	.word	0x20000650
 8003cb0:	200000c8 	.word	0x200000c8
 8003cb4:	20000130 	.word	0x20000130
 8003cb8:	20000640 	.word	0x20000640

08003cbc <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f86a 	bl	8003da0 <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZN11ModeControl15ModeControlDataC1Ev>:
  CTRLMODE_POS
} st_mode;

class ModeControl {
public:
  struct ModeControlData {
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	705a      	strb	r2, [r3, #1]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003d18:	2010      	movs	r0, #16
 8003d1a:	f009 fb8d 	bl	800d438 <_Znwj>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461c      	mov	r4, r3
 8003d22:	4622      	mov	r2, r4
 8003d24:	2300      	movs	r3, #0
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	6053      	str	r3, [r2, #4]
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	60d3      	str	r3, [r2, #12]
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff ffd1 	bl	8003cd6 <_ZN11ModeControl15ModeControlDataC1Ev>
 8003d34:	4621      	mov	r1, r4
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f850 	bl	8003ddc <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}

08003d44 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f853 	bl	8003dfa <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003d54:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f858 	bl	8003e14 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>
 8003d64:	4604      	mov	r4, r0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f861 	bl	8003e2e <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4620      	mov	r0, r4
 8003d74:	f000 f866 	bl	8003e44 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>
	__ptr = pointer();
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
      }
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd90      	pop	{r4, r7, pc}

08003d88 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	return get();
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff93 	bl	8003cbc <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 8003d96:	4603      	mov	r3, r0
      }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f85a 	bl	8003e64 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8003db0:	4603      	mov	r3, r0
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f856 	bl	8003e7e <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ffe6 	bl	8003dbc <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f84e 	bl	8003ea6 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f84e 	bl	8003ec0 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_+0x18>
 8003e54:	2110      	movs	r1, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f009 faec 	bl	800d434 <_ZdlPvj>
      }
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f833 	bl	8003eda <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f831 	bl	8003ef2 <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffb2 	bl	8003dfa <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003e96:	4602      	mov	r2, r0
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f82b 	bl	8003f0c <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f82a 	bl	8003f24 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f82a 	bl	8003f3c <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f82a 	bl	8003f56 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f82e 	bl	8003f76 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f82f 	bl	8003f90 <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f82e 	bl	8003fa8 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f82d 	bl	8003fbe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f835 	bl	8003fd6 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f836 	bl	8003ff2 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f835 	bl	8004008 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>:
      _Tuple_impl()
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f82a 	bl	8004020 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>:
      constexpr _Head_base()
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f810 	bl	8004036 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>
 8004016:	4603      	mov	r3, r0
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <_ZN11ModeControlD1Ev>:
class ModeControl {
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe74 	bl	8003d44 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <_Z41__static_initialization_and_destruction_0ii>:
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800407e:	4293      	cmp	r3, r2
 8004080:	d102      	bne.n	8004088 <_Z41__static_initialization_and_destruction_0ii+0x20>
ModeControl modecontrol;
 8004082:	4809      	ldr	r0, [pc, #36]	@ (80040a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004084:	f7ff fd77 	bl	8003b76 <_ZN11ModeControlC1Ev>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004098:	4803      	ldr	r0, [pc, #12]	@ (80040a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800409a:	f7ff ffd7 	bl	800404c <_ZN11ModeControlD1Ev>
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000608 	.word	0x20000608

080040ac <_GLOBAL__sub_I_modecontrol>:
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7ff ffd7 	bl	8004068 <_Z41__static_initialization_and_destruction_0ii>
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_GLOBAL__sub_D_modecontrol>:
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7ff ffcf 	bl	8004068 <_Z41__static_initialization_and_destruction_0ii>
 80040ca:	bd80      	pop	{r7, pc}

080040cc <_ZN6OutPwmC1Ev>:
#include "user_math.h"
#include "param.h"

OutPwm outpwm;

OutPwm::OutPwm(){}
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <_ZN6OutPwm3PonEv>:

void OutPwm::Pon(){
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  setReg(DUTY_BASE, DUTY_BASE, DUTY_BASE);
 80040ea:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80040ee:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80040f2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f81a 	bl	8004130 <_ZN6OutPwm6setRegEfff>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <_ZN6OutPwm4PoffEv>:

void OutPwm::Poff(){
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  TIM1->CCR1 = 0; 
 800410c:	4b07      	ldr	r3, [pc, #28]	@ (800412c <_ZN6OutPwm4PoffEv+0x28>)
 800410e:	2200      	movs	r2, #0
 8004110:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0; 
 8004112:	4b06      	ldr	r3, [pc, #24]	@ (800412c <_ZN6OutPwm4PoffEv+0x28>)
 8004114:	2200      	movs	r2, #0
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0; 
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <_ZN6OutPwm4PoffEv+0x28>)
 800411a:	2200      	movs	r2, #0
 800411c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00

08004130 <_ZN6OutPwm6setRegEfff>:

void OutPwm::setReg(float u, float v, float w){
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	ed87 0a02 	vstr	s0, [r7, #8]
 800413c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004140:	ed87 1a00 	vstr	s2, [r7]

  TIM1->CCR1 = (uint16_t)((1.0f - dutyGuard(u)) * (float)CCR_MAX);
 8004144:	ed97 0a02 	vldr	s0, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f845 	bl	80041d8 <_ZN6OutPwm9dutyGuardEf>
 800414e:	eef0 7a40 	vmov.f32	s15, s0
 8004152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80041d0 <_ZN6OutPwm6setRegEfff+0xa0>
 800415e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004166:	ee17 3a90 	vmov	r3, s15
 800416a:	b29a      	uxth	r2, r3
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <_ZN6OutPwm6setRegEfff+0xa4>)
 800416e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = (uint16_t)((1.0f - dutyGuard(v)) * (float)CCR_MAX);
 8004170:	ed97 0a01 	vldr	s0, [r7, #4]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f82f 	bl	80041d8 <_ZN6OutPwm9dutyGuardEf>
 800417a:	eef0 7a40 	vmov.f32	s15, s0
 800417e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004186:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80041d0 <_ZN6OutPwm6setRegEfff+0xa0>
 800418a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004192:	ee17 3a90 	vmov	r3, s15
 8004196:	b29a      	uxth	r2, r3
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <_ZN6OutPwm6setRegEfff+0xa4>)
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = (uint16_t)((1.0f - dutyGuard(w)) * (float)CCR_MAX);
 800419c:	ed97 0a00 	vldr	s0, [r7]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f819 	bl	80041d8 <_ZN6OutPwm9dutyGuardEf>
 80041a6:	eef0 7a40 	vmov.f32	s15, s0
 80041aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80041d0 <_ZN6OutPwm6setRegEfff+0xa0>
 80041b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 3a90 	vmov	r3, s15
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <_ZN6OutPwm6setRegEfff+0xa4>)
 80041c6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	4604cc00 	.word	0x4604cc00
 80041d4:	40012c00 	.word	0x40012c00

080041d8 <_ZN6OutPwm9dutyGuardEf>:


float OutPwm::dutyGuard(float _rawDuty){
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	ed87 0a00 	vstr	s0, [r7]
    float result = 0.0f;
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
    float sum = 0.0f;
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
    static float limp = 0.95f;
    static float limm = 0.01f;
    
    sum = (_rawDuty / VOLT_PBM) + DUTY_BASE;
 80041f0:	ed97 7a00 	vldr	s14, [r7]
 80041f4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80041f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004204:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (sum > limp){
 8004208:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <_ZN6OutPwm9dutyGuardEf+0x80>)
 800420a:	edd3 7a00 	vldr	s15, [r3]
 800420e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421a:	dd03      	ble.n	8004224 <_ZN6OutPwm9dutyGuardEf+0x4c>
        result = limp;
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <_ZN6OutPwm9dutyGuardEf+0x80>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e00f      	b.n	8004244 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else if(sum < limm){
 8004224:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <_ZN6OutPwm9dutyGuardEf+0x84>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	ed97 7a02 	vldr	s14, [r7, #8]
 800422e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	d503      	bpl.n	8004240 <_ZN6OutPwm9dutyGuardEf+0x68>
        result = limm;
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <_ZN6OutPwm9dutyGuardEf+0x84>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e001      	b.n	8004244 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else{
        result = sum;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	ee07 3a90 	vmov	s15, r3
}
 800424a:	eeb0 0a67 	vmov.f32	s0, s15
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000004 	.word	0x20000004
 800425c:	20000008 	.word	0x20000008

08004260 <_Z41__static_initialization_and_destruction_0ii>:
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004276:	4293      	cmp	r3, r2
 8004278:	d102      	bne.n	8004280 <_Z41__static_initialization_and_destruction_0ii+0x20>
OutPwm outpwm;
 800427a:	4803      	ldr	r0, [pc, #12]	@ (8004288 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800427c:	f7ff ff26 	bl	80040cc <_ZN6OutPwmC1Ev>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000620 	.word	0x20000620

0800428c <_GLOBAL__sub_I_outpwm>:
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
 8004290:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004294:	2001      	movs	r0, #1
 8004296:	f7ff ffe3 	bl	8004260 <_Z41__static_initialization_and_destruction_0ii>
 800429a:	bd80      	pop	{r7, pc}

0800429c <_ZN7SensCurC1Ev>:
#define ADC_TO_CUR(U2_V, U2_OFFS) (((float)((int16_t)U2_V - (int16_t)U2_OFFS)) * ADGAIN) /* アンプからモータへの電流流し込みでプラス */

SensCur senscur;
extern OutPwm outpwm;

SensCur::SensCur()
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<SensCurData>()) {}
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f8f9 	bl	800449e <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	819a      	strh	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	81da      	strh	r2, [r3, #14]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <_ZN7SensCur9getRawCurEv>:
  
void SensCur::getRawCur() {
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  rawCurU = ADC1 -> JDR1;
 80042d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	819a      	strh	r2, [r3, #12]
  rawCurW = ADC2 -> JDR1;
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <_ZN7SensCur9getRawCurEv+0x30>)
 80042e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	81da      	strh	r2, [r3, #14]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	50000100 	.word	0x50000100

08004304 <_ZN7SensCur9sensCurINEv>:

void SensCur::sensCurIN() {
 8004304:	b580      	push	{r7, lr}
 8004306:	ed2d 8b02 	vpush	{d8}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  getRawCur();
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ffdd 	bl	80042d0 <_ZN7SensCur9getRawCurEv>
  
  data->curU = ADC_TO_CUR(rawCurU, curOffsU);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	899b      	ldrh	r3, [r3, #12]
 800431a:	b21b      	sxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b21b      	sxth	r3, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f8f3 	bl	800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004336:	4603      	mov	r3, r0
 8004338:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80043b0 <_ZN7SensCur9sensCurINEv+0xac>
 800433c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004340:	edc3 7a00 	vstr	s15, [r3]
  data->curW = ADC_TO_CUR(rawCurW, curOffsW);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	89db      	ldrh	r3, [r3, #14]
 8004348:	b21b      	sxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	b21b      	sxth	r3, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f8dc 	bl	800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004364:	4603      	mov	r3, r0
 8004366:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80043b0 <_ZN7SensCur9sensCurINEv+0xac>
 800436a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800436e:	edc3 7a02 	vstr	s15, [r3, #8]
  

  // V相電流はIu + Iv + Iw = 0より計算
  data->curV = -data->curU - data->curW;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f8d1 	bl	800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 800437a:	4603      	mov	r3, r0
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	eef1 8a67 	vneg.f32	s17, s15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f8c8 	bl	800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 800438c:	4603      	mov	r3, r0
 800438e:	ed93 8a02 	vldr	s16, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f8c1 	bl	800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 800439a:	4603      	mov	r3, r0
 800439c:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80043a0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	ecbd 8b02 	vpop	{d8}
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	3b840842 	.word	0x3b840842

080043b4 <_ZN7SensCur11sensCurInitEv>:

bool SensCur::sensCurInit() {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = STEP00;
  static bool _getReady = false;
  static uint16_t _calcount = 0;
  
  switch (seqID) {
 80043bc:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <_ZN7SensCur11sensCurInitEv+0xac>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d03d      	beq.n	8004440 <_ZN7SensCur11sensCurInitEv+0x8c>
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	dc41      	bgt.n	800444c <_ZN7SensCur11sensCurInitEv+0x98>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <_ZN7SensCur11sensCurInitEv+0x1e>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d007      	beq.n	80043e0 <_ZN7SensCur11sensCurInitEv+0x2c>
 80043d0:	e03c      	b.n	800444c <_ZN7SensCur11sensCurInitEv+0x98>
    case STEP00:
      // ServoON
      outpwm.Pon();
 80043d2:	4824      	ldr	r0, [pc, #144]	@ (8004464 <_ZN7SensCur11sensCurInitEv+0xb0>)
 80043d4:	f7ff fe85 	bl	80040e2 <_ZN6OutPwm3PonEv>
      seqID = STEP01;
 80043d8:	4b21      	ldr	r3, [pc, #132]	@ (8004460 <_ZN7SensCur11sensCurInitEv+0xac>)
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e039      	b.n	8004454 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP01:
      // キャリブレーション
      if (_calcount < CALCOUNT) {
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <_ZN7SensCur11sensCurInitEv+0xb4>)
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	2b63      	cmp	r3, #99	@ 0x63
 80043e6:	d817      	bhi.n	8004418 <_ZN7SensCur11sensCurInitEv+0x64>
        getRawCur();
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff71 	bl	80042d0 <_ZN7SensCur9getRawCurEv>
        curOffsU += rawCurU;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	8992      	ldrh	r2, [r2, #12]
 80043f6:	441a      	add	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]
        curOffsW += rawCurW;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	89d2      	ldrh	r2, [r2, #14]
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
        _calcount++;
 800440a:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <_ZN7SensCur11sensCurInitEv+0xb4>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8004414:	801a      	strh	r2, [r3, #0]
      } else {
        curOffsU /= _calcount;
        curOffsW /= _calcount;
        seqID = STEP02;
      }
      break;
 8004416:	e01d      	b.n	8004454 <_ZN7SensCur11sensCurInitEv+0xa0>
        curOffsU /= _calcount;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a12      	ldr	r2, [pc, #72]	@ (8004468 <_ZN7SensCur11sensCurInitEv+0xb4>)
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	fbb3 f2f2 	udiv	r2, r3, r2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]
        curOffsW /= _calcount;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4a0e      	ldr	r2, [pc, #56]	@ (8004468 <_ZN7SensCur11sensCurInitEv+0xb4>)
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	fbb3 f2f2 	udiv	r2, r3, r2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	609a      	str	r2, [r3, #8]
        seqID = STEP02;
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <_ZN7SensCur11sensCurInitEv+0xac>)
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e009      	b.n	8004454 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP02:
      // キャリブ完了
      outpwm.Poff();
 8004440:	4808      	ldr	r0, [pc, #32]	@ (8004464 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8004442:	f7ff fe5f 	bl	8004104 <_ZN6OutPwm4PoffEv>
      _getReady = true;
 8004446:	4b09      	ldr	r3, [pc, #36]	@ (800446c <_ZN7SensCur11sensCurInitEv+0xb8>)
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
    default:
      seqID = STEP00;
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <_ZN7SensCur11sensCurInitEv+0xac>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
      break;
 8004452:	bf00      	nop
  }
  return _getReady;
 8004454:	4b05      	ldr	r3, [pc, #20]	@ (800446c <_ZN7SensCur11sensCurInitEv+0xb8>)
 8004456:	781b      	ldrb	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000634 	.word	0x20000634
 8004464:	20000620 	.word	0x20000620
 8004468:	20000636 	.word	0x20000636
 800446c:	20000635 	.word	0x20000635

08004470 <_ZN7SensCur11SensCurDataC1Ev>:
  struct SensCurData {
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800449e:	b590      	push	{r4, r7, lr}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80044a6:	200c      	movs	r0, #12
 80044a8:	f008 ffc6 	bl	800d438 <_Znwj>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461c      	mov	r4, r3
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff ffd4 	bl	8004470 <_ZN7SensCur11SensCurDataC1Ev>
 80044c8:	4621      	mov	r1, r4
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f842 	bl	8004554 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}

080044d8 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f845 	bl	8004572 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 80044e8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f84a 	bl	800458c <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>
 80044f8:	4604      	mov	r4, r0
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f853 	bl	80045a6 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8004500:	4603      	mov	r3, r0
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	4620      	mov	r0, r4
 8004508:	f000 f858 	bl	80045bc <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>
	__ptr = pointer();
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
      }
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bd90      	pop	{r4, r7, pc}

0800451c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	return get();
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe fc5c 	bl	8002de2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 800452a:	4603      	mov	r3, r0
      }
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f849 	bl	80045dc <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ffe6 	bl	8004534 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f841 	bl	8004604 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f841 	bl	800461e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_+0x18>
 80045cc:	210c      	movs	r1, #12
 80045ce:	4618      	mov	r0, r3
 80045d0:	f008 ff30 	bl	800d434 <_ZdlPvj>
      }
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f825 	bl	8004638 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ffbf 	bl	8004572 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 80045f4:	4602      	mov	r2, r0
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f81f 	bl	8004652 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004614:	4603      	mov	r3, r0
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f81e 	bl	800466a <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f81d 	bl	8004682 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f821 	bl	80046a2 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f822 	bl	80046bc <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004678:	4603      	mov	r3, r0
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f822 	bl	80046d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f82a 	bl	80046ec <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f82b 	bl	8004708 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f82a 	bl	800471e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>:
      _Tuple_impl()
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f82a 	bl	8004736 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>:
      constexpr _Head_base()
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f810 	bl	800474c <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>
 800472c:	4603      	mov	r3, r0
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <_ZN7SensCurD1Ev>:
class SensCur {
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff feb3 	bl	80044d8 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_Z41__static_initialization_and_destruction_0ii>:

bool SensCur::adjustCur() {
  
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004792:	4293      	cmp	r3, r2
 8004794:	d102      	bne.n	800479c <_Z41__static_initialization_and_destruction_0ii+0x20>
SensCur senscur;
 8004796:	4809      	ldr	r0, [pc, #36]	@ (80047bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004798:	f7ff fd80 	bl	800429c <_ZN7SensCurC1Ev>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d102      	bne.n	80047b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80047ac:	4803      	ldr	r0, [pc, #12]	@ (80047bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80047ae:	f7ff ffd8 	bl	8004762 <_ZN7SensCurD1Ev>
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000624 	.word	0x20000624

080047c0 <_GLOBAL__sub_I_senscur>:
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7ff ffd7 	bl	800477c <_Z41__static_initialization_and_destruction_0ii>
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_GLOBAL__sub_D_senscur>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047d8:	2000      	movs	r0, #0
 80047da:	f7ff ffcf 	bl	800477c <_Z41__static_initialization_and_destruction_0ii>
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <HAL_MspInit+0x44>)
 80047e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <HAL_MspInit+0x44>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80047f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <HAL_MspInit+0x44>)
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_MspInit+0x44>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <HAL_MspInit+0x44>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6593      	str	r3, [r2, #88]	@ 0x58
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_MspInit+0x44>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004816:	f006 fe13 	bl	800b440 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0a0      	sub	sp, #128	@ 0x80
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004840:	f107 0318 	add.w	r3, r7, #24
 8004844:	2254      	movs	r2, #84	@ 0x54
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f008 fed7 	bl	800d5fc <memset>
  if(hadc->Instance==ADC1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004856:	d146      	bne.n	80048e6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800485e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004862:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004864:	f107 0318 	add.w	r3, r7, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f007 faef 	bl	800be4c <HAL_RCCEx_PeriphCLKConfig>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004874:	f7ff f96c 	bl	8003b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004878:	4b42      	ldr	r3, [pc, #264]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a41      	ldr	r2, [pc, #260]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 8004880:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004882:	4b40      	ldr	r3, [pc, #256]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d10b      	bne.n	80048a2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800488a:	4b3f      	ldr	r3, [pc, #252]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	4a3e      	ldr	r2, [pc, #248]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004890:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004896:	4b3c      	ldr	r3, [pc, #240]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	4b39      	ldr	r3, [pc, #228]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ae:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80048ba:	2301      	movs	r3, #1
 80048bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048be:	2303      	movs	r3, #3
 80048c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048ca:	4619      	mov	r1, r3
 80048cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048d0:	f004 fb76 	bl	8008fc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	2012      	movs	r0, #18
 80048da:	f003 f9d0 	bl	8007c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80048de:	2012      	movs	r0, #18
 80048e0:	f003 f9e7 	bl	8007cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80048e4:	e04a      	b.n	800497c <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a28      	ldr	r2, [pc, #160]	@ (800498c <HAL_ADC_MspInit+0x164>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d145      	bne.n	800497c <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80048f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80048f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80048fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048fc:	f107 0318 	add.w	r3, r7, #24
 8004900:	4618      	mov	r0, r3
 8004902:	f007 faa3 	bl	800be4c <HAL_RCCEx_PeriphCLKConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 800490c:	f7ff f920 	bl	8003b50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004910:	4b1c      	ldr	r3, [pc, #112]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	4a1b      	ldr	r2, [pc, #108]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 8004918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800491a:	4b1a      	ldr	r3, [pc, #104]	@ (8004984 <HAL_ADC_MspInit+0x15c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10b      	bne.n	800493a <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004922:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004926:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800492c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800492e:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004946:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <HAL_ADC_MspInit+0x160>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004952:	23c2      	movs	r3, #194	@ 0xc2
 8004954:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004956:	2303      	movs	r3, #3
 8004958:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004962:	4619      	mov	r1, r3
 8004964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004968:	f004 fb2a 	bl	8008fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2100      	movs	r1, #0
 8004970:	2012      	movs	r0, #18
 8004972:	f003 f984 	bl	8007c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004976:	2012      	movs	r0, #18
 8004978:	f003 f99b 	bl	8007cb2 <HAL_NVIC_EnableIRQ>
}
 800497c:	bf00      	nop
 800497e:	3780      	adds	r7, #128	@ 0x80
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000638 	.word	0x20000638
 8004988:	40021000 	.word	0x40021000
 800498c:	50000100 	.word	0x50000100

08004990 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0a      	ldr	r2, [pc, #40]	@ (80049c8 <HAL_CORDIC_MspInit+0x38>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10b      	bne.n	80049ba <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <HAL_CORDIC_MspInit+0x3c>)
 80049a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a6:	4a09      	ldr	r2, [pc, #36]	@ (80049cc <HAL_CORDIC_MspInit+0x3c>)
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <HAL_CORDIC_MspInit+0x3c>)
 80049b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b09e      	sub	sp, #120	@ 0x78
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049e8:	f107 0310 	add.w	r3, r7, #16
 80049ec:	2254      	movs	r2, #84	@ 0x54
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f008 fe03 	bl	800d5fc <memset>
  if(hfdcan->Instance==FDCAN1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab0 <HAL_FDCAN_MspInit+0xe0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d153      	bne.n	8004aa8 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a0c:	f107 0310 	add.w	r3, r7, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f007 fa1b 	bl	800be4c <HAL_RCCEx_PeriphCLKConfig>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004a1c:	f7ff f898 	bl	8003b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a24:	4a23      	ldr	r2, [pc, #140]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a2c:	4b21      	ldr	r3, [pc, #132]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a38:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a44:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab4 <HAL_FDCAN_MspInit+0xe4>)
 8004a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a56:	2302      	movs	r3, #2
 8004a58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a62:	2309      	movs	r3, #9
 8004a64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a70:	f004 faa6 	bl	8008fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a82:	2303      	movs	r3, #3
 8004a84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a86:	2309      	movs	r3, #9
 8004a88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a94:	f004 fa94 	bl	8008fc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2015      	movs	r0, #21
 8004a9e:	f003 f8ee 	bl	8007c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004aa2:	2015      	movs	r0, #21
 8004aa4:	f003 f905 	bl	8007cb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004aa8:	bf00      	nop
 8004aaa:	3778      	adds	r7, #120	@ 0x78
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40006400 	.word	0x40006400
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b0a0      	sub	sp, #128	@ 0x80
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ad0:	f107 0318 	add.w	r3, r7, #24
 8004ad4:	2254      	movs	r2, #84	@ 0x54
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f008 fd8f 	bl	800d5fc <memset>
  if(hi2c->Instance==I2C1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c60 <HAL_I2C_MspInit+0x1a8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	f040 80b6 	bne.w	8004c56 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004aea:	2340      	movs	r3, #64	@ 0x40
 8004aec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004af2:	f107 0318 	add.w	r3, r7, #24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f007 f9a8 	bl	800be4c <HAL_RCCEx_PeriphCLKConfig>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b02:	f7ff f825 	bl	8003b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b06:	4b57      	ldr	r3, [pc, #348]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0a:	4a56      	ldr	r2, [pc, #344]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b12:	4b54      	ldr	r3, [pc, #336]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1e:	4b51      	ldr	r3, [pc, #324]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b22:	4a50      	ldr	r2, [pc, #320]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b3c:	2312      	movs	r3, #18
 8004b3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b44:	2300      	movs	r3, #0
 8004b46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b48:	2304      	movs	r3, #4
 8004b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004b50:	4619      	mov	r1, r3
 8004b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b56:	f004 fa33 	bl	8008fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b5e:	2312      	movs	r3, #18
 8004b60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b66:	2300      	movs	r3, #0
 8004b68:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004b72:	4619      	mov	r1, r3
 8004b74:	483c      	ldr	r0, [pc, #240]	@ (8004c68 <HAL_I2C_MspInit+0x1b0>)
 8004b76:	f004 fa23 	bl	8008fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7e:	4a39      	ldr	r2, [pc, #228]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_I2C_MspInit+0x1ac>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8004b92:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004b94:	4a36      	ldr	r2, [pc, #216]	@ (8004c70 <HAL_I2C_MspInit+0x1b8>)
 8004b96:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004b98:	4b34      	ldr	r3, [pc, #208]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b9e:	4b33      	ldr	r3, [pc, #204]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ba4:	4b31      	ldr	r3, [pc, #196]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004baa:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bac:	2280      	movs	r2, #128	@ 0x80
 8004bae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004bc8:	4828      	ldr	r0, [pc, #160]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bca:	f003 f88d 	bl	8007ce8 <HAL_DMA_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8004bd4:	f7fe ffbc 	bl	8003b50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bde:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_I2C_MspInit+0x1b4>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004be4:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004be6:	4a24      	ldr	r2, [pc, #144]	@ (8004c78 <HAL_I2C_MspInit+0x1c0>)
 8004be8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004bea:	4b22      	ldr	r3, [pc, #136]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004bec:	2211      	movs	r2, #17
 8004bee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bf0:	4b20      	ldr	r3, [pc, #128]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004bfe:	2280      	movs	r2, #128	@ 0x80
 8004c00:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c08:	4b1a      	ldr	r3, [pc, #104]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004c0e:	4b19      	ldr	r3, [pc, #100]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c14:	4b17      	ldr	r3, [pc, #92]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c1a:	4816      	ldr	r0, [pc, #88]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c1c:	f003 f864 	bl	8007ce8 <HAL_DMA_Init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8004c26:	f7fe ff93 	bl	8003b50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a11      	ldr	r2, [pc, #68]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c30:	4a10      	ldr	r2, [pc, #64]	@ (8004c74 <HAL_I2C_MspInit+0x1bc>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	201f      	movs	r0, #31
 8004c3c:	f003 f81f 	bl	8007c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c40:	201f      	movs	r0, #31
 8004c42:	f003 f836 	bl	8007cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2020      	movs	r0, #32
 8004c4c:	f003 f817 	bl	8007c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004c50:	2020      	movs	r0, #32
 8004c52:	f003 f82e 	bl	8007cb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004c56:	bf00      	nop
 8004c58:	3780      	adds	r7, #128	@ 0x80
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40005400 	.word	0x40005400
 8004c64:	40021000 	.word	0x40021000
 8004c68:	48000400 	.word	0x48000400
 8004c6c:	200004fc 	.word	0x200004fc
 8004c70:	40020008 	.word	0x40020008
 8004c74:	2000055c 	.word	0x2000055c
 8004c78:	4002001c 	.word	0x4002001c

08004c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_TIM_PWM_MspInit+0x38>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c92:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	@ 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_TIM_MspPostInit+0x9c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d138      	bne.n	8004d50 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cea:	4b1c      	ldr	r3, [pc, #112]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf6:	4b19      	ldr	r3, [pc, #100]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfa:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d02:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <HAL_TIM_MspPostInit+0xa0>)
 8004d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004d0e:	2307      	movs	r3, #7
 8004d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d12:	2302      	movs	r3, #2
 8004d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	4619      	mov	r1, r3
 8004d28:	480d      	ldr	r0, [pc, #52]	@ (8004d60 <HAL_TIM_MspPostInit+0xa4>)
 8004d2a:	f004 f949 	bl	8008fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8004d2e:	f242 0303 	movw	r3, #8195	@ 0x2003
 8004d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d34:	2302      	movs	r3, #2
 8004d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d40:	2306      	movs	r3, #6
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4806      	ldr	r0, [pc, #24]	@ (8004d64 <HAL_TIM_MspPostInit+0xa8>)
 8004d4c:	f004 f938 	bl	8008fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004d50:	bf00      	nop
 8004d52:	3728      	adds	r7, #40	@ 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	48000800 	.word	0x48000800
 8004d64:	48000400 	.word	0x48000400

08004d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <NMI_Handler+0x4>

08004d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <HardFault_Handler+0x4>

08004d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <MemManage_Handler+0x4>

08004d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <BusFault_Handler+0x4>

08004d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <UsageFault_Handler+0x4>

08004d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dbe:	f000 fd7d 	bl	80058bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004dcc:	4802      	ldr	r0, [pc, #8]	@ (8004dd8 <DMA1_Channel1_IRQHandler+0x10>)
 8004dce:	f003 f915 	bl	8007ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200004fc 	.word	0x200004fc

08004ddc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004de0:	4802      	ldr	r0, [pc, #8]	@ (8004dec <DMA1_Channel2_IRQHandler+0x10>)
 8004de2:	f003 f90b 	bl	8007ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	2000055c 	.word	0x2000055c

08004df0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004df4:	4803      	ldr	r0, [pc, #12]	@ (8004e04 <ADC1_2_IRQHandler+0x14>)
 8004df6:	f001 f959 	bl	80060ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004dfa:	4803      	ldr	r0, [pc, #12]	@ (8004e08 <ADC1_2_IRQHandler+0x18>)
 8004dfc:	f001 f956 	bl	80060ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000344 	.word	0x20000344
 8004e08:	200003b0 	.word	0x200003b0

08004e0c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e10:	4802      	ldr	r0, [pc, #8]	@ (8004e1c <FDCAN1_IT0_IRQHandler+0x10>)
 8004e12:	f003 fe5f 	bl	8008ad4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000444 	.word	0x20000444

08004e20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e24:	4802      	ldr	r0, [pc, #8]	@ (8004e30 <I2C1_EV_IRQHandler+0x10>)
 8004e26:	f004 fd27 	bl	8009878 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200004a8 	.word	0x200004a8

08004e34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e38:	4802      	ldr	r0, [pc, #8]	@ (8004e44 <I2C1_ER_IRQHandler+0x10>)
 8004e3a:	f004 fd37 	bl	80098ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200004a8 	.word	0x200004a8

08004e48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004e50:	f004 fa50 	bl	80092f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return 1;
 8004e5c:	2301      	movs	r3, #1
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <_kill>:

int _kill(int pid, int sig)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e72:	f008 fc1f 	bl	800d6b4 <__errno>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2216      	movs	r2, #22
 8004e7a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <_exit>:

void _exit (int status)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ffe7 	bl	8004e68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <_exit+0x12>
	...

08004ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea8:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <_sbrk+0x5c>)
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <_sbrk+0x60>)
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb4:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <_sbrk+0x64>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <_sbrk+0x64>)
 8004ebe:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <_sbrk+0x68>)
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ec2:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <_sbrk+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d207      	bcs.n	8004ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ed0:	f008 fbf0 	bl	800d6b4 <__errno>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	220c      	movs	r2, #12
 8004ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eda:	f04f 33ff 	mov.w	r3, #4294967295
 8004ede:	e009      	b.n	8004ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ee0:	4b08      	ldr	r3, [pc, #32]	@ (8004f04 <_sbrk+0x64>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <_sbrk+0x64>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <_sbrk+0x64>)
 8004ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20020000 	.word	0x20020000
 8004f00:	00000400 	.word	0x00000400
 8004f04:	2000063c 	.word	0x2000063c
 8004f08:	200007a8 	.word	0x200007a8

08004f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <SystemInit+0x20>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f16:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <SystemInit+0x20>)
 8004f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_ZNK10Acrocantho6CordicclEl>:
  SinCos operator()(int32_t theta_q31) const {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4817      	ldr	r0, [pc, #92]	@ (8004fd0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f74:	f7ff ffdc 	bl	8004f30 <LL_CORDIC_WriteData>
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004f78:	4815      	ldr	r0, [pc, #84]	@ (8004fd0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f7a:	f7ff ffe7 	bl	8004f4c <LL_CORDIC_ReadData>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f88f 	bl	80050a4 <_ZN10Acrocantho6Cordic8from_q31Em>
 8004f86:	eef0 7a40 	vmov.f32	s15, s0
 8004f8a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004f8e:	4810      	ldr	r0, [pc, #64]	@ (8004fd0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f90:	f7ff ffdc 	bl	8004f4c <LL_CORDIC_ReadData>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f884 	bl	80050a4 <_ZN10Acrocantho6Cordic8from_q31Em>
 8004f9c:	eef0 7a40 	vmov.f32	s15, s0
 8004fa0:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8004fa4:	f107 0318 	add.w	r3, r7, #24
 8004fa8:	f107 0210 	add.w	r2, r7, #16
 8004fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	ee07 2a10 	vmov	s14, r2
 8004fbc:	ee07 3a90 	vmov	s15, r3
  };
 8004fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc4:	eef0 0a67 	vmov.f32	s1, s15
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40020c00 	.word	0x40020c00

08004fd4 <_ZNK10Acrocantho6Cordic7radiansEf>:
  SinCos radians(float theta) const {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 8004fe4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004fe8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800509c <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 8004fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ff0:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 8004ff4:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ffc:	ee17 3a90 	vmov	r3, s15
 8005000:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800500c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005014:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 8005018:	edd7 7a06 	vldr	s15, [r7, #24]
 800501c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	d507      	bpl.n	8005036 <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 8005026:	edd7 7a06 	vldr	s15, [r7, #24]
 800502a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800502e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005032:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 8005036:	edd7 7a06 	vldr	s15, [r7, #24]
 800503a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	dd06      	ble.n	8005056 <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8005048:	edd7 7a06 	vldr	s15, [r7, #24]
 800504c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005050:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005054:	e001      	b.n	800505a <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8005056:	edd7 7a06 	vldr	s15, [r7, #24]
 800505a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80050a0 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 800505e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8005066:	ee17 1a90 	vmov	r1, s15
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff ff7a 	bl	8004f64 <_ZNK10Acrocantho6CordicclEl>
 8005070:	eeb0 7a40 	vmov.f32	s14, s0
 8005074:	eef0 7a60 	vmov.f32	s15, s1
 8005078:	ed87 7a04 	vstr	s14, [r7, #16]
 800507c:	edc7 7a05 	vstr	s15, [r7, #20]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	ee07 2a10 	vmov	s14, r2
 8005088:	ee07 3a90 	vmov	s15, r3
  }
 800508c:	eeb0 0a47 	vmov.f32	s0, s14
 8005090:	eef0 0a67 	vmov.f32	s1, s15
 8005094:	3728      	adds	r7, #40	@ 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40c90fdb 	.word	0x40c90fdb
 80050a0:	4f800000 	.word	0x4f800000

080050a4 <_ZN10Acrocantho6Cordic8from_q31Em>:
  static float from_q31(uint32_t val) {
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80050cc <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 80050ba:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 80050be:	eeb0 0a67 	vmov.f32	s0, s15
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	30000000 	.word	0x30000000

080050d0 <_ZN11ModeControl7getDataEv>:
public:
  ModeControl();
  void modeCtrl();
  void modeCtrlReset();
  
  ModeControlData* getData() { return data.get(); }
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fdee 	bl	8003cbc <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZNK3Foc7getDataEv>:

public:
  Foc();
  void forwardCtrl(const Acrocantho::SinCos _sc);
  void inverseCtrl(const Acrocantho::SinCos _sc, float _vd, float _vq);
  FocData* getData() const { return data.get(); }
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fd fe67 	bl	8002dc8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>
 80050fa:	4603      	mov	r3, r0
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ZN8UserTaskC1Ev>:
extern ModeControl modecontrol;
extern Util util;
extern ElecangCalib elecangcalib;
extern Foc foc;

UserTask::UserTask()
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  : count(0){}
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	731a      	strb	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	735a      	strb	r2, [r3, #13]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	739a      	strb	r2, [r3, #14]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <_ZN8UserTask10cyclicTaskEv>:


void UserTask::cyclicTask() {
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 800514c:	4847      	ldr	r0, [pc, #284]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 800514e:	f7fc fd95 	bl	8001c7c <_ZNK3Ang10getAngDataEv>
 8005152:	60f8      	str	r0, [r7, #12]
  ElecangCalib::ElecangCalibData* ecaldata = elecangcalib.getData();
 8005154:	4846      	ldr	r0, [pc, #280]	@ (8005270 <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8005156:	f7fe fd01 	bl	8003b5c <_ZNK12ElecangCalib7getDataEv>
 800515a:	60b8      	str	r0, [r7, #8]
  static SeqID_t seqID = INIT;
  static bool curcal = false;

   switch (seqID) {
 800515c:	4b45      	ldr	r3, [pc, #276]	@ (8005274 <_ZN8UserTask10cyclicTaskEv+0x130>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b0d      	cmp	r3, #13
 8005162:	d032      	beq.n	80051ca <_ZN8UserTask10cyclicTaskEv+0x86>
 8005164:	2b0d      	cmp	r3, #13
 8005166:	dc77      	bgt.n	8005258 <_ZN8UserTask10cyclicTaskEv+0x114>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d052      	beq.n	8005212 <_ZN8UserTask10cyclicTaskEv+0xce>
 800516c:	2b0b      	cmp	r3, #11
 800516e:	d173      	bne.n	8005258 <_ZN8UserTask10cyclicTaskEv+0x114>
    case LOOP:

      // 強制停止
      if (!servoCheck()) {
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f911 	bl	8005398 <_ZN8UserTask10servoCheckEv>
 8005176:	4603      	mov	r3, r0
 8005178:	f083 0301 	eor.w	r3, r3, #1
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <_ZN8UserTask10cyclicTaskEv+0x4c>
        outpwm.Poff();
 8005182:	483d      	ldr	r0, [pc, #244]	@ (8005278 <_ZN8UserTask10cyclicTaskEv+0x134>)
 8005184:	f7fe ffbe 	bl	8004104 <_ZN6OutPwm4PoffEv>
        seqID = STEP00;
 8005188:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <_ZN8UserTask10cyclicTaskEv+0x130>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
        break;
 800518e:	e068      	b.n	8005262 <_ZN8UserTask10cyclicTaskEv+0x11e>
      }

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8005190:	2201      	movs	r2, #1
 8005192:	2120      	movs	r1, #32
 8005194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005198:	f004 f894 	bl	80092c4 <HAL_GPIO_WritePin>
      senscur.sensCurIN();
 800519c:	4837      	ldr	r0, [pc, #220]	@ (800527c <_ZN8UserTask10cyclicTaskEv+0x138>)
 800519e:	f7ff f8b1 	bl	8004304 <_ZN7SensCur9sensCurINEv>
      ang.getAngle();
 80051a2:	4832      	ldr	r0, [pc, #200]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051a4:	f7fb fd42 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 80051a8:	4830      	ldr	r0, [pc, #192]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051aa:	f7fb fd92 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 80051ae:	482f      	ldr	r0, [pc, #188]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051b0:	f7fb ff1a 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      
      elecangcalib.elecCalSeq();
 80051b4:	482e      	ldr	r0, [pc, #184]	@ (8005270 <_ZN8UserTask10cyclicTaskEv+0x12c>)
 80051b6:	f7fc fdbb 	bl	8001d30 <_ZN12ElecangCalib10elecCalSeqEv>
      test = ecaldata->elecAngOfs;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
      motorControl();
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f878 	bl	80052b8 <_ZN8UserTask12motorControlEv>

      break;
 80051c8:	e04b      	b.n	8005262 <_ZN8UserTask10cyclicTaskEv+0x11e>
    case INIT:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7b1b      	ldrb	r3, [r3, #12]
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d809      	bhi.n	80051e6 <_ZN8UserTask10cyclicTaskEv+0xa2>
        ang.getAngle();
 80051d2:	4826      	ldr	r0, [pc, #152]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051d4:	f7fb fd2a 	bl	8000c2c <_ZN3Ang8getAngleEv>
        count++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7b1b      	ldrb	r3, [r3, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	731a      	strb	r2, [r3, #12]
          seqID = STEP00;
          count = 0;
        }
        
      }
      break;
 80051e4:	e03c      	b.n	8005260 <_ZN8UserTask10cyclicTaskEv+0x11c>
        ang.getAngle();
 80051e6:	4821      	ldr	r0, [pc, #132]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051e8:	f7fb fd20 	bl	8000c2c <_ZN3Ang8getAngleEv>
        ang.getVel();
 80051ec:	481f      	ldr	r0, [pc, #124]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051ee:	f7fb fd70 	bl	8000cd2 <_ZN3Ang6getVelEv>
        if (senscur.sensCurInit()) {
 80051f2:	4822      	ldr	r0, [pc, #136]	@ (800527c <_ZN8UserTask10cyclicTaskEv+0x138>)
 80051f4:	f7ff f8de 	bl	80043b4 <_ZN7SensCur11sensCurInitEv>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d030      	beq.n	8005260 <_ZN8UserTask10cyclicTaskEv+0x11c>
          senscur.sensCurIN();
 80051fe:	481f      	ldr	r0, [pc, #124]	@ (800527c <_ZN8UserTask10cyclicTaskEv+0x138>)
 8005200:	f7ff f880 	bl	8004304 <_ZN7SensCur9sensCurINEv>
          seqID = STEP00;
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
          count = 0;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	731a      	strb	r2, [r3, #12]
      break;
 8005210:	e026      	b.n	8005260 <_ZN8UserTask10cyclicTaskEv+0x11c>
    case STEP00:
      senscur.sensCurIN();
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <_ZN8UserTask10cyclicTaskEv+0x138>)
 8005214:	f7ff f876 	bl	8004304 <_ZN7SensCur9sensCurINEv>
      ang.getAngle();
 8005218:	4814      	ldr	r0, [pc, #80]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 800521a:	f7fb fd07 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 800521e:	4813      	ldr	r0, [pc, #76]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005220:	f7fb fd57 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 8005224:	4811      	ldr	r0, [pc, #68]	@ (800526c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005226:	f7fb fedf 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      if (servoCheck()){
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8b4 	bl	8005398 <_ZN8UserTask10servoCheckEv>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <_ZN8UserTask10cyclicTaskEv+0x100>
        outpwm.Pon();
 8005236:	4810      	ldr	r0, [pc, #64]	@ (8005278 <_ZN8UserTask10cyclicTaskEv+0x134>)
 8005238:	f7fe ff53 	bl	80040e2 <_ZN6OutPwm3PonEv>
        seqID = LOOP;
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <_ZN8UserTask10cyclicTaskEv+0x130>)
 800523e:	220b      	movs	r2, #11
 8005240:	701a      	strb	r2, [r3, #0]
        break;
 8005242:	e00e      	b.n	8005262 <_ZN8UserTask10cyclicTaskEv+0x11e>
      }
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005244:	2200      	movs	r2, #0
 8005246:	2120      	movs	r1, #32
 8005248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800524c:	f004 f83a 	bl	80092c4 <HAL_GPIO_WritePin>
      outpwm.Poff();
 8005250:	4809      	ldr	r0, [pc, #36]	@ (8005278 <_ZN8UserTask10cyclicTaskEv+0x134>)
 8005252:	f7fe ff57 	bl	8004104 <_ZN6OutPwm4PoffEv>
      break;
 8005256:	e004      	b.n	8005262 <_ZN8UserTask10cyclicTaskEv+0x11e>

    default:
      seqID = INIT;
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <_ZN8UserTask10cyclicTaskEv+0x130>)
 800525a:	220d      	movs	r2, #13
 800525c:	701a      	strb	r2, [r3, #0]
      break;
 800525e:	e000      	b.n	8005262 <_ZN8UserTask10cyclicTaskEv+0x11e>
      break;
 8005260:	bf00      	nop
    }
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000088 	.word	0x20000088
 8005270:	20000130 	.word	0x20000130
 8005274:	20000010 	.word	0x20000010
 8005278:	20000620 	.word	0x20000620
 800527c:	20000624 	.word	0x20000624

08005280 <_ZN8UserTask8idleTaskEv>:

void UserTask::idleTask() {
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  cancom.rxTask();
 8005288:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <_ZN8UserTask8idleTaskEv+0x30>)
 800528a:	f7fc fac8 	bl	800181e <_ZN6CanCom6rxTaskEv>
  util.genFuncCtrl();
 800528e:	4809      	ldr	r0, [pc, #36]	@ (80052b4 <_ZN8UserTask8idleTaskEv+0x34>)
 8005290:	f000 f8d0 	bl	8005434 <_ZN4Util11genFuncCtrlEv>

  cancom.initTxHeader(0x01, false, false);
 8005294:	2300      	movs	r3, #0
 8005296:	2200      	movs	r2, #0
 8005298:	2101      	movs	r1, #1
 800529a:	4805      	ldr	r0, [pc, #20]	@ (80052b0 <_ZN8UserTask8idleTaskEv+0x30>)
 800529c:	f7fc f9b9 	bl	8001612 <_ZN6CanCom12initTxHeaderEmbb>
  cancom.txTask();
 80052a0:	4803      	ldr	r0, [pc, #12]	@ (80052b0 <_ZN8UserTask8idleTaskEv+0x30>)
 80052a2:	f7fc fae7 	bl	8001874 <_ZN6CanCom6txTaskEv>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200000c8 	.word	0x200000c8
 80052b4:	20000650 	.word	0x20000650

080052b8 <_ZN8UserTask12motorControlEv>:

// PON後のモータ制御
void UserTask::motorControl() {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  using namespace Acrocantho;
  ModeControl::ModeControlData* mdctrldata = modecontrol.getData();
 80052c0:	4831      	ldr	r0, [pc, #196]	@ (8005388 <_ZN8UserTask12motorControlEv+0xd0>)
 80052c2:	f7ff ff05 	bl	80050d0 <_ZN11ModeControl7getDataEv>
 80052c6:	61f8      	str	r0, [r7, #28]
  Ang::AngData* angdata = ang.getAngData();
 80052c8:	4830      	ldr	r0, [pc, #192]	@ (800538c <_ZN8UserTask12motorControlEv+0xd4>)
 80052ca:	f7fc fcd7 	bl	8001c7c <_ZNK3Ang10getAngDataEv>
 80052ce:	61b8      	str	r0, [r7, #24]
  Foc::FocData* focdata = foc.getData();
 80052d0:	482f      	ldr	r0, [pc, #188]	@ (8005390 <_ZN8UserTask12motorControlEv+0xd8>)
 80052d2:	f7ff ff0a 	bl	80050ea <_ZNK3Foc7getDataEv>
 80052d6:	6178      	str	r0, [r7, #20]
  Cordic cordic;
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd fbc1 	bl	8002a64 <_ZN10Acrocantho6CordicC1Ev>

  // SinCos演算
  SinCos result = cordic.radians(angdata->elecAng);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	eeb0 0a67 	vmov.f32	s0, s15
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fe6f 	bl	8004fd4 <_ZNK10Acrocantho6Cordic7radiansEf>
 80052f6:	eeb0 7a40 	vmov.f32	s14, s0
 80052fa:	eef0 7a60 	vmov.f32	s15, s1
 80052fe:	ed87 7a02 	vstr	s14, [r7, #8]
 8005302:	edc7 7a03 	vstr	s15, [r7, #12]

  // dq変換
  foc.forwardCtrl(result);
 8005306:	ed97 7a02 	vldr	s14, [r7, #8]
 800530a:	edd7 7a03 	vldr	s15, [r7, #12]
 800530e:	eeb0 0a47 	vmov.f32	s0, s14
 8005312:	eef0 0a67 	vmov.f32	s1, s15
 8005316:	481e      	ldr	r0, [pc, #120]	@ (8005390 <_ZN8UserTask12motorControlEv+0xd8>)
 8005318:	f7fd fcc8 	bl	8002cac <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE>
  
  testid = focdata->id;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]
  testiq = focdata->iq;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]
  
  // drvMdとgenfuncによる指令値切替
  modecontrol.modeCtrl();
 800532c:	4816      	ldr	r0, [pc, #88]	@ (8005388 <_ZN8UserTask12motorControlEv+0xd0>)
 800532e:	f7fe fc41 	bl	8003bb4 <_ZN11ModeControl8modeCtrlEv>

  // dq逆変換
  foc.inverseCtrl(result, mdctrldata->voltDRef, mdctrldata->voltQRef);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	edd3 6a01 	vldr	s13, [r3, #4]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	ed93 6a02 	vldr	s12, [r3, #8]
 800533e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005342:	edd7 7a03 	vldr	s15, [r7, #12]
 8005346:	eef0 1a46 	vmov.f32	s3, s12
 800534a:	eeb0 1a66 	vmov.f32	s2, s13
 800534e:	eeb0 0a47 	vmov.f32	s0, s14
 8005352:	eef0 0a67 	vmov.f32	s1, s15
 8005356:	480e      	ldr	r0, [pc, #56]	@ (8005390 <_ZN8UserTask12motorControlEv+0xd8>)
 8005358:	f7fd fcf4 	bl	8002d44 <_ZN3Foc11inverseCtrlEN10Acrocantho6SinCosEff>
  // PWM出力
  outpwm.setReg(focdata->vu, focdata->vv, focdata->vw);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	ed93 7a03 	vldr	s14, [r3, #12]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	edd3 6a04 	vldr	s13, [r3, #16]
 800536e:	eeb0 1a66 	vmov.f32	s2, s13
 8005372:	eef0 0a47 	vmov.f32	s1, s14
 8005376:	eeb0 0a67 	vmov.f32	s0, s15
 800537a:	4806      	ldr	r0, [pc, #24]	@ (8005394 <_ZN8UserTask12motorControlEv+0xdc>)
 800537c:	f7fe fed8 	bl	8004130 <_ZN6OutPwm6setRegEfff>
}
 8005380:	bf00      	nop
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000608 	.word	0x20000608
 800538c:	20000088 	.word	0x20000088
 8005390:	20000340 	.word	0x20000340
 8005394:	20000620 	.word	0x20000620

08005398 <_ZN8UserTask10servoCheckEv>:

bool UserTask::servoCheck() {
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 80053a0:	4806      	ldr	r0, [pc, #24]	@ (80053bc <_ZN8UserTask10servoCheckEv+0x24>)
 80053a2:	f7fb fbc1 	bl	8000b28 <_ZN6CanCom7getDataEv>
 80053a6:	60f8      	str	r0, [r7, #12]
  return (candata->genFuncRef & 0x01) != 0 ? true : false;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	b2db      	uxtb	r3, r3
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200000c8 	.word	0x200000c8

080053c0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  usertask.cyclicTask();
 80053c8:	4803      	ldr	r0, [pc, #12]	@ (80053d8 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 80053ca:	f7ff febb 	bl	8005144 <_ZN8UserTask10cyclicTaskEv>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000640 	.word	0x20000640

080053dc <_Z41__static_initialization_and_destruction_0ii>:
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d107      	bne.n	80053fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d102      	bne.n	80053fc <_Z41__static_initialization_and_destruction_0ii+0x20>
UserTask usertask;
 80053f6:	4803      	ldr	r0, [pc, #12]	@ (8005404 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80053f8:	f7ff fe84 	bl	8005104 <_ZN8UserTaskC1Ev>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000640 	.word	0x20000640

08005408 <_GLOBAL__sub_I_usertask>:
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
 800540c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005410:	2001      	movs	r0, #1
 8005412:	f7ff ffe3 	bl	80053dc <_Z41__static_initialization_and_destruction_0ii>
 8005416:	bd80      	pop	{r7, pc}

08005418 <_ZN4UtilC1Ev>:
#include "can_communication.h"

Util util;
extern CanCom cancom;

Util::Util()
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<UtilData>()) {}
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f834 	bl	8005490 <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <_ZN4Util11genFuncCtrlEv>:

// PON以外の機能制御
void Util::genFuncCtrl() {
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 800543c:	480c      	ldr	r0, [pc, #48]	@ (8005470 <_ZN4Util11genFuncCtrlEv+0x3c>)
 800543e:	f7fb fb73 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8005442:	60f8      	str	r0, [r7, #12]

  if (candata->genFuncCheck){
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	7c1b      	ldrb	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <_ZN4Util11genFuncCtrlEv+0x32>
    // genfuncRef 0b00010000
    data->eCalib = (candata->genFuncRef & 0x10) != 0 ? true : false;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	111c      	asrs	r4, r3, #4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f853 	bl	8005500 <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>
 800545a:	4603      	mov	r3, r0
 800545c:	4622      	mov	r2, r4
 800545e:	f002 0201 	and.w	r2, r2, #1
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
  }
  
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}
 800546e:	bf00      	nop
 8005470:	200000c8 	.word	0x200000c8

08005474 <_ZN4Util8UtilDataC1Ev>:
  struct UtilData {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8005498:	2001      	movs	r0, #1
 800549a:	f007 ffcd 	bl	800d438 <_Znwj>
 800549e:	4603      	mov	r3, r0
 80054a0:	461c      	mov	r4, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	7023      	strb	r3, [r4, #0]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff ffe4 	bl	8005474 <_ZN4Util8UtilDataC1Ev>
 80054ac:	4621      	mov	r1, r4
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f842 	bl	8005538 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f845 	bl	8005556 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 80054cc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f84a 	bl	8005570 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>
 80054dc:	4604      	mov	r4, r0
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f853 	bl	800558a <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80054e4:	4603      	mov	r3, r0
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 f858 	bl	80055a0 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>
	__ptr = pointer();
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
      }
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}

08005500 <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	return get();
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fd f83e 	bl	800258a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 800550e:	4603      	mov	r3, r0
      }
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f849 	bl	80055c0 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ffe6 	bl	8005518 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f841 	bl	80055e8 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8005566:	4603      	mov	r3, r0
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f841 	bl	8005602 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>
 8005580:	4603      	mov	r3, r0
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_+0x18>
 80055b0:	2101      	movs	r1, #1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f007 ff3e 	bl	800d434 <_ZdlPvj>
      }
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f825 	bl	800561c <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ffbf 	bl	8005556 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 80055d8:	4602      	mov	r2, r0
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f81f 	bl	8005636 <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f81e 	bl	800564e <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8005612:	4603      	mov	r3, r0
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f81d 	bl	8005666 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f821 	bl	8005686 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8005644:	4603      	mov	r3, r0
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f822 	bl	80056a0 <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800565c:	4603      	mov	r3, r0
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f822 	bl	80056b8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f82a 	bl	80056d0 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f82b 	bl	80056ec <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>
 8005696:	4603      	mov	r3, r0
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f82a 	bl	8005702 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>:
      _Tuple_impl()
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f82a 	bl	800571a <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>:
      constexpr _Head_base()
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f810 	bl	8005730 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>
 8005710:	4603      	mov	r3, r0
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <_ZN4UtilD1Ev>:
class Util {
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feb3 	bl	80054bc <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_Z41__static_initialization_and_destruction_0ii>:
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d107      	bne.n	8005780 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005776:	4293      	cmp	r3, r2
 8005778:	d102      	bne.n	8005780 <_Z41__static_initialization_and_destruction_0ii+0x20>
Util util;
 800577a:	4809      	ldr	r0, [pc, #36]	@ (80057a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800577c:	f7ff fe4c 	bl	8005418 <_ZN4UtilC1Ev>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d107      	bne.n	8005796 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800578c:	4293      	cmp	r3, r2
 800578e:	d102      	bne.n	8005796 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005790:	4803      	ldr	r0, [pc, #12]	@ (80057a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005792:	f7ff ffd8 	bl	8005746 <_ZN4UtilD1Ev>
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000650 	.word	0x20000650

080057a4 <_GLOBAL__sub_I_util>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7ff ffd7 	bl	8005760 <_Z41__static_initialization_and_destruction_0ii>
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_GLOBAL__sub_D_util>:
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80057bc:	2000      	movs	r0, #0
 80057be:	f7ff ffcf 	bl	8005760 <_Z41__static_initialization_and_destruction_0ii>
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80057c4:	480d      	ldr	r0, [pc, #52]	@ (80057fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80057c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80057c8:	f7ff fba0 	bl	8004f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057cc:	480c      	ldr	r0, [pc, #48]	@ (8005800 <LoopForever+0x6>)
  ldr r1, =_edata
 80057ce:	490d      	ldr	r1, [pc, #52]	@ (8005804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005808 <LoopForever+0xe>)
  movs r3, #0
 80057d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80057d4:	e002      	b.n	80057dc <LoopCopyDataInit>

080057d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057da:	3304      	adds	r3, #4

080057dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057e0:	d3f9      	bcc.n	80057d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057e2:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <LoopForever+0x12>)
  ldr r4, =_ebss
 80057e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005810 <LoopForever+0x16>)
  movs r3, #0
 80057e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057e8:	e001      	b.n	80057ee <LoopFillZerobss>

080057ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057ec:	3204      	adds	r2, #4

080057ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057f0:	d3fb      	bcc.n	80057ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057f2:	f007 ff65 	bl	800d6c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057f6:	f7fd fd3d 	bl	8003274 <main>

080057fa <LoopForever>:

LoopForever:
    b LoopForever
 80057fa:	e7fe      	b.n	80057fa <LoopForever>
  ldr   r0, =_estack
 80057fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005804:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8005808:	0800d820 	.word	0x0800d820
  ldr r2, =_sbss
 800580c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8005810:	200007a4 	.word	0x200007a4

08005814 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005814:	e7fe      	b.n	8005814 <ADC3_IRQHandler>

08005816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005820:	2003      	movs	r0, #3
 8005822:	f002 fa21 	bl	8007c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005826:	2000      	movs	r0, #0
 8005828:	f000 f80e 	bl	8005848 <HAL_InitTick>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	e001      	b.n	800583c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005838:	f7fe ffd2 	bl	80047e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800583c:	79fb      	ldrb	r3, [r7, #7]

}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005854:	4b16      	ldr	r3, [pc, #88]	@ (80058b0 <HAL_InitTick+0x68>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d022      	beq.n	80058a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800585c:	4b15      	ldr	r3, [pc, #84]	@ (80058b4 <HAL_InitTick+0x6c>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_InitTick+0x68>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005868:	fbb1 f3f3 	udiv	r3, r1, r3
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	4618      	mov	r0, r3
 8005872:	f002 fa2c 	bl	8007cce <HAL_SYSTICK_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10f      	bne.n	800589c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d809      	bhi.n	8005896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005882:	2200      	movs	r2, #0
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	f002 f9f8 	bl	8007c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800588e:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <HAL_InitTick+0x70>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e007      	b.n	80058a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e004      	b.n	80058a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e001      	b.n	80058a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000018 	.word	0x20000018
 80058b4:	2000000c 	.word	0x2000000c
 80058b8:	20000014 	.word	0x20000014

080058bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058c0:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <HAL_IncTick+0x1c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <HAL_IncTick+0x20>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	4a03      	ldr	r2, [pc, #12]	@ (80058d8 <HAL_IncTick+0x1c>)
 80058cc:	6013      	str	r3, [r2, #0]
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000654 	.word	0x20000654
 80058dc:	20000018 	.word	0x20000018

080058e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return uwTick;
 80058e4:	4b03      	ldr	r3, [pc, #12]	@ (80058f4 <HAL_GetTick+0x14>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000654 	.word	0x20000654

080058f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	609a      	str	r2, [r3, #8]
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 031f 	and.w	r3, r3, #31
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80059ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6093      	str	r3, [r2, #8]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d101      	bne.n	80059fc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005a1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a1e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a46:	d101      	bne.n	8005a4c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a96:	f043 0202 	orr.w	r2, r3, #2
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <LL_ADC_IsEnabled+0x18>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <LL_ADC_IsEnabled+0x1a>
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d101      	bne.n	8005ae8 <LL_ADC_IsDisableOngoing+0x18>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <LL_ADC_IsDisableOngoing+0x1a>
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d101      	bne.n	8005b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d101      	bne.n	8005b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b089      	sub	sp, #36	@ 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1a9      	b.n	8005eda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fe fe47 	bl	8004828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ff18 	bl	80059e2 <LL_ADC_IsDeepPowerDownEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fefe 	bl	80059be <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff ff33 	bl	8005a32 <LL_ADC_IsInternalRegulatorEnabled>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d115      	bne.n	8005bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff17 	bl	8005a0a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8005e50 <HAL_ADC_Init+0x2e4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	4a9c      	ldr	r2, [pc, #624]	@ (8005e54 <HAL_ADC_Init+0x2e8>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005bf0:	e002      	b.n	8005bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f9      	bne.n	8005bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff15 	bl	8005a32 <LL_ADC_IsInternalRegulatorEnabled>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c12:	f043 0210 	orr.w	r2, r3, #16
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff75 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 8005c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8142 	bne.w	8005ec8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 813e 	bne.w	8005ec8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff22 	bl	8005aaa <LL_ADC_IsEnabled>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d141      	bne.n	8005cf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c74:	d004      	beq.n	8005c80 <HAL_ADC_Init+0x114>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a77      	ldr	r2, [pc, #476]	@ (8005e58 <HAL_ADC_Init+0x2ec>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10f      	bne.n	8005ca0 <HAL_ADC_Init+0x134>
 8005c80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c84:	f7ff ff11 	bl	8005aaa <LL_ADC_IsEnabled>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4873      	ldr	r0, [pc, #460]	@ (8005e58 <HAL_ADC_Init+0x2ec>)
 8005c8c:	f7ff ff0d 	bl	8005aaa <LL_ADC_IsEnabled>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4323      	orrs	r3, r4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e012      	b.n	8005cc6 <HAL_ADC_Init+0x15a>
 8005ca0:	486e      	ldr	r0, [pc, #440]	@ (8005e5c <HAL_ADC_Init+0x2f0>)
 8005ca2:	f7ff ff02 	bl	8005aaa <LL_ADC_IsEnabled>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	486d      	ldr	r0, [pc, #436]	@ (8005e60 <HAL_ADC_Init+0x2f4>)
 8005caa:	f7ff fefe 	bl	8005aaa <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	431c      	orrs	r4, r3
 8005cb2:	486c      	ldr	r0, [pc, #432]	@ (8005e64 <HAL_ADC_Init+0x2f8>)
 8005cb4:	f7ff fef9 	bl	8005aaa <LL_ADC_IsEnabled>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4323      	orrs	r3, r4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d012      	beq.n	8005cf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd2:	d004      	beq.n	8005cde <HAL_ADC_Init+0x172>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8005e58 <HAL_ADC_Init+0x2ec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_Init+0x176>
 8005cde:	4a62      	ldr	r2, [pc, #392]	@ (8005e68 <HAL_ADC_Init+0x2fc>)
 8005ce0:	e000      	b.n	8005ce4 <HAL_ADC_Init+0x178>
 8005ce2:	4a62      	ldr	r2, [pc, #392]	@ (8005e6c <HAL_ADC_Init+0x300>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7ff fe04 	bl	80058f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7f5b      	ldrb	r3, [r3, #29]
 8005cf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005d00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005d06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d106      	bne.n	8005d2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	045b      	lsls	r3, r3, #17
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	4b48      	ldr	r3, [pc, #288]	@ (8005e70 <HAL_ADC_Init+0x304>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fee4 	bl	8005b44 <LL_ADC_INJ_IsConversionOngoing>
 8005d7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d17f      	bne.n	8005e84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d17c      	bne.n	8005e84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005da6:	f023 0302 	bic.w	r3, r3, #2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d017      	beq.n	8005dec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005dca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005dd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6911      	ldr	r1, [r2, #16]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	430b      	orrs	r3, r1
 8005de6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005dea:	e013      	b.n	8005e14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d12a      	bne.n	8005e74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e34:	4311      	orrs	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e3a:	4311      	orrs	r1, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e40:	430a      	orrs	r2, r1
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	611a      	str	r2, [r3, #16]
 8005e4e:	e019      	b.n	8005e84 <HAL_ADC_Init+0x318>
 8005e50:	2000000c 	.word	0x2000000c
 8005e54:	053e2d63 	.word	0x053e2d63
 8005e58:	50000100 	.word	0x50000100
 8005e5c:	50000400 	.word	0x50000400
 8005e60:	50000500 	.word	0x50000500
 8005e64:	50000600 	.word	0x50000600
 8005e68:	50000300 	.word	0x50000300
 8005e6c:	50000700 	.word	0x50000700
 8005e70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d10c      	bne.n	8005ea6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f023 010f 	bic.w	r1, r3, #15
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	1e5a      	subs	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ea4:	e007      	b.n	8005eb6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 020f 	bic.w	r2, r2, #15
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0201 	orr.w	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ec6:	e007      	b.n	8005ed8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ecc:	f043 0210 	orr.w	r2, r3, #16
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3724      	adds	r7, #36	@ 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd90      	pop	{r4, r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ef4:	d004      	beq.n	8005f00 <HAL_ADC_Start+0x1c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a67      	ldr	r2, [pc, #412]	@ (8006098 <HAL_ADC_Start+0x1b4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d101      	bne.n	8005f04 <HAL_ADC_Start+0x20>
 8005f00:	4b66      	ldr	r3, [pc, #408]	@ (800609c <HAL_ADC_Start+0x1b8>)
 8005f02:	e000      	b.n	8005f06 <HAL_ADC_Start+0x22>
 8005f04:	4b66      	ldr	r3, [pc, #408]	@ (80060a0 <HAL_ADC_Start+0x1bc>)
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fd3d 	bl	8005986 <LL_ADC_GetMultimode>
 8005f0c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fe03 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 80b4 	bne.w	8006088 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_ADC_Start+0x4a>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0af      	b.n	800608e <HAL_ADC_Start+0x1aa>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb36 	bl	80065a8 <ADC_Enable>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 809b 	bne.w	800607e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a4d      	ldr	r2, [pc, #308]	@ (8006098 <HAL_ADC_Start+0x1b4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_ADC_Start+0x96>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80060a4 <HAL_ADC_Start+0x1c0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d002      	beq.n	8005f76 <HAL_ADC_Start+0x92>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	e003      	b.n	8005f7e <HAL_ADC_Start+0x9a>
 8005f76:	4b4c      	ldr	r3, [pc, #304]	@ (80060a8 <HAL_ADC_Start+0x1c4>)
 8005f78:	e001      	b.n	8005f7e <HAL_ADC_Start+0x9a>
 8005f7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d002      	beq.n	8005f8c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005faa:	f023 0206 	bic.w	r2, r3, #6
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8005fb2:	e002      	b.n	8005fba <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	221c      	movs	r2, #28
 8005fc0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a32      	ldr	r2, [pc, #200]	@ (8006098 <HAL_ADC_Start+0x1b4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_ADC_Start+0x104>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a32      	ldr	r2, [pc, #200]	@ (80060a4 <HAL_ADC_Start+0x1c0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d002      	beq.n	8005fe4 <HAL_ADC_Start+0x100>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	e003      	b.n	8005fec <HAL_ADC_Start+0x108>
 8005fe4:	4b30      	ldr	r3, [pc, #192]	@ (80060a8 <HAL_ADC_Start+0x1c4>)
 8005fe6:	e001      	b.n	8005fec <HAL_ADC_Start+0x108>
 8005fe8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d008      	beq.n	8006006 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b05      	cmp	r3, #5
 8005ffe:	d002      	beq.n	8006006 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b09      	cmp	r3, #9
 8006004:	d114      	bne.n	8006030 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006018:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800601c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fd64 	bl	8005af6 <LL_ADC_REG_StartConversion>
 800602e:	e02d      	b.n	800608c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006034:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a15      	ldr	r2, [pc, #84]	@ (8006098 <HAL_ADC_Start+0x1b4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_ADC_Start+0x176>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a16      	ldr	r2, [pc, #88]	@ (80060a4 <HAL_ADC_Start+0x1c0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d002      	beq.n	8006056 <HAL_ADC_Start+0x172>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	e003      	b.n	800605e <HAL_ADC_Start+0x17a>
 8006056:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <HAL_ADC_Start+0x1c4>)
 8006058:	e001      	b.n	800605e <HAL_ADC_Start+0x17a>
 800605a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800605e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00f      	beq.n	800608c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006070:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006074:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800607c:	e006      	b.n	800608c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006086:	e001      	b.n	800608c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	50000100 	.word	0x50000100
 800609c:	50000300 	.word	0x50000300
 80060a0:	50000700 	.word	0x50000700
 80060a4:	50000500 	.word	0x50000500
 80060a8:	50000400 	.word	0x50000400

080060ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060d0:	d004      	beq.n	80060dc <HAL_ADC_IRQHandler+0x30>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a8e      	ldr	r2, [pc, #568]	@ (8006310 <HAL_ADC_IRQHandler+0x264>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <HAL_ADC_IRQHandler+0x34>
 80060dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006314 <HAL_ADC_IRQHandler+0x268>)
 80060de:	e000      	b.n	80060e2 <HAL_ADC_IRQHandler+0x36>
 80060e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006318 <HAL_ADC_IRQHandler+0x26c>)
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fc4f 	bl	8005986 <LL_ADC_GetMultimode>
 80060e8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <HAL_ADC_IRQHandler+0x78>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fe66 	bl	8006de8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2202      	movs	r2, #2
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_ADC_IRQHandler+0x8c>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8094 	beq.w	800626c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 808e 	beq.w	800626c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006160:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fbe4 	bl	800593a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d072      	beq.n	800625e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a64      	ldr	r2, [pc, #400]	@ (8006310 <HAL_ADC_IRQHandler+0x264>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_ADC_IRQHandler+0xea>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a65      	ldr	r2, [pc, #404]	@ (800631c <HAL_ADC_IRQHandler+0x270>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d002      	beq.n	8006192 <HAL_ADC_IRQHandler+0xe6>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	e003      	b.n	800619a <HAL_ADC_IRQHandler+0xee>
 8006192:	4b63      	ldr	r3, [pc, #396]	@ (8006320 <HAL_ADC_IRQHandler+0x274>)
 8006194:	e001      	b.n	800619a <HAL_ADC_IRQHandler+0xee>
 8006196:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	4293      	cmp	r3, r2
 80061a0:	d008      	beq.n	80061b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d002      	beq.n	80061b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d104      	bne.n	80061be <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	e014      	b.n	80061e8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a53      	ldr	r2, [pc, #332]	@ (8006310 <HAL_ADC_IRQHandler+0x264>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_ADC_IRQHandler+0x130>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a53      	ldr	r2, [pc, #332]	@ (800631c <HAL_ADC_IRQHandler+0x270>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d002      	beq.n	80061d8 <HAL_ADC_IRQHandler+0x12c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	e003      	b.n	80061e0 <HAL_ADC_IRQHandler+0x134>
 80061d8:	4b51      	ldr	r3, [pc, #324]	@ (8006320 <HAL_ADC_IRQHandler+0x274>)
 80061da:	e001      	b.n	80061e0 <HAL_ADC_IRQHandler+0x134>
 80061dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80061e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d135      	bne.n	800625e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d12e      	bne.n	800625e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fc8a 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 020c 	bic.w	r2, r2, #12
 800621e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d112      	bne.n	800625e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006244:	e00b      	b.n	800625e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624a:	f043 0210 	orr.w	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006256:	f043 0201 	orr.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f984 	bl	800656c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	220c      	movs	r2, #12
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_ADC_IRQHandler+0x1d4>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80b3 	beq.w	80063f2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80ad 	beq.w	80063f2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fb53 	bl	8005960 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80062ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fb3a 	bl	800593a <LL_ADC_REG_IsTriggerSourceSWStart>
 80062c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a10      	ldr	r2, [pc, #64]	@ (8006310 <HAL_ADC_IRQHandler+0x264>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_ADC_IRQHandler+0x23a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a11      	ldr	r2, [pc, #68]	@ (800631c <HAL_ADC_IRQHandler+0x270>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d002      	beq.n	80062e2 <HAL_ADC_IRQHandler+0x236>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	e003      	b.n	80062ea <HAL_ADC_IRQHandler+0x23e>
 80062e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006320 <HAL_ADC_IRQHandler+0x274>)
 80062e4:	e001      	b.n	80062ea <HAL_ADC_IRQHandler+0x23e>
 80062e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d008      	beq.n	8006304 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d002      	beq.n	8006304 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b07      	cmp	r3, #7
 8006302:	d10f      	bne.n	8006324 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	e01f      	b.n	800634e <HAL_ADC_IRQHandler+0x2a2>
 800630e:	bf00      	nop
 8006310:	50000100 	.word	0x50000100
 8006314:	50000300 	.word	0x50000300
 8006318:	50000700 	.word	0x50000700
 800631c:	50000500 	.word	0x50000500
 8006320:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a8b      	ldr	r2, [pc, #556]	@ (8006558 <HAL_ADC_IRQHandler+0x4ac>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_ADC_IRQHandler+0x296>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a8a      	ldr	r2, [pc, #552]	@ (800655c <HAL_ADC_IRQHandler+0x4b0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d002      	beq.n	800633e <HAL_ADC_IRQHandler+0x292>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	e003      	b.n	8006346 <HAL_ADC_IRQHandler+0x29a>
 800633e:	4b88      	ldr	r3, [pc, #544]	@ (8006560 <HAL_ADC_IRQHandler+0x4b4>)
 8006340:	e001      	b.n	8006346 <HAL_ADC_IRQHandler+0x29a>
 8006342:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006346:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d047      	beq.n	80063e4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_ADC_IRQHandler+0x2c2>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d03f      	beq.n	80063e4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800636a:	2b00      	cmp	r3, #0
 800636c:	d13a      	bne.n	80063e4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d133      	bne.n	80063e4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d12e      	bne.n	80063e4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fbda 	bl	8005b44 <LL_ADC_INJ_IsConversionOngoing>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11a      	bne.n	80063cc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d112      	bne.n	80063e4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063ca:	e00b      	b.n	80063e4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d0:	f043 0210 	orr.w	r2, r3, #16
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063dc:	f043 0201 	orr.w	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fe ffeb 	bl	80053c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2260      	movs	r2, #96	@ 0x60
 80063f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d011      	beq.n	8006420 <HAL_ADC_IRQHandler+0x374>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8b4 	bl	8006580 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d012      	beq.n	8006450 <HAL_ADC_IRQHandler+0x3a4>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006438:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fcbd 	bl	8006dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800644e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006456:	2b00      	cmp	r3, #0
 8006458:	d012      	beq.n	8006480 <HAL_ADC_IRQHandler+0x3d4>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00d      	beq.n	8006480 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006468:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fcaf 	bl	8006dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800647e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d043      	beq.n	8006512 <HAL_ADC_IRQHandler+0x466>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	d03e      	beq.n	8006512 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800649c:	2301      	movs	r3, #1
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a0:	e021      	b.n	80064e6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b0:	d004      	beq.n	80064bc <HAL_ADC_IRQHandler+0x410>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a28      	ldr	r2, [pc, #160]	@ (8006558 <HAL_ADC_IRQHandler+0x4ac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_ADC_IRQHandler+0x414>
 80064bc:	4b29      	ldr	r3, [pc, #164]	@ (8006564 <HAL_ADC_IRQHandler+0x4b8>)
 80064be:	e000      	b.n	80064c2 <HAL_ADC_IRQHandler+0x416>
 80064c0:	4b29      	ldr	r3, [pc, #164]	@ (8006568 <HAL_ADC_IRQHandler+0x4bc>)
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fa6d 	bl	80059a2 <LL_ADC_GetMultiDMATransfer>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80064ce:	2301      	movs	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d2:	e008      	b.n	80064e6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80064e2:	2301      	movs	r3, #1
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10e      	bne.n	800650a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064fc:	f043 0202 	orr.w	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f845 	bl	8006594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2210      	movs	r2, #16
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006518:	2b00      	cmp	r3, #0
 800651a:	d018      	beq.n	800654e <HAL_ADC_IRQHandler+0x4a2>
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006536:	f043 0208 	orr.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006546:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc2f 	bl	8006dac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800654e:	bf00      	nop
 8006550:	3728      	adds	r7, #40	@ 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	50000100 	.word	0x50000100
 800655c:	50000500 	.word	0x50000500
 8006560:	50000400 	.word	0x50000400
 8006564:	50000300 	.word	0x50000300
 8006568:	50000700 	.word	0x50000700

0800656c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fa76 	bl	8005aaa <LL_ADC_IsEnabled>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d176      	bne.n	80066b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	4b3c      	ldr	r3, [pc, #240]	@ (80066bc <ADC_Enable+0x114>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d6:	f043 0210 	orr.w	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e062      	b.n	80066b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fa31 	bl	8005a5a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006600:	d004      	beq.n	800660c <ADC_Enable+0x64>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2e      	ldr	r2, [pc, #184]	@ (80066c0 <ADC_Enable+0x118>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <ADC_Enable+0x68>
 800660c:	4b2d      	ldr	r3, [pc, #180]	@ (80066c4 <ADC_Enable+0x11c>)
 800660e:	e000      	b.n	8006612 <ADC_Enable+0x6a>
 8006610:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <ADC_Enable+0x120>)
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f983 	bl	800591e <LL_ADC_GetCommonPathInternalCh>
 8006618:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800661a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800661e:	2b00      	cmp	r3, #0
 8006620:	d013      	beq.n	800664a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006622:	4b2a      	ldr	r3, [pc, #168]	@ (80066cc <ADC_Enable+0x124>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	4a29      	ldr	r2, [pc, #164]	@ (80066d0 <ADC_Enable+0x128>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	099b      	lsrs	r3, r3, #6
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	4613      	mov	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800663c:	e002      	b.n	8006644 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f9      	bne.n	800663e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800664a:	f7ff f949 	bl	80058e0 <HAL_GetTick>
 800664e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006650:	e028      	b.n	80066a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fa27 	bl	8005aaa <LL_ADC_IsEnabled>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f9f7 	bl	8005a5a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800666c:	f7ff f938 	bl	80058e0 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d914      	bls.n	80066a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d00d      	beq.n	80066a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668c:	f043 0210 	orr.w	r2, r3, #16
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006698:	f043 0201 	orr.w	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e007      	b.n	80066b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d1cf      	bne.n	8006652 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	8000003f 	.word	0x8000003f
 80066c0:	50000100 	.word	0x50000100
 80066c4:	50000300 	.word	0x50000300
 80066c8:	50000700 	.word	0x50000700
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	053e2d63 	.word	0x053e2d63

080066d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff f9f5 	bl	8005ad0 <LL_ADC_IsDisableOngoing>
 80066e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff f9dc 	bl	8005aaa <LL_ADC_IsEnabled>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d047      	beq.n	8006788 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d144      	bne.n	8006788 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 030d 	and.w	r3, r3, #13
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10c      	bne.n	8006726 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff f9b6 	bl	8005a82 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2203      	movs	r2, #3
 800671c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800671e:	f7ff f8df 	bl	80058e0 <HAL_GetTick>
 8006722:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006724:	e029      	b.n	800677a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672a:	f043 0210 	orr.w	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006736:	f043 0201 	orr.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e023      	b.n	800678a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006742:	f7ff f8cd 	bl	80058e0 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d914      	bls.n	800677a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006762:	f043 0210 	orr.w	r2, r3, #16
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676e:	f043 0201 	orr.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e007      	b.n	800678a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1dc      	bne.n	8006742 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <LL_ADC_SetCommonPathInternalCh>:
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	609a      	str	r2, [r3, #8]
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <LL_ADC_GetCommonPathInternalCh>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <LL_ADC_SetOffset>:
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3360      	adds	r3, #96	@ 0x60
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <LL_ADC_SetOffset+0x44>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	4313      	orrs	r3, r2
 8006804:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	601a      	str	r2, [r3, #0]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	03fff000 	.word	0x03fff000

0800681c <LL_ADC_GetOffsetChannel>:
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3360      	adds	r3, #96	@ 0x60
 800682a:	461a      	mov	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_ADC_SetOffsetState>:
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3360      	adds	r3, #96	@ 0x60
 8006858:	461a      	mov	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	431a      	orrs	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <LL_ADC_SetOffsetSign>:
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3360      	adds	r3, #96	@ 0x60
 800688e:	461a      	mov	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	601a      	str	r2, [r3, #0]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <LL_ADC_SetOffsetSaturation>:
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3360      	adds	r3, #96	@ 0x60
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	431a      	orrs	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	615a      	str	r2, [r3, #20]
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_ADC_INJ_GetTrigAuto>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <LL_ADC_SetChannelSamplingTime>:
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3314      	adds	r3, #20
 800693c:	461a      	mov	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	0e5b      	lsrs	r3, r3, #25
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	4413      	add	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	0d1b      	lsrs	r3, r3, #20
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2107      	movs	r1, #7
 800695a:	fa01 f303 	lsl.w	r3, r1, r3
 800695e:	43db      	mvns	r3, r3
 8006960:	401a      	ands	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0d1b      	lsrs	r3, r3, #20
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	601a      	str	r2, [r3, #0]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <LL_ADC_SetChannelSingleDiff>:
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0318 	and.w	r3, r3, #24
 80069a6:	4908      	ldr	r1, [pc, #32]	@ (80069c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80069a8:	40d9      	lsrs	r1, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	400b      	ands	r3, r1
 80069ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b2:	431a      	orrs	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	0007ffff 	.word	0x0007ffff

080069cc <LL_ADC_GetMultimode>:
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 031f 	and.w	r3, r3, #31
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <LL_ADC_IsEnabled>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <LL_ADC_IsEnabled+0x18>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <LL_ADC_IsEnabled+0x1a>
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_ADC_StartCalibration>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <LL_ADC_IsCalibrationOnGoing>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a54:	d101      	bne.n	8006a5a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d101      	bne.n	8006a80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <LL_ADC_INJ_StartConversion>:
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006aa2:	f043 0208 	orr.w	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <LL_ADC_INJ_IsConversionOngoing>:
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d101      	bne.n	8006ace <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_ADCEx_Calibration_Start+0x1c>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e04d      	b.n	8006b94 <HAL_ADCEx_Calibration_Start+0xb8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fde7 	bl	80066d4 <ADC_Disable>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d136      	bne.n	8006b7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006b18:	f023 0302 	bic.w	r3, r3, #2
 8006b1c:	f043 0202 	orr.w	r2, r3, #2
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff ff6f 	bl	8006a0e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b30:	e014      	b.n	8006b5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d90d      	bls.n	8006b5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b44:	f023 0312 	bic.w	r3, r3, #18
 8006b48:	f043 0210 	orr.w	r2, r3, #16
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e01b      	b.n	8006b94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff ff6d 	bl	8006a40 <LL_ADC_IsCalibrationOnGoing>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e2      	bne.n	8006b32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b7c:	e005      	b.n	8006b8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b82:	f043 0210 	orr.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0004de01 	.word	0x0004de01

08006ba0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bb0:	d004      	beq.n	8006bbc <HAL_ADCEx_InjectedStart_IT+0x1c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a78      	ldr	r2, [pc, #480]	@ (8006d98 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_ADCEx_InjectedStart_IT+0x20>
 8006bbc:	4b77      	ldr	r3, [pc, #476]	@ (8006d9c <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8006bbe:	e000      	b.n	8006bc2 <HAL_ADCEx_InjectedStart_IT+0x22>
 8006bc0:	4b77      	ldr	r3, [pc, #476]	@ (8006da0 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ff02 	bl	80069cc <LL_ADC_GetMultimode>
 8006bc8:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff ff71 	bl	8006ab6 <LL_ADC_INJ_IsConversionOngoing>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e0d8      	b.n	8006d90 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006be8:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d107      	bne.n	8006c0e <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0c0      	b.n	8006d90 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_ADCEx_InjectedStart_IT+0x7c>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0b9      	b.n	8006d90 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fcbf 	bl	80065a8 <ADC_Enable>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 80a8 	bne.w	8006d86 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d006      	beq.n	8006c50 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c46:	f023 0208 	bic.w	r2, r3, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c4e:	e002      	b.n	8006c56 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d98 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a4a      	ldr	r2, [pc, #296]	@ (8006da4 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d002      	beq.n	8006c84 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	e003      	b.n	8006c8c <HAL_ADCEx_InjectedStart_IT+0xec>
 8006c84:	4b48      	ldr	r3, [pc, #288]	@ (8006da8 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8006c86:	e001      	b.n	8006c8c <HAL_ADCEx_InjectedStart_IT+0xec>
 8006c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d002      	beq.n	8006c9a <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2260      	movs	r2, #96	@ 0x60
 8006cac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cd2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d110      	bne.n	8006cfe <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0220 	bic.w	r2, r2, #32
 8006cea:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cfa:	605a      	str	r2, [r3, #4]
          break;
 8006cfc:	e010      	b.n	8006d20 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d0c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0220 	orr.w	r2, r2, #32
 8006d1c:	605a      	str	r2, [r3, #4]
          break;
 8006d1e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	@ (8006d98 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_ADCEx_InjectedStart_IT+0x19e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d002      	beq.n	8006d3a <HAL_ADCEx_InjectedStart_IT+0x19a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	e003      	b.n	8006d42 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8006d3c:	e001      	b.n	8006d42 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8006d3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d008      	beq.n	8006d5c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d002      	beq.n	8006d5c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	d10d      	bne.n	8006d78 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fdd5 	bl	8006910 <LL_ADC_INJ_GetTrigAuto>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d110      	bne.n	8006d8e <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fe8c 	bl	8006a8e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8006d76:	e00a      	b.n	8006d8e <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d7c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d84:	e003      	b.n	8006d8e <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	50000100 	.word	0x50000100
 8006d9c:	50000300 	.word	0x50000300
 8006da0:	50000700 	.word	0x50000700
 8006da4:	50000500 	.word	0x50000500
 8006da8:	50000400 	.word	0x50000400

08006dac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b0b6      	sub	sp, #216	@ 0xd8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d102      	bne.n	8006e26 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8006e20:	2302      	movs	r3, #2
 8006e22:	f000 bcfd 	b.w	8007820 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d130      	bne.n	8006ea0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	d179      	bne.n	8006f3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d010      	beq.n	8006e70 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	0e9b      	lsrs	r3, r3, #26
 8006e54:	025b      	lsls	r3, r3, #9
 8006e56:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006e62:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e6e:	e007      	b.n	8006e80 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	0e9b      	lsrs	r3, r3, #26
 8006e76:	025b      	lsls	r3, r3, #9
 8006e78:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e86:	4b84      	ldr	r3, [pc, #528]	@ (8007098 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006e92:	430b      	orrs	r3, r1
 8006e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e9c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006e9e:	e04c      	b.n	8006f3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11d      	bne.n	8006ee4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006ecc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ed8:	e004      	b.n	8006ee4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	0e9b      	lsrs	r3, r3, #26
 8006eea:	f003 021f 	and.w	r2, r3, #31
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10a      	bne.n	8006f3a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8007098 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff fdb9 	bl	8006ab6 <LL_ADC_INJ_IsConversionOngoing>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d124      	bne.n	8006f94 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d112      	bne.n	8006f7a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006f64:	055a      	lsls	r2, r3, #21
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f6c:	051b      	lsls	r3, r3, #20
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	e00c      	b.n	8006f94 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006f8a:	055a      	lsls	r2, r3, #21
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff fd65 	bl	8006a68 <LL_ADC_REG_IsConversionOngoing>
 8006f9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fd85 	bl	8006ab6 <LL_ADC_INJ_IsConversionOngoing>
 8006fac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 822e 	bne.w	8007416 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f040 8229 	bne.w	8007416 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d116      	bne.n	8007002 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d108      	bne.n	8006ff0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006fec:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006fee:	e01f      	b.n	8007030 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006ffe:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007000:	e016      	b.n	8007030 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007008:	2b01      	cmp	r3, #1
 800700a:	d109      	bne.n	8007020 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800701e:	e007      	b.n	8007030 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800702e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007036:	2b01      	cmp	r3, #1
 8007038:	d110      	bne.n	800705c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	430b      	orrs	r3, r1
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0202 	orr.w	r2, r2, #2
 8007058:	611a      	str	r2, [r3, #16]
 800705a:	e007      	b.n	800706c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0202 	bic.w	r2, r2, #2
 800706a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007074:	d112      	bne.n	800709c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	4619      	mov	r1, r3
 8007082:	f7ff fc53 	bl	800692c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fc2b 	bl	80068ea <LL_ADC_SetSamplingTimeCommonConfig>
 8007094:	e011      	b.n	80070ba <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8007096:	bf00      	nop
 8007098:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80070a8:	461a      	mov	r2, r3
 80070aa:	f7ff fc3f 	bl	800692c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fc18 	bl	80068ea <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	08db      	lsrs	r3, r3, #3
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d022      	beq.n	8007122 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6919      	ldr	r1, [r3, #16]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070ec:	f7ff fb72 	bl	80067d4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6919      	ldr	r1, [r3, #16]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	461a      	mov	r2, r3
 80070fe:	f7ff fbbe 	bl	800687e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800710e:	2b01      	cmp	r3, #1
 8007110:	d102      	bne.n	8007118 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8007112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007116:	e000      	b.n	800711a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8007118:	2300      	movs	r3, #0
 800711a:	461a      	mov	r2, r3
 800711c:	f7ff fbca 	bl	80068b4 <LL_ADC_SetOffsetSaturation>
 8007120:	e179      	b.n	8007416 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fb77 	bl	800681c <LL_ADC_GetOffsetChannel>
 800712e:	4603      	mov	r3, r0
 8007130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fb6c 	bl	800681c <LL_ADC_GetOffsetChannel>
 8007144:	4603      	mov	r3, r0
 8007146:	0e9b      	lsrs	r3, r3, #26
 8007148:	f003 021f 	and.w	r2, r3, #31
 800714c:	e01e      	b.n	800718c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fb61 	bl	800681c <LL_ADC_GetOffsetChannel>
 800715a:	4603      	mov	r3, r0
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800716c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007170:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 800717c:	2320      	movs	r3, #32
 800717e:	e004      	b.n	800718a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8007180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007184:	fab3 f383 	clz	r3, r3
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	0e9b      	lsrs	r3, r3, #26
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	e018      	b.n	80071d6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071b0:	fa93 f3a3 	rbit	r3, r3
 80071b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80071b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80071c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80071c8:	2320      	movs	r3, #32
 80071ca:	e004      	b.n	80071d6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80071cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071d0:	fab3 f383 	clz	r3, r3
 80071d4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d106      	bne.n	80071e8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fb30 	bl	8006848 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2101      	movs	r1, #1
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fb14 	bl	800681c <LL_ADC_GetOffsetChannel>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2101      	movs	r1, #1
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fb09 	bl	800681c <LL_ADC_GetOffsetChannel>
 800720a:	4603      	mov	r3, r0
 800720c:	0e9b      	lsrs	r3, r3, #26
 800720e:	f003 021f 	and.w	r2, r3, #31
 8007212:	e01e      	b.n	8007252 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fafe 	bl	800681c <LL_ADC_GetOffsetChannel>
 8007220:	4603      	mov	r3, r0
 8007222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800722a:	fa93 f3a3 	rbit	r3, r3
 800722e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8007232:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800723a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8007242:	2320      	movs	r3, #32
 8007244:	e004      	b.n	8007250 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8007246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	0e9b      	lsrs	r3, r3, #26
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	e018      	b.n	800729c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007272:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800727e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007286:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800728e:	2320      	movs	r3, #32
 8007290:	e004      	b.n	800729c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8007292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007296:	fab3 f383 	clz	r3, r3
 800729a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800729c:	429a      	cmp	r2, r3
 800729e:	d106      	bne.n	80072ae <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2101      	movs	r1, #1
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff facd 	bl	8006848 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2102      	movs	r1, #2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fab1 	bl	800681c <LL_ADC_GetOffsetChannel>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2102      	movs	r1, #2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff faa6 	bl	800681c <LL_ADC_GetOffsetChannel>
 80072d0:	4603      	mov	r3, r0
 80072d2:	0e9b      	lsrs	r3, r3, #26
 80072d4:	f003 021f 	and.w	r2, r3, #31
 80072d8:	e01e      	b.n	8007318 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2102      	movs	r1, #2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff fa9b 	bl	800681c <LL_ADC_GetOffsetChannel>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072f0:	fa93 f3a3 	rbit	r3, r3
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80072f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8007308:	2320      	movs	r3, #32
 800730a:	e004      	b.n	8007316 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800730c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007310:	fab3 f383 	clz	r3, r3
 8007314:	b2db      	uxtb	r3, r3
 8007316:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	0e9b      	lsrs	r3, r3, #26
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	e014      	b.n	800735a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007338:	fa93 f3a3 	rbit	r3, r3
 800733c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800733e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007344:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800734c:	2320      	movs	r3, #32
 800734e:	e004      	b.n	800735a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8007350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007354:	fab3 f383 	clz	r3, r3
 8007358:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800735a:	429a      	cmp	r2, r3
 800735c:	d106      	bne.n	800736c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fa6e 	bl	8006848 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2103      	movs	r1, #3
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fa52 	bl	800681c <LL_ADC_GetOffsetChannel>
 8007378:	4603      	mov	r3, r0
 800737a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2103      	movs	r1, #3
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fa47 	bl	800681c <LL_ADC_GetOffsetChannel>
 800738e:	4603      	mov	r3, r0
 8007390:	0e9b      	lsrs	r3, r3, #26
 8007392:	f003 021f 	and.w	r2, r3, #31
 8007396:	e017      	b.n	80073c8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2103      	movs	r1, #3
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fa3c 	bl	800681c <LL_ADC_GetOffsetChannel>
 80073a4:	4603      	mov	r3, r0
 80073a6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80073b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80073b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80073ba:	2320      	movs	r3, #32
 80073bc:	e003      	b.n	80073c6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80073be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073c0:	fab3 f383 	clz	r3, r3
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	0e9b      	lsrs	r3, r3, #26
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	e011      	b.n	8007404 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073e8:	fa93 f3a3 	rbit	r3, r3
 80073ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80073ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80073f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80073f8:	2320      	movs	r3, #32
 80073fa:	e003      	b.n	8007404 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80073fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073fe:	fab3 f383 	clz	r3, r3
 8007402:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007404:	429a      	cmp	r2, r3
 8007406:	d106      	bne.n	8007416 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	2103      	movs	r1, #3
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fa19 	bl	8006848 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fae4 	bl	80069e8 <LL_ADC_IsEnabled>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 813d 	bne.w	80076a2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	461a      	mov	r2, r3
 8007436:	f7ff faa5 	bl	8006984 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	4aa2      	ldr	r2, [pc, #648]	@ (80076c8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	f040 812e 	bne.w	80076a2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	0e9b      	lsrs	r3, r3, #26
 800745c:	3301      	adds	r3, #1
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b09      	cmp	r3, #9
 8007464:	bf94      	ite	ls
 8007466:	2301      	movls	r3, #1
 8007468:	2300      	movhi	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	e019      	b.n	80074a2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007476:	fa93 f3a3 	rbit	r3, r3
 800747a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800747c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8007486:	2320      	movs	r3, #32
 8007488:	e003      	b.n	8007492 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800748a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800748c:	fab3 f383 	clz	r3, r3
 8007490:	b2db      	uxtb	r3, r3
 8007492:	3301      	adds	r3, #1
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2b09      	cmp	r3, #9
 800749a:	bf94      	ite	ls
 800749c:	2301      	movls	r3, #1
 800749e:	2300      	movhi	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d079      	beq.n	800759a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d107      	bne.n	80074c2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	0e9b      	lsrs	r3, r3, #26
 80074b8:	3301      	adds	r3, #1
 80074ba:	069b      	lsls	r3, r3, #26
 80074bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074c0:	e015      	b.n	80074ee <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ca:	fa93 f3a3 	rbit	r3, r3
 80074ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80074d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80074d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80074da:	2320      	movs	r3, #32
 80074dc:	e003      	b.n	80074e6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80074de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e0:	fab3 f383 	clz	r3, r3
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	3301      	adds	r3, #1
 80074e8:	069b      	lsls	r3, r3, #26
 80074ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <HAL_ADCEx_InjectedConfigChannel+0x712>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0e9b      	lsrs	r3, r3, #26
 8007500:	3301      	adds	r3, #1
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2101      	movs	r1, #1
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	e017      	b.n	800753e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007516:	fa93 f3a3 	rbit	r3, r3
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8007526:	2320      	movs	r3, #32
 8007528:	e003      	b.n	8007532 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800752a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800752c:	fab3 f383 	clz	r3, r3
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3301      	adds	r3, #1
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	ea42 0103 	orr.w	r1, r2, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	0e9b      	lsrs	r3, r3, #26
 8007554:	3301      	adds	r3, #1
 8007556:	f003 021f 	and.w	r2, r3, #31
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	e018      	b.n	8007596 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756c:	fa93 f3a3 	rbit	r3, r3
 8007570:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800757c:	2320      	movs	r3, #32
 800757e:	e003      	b.n	8007588 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	fab3 f383 	clz	r3, r3
 8007586:	b2db      	uxtb	r3, r3
 8007588:	3301      	adds	r3, #1
 800758a:	f003 021f 	and.w	r2, r3, #31
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007596:	430b      	orrs	r3, r1
 8007598:	e07e      	b.n	8007698 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d107      	bne.n	80075b6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	0e9b      	lsrs	r3, r3, #26
 80075ac:	3301      	adds	r3, #1
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80075b4:	e015      	b.n	80075e2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	fa93 f3a3 	rbit	r3, r3
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80075ce:	2320      	movs	r3, #32
 80075d0:	e003      	b.n	80075da <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80075d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d4:	fab3 f383 	clz	r3, r3
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	3301      	adds	r3, #1
 80075dc:	069b      	lsls	r3, r3, #26
 80075de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	0e9b      	lsrs	r3, r3, #26
 80075f4:	3301      	adds	r3, #1
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	2101      	movs	r1, #1
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	e017      	b.n	8007632 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	fa93 f3a3 	rbit	r3, r3
 800760e:	61bb      	str	r3, [r7, #24]
  return result;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800761a:	2320      	movs	r3, #32
 800761c:	e003      	b.n	8007626 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	fab3 f383 	clz	r3, r3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	3301      	adds	r3, #1
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2101      	movs	r1, #1
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	ea42 0103 	orr.w	r1, r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	0e9b      	lsrs	r3, r3, #26
 8007648:	3301      	adds	r3, #1
 800764a:	f003 021f 	and.w	r2, r3, #31
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	3b1e      	subs	r3, #30
 8007656:	051b      	lsls	r3, r3, #20
 8007658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800765c:	e01b      	b.n	8007696 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	fa93 f3a3 	rbit	r3, r3
 800766a:	60fb      	str	r3, [r7, #12]
  return result;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8007676:	2320      	movs	r3, #32
 8007678:	e003      	b.n	8007682 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	fab3 f383 	clz	r3, r3
 8007680:	b2db      	uxtb	r3, r3
 8007682:	3301      	adds	r3, #1
 8007684:	f003 021f 	and.w	r2, r3, #31
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	3b1e      	subs	r3, #30
 8007690:	051b      	lsls	r3, r3, #20
 8007692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007696:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800769c:	4619      	mov	r1, r3
 800769e:	f7ff f945 	bl	800692c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 80b2 	beq.w	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076b8:	d004      	beq.n	80076c4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a04      	ldr	r2, [pc, #16]	@ (80076d0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d109      	bne.n	80076d8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80076c4:	4b03      	ldr	r3, [pc, #12]	@ (80076d4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80076c6:	e008      	b.n	80076da <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80076c8:	407f0000 	.word	0x407f0000
 80076cc:	80080000 	.word	0x80080000
 80076d0:	50000100 	.word	0x50000100
 80076d4:	50000300 	.word	0x50000300
 80076d8:	4b53      	ldr	r3, [pc, #332]	@ (8007828 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f86c 	bl	80067b8 <LL_ADC_GetCommonPathInternalCh>
 80076e0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a50      	ldr	r2, [pc, #320]	@ (800782c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a4f      	ldr	r2, [pc, #316]	@ (8007830 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d139      	bne.n	800776c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80076f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d133      	bne.n	800776c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770c:	d004      	beq.n	8007718 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a48      	ldr	r2, [pc, #288]	@ (8007834 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d17a      	bne.n	800780e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007720:	d004      	beq.n	800772c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a44      	ldr	r2, [pc, #272]	@ (8007838 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d101      	bne.n	8007730 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800772c:	4a43      	ldr	r2, [pc, #268]	@ (800783c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800772e:	e000      	b.n	8007732 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8007730:	4a3d      	ldr	r2, [pc, #244]	@ (8007828 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8007732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007736:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7ff f828 	bl	8006792 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8007742:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	4a3e      	ldr	r2, [pc, #248]	@ (8007844 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	099a      	lsrs	r2, r3, #6
 8007750:	4613      	mov	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800775a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800775c:	e002      	b.n	8007764 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	3b01      	subs	r3, #1
 8007762:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f9      	bne.n	800775e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800776a:	e050      	b.n	800780e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a35      	ldr	r2, [pc, #212]	@ (8007848 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d125      	bne.n	80077c2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800777a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d11f      	bne.n	80077c2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2c      	ldr	r2, [pc, #176]	@ (8007838 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d104      	bne.n	8007796 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a2e      	ldr	r2, [pc, #184]	@ (800784c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d03d      	beq.n	8007812 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800779e:	d004      	beq.n	80077aa <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a24      	ldr	r2, [pc, #144]	@ (8007838 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d101      	bne.n	80077ae <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80077aa:	4a24      	ldr	r2, [pc, #144]	@ (800783c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80077ac:	e000      	b.n	80077b0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80077ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007828 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80077b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe ffe9 	bl	8006792 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077c0:	e027      	b.n	8007812 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a22      	ldr	r2, [pc, #136]	@ (8007850 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d123      	bne.n	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11d      	bne.n	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a16      	ldr	r2, [pc, #88]	@ (8007838 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d018      	beq.n	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ea:	d004      	beq.n	80077f6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a11      	ldr	r2, [pc, #68]	@ (8007838 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d101      	bne.n	80077fa <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80077f6:	4a11      	ldr	r2, [pc, #68]	@ (800783c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80077f8:	e000      	b.n	80077fc <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80077fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007828 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80077fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007800:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe ffc3 	bl	8006792 <LL_ADC_SetCommonPathInternalCh>
 800780c:	e002      	b.n	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007812:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800781c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007820:	4618      	mov	r0, r3
 8007822:	37d8      	adds	r7, #216	@ 0xd8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	50000700 	.word	0x50000700
 800782c:	c3210000 	.word	0xc3210000
 8007830:	90c00010 	.word	0x90c00010
 8007834:	50000600 	.word	0x50000600
 8007838:	50000100 	.word	0x50000100
 800783c:	50000300 	.word	0x50000300
 8007840:	2000000c 	.word	0x2000000c
 8007844:	053e2d63 	.word	0x053e2d63
 8007848:	c7520000 	.word	0xc7520000
 800784c:	50000500 	.word	0x50000500
 8007850:	cb840000 	.word	0xcb840000

08007854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b0a1      	sub	sp, #132	@ 0x84
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800786e:	2302      	movs	r3, #2
 8007870:	e0e7      	b.n	8007a42 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800787a:	2300      	movs	r3, #0
 800787c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800787e:	2300      	movs	r3, #0
 8007880:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800788a:	d102      	bne.n	8007892 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800788c:	4b6f      	ldr	r3, [pc, #444]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	e009      	b.n	80078a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6e      	ldr	r2, [pc, #440]	@ (8007a50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d102      	bne.n	80078a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800789c:	4b6d      	ldr	r3, [pc, #436]	@ (8007a54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800789e:	60bb      	str	r3, [r7, #8]
 80078a0:	e001      	b.n	80078a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0be      	b.n	8007a42 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff f8ce 	bl	8006a68 <LL_ADC_REG_IsConversionOngoing>
 80078cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff f8c8 	bl	8006a68 <LL_ADC_REG_IsConversionOngoing>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 80a0 	bne.w	8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80078e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 809c 	bne.w	8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078f0:	d004      	beq.n	80078fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a55      	ldr	r2, [pc, #340]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d101      	bne.n	8007900 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80078fc:	4b56      	ldr	r3, [pc, #344]	@ (8007a58 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80078fe:	e000      	b.n	8007902 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007900:	4b56      	ldr	r3, [pc, #344]	@ (8007a5c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007902:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d04b      	beq.n	80079a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800790c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800791e:	035b      	lsls	r3, r3, #13
 8007920:	430b      	orrs	r3, r1
 8007922:	431a      	orrs	r2, r3
 8007924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007926:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007930:	d004      	beq.n	800793c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a45      	ldr	r2, [pc, #276]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d10f      	bne.n	800795c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800793c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007940:	f7ff f852 	bl	80069e8 <LL_ADC_IsEnabled>
 8007944:	4604      	mov	r4, r0
 8007946:	4841      	ldr	r0, [pc, #260]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007948:	f7ff f84e 	bl	80069e8 <LL_ADC_IsEnabled>
 800794c:	4603      	mov	r3, r0
 800794e:	4323      	orrs	r3, r4
 8007950:	2b00      	cmp	r3, #0
 8007952:	bf0c      	ite	eq
 8007954:	2301      	moveq	r3, #1
 8007956:	2300      	movne	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e012      	b.n	8007982 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800795c:	483c      	ldr	r0, [pc, #240]	@ (8007a50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800795e:	f7ff f843 	bl	80069e8 <LL_ADC_IsEnabled>
 8007962:	4604      	mov	r4, r0
 8007964:	483b      	ldr	r0, [pc, #236]	@ (8007a54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007966:	f7ff f83f 	bl	80069e8 <LL_ADC_IsEnabled>
 800796a:	4603      	mov	r3, r0
 800796c:	431c      	orrs	r4, r3
 800796e:	483c      	ldr	r0, [pc, #240]	@ (8007a60 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007970:	f7ff f83a 	bl	80069e8 <LL_ADC_IsEnabled>
 8007974:	4603      	mov	r3, r0
 8007976:	4323      	orrs	r3, r4
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d056      	beq.n	8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800798e:	f023 030f 	bic.w	r3, r3, #15
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	6811      	ldr	r1, [r2, #0]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	430a      	orrs	r2, r1
 800799c:	431a      	orrs	r2, r3
 800799e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079a2:	e047      	b.n	8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80079a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b8:	d004      	beq.n	80079c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a23      	ldr	r2, [pc, #140]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10f      	bne.n	80079e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80079c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80079c8:	f7ff f80e 	bl	80069e8 <LL_ADC_IsEnabled>
 80079cc:	4604      	mov	r4, r0
 80079ce:	481f      	ldr	r0, [pc, #124]	@ (8007a4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079d0:	f7ff f80a 	bl	80069e8 <LL_ADC_IsEnabled>
 80079d4:	4603      	mov	r3, r0
 80079d6:	4323      	orrs	r3, r4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bf0c      	ite	eq
 80079dc:	2301      	moveq	r3, #1
 80079de:	2300      	movne	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	e012      	b.n	8007a0a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80079e4:	481a      	ldr	r0, [pc, #104]	@ (8007a50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80079e6:	f7fe ffff 	bl	80069e8 <LL_ADC_IsEnabled>
 80079ea:	4604      	mov	r4, r0
 80079ec:	4819      	ldr	r0, [pc, #100]	@ (8007a54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80079ee:	f7fe fffb 	bl	80069e8 <LL_ADC_IsEnabled>
 80079f2:	4603      	mov	r3, r0
 80079f4:	431c      	orrs	r4, r3
 80079f6:	481a      	ldr	r0, [pc, #104]	@ (8007a60 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80079f8:	f7fe fff6 	bl	80069e8 <LL_ADC_IsEnabled>
 80079fc:	4603      	mov	r3, r0
 80079fe:	4323      	orrs	r3, r4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d012      	beq.n	8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007a16:	f023 030f 	bic.w	r3, r3, #15
 8007a1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a1c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a1e:	e009      	b.n	8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a24:	f043 0220 	orr.w	r2, r3, #32
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007a32:	e000      	b.n	8007a36 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3784      	adds	r7, #132	@ 0x84
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd90      	pop	{r4, r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	50000100 	.word	0x50000100
 8007a50:	50000400 	.word	0x50000400
 8007a54:	50000500 	.word	0x50000500
 8007a58:	50000300 	.word	0x50000300
 8007a5c:	50000700 	.word	0x50000700
 8007a60:	50000600 	.word	0x50000600

08007a64 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e023      	b.n	8007abe <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fc ff80 	bl	8004990 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <__NVIC_SetPriorityGrouping+0x44>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007afa:	4a04      	ldr	r2, [pc, #16]	@ (8007b0c <__NVIC_SetPriorityGrouping+0x44>)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	60d3      	str	r3, [r2, #12]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	e000ed00 	.word	0xe000ed00

08007b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b14:	4b04      	ldr	r3, [pc, #16]	@ (8007b28 <__NVIC_GetPriorityGrouping+0x18>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	f003 0307 	and.w	r3, r3, #7
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	e000ed00 	.word	0xe000ed00

08007b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db0b      	blt.n	8007b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	f003 021f 	and.w	r2, r3, #31
 8007b44:	4907      	ldr	r1, [pc, #28]	@ (8007b64 <__NVIC_EnableIRQ+0x38>)
 8007b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	e000e100 	.word	0xe000e100

08007b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	db0a      	blt.n	8007b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	490c      	ldr	r1, [pc, #48]	@ (8007bb4 <__NVIC_SetPriority+0x4c>)
 8007b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b86:	0112      	lsls	r2, r2, #4
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b90:	e00a      	b.n	8007ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	4908      	ldr	r1, [pc, #32]	@ (8007bb8 <__NVIC_SetPriority+0x50>)
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	3b04      	subs	r3, #4
 8007ba0:	0112      	lsls	r2, r2, #4
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	761a      	strb	r2, [r3, #24]
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	e000e100 	.word	0xe000e100
 8007bb8:	e000ed00 	.word	0xe000ed00

08007bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b089      	sub	sp, #36	@ 0x24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f1c3 0307 	rsb	r3, r3, #7
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	bf28      	it	cs
 8007bda:	2304      	movcs	r3, #4
 8007bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	3304      	adds	r3, #4
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d902      	bls.n	8007bec <NVIC_EncodePriority+0x30>
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	3b03      	subs	r3, #3
 8007bea:	e000      	b.n	8007bee <NVIC_EncodePriority+0x32>
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	401a      	ands	r2, r3
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c04:	f04f 31ff 	mov.w	r1, #4294967295
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	43d9      	mvns	r1, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c14:	4313      	orrs	r3, r2
         );
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3724      	adds	r7, #36	@ 0x24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c34:	d301      	bcc.n	8007c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c36:	2301      	movs	r3, #1
 8007c38:	e00f      	b.n	8007c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c64 <SysTick_Config+0x40>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c42:	210f      	movs	r1, #15
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	f7ff ff8e 	bl	8007b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <SysTick_Config+0x40>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c52:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <SysTick_Config+0x40>)
 8007c54:	2207      	movs	r2, #7
 8007c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000e010 	.word	0xe000e010

08007c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff29 	bl	8007ac8 <__NVIC_SetPriorityGrouping>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4603      	mov	r3, r0
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c8c:	f7ff ff40 	bl	8007b10 <__NVIC_GetPriorityGrouping>
 8007c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff90 	bl	8007bbc <NVIC_EncodePriority>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff ff5f 	bl	8007b68 <__NVIC_SetPriority>
}
 8007caa:	bf00      	nop
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff ff33 	bl	8007b2c <__NVIC_EnableIRQ>
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff ffa4 	bl	8007c24 <SysTick_Config>
 8007cdc:	4603      	mov	r3, r0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e08d      	b.n	8007e16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	4b47      	ldr	r3, [pc, #284]	@ (8007e20 <HAL_DMA_Init+0x138>)
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d80f      	bhi.n	8007d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b45      	ldr	r3, [pc, #276]	@ (8007e24 <HAL_DMA_Init+0x13c>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	4a45      	ldr	r2, [pc, #276]	@ (8007e28 <HAL_DMA_Init+0x140>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	091b      	lsrs	r3, r3, #4
 8007d18:	009a      	lsls	r2, r3, #2
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a42      	ldr	r2, [pc, #264]	@ (8007e2c <HAL_DMA_Init+0x144>)
 8007d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d24:	e00e      	b.n	8007d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <HAL_DMA_Init+0x148>)
 8007d2e:	4413      	add	r3, r2
 8007d30:	4a3d      	ldr	r2, [pc, #244]	@ (8007e28 <HAL_DMA_Init+0x140>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	009a      	lsls	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a3c      	ldr	r2, [pc, #240]	@ (8007e34 <HAL_DMA_Init+0x14c>)
 8007d42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa2c 	bl	80081f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007da4:	d102      	bne.n	8007dac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007dc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <HAL_DMA_Init+0x104>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d80c      	bhi.n	8007dec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa4c 	bl	8008270 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	e008      	b.n	8007dfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40020407 	.word	0x40020407
 8007e24:	bffdfff8 	.word	0xbffdfff8
 8007e28:	cccccccd 	.word	0xcccccccd
 8007e2c:	40020000 	.word	0x40020000
 8007e30:	bffdfbf8 	.word	0xbffdfbf8
 8007e34:	40020400 	.word	0x40020400

08007e38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_DMA_Start_IT+0x20>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e066      	b.n	8007f26 <HAL_DMA_Start_IT+0xee>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d155      	bne.n	8007f18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f970 	bl	8008176 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 020e 	orr.w	r2, r2, #14
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e00f      	b.n	8007ed0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0204 	bic.w	r2, r2, #4
 8007ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 020a 	orr.w	r2, r2, #10
 8007ece:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e005      	b.n	8007f24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f20:	2302      	movs	r3, #2
 8007f22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d00d      	beq.n	8007f62 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
 8007f60:	e047      	b.n	8007ff2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 020e 	bic.w	r2, r2, #14
 8007f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0201 	bic.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f96:	f003 021f 	and.w	r2, r3, #31
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007fae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007fd0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
    }
  }
  return status;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2204      	movs	r2, #4
 800801e:	409a      	lsls	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4013      	ands	r3, r2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d026      	beq.n	8008076 <HAL_DMA_IRQHandler+0x7a>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d021      	beq.n	8008076 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d107      	bne.n	8008050 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0204 	bic.w	r2, r2, #4
 800804e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008054:	f003 021f 	and.w	r2, r3, #31
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805c:	2104      	movs	r1, #4
 800805e:	fa01 f202 	lsl.w	r2, r1, r2
 8008062:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d071      	beq.n	8008150 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008074:	e06c      	b.n	8008150 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2202      	movs	r2, #2
 8008080:	409a      	lsls	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4013      	ands	r3, r2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d02e      	beq.n	80080e8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d029      	beq.n	80080e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 020a 	bic.w	r2, r2, #10
 80080b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080be:	f003 021f 	and.w	r2, r3, #31
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c6:	2102      	movs	r1, #2
 80080c8:	fa01 f202 	lsl.w	r2, r1, r2
 80080cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d038      	beq.n	8008150 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80080e6:	e033      	b.n	8008150 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2208      	movs	r2, #8
 80080f2:	409a      	lsls	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d02a      	beq.n	8008152 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d025      	beq.n	8008152 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 020e 	bic.w	r2, r2, #14
 8008114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811a:	f003 021f 	and.w	r2, r3, #31
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	2101      	movs	r1, #1
 8008124:	fa01 f202 	lsl.w	r2, r1, r2
 8008128:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008150:	bf00      	nop
 8008152:	bf00      	nop
}
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008168:	b2db      	uxtb	r3, r3
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800818c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800819e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a4:	f003 021f 	and.w	r2, r3, #31
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	2101      	movs	r1, #1
 80081ae:	fa01 f202 	lsl.w	r2, r1, r2
 80081b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d108      	bne.n	80081d6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80081d4:	e007      	b.n	80081e6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	60da      	str	r2, [r3, #12]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	4b16      	ldr	r3, [pc, #88]	@ (800825c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008204:	429a      	cmp	r2, r3
 8008206:	d802      	bhi.n	800820e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008208:	4b15      	ldr	r3, [pc, #84]	@ (8008260 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e001      	b.n	8008212 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800820e:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008210:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	3b08      	subs	r3, #8
 800821e:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008220:	fba2 2303 	umull	r2, r3, r2, r3
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822c:	089b      	lsrs	r3, r3, #2
 800822e:	009a      	lsls	r2, r3, #2
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4413      	add	r3, r2
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a0b      	ldr	r2, [pc, #44]	@ (800826c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800823e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2201      	movs	r2, #1
 8008248:	409a      	lsls	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40020407 	.word	0x40020407
 8008260:	40020800 	.word	0x40020800
 8008264:	40020820 	.word	0x40020820
 8008268:	cccccccd 	.word	0xcccccccd
 800826c:	40020880 	.word	0x40020880

08008270 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	461a      	mov	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a08      	ldr	r2, [pc, #32]	@ (80082b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008292:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3b01      	subs	r3, #1
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	2201      	movs	r2, #1
 800829e:	409a      	lsls	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	1000823f 	.word	0x1000823f
 80082b4:	40020940 	.word	0x40020940

080082b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e147      	b.n	800855a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fc fb76 	bl	80049d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0210 	bic.w	r2, r2, #16
 80082f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082f4:	f7fd faf4 	bl	80058e0 <HAL_GetTick>
 80082f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80082fa:	e012      	b.n	8008322 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80082fc:	f7fd faf0 	bl	80058e0 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b0a      	cmp	r3, #10
 8008308:	d90b      	bls.n	8008322 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830e:	f043 0201 	orr.w	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e11b      	b.n	800855a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b08      	cmp	r3, #8
 800832e:	d0e5      	beq.n	80082fc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008340:	f7fd face 	bl	80058e0 <HAL_GetTick>
 8008344:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008346:	e012      	b.n	800836e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008348:	f7fd faca 	bl	80058e0 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b0a      	cmp	r3, #10
 8008354:	d90b      	bls.n	800836e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835a:	f043 0201 	orr.w	r2, r3, #1
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2203      	movs	r2, #3
 8008366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e0f5      	b.n	800855a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0e5      	beq.n	8008348 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0202 	orr.w	r2, r2, #2
 800838a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a74      	ldr	r2, [pc, #464]	@ (8008564 <HAL_FDCAN_Init+0x2ac>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d103      	bne.n	800839e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008396:	4a74      	ldr	r2, [pc, #464]	@ (8008568 <HAL_FDCAN_Init+0x2b0>)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7c1b      	ldrb	r3, [r3, #16]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d108      	bne.n	80083b8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083b4:	619a      	str	r2, [r3, #24]
 80083b6:	e007      	b.n	80083c8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7c5b      	ldrb	r3, [r3, #17]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d108      	bne.n	80083e2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083de:	619a      	str	r2, [r3, #24]
 80083e0:	e007      	b.n	80083f2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7c9b      	ldrb	r3, [r3, #18]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d108      	bne.n	800840c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008408:	619a      	str	r2, [r3, #24]
 800840a:	e007      	b.n	800841c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800841a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008440:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0210 	bic.w	r2, r2, #16
 8008450:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d108      	bne.n	800846c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0204 	orr.w	r2, r2, #4
 8008468:	619a      	str	r2, [r3, #24]
 800846a:	e02c      	b.n	80084c6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d028      	beq.n	80084c6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d01c      	beq.n	80084b6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800848a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0210 	orr.w	r2, r2, #16
 800849a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d110      	bne.n	80084c6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0220 	orr.w	r2, r2, #32
 80084b2:	619a      	str	r2, [r3, #24]
 80084b4:	e007      	b.n	80084c6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0220 	orr.w	r2, r2, #32
 80084c4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084d6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80084de:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80084ee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80084f0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084fa:	d115      	bne.n	8008528 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	3b01      	subs	r3, #1
 8008508:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800850a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008510:	3b01      	subs	r3, #1
 8008512:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008514:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851c:	3b01      	subs	r3, #1
 800851e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008524:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008526:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc56 	bl	8008df0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	40006400 	.word	0x40006400
 8008568:	40006500 	.word	0x40006500

0800856c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800857c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d002      	beq.n	800858a <HAL_FDCAN_ConfigFilter+0x1e>
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d13d      	bne.n	8008606 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d119      	bne.n	80085c6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800859e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80085a6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e01d      	b.n	8008602 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	075a      	lsls	r2, r3, #29
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	079a      	lsls	r2, r3, #30
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	e006      	b.n	8008614 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800860a:	f043 0202 	orr.w	r2, r3, #2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
  }
}
 8008614:	4618      	mov	r0, r3
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	d110      	bne.n	8008656 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0201 	bic.w	r2, r2, #1
 800864a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	e006      	b.n	8008664 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865a:	f043 0204 	orr.w	r2, r3, #4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
  }
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d12c      	bne.n	80086e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800869c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e023      	b.n	80086f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 fc02 	bl	8008ec8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2101      	movs	r1, #1
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	fa01 f202 	lsl.w	r2, r1, r2
 80086d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80086d4:	2201      	movs	r2, #1
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	409a      	lsls	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e006      	b.n	80086f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b08b      	sub	sp, #44	@ 0x2c
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008710:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008712:	7efb      	ldrb	r3, [r7, #27]
 8008714:	2b02      	cmp	r3, #2
 8008716:	f040 80e8 	bne.w	80088ea <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	d137      	bne.n	8008790 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	2b00      	cmp	r3, #0
 800872e:	d107      	bne.n	8008740 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008734:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0db      	b.n	80088f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008748:	0e1b      	lsrs	r3, r3, #24
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10a      	bne.n	8008768 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875a:	0a5b      	lsrs	r3, r3, #9
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008764:	2301      	movs	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	4613      	mov	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
 800878e:	e036      	b.n	80087fe <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	2b00      	cmp	r3, #0
 800879e:	d107      	bne.n	80087b0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e0a3      	b.n	80088f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087b8:	0e1b      	lsrs	r3, r3, #24
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10a      	bne.n	80087d8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80087d4:	2301      	movs	r3, #1
 80087d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	4613      	mov	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	4413      	add	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	440b      	add	r3, r1
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d107      	bne.n	8008822 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	0c9b      	lsrs	r3, r3, #18
 8008818:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e005      	b.n	800882e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	3304      	adds	r3, #4
 800884a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	0c1b      	lsrs	r3, r3, #16
 800885c:	f003 020f 	and.w	r2, r3, #15
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	0e1b      	lsrs	r3, r3, #24
 8008882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	0fda      	lsrs	r2, r3, #31
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	3304      	adds	r3, #4
 8008898:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800889e:	2300      	movs	r3, #0
 80088a0:	623b      	str	r3, [r7, #32]
 80088a2:	e00a      	b.n	80088ba <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	441a      	add	r2, r3
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	440b      	add	r3, r1
 80088b0:	7812      	ldrb	r2, [r2, #0]
 80088b2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	3301      	adds	r3, #1
 80088b8:	623b      	str	r3, [r7, #32]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <HAL_FDCAN_GetRxMessage+0x20c>)
 80088c0:	5cd3      	ldrb	r3, [r2, r3]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d3ec      	bcc.n	80088a4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b40      	cmp	r3, #64	@ 0x40
 80088ce:	d105      	bne.n	80088dc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80088da:	e004      	b.n	80088e6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e006      	b.n	80088f8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ee:	f043 0208 	orr.w	r2, r3, #8
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	372c      	adds	r7, #44	@ 0x2c
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	0800d7c8 	.word	0x0800d7c8

08008908 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800891a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d003      	beq.n	800892a <HAL_FDCAN_ActivateNotification+0x22>
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	2b02      	cmp	r3, #2
 8008926:	f040 80c8 	bne.w	8008aba <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008930:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d03b      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d031      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d027      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01d      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	2b00      	cmp	r3, #0
 8008994:	d013      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00c      	beq.n	80089ce <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d107      	bne.n	80089ce <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0201 	orr.w	r2, r2, #1
 80089cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d13b      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d131      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d004      	beq.n	8008a0a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d127      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d11d      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f003 0310 	and.w	r3, r3, #16
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d113      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0202 	orr.w	r2, r2, #2
 8008a68:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d009      	beq.n	8008a88 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e006      	b.n	8008ac8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008abe:	f043 0202 	orr.w	r2, r3, #2
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08c      	sub	sp, #48	@ 0x30
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008af0:	4013      	ands	r3, r2
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b08:	4013      	ands	r3, r2
 8008b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	4013      	ands	r3, r2
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b2a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8008b2e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008b46:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	4013      	ands	r3, r2
 8008b52:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b62:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2240      	movs	r2, #64	@ 0x40
 8008b7e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f916 	bl	8008db2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d019      	beq.n	8008bc4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d014      	beq.n	8008bc4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ba2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008bbc:	6939      	ldr	r1, [r7, #16]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f8d8 	bl	8008d74 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d007      	beq.n	8008bda <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8a2 	bl	8008d1e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008be6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f8 fe6c 	bl	80018c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bfc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008bfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f897 	bl	8008d34 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00c      	beq.n	8008c2a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f890 	bl	8008d4a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d018      	beq.n	8008c66 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d013      	beq.n	8008c66 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008c46:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4013      	ands	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2280      	movs	r2, #128	@ 0x80
 8008c5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008c5e:	68f9      	ldr	r1, [r7, #12]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f87c 	bl	8008d5e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d007      	beq.n	8008c8a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f880 	bl	8008d8a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008ca6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f878 	bl	8008d9e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00f      	beq.n	8008cd8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008ce6:	69f9      	ldr	r1, [r7, #28]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f876 	bl	8008dda <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a3a      	ldr	r2, [r7, #32]
 8008cfa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f858 	bl	8008dc6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008d16:	bf00      	nop
 8008d18:	3730      	adds	r7, #48	@ 0x30
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008df8:	4b30      	ldr	r3, [pc, #192]	@ (8008ebc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008dfa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2f      	ldr	r2, [pc, #188]	@ (8008ec0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d103      	bne.n	8008e0e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008e0c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d103      	bne.n	8008e20 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8008e1e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e36:	041a      	lsls	r2, r3, #16
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e54:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	061a      	lsls	r2, r3, #24
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e005      	b.n	8008ea2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3f3      	bcc.n	8008e96 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	4000a400 	.word	0x4000a400
 8008ec0:	40006800 	.word	0x40006800
 8008ec4:	40006c00 	.word	0x40006c00

08008ec8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b089      	sub	sp, #36	@ 0x24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008ee6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	e00a      	b.n	8008f0a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008efc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008f02:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f08:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f14:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008f1a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008f20:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	4413      	add	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	440b      	add	r3, r1
 8008f3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	3304      	adds	r3, #4
 8008f48:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	3304      	adds	r3, #4
 8008f54:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	e020      	b.n	8008f9e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	3303      	adds	r3, #3
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4413      	add	r3, r2
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	440b      	add	r3, r1
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f74:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	440b      	add	r3, r1
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008f82:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	440a      	add	r2, r1
 8008f8a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008f8c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	3304      	adds	r3, #4
 8008f96:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	4a06      	ldr	r2, [pc, #24]	@ (8008fbc <FDCAN_CopyMessageToRAM+0xf4>)
 8008fa4:	5cd3      	ldrb	r3, [r2, r3]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d3d6      	bcc.n	8008f5c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	3724      	adds	r7, #36	@ 0x24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	0800d7c8 	.word	0x0800d7c8

08008fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008fce:	e15a      	b.n	8009286 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fdc:	4013      	ands	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 814c 	beq.w	8009280 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d005      	beq.n	8009000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d130      	bne.n	8009062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	2203      	movs	r2, #3
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4013      	ands	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4313      	orrs	r3, r2
 8009028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009036:	2201      	movs	r2, #1
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	43db      	mvns	r3, r3
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4013      	ands	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	f003 0201 	and.w	r2, r3, #1
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d017      	beq.n	800909e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	2203      	movs	r2, #3
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4013      	ands	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d123      	bne.n	80090f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	08da      	lsrs	r2, r3, #3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3208      	adds	r2, #8
 80090b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	220f      	movs	r2, #15
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	43db      	mvns	r3, r3
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	4013      	ands	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	691a      	ldr	r2, [r3, #16]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	fa02 f303 	lsl.w	r3, r2, r3
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	08da      	lsrs	r2, r3, #3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3208      	adds	r2, #8
 80090ec:	6939      	ldr	r1, [r7, #16]
 80090ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	2203      	movs	r2, #3
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	43db      	mvns	r3, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4013      	ands	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f003 0203 	and.w	r2, r3, #3
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	fa02 f303 	lsl.w	r3, r2, r3
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80a6 	beq.w	8009280 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009134:	4b5b      	ldr	r3, [pc, #364]	@ (80092a4 <HAL_GPIO_Init+0x2e4>)
 8009136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009138:	4a5a      	ldr	r2, [pc, #360]	@ (80092a4 <HAL_GPIO_Init+0x2e4>)
 800913a:	f043 0301 	orr.w	r3, r3, #1
 800913e:	6613      	str	r3, [r2, #96]	@ 0x60
 8009140:	4b58      	ldr	r3, [pc, #352]	@ (80092a4 <HAL_GPIO_Init+0x2e4>)
 8009142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800914c:	4a56      	ldr	r2, [pc, #344]	@ (80092a8 <HAL_GPIO_Init+0x2e8>)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	089b      	lsrs	r3, r3, #2
 8009152:	3302      	adds	r3, #2
 8009154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	220f      	movs	r2, #15
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	43db      	mvns	r3, r3
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4013      	ands	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009176:	d01f      	beq.n	80091b8 <HAL_GPIO_Init+0x1f8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a4c      	ldr	r2, [pc, #304]	@ (80092ac <HAL_GPIO_Init+0x2ec>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d019      	beq.n	80091b4 <HAL_GPIO_Init+0x1f4>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a4b      	ldr	r2, [pc, #300]	@ (80092b0 <HAL_GPIO_Init+0x2f0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <HAL_GPIO_Init+0x1f0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a4a      	ldr	r2, [pc, #296]	@ (80092b4 <HAL_GPIO_Init+0x2f4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00d      	beq.n	80091ac <HAL_GPIO_Init+0x1ec>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a49      	ldr	r2, [pc, #292]	@ (80092b8 <HAL_GPIO_Init+0x2f8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d007      	beq.n	80091a8 <HAL_GPIO_Init+0x1e8>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a48      	ldr	r2, [pc, #288]	@ (80092bc <HAL_GPIO_Init+0x2fc>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d101      	bne.n	80091a4 <HAL_GPIO_Init+0x1e4>
 80091a0:	2305      	movs	r3, #5
 80091a2:	e00a      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091a4:	2306      	movs	r3, #6
 80091a6:	e008      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091a8:	2304      	movs	r3, #4
 80091aa:	e006      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091ac:	2303      	movs	r3, #3
 80091ae:	e004      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e002      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <HAL_GPIO_Init+0x1fa>
 80091b8:	2300      	movs	r3, #0
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	f002 0203 	and.w	r2, r2, #3
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	4093      	lsls	r3, r2
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091ca:	4937      	ldr	r1, [pc, #220]	@ (80092a8 <HAL_GPIO_Init+0x2e8>)
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	089b      	lsrs	r3, r3, #2
 80091d0:	3302      	adds	r3, #2
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80091d8:	4b39      	ldr	r3, [pc, #228]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	43db      	mvns	r3, r3
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4013      	ands	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80091fc:	4a30      	ldr	r2, [pc, #192]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009202:	4b2f      	ldr	r3, [pc, #188]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	43db      	mvns	r3, r3
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4013      	ands	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009226:	4a26      	ldr	r2, [pc, #152]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800922c:	4b24      	ldr	r3, [pc, #144]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	43db      	mvns	r3, r3
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4013      	ands	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009250:	4a1b      	ldr	r2, [pc, #108]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	43db      	mvns	r3, r3
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	4013      	ands	r3, r2
 8009264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800927a:	4a11      	ldr	r2, [pc, #68]	@ (80092c0 <HAL_GPIO_Init+0x300>)
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	3301      	adds	r3, #1
 8009284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	f47f ae9d 	bne.w	8008fd0 <HAL_GPIO_Init+0x10>
  }
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	40021000 	.word	0x40021000
 80092a8:	40010000 	.word	0x40010000
 80092ac:	48000400 	.word	0x48000400
 80092b0:	48000800 	.word	0x48000800
 80092b4:	48000c00 	.word	0x48000c00
 80092b8:	48001000 	.word	0x48001000
 80092bc:	48001400 	.word	0x48001400
 80092c0:	40010400 	.word	0x40010400

080092c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	807b      	strh	r3, [r7, #2]
 80092d0:	4613      	mov	r3, r2
 80092d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092d4:	787b      	ldrb	r3, [r7, #1]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80092da:	887a      	ldrh	r2, [r7, #2]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80092e0:	e002      	b.n	80092e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80092e2:	887a      	ldrh	r2, [r7, #2]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80092fe:	4b08      	ldr	r3, [pc, #32]	@ (8009320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009300:	695a      	ldr	r2, [r3, #20]
 8009302:	88fb      	ldrh	r3, [r7, #6]
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d006      	beq.n	8009318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800930a:	4a05      	ldr	r2, [pc, #20]	@ (8009320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f806 	bl	8009324 <HAL_GPIO_EXTI_Callback>
  }
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	40010400 	.word	0x40010400

08009324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e08d      	b.n	8009468 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d106      	bne.n	8009366 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7fb fba9 	bl	8004ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2224      	movs	r2, #36	@ 0x24
 800936a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800938a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689a      	ldr	r2, [r3, #8]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800939a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d107      	bne.n	80093b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093b0:	609a      	str	r2, [r3, #8]
 80093b2:	e006      	b.n	80093c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80093c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d108      	bne.n	80093dc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d8:	605a      	str	r2, [r3, #4]
 80093da:	e007      	b.n	80093ec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80093fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800940e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691a      	ldr	r2, [r3, #16]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69d9      	ldr	r1, [r3, #28]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0201 	orr.w	r2, r2, #1
 8009448:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08a      	sub	sp, #40	@ 0x28
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	461a      	mov	r2, r3
 800947c:	460b      	mov	r3, r1
 800947e:	817b      	strh	r3, [r7, #10]
 8009480:	4613      	mov	r3, r2
 8009482:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b20      	cmp	r3, #32
 8009492:	f040 80ef 	bne.w	8009674 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094a4:	d101      	bne.n	80094aa <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80094a6:	2302      	movs	r3, #2
 80094a8:	e0e5      	b.n	8009676 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e0de      	b.n	8009676 <HAL_I2C_Master_Transmit_DMA+0x206>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2221      	movs	r2, #33	@ 0x21
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2210      	movs	r2, #16
 80094cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	893a      	ldrh	r2, [r7, #8]
 80094e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4a66      	ldr	r2, [pc, #408]	@ (8009680 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80094e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4a66      	ldr	r2, [pc, #408]	@ (8009684 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80094ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2bff      	cmp	r3, #255	@ 0xff
 80094f6:	d906      	bls.n	8009506 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	22ff      	movs	r2, #255	@ 0xff
 80094fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80094fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e007      	b.n	8009516 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009514:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01a      	beq.n	8009554 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009538:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d074      	beq.n	8009646 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d022      	beq.n	80095aa <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	4a47      	ldr	r2, [pc, #284]	@ (8009688 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800956a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009570:	4a46      	ldr	r2, [pc, #280]	@ (800968c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009572:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009580:	2200      	movs	r2, #0
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009594:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800959a:	f7fe fc4d 	bl	8007e38 <HAL_DMA_Start_IT>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d13a      	bne.n	800961e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80095a8:	e013      	b.n	80095d2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e051      	b.n	8009676 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	3301      	adds	r3, #1
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	8979      	ldrh	r1, [r7, #10]
 80095de:	4b2c      	ldr	r3, [pc, #176]	@ (8009690 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f001 fcbb 	bl	800af60 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009604:	2110      	movs	r1, #16
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f001 fcdc 	bl	800afc4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	e028      	b.n	8009670 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009632:	f043 0210 	orr.w	r2, r3, #16
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e017      	b.n	8009676 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4a12      	ldr	r2, [pc, #72]	@ (8009694 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800964a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	b2da      	uxtb	r2, r3
 8009650:	8979      	ldrh	r1, [r7, #10]
 8009652:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f001 fc80 	bl	800af60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009668:	2101      	movs	r1, #1
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f001 fcaa 	bl	800afc4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e000      	b.n	8009676 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009674:	2302      	movs	r3, #2
  }
}
 8009676:	4618      	mov	r0, r3
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	ffff0000 	.word	0xffff0000
 8009684:	08009e4b 	.word	0x08009e4b
 8009688:	0800adcb 	.word	0x0800adcb
 800968c:	0800aef7 	.word	0x0800aef7
 8009690:	80002000 	.word	0x80002000
 8009694:	08009a0b 	.word	0x08009a0b

08009698 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	461a      	mov	r2, r3
 80096a4:	460b      	mov	r3, r1
 80096a6:	817b      	strh	r3, [r7, #10]
 80096a8:	4613      	mov	r3, r2
 80096aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	f040 80cd 	bne.w	8009854 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c8:	d101      	bne.n	80096ce <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80096ca:	2302      	movs	r3, #2
 80096cc:	e0c3      	b.n	8009856 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_I2C_Master_Receive_DMA+0x44>
 80096d8:	2302      	movs	r3, #2
 80096da:	e0bc      	b.n	8009856 <HAL_I2C_Master_Receive_DMA+0x1be>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2222      	movs	r2, #34	@ 0x22
 80096e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2210      	movs	r2, #16
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	893a      	ldrh	r2, [r7, #8]
 8009704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a55      	ldr	r2, [pc, #340]	@ (8009860 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800970a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a55      	ldr	r2, [pc, #340]	@ (8009864 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009716:	b29b      	uxth	r3, r3
 8009718:	2bff      	cmp	r3, #255	@ 0xff
 800971a:	d906      	bls.n	800972a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	22ff      	movs	r2, #255	@ 0xff
 8009720:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009722:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e007      	b.n	800973a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800972e:	b29a      	uxth	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009738:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d070      	beq.n	8009824 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d020      	beq.n	800978c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800974e:	4a46      	ldr	r2, [pc, #280]	@ (8009868 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8009750:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009756:	4a45      	ldr	r2, [pc, #276]	@ (800986c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8009758:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975e:	2200      	movs	r2, #0
 8009760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009766:	2200      	movs	r2, #0
 8009768:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3324      	adds	r3, #36	@ 0x24
 8009774:	4619      	mov	r1, r3
 8009776:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800977c:	f7fe fb5c 	bl	8007e38 <HAL_DMA_Start_IT>
 8009780:	4603      	mov	r3, r0
 8009782:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009784:	7cfb      	ldrb	r3, [r7, #19]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d138      	bne.n	80097fc <HAL_I2C_Master_Receive_DMA+0x164>
 800978a:	e013      	b.n	80097b4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e050      	b.n	8009856 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	8979      	ldrh	r1, [r7, #10]
 80097bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009870 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f001 fbcc 	bl	800af60 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80097e2:	2110      	movs	r1, #16
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f001 fbed 	bl	800afc4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e029      	b.n	8009850 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009810:	f043 0210 	orr.w	r2, r3, #16
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e018      	b.n	8009856 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a13      	ldr	r2, [pc, #76]	@ (8009874 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8009828:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800982e:	b2da      	uxtb	r2, r3
 8009830:	8979      	ldrh	r1, [r7, #10]
 8009832:	4b0f      	ldr	r3, [pc, #60]	@ (8009870 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 fb90 	bl	800af60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009848:	2102      	movs	r1, #2
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f001 fbba 	bl	800afc4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8009854:	2302      	movs	r3, #2
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	ffff0000 	.word	0xffff0000
 8009864:	08009e4b 	.word	0x08009e4b
 8009868:	0800ae61 	.word	0x0800ae61
 800986c:	0800aef7 	.word	0x0800aef7
 8009870:	80002400 	.word	0x80002400
 8009874:	08009a0b 	.word	0x08009a0b

08009878 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
  }
}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098dc:	f043 0201 	orr.w	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00f      	beq.n	8009918 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009906:	f043 0208 	orr.w	r2, r3, #8
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009916:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00f      	beq.n	8009942 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009930:	f043 0202 	orr.w	r2, r3, #2
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009940:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f003 030b 	and.w	r3, r3, #11
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 f8fd 	bl	800ab54 <I2C_ITError>
  }
}
 800995a:	bf00      	nop
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
 8009996:	4613      	mov	r3, r2
 8009998:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b083      	sub	sp, #12
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80099c2:	bf00      	nop
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af02      	add	r7, sp, #8
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <I2C_Master_ISR_IT+0x1e>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e113      	b.n	8009c50 <I2C_Master_ISR_IT+0x246>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d012      	beq.n	8009a60 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2210      	movs	r2, #16
 8009a4a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a50:	f043 0204 	orr.w	r2, r3, #4
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 f992 	bl	800ad82 <I2C_Flush_TXDR>
 8009a5e:	e0e4      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d022      	beq.n	8009ab0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01d      	beq.n	8009ab0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f023 0304 	bic.w	r3, r3, #4
 8009a7a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009aae:	e0bc      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d128      	bne.n	8009b0c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d023      	beq.n	8009b0c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d01e      	beq.n	8009b0c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80a8 	beq.w	8009c2a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8009b0a:	e08e      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d05c      	beq.n	8009bd0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d057      	beq.n	8009bd0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d040      	beq.n	8009bac <I2C_Master_ISR_IT+0x1a2>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d13c      	bne.n	8009bac <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b3e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2bff      	cmp	r3, #255	@ 0xff
 8009b48:	d90e      	bls.n	8009b68 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	22ff      	movs	r2, #255	@ 0xff
 8009b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	8a79      	ldrh	r1, [r7, #18]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f001 f9fd 	bl	800af60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b66:	e032      	b.n	8009bce <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b7a:	d00b      	beq.n	8009b94 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b80:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b86:	8a79      	ldrh	r1, [r7, #18]
 8009b88:	2000      	movs	r0, #0
 8009b8a:	9000      	str	r0, [sp, #0]
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f001 f9e7 	bl	800af60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b92:	e01c      	b.n	8009bce <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	8a79      	ldrh	r1, [r7, #18]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f001 f9db 	bl	800af60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009baa:	e010      	b.n	8009bce <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bba:	d003      	beq.n	8009bc4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fcb0 	bl	800a522 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bc2:	e032      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009bc4:	2140      	movs	r1, #64	@ 0x40
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 ffc4 	bl	800ab54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bcc:	e02d      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
 8009bce:	e02c      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d027      	beq.n	8009c2a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d022      	beq.n	8009c2a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d119      	bne.n	8009c22 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bfc:	d015      	beq.n	8009c2a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c06:	d108      	bne.n	8009c1a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c16:	605a      	str	r2, [r3, #4]
 8009c18:	e007      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 fc81 	bl	800a522 <I2C_ITMasterSeqCplt>
 8009c20:	e003      	b.n	8009c2a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c22:	2140      	movs	r1, #64	@ 0x40
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 ff95 	bl	800ab54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d008      	beq.n	8009c46 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009c3e:	6979      	ldr	r1, [r7, #20]
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fd07 	bl	800a654 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c68:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <I2C_Slave_ISR_IT+0x24>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e0e2      	b.n	8009e42 <I2C_Slave_ISR_IT+0x1ea>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d004      	beq.n	8009ca2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009c98:	6939      	ldr	r1, [r7, #16]
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 fda2 	bl	800a7e4 <I2C_ITSlaveCplt>
 8009ca0:	e0ca      	b.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f003 0310 	and.w	r3, r3, #16
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d04b      	beq.n	8009d44 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d046      	beq.n	8009d44 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d128      	bne.n	8009d12 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b28      	cmp	r3, #40	@ 0x28
 8009cca:	d108      	bne.n	8009cde <I2C_Slave_ISR_IT+0x86>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cd2:	d104      	bne.n	8009cde <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009cd4:	6939      	ldr	r1, [r7, #16]
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 fee8 	bl	800aaac <I2C_ITListenCplt>
 8009cdc:	e031      	b.n	8009d42 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b29      	cmp	r3, #41	@ 0x29
 8009ce8:	d10e      	bne.n	8009d08 <I2C_Slave_ISR_IT+0xb0>
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009cf0:	d00a      	beq.n	8009d08 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f001 f841 	bl	800ad82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fc4b 	bl	800a59c <I2C_ITSlaveSeqCplt>
 8009d06:	e01c      	b.n	8009d42 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009d10:	e08f      	b.n	8009e32 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2210      	movs	r2, #16
 8009d18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	f043 0204 	orr.w	r2, r3, #4
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <I2C_Slave_ISR_IT+0xdc>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d32:	d17e      	bne.n	8009e32 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d38:	4619      	mov	r1, r3
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 ff0a 	bl	800ab54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009d40:	e077      	b.n	8009e32 <I2C_Slave_ISR_IT+0x1da>
 8009d42:	e076      	b.n	8009e32 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d02f      	beq.n	8009dae <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02a      	beq.n	8009dae <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d018      	beq.n	8009d94 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d14b      	bne.n	8009e36 <I2C_Slave_ISR_IT+0x1de>
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009da4:	d047      	beq.n	8009e36 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fbf8 	bl	800a59c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009dac:	e043      	b.n	8009e36 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009dc2:	6939      	ldr	r1, [r7, #16]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fb28 	bl	800a41a <I2C_ITAddrCplt>
 8009dca:	e035      	b.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d030      	beq.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02b      	beq.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d018      	beq.n	8009e1c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dee:	781a      	ldrb	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009e1a:	e00d      	b.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e22:	d002      	beq.n	8009e2a <I2C_Slave_ISR_IT+0x1d2>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fbb6 	bl	800a59c <I2C_ITSlaveSeqCplt>
 8009e30:	e002      	b.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009e32:	bf00      	nop
 8009e34:	e000      	b.n	8009e38 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009e36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b088      	sub	sp, #32
 8009e4e:	af02      	add	r7, sp, #8
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d101      	bne.n	8009e64 <I2C_Master_ISR_DMA+0x1a>
 8009e60:	2302      	movs	r3, #2
 8009e62:	e0d9      	b.n	800a018 <I2C_Master_ISR_DMA+0x1ce>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 0310 	and.w	r3, r3, #16
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d016      	beq.n	8009ea4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d011      	beq.n	8009ea4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2210      	movs	r2, #16
 8009e86:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e8c:	f043 0204 	orr.w	r2, r3, #4
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009e94:	2120      	movs	r1, #32
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f001 f894 	bl	800afc4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 ff70 	bl	800ad82 <I2C_Flush_TXDR>
 8009ea2:	e0b4      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d071      	beq.n	8009f92 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d06c      	beq.n	8009f92 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ec6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d04e      	beq.n	8009f70 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ede:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	2bff      	cmp	r3, #255	@ 0xff
 8009ee8:	d906      	bls.n	8009ef8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	22ff      	movs	r2, #255	@ 0xff
 8009eee:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e010      	b.n	8009f1a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f0a:	d003      	beq.n	8009f14 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	e002      	b.n	8009f1a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f18:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	8a79      	ldrh	r1, [r7, #18]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f001 f819 	bl	800af60 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b22      	cmp	r3, #34	@ 0x22
 8009f4a:	d108      	bne.n	8009f5e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009f5c:	e057      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009f6e:	e04e      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f7e:	d003      	beq.n	8009f88 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 face 	bl	800a522 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009f86:	e042      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009f88:	2140      	movs	r1, #64	@ 0x40
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fde2 	bl	800ab54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009f90:	e03d      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d028      	beq.n	8009fee <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d023      	beq.n	8009fee <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d119      	bne.n	8009fe4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fbe:	d025      	beq.n	800a00c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009fc8:	d108      	bne.n	8009fdc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fd8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009fda:	e017      	b.n	800a00c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 faa0 	bl	800a522 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009fe2:	e013      	b.n	800a00c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009fe4:	2140      	movs	r1, #64	@ 0x40
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fdb4 	bl	800ab54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009fec:	e00e      	b.n	800a00c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fb25 	bl	800a654 <I2C_ITMasterCplt>
 800a00a:	e000      	b.n	800a00e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800a00c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af02      	add	r7, sp, #8
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a02c:	4b8d      	ldr	r3, [pc, #564]	@ (800a264 <I2C_Mem_ISR_DMA+0x244>)
 800a02e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <I2C_Mem_ISR_DMA+0x1e>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e10e      	b.n	800a25c <I2C_Mem_ISR_DMA+0x23c>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f003 0310 	and.w	r3, r3, #16
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d016      	beq.n	800a07e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a056:	2b00      	cmp	r3, #0
 800a058:	d011      	beq.n	800a07e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2210      	movs	r2, #16
 800a060:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a066:	f043 0204 	orr.w	r2, r3, #4
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a06e:	2120      	movs	r1, #32
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 ffa7 	bl	800afc4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fe83 	bl	800ad82 <I2C_Flush_TXDR>
 800a07c:	e0e9      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00e      	beq.n	800a0a6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a09a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a0a4:	e0d5      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d05f      	beq.n	800a170 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d05a      	beq.n	800a170 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f001 f805 	bl	800b0cc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a0c2:	2110      	movs	r1, #16
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 ff7d 	bl	800afc4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d048      	beq.n	800a166 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	2bff      	cmp	r3, #255	@ 0xff
 800a0dc:	d910      	bls.n	800a100 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	22ff      	movs	r2, #255	@ 0xff
 800a0e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0e8:	b299      	uxth	r1, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 ff31 	bl	800af60 <I2C_TransferConfig>
 800a0fe:	e011      	b.n	800a124 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a10e:	b299      	uxth	r1, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a114:	b2da      	uxtb	r2, r3
 800a116:	2300      	movs	r3, #0
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 ff1e 	bl	800af60 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a128:	b29a      	uxth	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b22      	cmp	r3, #34	@ 0x22
 800a140:	d108      	bne.n	800a154 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a150:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a152:	e07e      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a162:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a164:	e075      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a166:	2140      	movs	r1, #64	@ 0x40
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fcf3 	bl	800ab54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a16e:	e070      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05d      	beq.n	800a236 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a180:	2b00      	cmp	r3, #0
 800a182:	d058      	beq.n	800a236 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a184:	2101      	movs	r1, #1
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 ffa0 	bl	800b0cc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a18c:	2110      	movs	r1, #16
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 ff18 	bl	800afc4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b22      	cmp	r3, #34	@ 0x22
 800a19e:	d101      	bne.n	800a1a4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800a1a0:	4b31      	ldr	r3, [pc, #196]	@ (800a268 <I2C_Mem_ISR_DMA+0x248>)
 800a1a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2bff      	cmp	r3, #255	@ 0xff
 800a1ac:	d910      	bls.n	800a1d0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	22ff      	movs	r2, #255	@ 0xff
 800a1b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b8:	b299      	uxth	r1, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fec9 	bl	800af60 <I2C_TransferConfig>
 800a1ce:	e011      	b.n	800a1f4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1de:	b299      	uxth	r1, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 feb6 	bl	800af60 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	b29a      	uxth	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b22      	cmp	r3, #34	@ 0x22
 800a210:	d108      	bne.n	800a224 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a220:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a222:	e016      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a232:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a234:	e00d      	b.n	800a252 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fa01 	bl	800a654 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	80002000 	.word	0x80002000
 800a268:	80002400 	.word	0x80002400

0800a26c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <I2C_Slave_ISR_DMA+0x24>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e0c0      	b.n	800a412 <I2C_Slave_ISR_DMA+0x1a6>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 fa98 	bl	800a7e4 <I2C_ITSlaveCplt>
 800a2b4:	e0a8      	b.n	800a408 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8095 	beq.w	800a3ec <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 808f 	beq.w	800a3ec <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d07d      	beq.n	800a3de <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800a300:	2301      	movs	r3, #1
 800a302:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00c      	beq.n	800a326 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800a322:	2301      	movs	r3, #1
 800a324:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d128      	bne.n	800a37e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b28      	cmp	r3, #40	@ 0x28
 800a336:	d108      	bne.n	800a34a <I2C_Slave_ISR_DMA+0xde>
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a33e:	d104      	bne.n	800a34a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 fbb2 	bl	800aaac <I2C_ITListenCplt>
 800a348:	e048      	b.n	800a3dc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b29      	cmp	r3, #41	@ 0x29
 800a354:	d10e      	bne.n	800a374 <I2C_Slave_ISR_DMA+0x108>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a35c:	d00a      	beq.n	800a374 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2210      	movs	r2, #16
 800a364:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 fd0b 	bl	800ad82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f915 	bl	800a59c <I2C_ITSlaveSeqCplt>
 800a372:	e033      	b.n	800a3dc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2210      	movs	r2, #16
 800a37a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a37c:	e034      	b.n	800a3e8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2210      	movs	r2, #16
 800a384:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a38a:	f043 0204 	orr.w	r2, r3, #4
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a398:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <I2C_Slave_ISR_DMA+0x13c>
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3a6:	d11f      	bne.n	800a3e8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	2b21      	cmp	r3, #33	@ 0x21
 800a3ac:	d002      	beq.n	800a3b4 <I2C_Slave_ISR_DMA+0x148>
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b29      	cmp	r3, #41	@ 0x29
 800a3b2:	d103      	bne.n	800a3bc <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2221      	movs	r2, #33	@ 0x21
 800a3b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3ba:	e008      	b.n	800a3ce <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b22      	cmp	r3, #34	@ 0x22
 800a3c0:	d002      	beq.n	800a3c8 <I2C_Slave_ISR_DMA+0x15c>
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c6:	d102      	bne.n	800a3ce <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2222      	movs	r2, #34	@ 0x22
 800a3cc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 fbbd 	bl	800ab54 <I2C_ITError>
      if (treatdmanack == 1U)
 800a3da:	e005      	b.n	800a3e8 <I2C_Slave_ISR_DMA+0x17c>
 800a3dc:	e004      	b.n	800a3e8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a3e6:	e00f      	b.n	800a408 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800a3e8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a3ea:	e00d      	b.n	800a408 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f809 	bl	800a41a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3720      	adds	r7, #32
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a430:	2b28      	cmp	r3, #40	@ 0x28
 800a432:	d16a      	bne.n	800a50a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	0c1b      	lsrs	r3, r3, #16
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a452:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a460:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a46e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d138      	bne.n	800a4ea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a478:	897b      	ldrh	r3, [r7, #10]
 800a47a:	09db      	lsrs	r3, r3, #7
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	89bb      	ldrh	r3, [r7, #12]
 800a480:	4053      	eors	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	f003 0306 	and.w	r3, r3, #6
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d11c      	bne.n	800a4c6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a48c:	897b      	ldrh	r3, [r7, #10]
 800a48e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a494:	1c5a      	adds	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d13b      	bne.n	800a51a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4b8:	89ba      	ldrh	r2, [r7, #12]
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fa63 	bl	800998a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a4c4:	e029      	b.n	800a51a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a4c6:	893b      	ldrh	r3, [r7, #8]
 800a4c8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a4ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fdfc 	bl	800b0cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4dc:	89ba      	ldrh	r2, [r7, #12]
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fa51 	bl	800998a <HAL_I2C_AddrCallback>
}
 800a4e8:	e017      	b.n	800a51a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a4ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fdec 	bl	800b0cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4fc:	89ba      	ldrh	r2, [r7, #12]
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fa41 	bl	800998a <HAL_I2C_AddrCallback>
}
 800a508:	e007      	b.n	800a51a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2208      	movs	r2, #8
 800a510:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b21      	cmp	r3, #33	@ 0x21
 800a53c:	d115      	bne.n	800a56a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2211      	movs	r2, #17
 800a54a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a552:	2101      	movs	r1, #1
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fdb9 	bl	800b0cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7f6 fdba 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a568:	e014      	b.n	800a594 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2212      	movs	r2, #18
 800a576:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a57e:	2102      	movs	r1, #2
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fda3 	bl	800b0cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f6 fdb2 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e00c      	b.n	800a5ea <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d007      	beq.n	800a5ea <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a5e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b29      	cmp	r3, #41	@ 0x29
 800a5f4:	d112      	bne.n	800a61c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2228      	movs	r2, #40	@ 0x28
 800a5fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2221      	movs	r2, #33	@ 0x21
 800a602:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a604:	2101      	movs	r1, #1
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fd60 	bl	800b0cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff f9a4 	bl	8009962 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a61a:	e017      	b.n	800a64c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b2a      	cmp	r3, #42	@ 0x2a
 800a626:	d111      	bne.n	800a64c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2228      	movs	r2, #40	@ 0x28
 800a62c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2222      	movs	r2, #34	@ 0x22
 800a634:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a636:	2102      	movs	r1, #2
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fd47 	bl	800b0cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff f995 	bl	8009976 <HAL_I2C_SlaveRxCpltCallback>
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2220      	movs	r2, #32
 800a668:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b21      	cmp	r3, #33	@ 0x21
 800a674:	d107      	bne.n	800a686 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a676:	2101      	movs	r1, #1
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fd27 	bl	800b0cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2211      	movs	r2, #17
 800a682:	631a      	str	r2, [r3, #48]	@ 0x30
 800a684:	e00c      	b.n	800a6a0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b22      	cmp	r3, #34	@ 0x22
 800a690:	d106      	bne.n	800a6a0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a692:	2102      	movs	r1, #2
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fd19 	bl	800b0cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2212      	movs	r2, #18
 800a69e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6859      	ldr	r1, [r3, #4]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a7dc <I2C_ITMasterCplt+0x188>)
 800a6ac:	400b      	ands	r3, r1
 800a6ae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a49      	ldr	r2, [pc, #292]	@ (800a7e0 <I2C_ITMasterCplt+0x18c>)
 800a6ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f003 0310 	and.w	r3, r3, #16
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d009      	beq.n	800a6da <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2210      	movs	r2, #16
 800a6cc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d2:	f043 0204 	orr.w	r2, r3, #4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b60      	cmp	r3, #96	@ 0x60
 800a6e4:	d10a      	bne.n	800a6fc <I2C_ITMasterCplt+0xa8>
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fb40 	bl	800ad82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a706:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b60      	cmp	r3, #96	@ 0x60
 800a712:	d002      	beq.n	800a71a <I2C_ITMasterCplt+0xc6>
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fa17 	bl	800ab54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a726:	e054      	b.n	800a7d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b21      	cmp	r3, #33	@ 0x21
 800a732:	d124      	bne.n	800a77e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b40      	cmp	r3, #64	@ 0x40
 800a74c:	d10b      	bne.n	800a766 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff f92b 	bl	80099ba <HAL_I2C_MemTxCpltCallback>
}
 800a764:	e035      	b.n	800a7d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f6 fcb0 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
}
 800a77c:	e029      	b.n	800a7d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b22      	cmp	r3, #34	@ 0x22
 800a788:	d123      	bne.n	800a7d2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	d10b      	bne.n	800a7bc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff f90a 	bl	80099ce <HAL_I2C_MemRxCpltCallback>
}
 800a7ba:	e00a      	b.n	800a7d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7f6 fc93 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a7d2:	bf00      	nop
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	fe00e800 	.word	0xfe00e800
 800a7e0:	ffff0000 	.word	0xffff0000

0800a7e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a806:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2220      	movs	r2, #32
 800a80e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	2b21      	cmp	r3, #33	@ 0x21
 800a814:	d002      	beq.n	800a81c <I2C_ITSlaveCplt+0x38>
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	2b29      	cmp	r3, #41	@ 0x29
 800a81a:	d108      	bne.n	800a82e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a81c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fc53 	bl	800b0cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2221      	movs	r2, #33	@ 0x21
 800a82a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a82c:	e019      	b.n	800a862 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	2b22      	cmp	r3, #34	@ 0x22
 800a832:	d002      	beq.n	800a83a <I2C_ITSlaveCplt+0x56>
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d108      	bne.n	800a84c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a83a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fc44 	bl	800b0cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2222      	movs	r2, #34	@ 0x22
 800a848:	631a      	str	r2, [r3, #48]	@ 0x30
 800a84a:	e00a      	b.n	800a862 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	2b28      	cmp	r3, #40	@ 0x28
 800a850:	d107      	bne.n	800a862 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a852:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fc38 	bl	800b0cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a870:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6859      	ldr	r1, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	4b89      	ldr	r3, [pc, #548]	@ (800aaa4 <I2C_ITSlaveCplt+0x2c0>)
 800a87e:	400b      	ands	r3, r1
 800a880:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa7d 	bl	800ad82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d013      	beq.n	800a8ba <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01f      	beq.n	800a8ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8b8:	e017      	b.n	800a8ea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d012      	beq.n	800a8ea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a8d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d006      	beq.n	800a8ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d020      	beq.n	800a936 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f023 0304 	bic.w	r3, r3, #4
 800a8fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00c      	beq.n	800a936 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a920:	3b01      	subs	r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a944:	f043 0204 	orr.w	r2, r3, #4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b00      	cmp	r3, #0
 800a954:	d049      	beq.n	800a9ea <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d044      	beq.n	800a9ea <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d128      	bne.n	800a9bc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b28      	cmp	r3, #40	@ 0x28
 800a974:	d108      	bne.n	800a988 <I2C_ITSlaveCplt+0x1a4>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a97c:	d104      	bne.n	800a988 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a97e:	6979      	ldr	r1, [r7, #20]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f893 	bl	800aaac <I2C_ITListenCplt>
 800a986:	e030      	b.n	800a9ea <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b29      	cmp	r3, #41	@ 0x29
 800a992:	d10e      	bne.n	800a9b2 <I2C_ITSlaveCplt+0x1ce>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a99a:	d00a      	beq.n	800a9b2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f9ec 	bl	800ad82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff fdf6 	bl	800a59c <I2C_ITSlaveSeqCplt>
 800a9b0:	e01b      	b.n	800a9ea <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2210      	movs	r2, #16
 800a9b8:	61da      	str	r2, [r3, #28]
 800a9ba:	e016      	b.n	800a9ea <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2210      	movs	r2, #16
 800a9c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c8:	f043 0204 	orr.w	r2, r3, #4
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <I2C_ITSlaveCplt+0x1fa>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9dc:	d105      	bne.n	800a9ea <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f8b5 	bl	800ab54 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d010      	beq.n	800aa22 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f8a4 	bl	800ab54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b28      	cmp	r3, #40	@ 0x28
 800aa16:	d141      	bne.n	800aa9c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800aa18:	6979      	ldr	r1, [r7, #20]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f846 	bl	800aaac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa20:	e03c      	b.n	800aa9c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa2a:	d014      	beq.n	800aa56 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff fdb5 	bl	800a59c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa8 <I2C_ITSlaveCplt+0x2c4>)
 800aa36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7fe ffa9 	bl	80099a6 <HAL_I2C_ListenCpltCallback>
}
 800aa54:	e022      	b.n	800aa9c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b22      	cmp	r3, #34	@ 0x22
 800aa60:	d10e      	bne.n	800aa80 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe ff7c 	bl	8009976 <HAL_I2C_SlaveRxCpltCallback>
}
 800aa7e:	e00d      	b.n	800aa9c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7fe ff63 	bl	8009962 <HAL_I2C_SlaveTxCpltCallback>
}
 800aa9c:	bf00      	nop
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	fe00e800 	.word	0xfe00e800
 800aaa8:	ffff0000 	.word	0xffff0000

0800aaac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a25      	ldr	r2, [pc, #148]	@ (800ab50 <I2C_ITListenCplt+0xa4>)
 800aaba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f003 0304 	and.w	r3, r3, #4
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d022      	beq.n	800ab28 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d012      	beq.n	800ab28 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab06:	3b01      	subs	r3, #1
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	3b01      	subs	r3, #1
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab20:	f043 0204 	orr.w	r2, r3, #4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ab28:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 facd 	bl	800b0cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2210      	movs	r2, #16
 800ab38:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7fe ff2f 	bl	80099a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	ffff0000 	.word	0xffff0000

0800ab54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab64:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a6d      	ldr	r2, [pc, #436]	@ (800ad28 <I2C_ITError+0x1d4>)
 800ab72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	2b28      	cmp	r3, #40	@ 0x28
 800ab8a:	d005      	beq.n	800ab98 <I2C_ITError+0x44>
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	2b29      	cmp	r3, #41	@ 0x29
 800ab90:	d002      	beq.n	800ab98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab96:	d10b      	bne.n	800abb0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ab98:	2103      	movs	r1, #3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa96 	bl	800b0cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2228      	movs	r2, #40	@ 0x28
 800aba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a60      	ldr	r2, [pc, #384]	@ (800ad2c <I2C_ITError+0x1d8>)
 800abac:	635a      	str	r2, [r3, #52]	@ 0x34
 800abae:	e030      	b.n	800ac12 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800abb0:	f248 0103 	movw	r1, #32771	@ 0x8003
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fa89 	bl	800b0cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f8e1 	bl	800ad82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b60      	cmp	r3, #96	@ 0x60
 800abca:	d01f      	beq.n	800ac0c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b20      	cmp	r3, #32
 800abe0:	d114      	bne.n	800ac0c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2b10      	cmp	r3, #16
 800abee:	d109      	bne.n	800ac04 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2210      	movs	r2, #16
 800abf6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfc:	f043 0204 	orr.w	r2, r3, #4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d039      	beq.n	800ac94 <I2C_ITError+0x140>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b11      	cmp	r3, #17
 800ac24:	d002      	beq.n	800ac2c <I2C_ITError+0xd8>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b21      	cmp	r3, #33	@ 0x21
 800ac2a:	d133      	bne.n	800ac94 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac3a:	d107      	bne.n	800ac4c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd fa82 	bl	800815a <HAL_DMA_GetState>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d017      	beq.n	800ac8c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac60:	4a33      	ldr	r2, [pc, #204]	@ (800ad30 <I2C_ITError+0x1dc>)
 800ac62:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fd f95c 	bl	8007f2e <HAL_DMA_Abort_IT>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d04d      	beq.n	800ad18 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ac86:	4610      	mov	r0, r2
 800ac88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac8a:	e045      	b.n	800ad18 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f851 	bl	800ad34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac92:	e041      	b.n	800ad18 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d039      	beq.n	800ad10 <I2C_ITError+0x1bc>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b12      	cmp	r3, #18
 800aca0:	d002      	beq.n	800aca8 <I2C_ITError+0x154>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b22      	cmp	r3, #34	@ 0x22
 800aca6:	d133      	bne.n	800ad10 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acb6:	d107      	bne.n	800acc8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800acc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800accc:	4618      	mov	r0, r3
 800acce:	f7fd fa44 	bl	800815a <HAL_DMA_GetState>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d017      	beq.n	800ad08 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	4a14      	ldr	r2, [pc, #80]	@ (800ad30 <I2C_ITError+0x1dc>)
 800acde:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acec:	4618      	mov	r0, r3
 800acee:	f7fd f91e 	bl	8007f2e <HAL_DMA_Abort_IT>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d011      	beq.n	800ad1c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ad02:	4610      	mov	r0, r2
 800ad04:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad06:	e009      	b.n	800ad1c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f813 	bl	800ad34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad0e:	e005      	b.n	800ad1c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f80f 	bl	800ad34 <I2C_TreatErrorCallback>
  }
}
 800ad16:	e002      	b.n	800ad1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ad18:	bf00      	nop
 800ad1a:	e000      	b.n	800ad1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad1c:	bf00      	nop
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	ffff0000 	.word	0xffff0000
 800ad2c:	08009c59 	.word	0x08009c59
 800ad30:	0800af25 	.word	0x0800af25

0800ad34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b60      	cmp	r3, #96	@ 0x60
 800ad46:	d10e      	bne.n	800ad66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7fe fe49 	bl	80099f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ad64:	e009      	b.n	800ad7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7fe fe34 	bl	80099e2 <HAL_I2C_ErrorCallback>
}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b083      	sub	sp, #12
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d103      	bne.n	800ada0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d007      	beq.n	800adbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	699a      	ldr	r2, [r3, #24]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0201 	orr.w	r2, r2, #1
 800adbc:	619a      	str	r2, [r3, #24]
  }
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ade6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adec:	b29b      	uxth	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800adf2:	2120      	movs	r1, #32
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f8e5 	bl	800afc4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800adfa:	e02d      	b.n	800ae58 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ae04:	441a      	add	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	2bff      	cmp	r3, #255	@ 0xff
 800ae12:	d903      	bls.n	800ae1c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	22ff      	movs	r2, #255	@ 0xff
 800ae18:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ae1a:	e004      	b.n	800ae26 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	4619      	mov	r1, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3328      	adds	r3, #40	@ 0x28
 800ae36:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ae3c:	f7fc fffc 	bl	8007e38 <HAL_DMA_Start_IT>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae46:	2110      	movs	r1, #16
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff fe83 	bl	800ab54 <I2C_ITError>
}
 800ae4e:	e003      	b.n	800ae58 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ae50:	2140      	movs	r1, #64	@ 0x40
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f8b6 	bl	800afc4 <I2C_Enable_IRQ>
}
 800ae58:	bf00      	nop
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae7c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ae88:	2120      	movs	r1, #32
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 f89a 	bl	800afc4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ae90:	e02d      	b.n	800aeee <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ae9a:	441a      	add	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2bff      	cmp	r3, #255	@ 0xff
 800aea8:	d903      	bls.n	800aeb2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	22ff      	movs	r2, #255	@ 0xff
 800aeae:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aeb0:	e004      	b.n	800aebc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3324      	adds	r3, #36	@ 0x24
 800aec6:	4619      	mov	r1, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aecc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800aed2:	f7fc ffb1 	bl	8007e38 <HAL_DMA_Start_IT>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d004      	beq.n	800aee6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800aedc:	2110      	movs	r1, #16
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fe38 	bl	800ab54 <I2C_ITError>
}
 800aee4:	e003      	b.n	800aeee <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800aee6:	2140      	movs	r1, #64	@ 0x40
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f86b 	bl	800afc4 <I2C_Enable_IRQ>
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af02:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af12:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800af14:	2110      	movs	r1, #16
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff fe1c 	bl	800ab54 <I2C_ITError>
}
 800af1c:	bf00      	nop
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af30:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3e:	2200      	movs	r2, #0
 800af40:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af4e:	2200      	movs	r2, #0
 800af50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff feee 	bl	800ad34 <I2C_TreatErrorCallback>
}
 800af58:	bf00      	nop
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	607b      	str	r3, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	817b      	strh	r3, [r7, #10]
 800af6e:	4613      	mov	r3, r2
 800af70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af72:	897b      	ldrh	r3, [r7, #10]
 800af74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af78:	7a7b      	ldrb	r3, [r7, #9]
 800af7a:	041b      	lsls	r3, r3, #16
 800af7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	4313      	orrs	r3, r2
 800af8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685a      	ldr	r2, [r3, #4]
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	0d5b      	lsrs	r3, r3, #21
 800af9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800af9e:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <I2C_TransferConfig+0x60>)
 800afa0:	430b      	orrs	r3, r1
 800afa2:	43db      	mvns	r3, r3
 800afa4:	ea02 0103 	and.w	r1, r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	03ff63ff 	.word	0x03ff63ff

0800afc4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd8:	4a39      	ldr	r2, [pc, #228]	@ (800b0c0 <I2C_Enable_IRQ+0xfc>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d032      	beq.n	800b044 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800afe2:	4a38      	ldr	r2, [pc, #224]	@ (800b0c4 <I2C_Enable_IRQ+0x100>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d02d      	beq.n	800b044 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800afec:	4a36      	ldr	r2, [pc, #216]	@ (800b0c8 <I2C_Enable_IRQ+0x104>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d028      	beq.n	800b044 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aff2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da03      	bge.n	800b002 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b000:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b002:	887b      	ldrh	r3, [r7, #2]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800b012:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b014:	887b      	ldrh	r3, [r7, #2]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800b024:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b026:	887b      	ldrh	r3, [r7, #2]
 800b028:	2b10      	cmp	r3, #16
 800b02a:	d103      	bne.n	800b034 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b032:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b034:	887b      	ldrh	r3, [r7, #2]
 800b036:	2b20      	cmp	r3, #32
 800b038:	d133      	bne.n	800b0a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f043 0320 	orr.w	r3, r3, #32
 800b040:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b042:	e02e      	b.n	800b0a2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	da03      	bge.n	800b054 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b052:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b054:	887b      	ldrh	r3, [r7, #2]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800b064:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b066:	887b      	ldrh	r3, [r7, #2]
 800b068:	f003 0302 	and.w	r3, r3, #2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800b076:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b078:	887b      	ldrh	r3, [r7, #2]
 800b07a:	2b10      	cmp	r3, #16
 800b07c:	d103      	bne.n	800b086 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b084:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b086:	887b      	ldrh	r3, [r7, #2]
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d103      	bne.n	800b094 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b092:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b094:	887b      	ldrh	r3, [r7, #2]
 800b096:	2b40      	cmp	r3, #64	@ 0x40
 800b098:	d103      	bne.n	800b0a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	601a      	str	r2, [r3, #0]
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	08009e4b 	.word	0x08009e4b
 800b0c4:	0800a26d 	.word	0x0800a26d
 800b0c8:	0800a021 	.word	0x0800a021

0800b0cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b0dc:	887b      	ldrh	r3, [r7, #2]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00f      	beq.n	800b106 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b0ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b0fa:	2b28      	cmp	r3, #40	@ 0x28
 800b0fc:	d003      	beq.n	800b106 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b104:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b106:	887b      	ldrh	r3, [r7, #2]
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00f      	beq.n	800b130 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b116:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b124:	2b28      	cmp	r3, #40	@ 0x28
 800b126:	d003      	beq.n	800b130 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b12e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b134:	2b00      	cmp	r3, #0
 800b136:	da03      	bge.n	800b140 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b13e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b140:	887b      	ldrh	r3, [r7, #2]
 800b142:	2b10      	cmp	r3, #16
 800b144:	d103      	bne.n	800b14e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b14c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b14e:	887b      	ldrh	r3, [r7, #2]
 800b150:	2b20      	cmp	r3, #32
 800b152:	d103      	bne.n	800b15c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f043 0320 	orr.w	r3, r3, #32
 800b15a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b15c:	887b      	ldrh	r3, [r7, #2]
 800b15e:	2b40      	cmp	r3, #64	@ 0x40
 800b160:	d103      	bne.n	800b16a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b168:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6819      	ldr	r1, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	43da      	mvns	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	400a      	ands	r2, r1
 800b17a:	601a      	str	r2, [r3, #0]
}
 800b17c:	bf00      	nop
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d138      	bne.n	800b210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e032      	b.n	800b212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2224      	movs	r2, #36	@ 0x24
 800b1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b1da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6819      	ldr	r1, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0201 	orr.w	r2, r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e000      	b.n	800b212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b210:	2302      	movs	r3, #2
  }
}
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b21e:	b480      	push	{r7}
 800b220:	b085      	sub	sp, #20
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b20      	cmp	r3, #32
 800b232:	d139      	bne.n	800b2a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d101      	bne.n	800b242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b23e:	2302      	movs	r3, #2
 800b240:	e033      	b.n	800b2aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2224      	movs	r2, #36	@ 0x24
 800b24e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4313      	orrs	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0201 	orr.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2220      	movs	r2, #32
 800b298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e000      	b.n	800b2aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b2a8:	2302      	movs	r3, #2
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
	...

0800b2b8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b2c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800b2f0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b2c6:	f043 0301 	orr.w	r3, r3, #1
 800b2ca:	6613      	str	r3, [r2, #96]	@ 0x60
 800b2cc:	4b08      	ldr	r3, [pc, #32]	@ (800b2f0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b2ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800b2d8:	4b06      	ldr	r3, [pc, #24]	@ (800b2f4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	4905      	ldr	r1, [pc, #20]	@ (800b2f4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	604b      	str	r3, [r1, #4]
}
 800b2e4:	bf00      	nop
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	40021000 	.word	0x40021000
 800b2f4:	40010000 	.word	0x40010000

0800b2f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d141      	bne.n	800b38a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b306:	4b4b      	ldr	r3, [pc, #300]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b312:	d131      	bne.n	800b378 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b314:	4b47      	ldr	r3, [pc, #284]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b31a:	4a46      	ldr	r2, [pc, #280]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b31c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b324:	4b43      	ldr	r3, [pc, #268]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b32c:	4a41      	ldr	r2, [pc, #260]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b32e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b334:	4b40      	ldr	r3, [pc, #256]	@ (800b438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2232      	movs	r2, #50	@ 0x32
 800b33a:	fb02 f303 	mul.w	r3, r2, r3
 800b33e:	4a3f      	ldr	r2, [pc, #252]	@ (800b43c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b340:	fba2 2303 	umull	r2, r3, r2, r3
 800b344:	0c9b      	lsrs	r3, r3, #18
 800b346:	3301      	adds	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b34a:	e002      	b.n	800b352 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3b01      	subs	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b352:	4b38      	ldr	r3, [pc, #224]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b35a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b35e:	d102      	bne.n	800b366 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1f2      	bne.n	800b34c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b366:	4b33      	ldr	r3, [pc, #204]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b372:	d158      	bne.n	800b426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e057      	b.n	800b428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b378:	4b2e      	ldr	r3, [pc, #184]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37e:	4a2d      	ldr	r2, [pc, #180]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b388:	e04d      	b.n	800b426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b390:	d141      	bne.n	800b416 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b392:	4b28      	ldr	r3, [pc, #160]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b39a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b39e:	d131      	bne.n	800b404 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b3a0:	4b24      	ldr	r3, [pc, #144]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3a6:	4a23      	ldr	r2, [pc, #140]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b3b0:	4b20      	ldr	r3, [pc, #128]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b3b8:	4a1e      	ldr	r2, [pc, #120]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b3be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2232      	movs	r2, #50	@ 0x32
 800b3c6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b43c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d0:	0c9b      	lsrs	r3, r3, #18
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3d6:	e002      	b.n	800b3de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3de:	4b15      	ldr	r3, [pc, #84]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3ea:	d102      	bne.n	800b3f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f2      	bne.n	800b3d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3f2:	4b10      	ldr	r3, [pc, #64]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3fe:	d112      	bne.n	800b426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e011      	b.n	800b428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b404:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40a:	4a0a      	ldr	r2, [pc, #40]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b40c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b414:	e007      	b.n	800b426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b416:	4b07      	ldr	r3, [pc, #28]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b41e:	4a05      	ldr	r2, [pc, #20]	@ (800b434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b420:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b424:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	40007000 	.word	0x40007000
 800b438:	2000000c 	.word	0x2000000c
 800b43c:	431bde83 	.word	0x431bde83

0800b440 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b440:	b480      	push	{r7}
 800b442:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b444:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	4a04      	ldr	r2, [pc, #16]	@ (800b45c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b44a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b44e:	6093      	str	r3, [r2, #8]
}
 800b450:	bf00      	nop
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	40007000 	.word	0x40007000

0800b460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e2fe      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d075      	beq.n	800b56a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b47e:	4b97      	ldr	r3, [pc, #604]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f003 030c 	and.w	r3, r3, #12
 800b486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b488:	4b94      	ldr	r3, [pc, #592]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b0c      	cmp	r3, #12
 800b496:	d102      	bne.n	800b49e <HAL_RCC_OscConfig+0x3e>
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d002      	beq.n	800b4a4 <HAL_RCC_OscConfig+0x44>
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d10b      	bne.n	800b4bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4a4:	4b8d      	ldr	r3, [pc, #564]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d05b      	beq.n	800b568 <HAL_RCC_OscConfig+0x108>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d157      	bne.n	800b568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e2d9      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4c4:	d106      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x74>
 800b4c6:	4b85      	ldr	r3, [pc, #532]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a84      	ldr	r2, [pc, #528]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	e01d      	b.n	800b510 <HAL_RCC_OscConfig+0xb0>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4dc:	d10c      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x98>
 800b4de:	4b7f      	ldr	r3, [pc, #508]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a7e      	ldr	r2, [pc, #504]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	4b7c      	ldr	r3, [pc, #496]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a7b      	ldr	r2, [pc, #492]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	e00b      	b.n	800b510 <HAL_RCC_OscConfig+0xb0>
 800b4f8:	4b78      	ldr	r3, [pc, #480]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a77      	ldr	r2, [pc, #476]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b4fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b502:	6013      	str	r3, [r2, #0]
 800b504:	4b75      	ldr	r3, [pc, #468]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a74      	ldr	r2, [pc, #464]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b50a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b50e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d013      	beq.n	800b540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b518:	f7fa f9e2 	bl	80058e0 <HAL_GetTick>
 800b51c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b51e:	e008      	b.n	800b532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b520:	f7fa f9de 	bl	80058e0 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	2b64      	cmp	r3, #100	@ 0x64
 800b52c:	d901      	bls.n	800b532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e29e      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b532:	4b6a      	ldr	r3, [pc, #424]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0f0      	beq.n	800b520 <HAL_RCC_OscConfig+0xc0>
 800b53e:	e014      	b.n	800b56a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b540:	f7fa f9ce 	bl	80058e0 <HAL_GetTick>
 800b544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b546:	e008      	b.n	800b55a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b548:	f7fa f9ca 	bl	80058e0 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b64      	cmp	r3, #100	@ 0x64
 800b554:	d901      	bls.n	800b55a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e28a      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b55a:	4b60      	ldr	r3, [pc, #384]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1f0      	bne.n	800b548 <HAL_RCC_OscConfig+0xe8>
 800b566:	e000      	b.n	800b56a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d075      	beq.n	800b662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b576:	4b59      	ldr	r3, [pc, #356]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f003 030c 	and.w	r3, r3, #12
 800b57e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b580:	4b56      	ldr	r3, [pc, #344]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	2b0c      	cmp	r3, #12
 800b58e:	d102      	bne.n	800b596 <HAL_RCC_OscConfig+0x136>
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d002      	beq.n	800b59c <HAL_RCC_OscConfig+0x13c>
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d11f      	bne.n	800b5dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b59c:	4b4f      	ldr	r3, [pc, #316]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <HAL_RCC_OscConfig+0x154>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e25d      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5b4:	4b49      	ldr	r3, [pc, #292]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	061b      	lsls	r3, r3, #24
 800b5c2:	4946      	ldr	r1, [pc, #280]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b5c8:	4b45      	ldr	r3, [pc, #276]	@ (800b6e0 <HAL_RCC_OscConfig+0x280>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fa f93b 	bl	8005848 <HAL_InitTick>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d043      	beq.n	800b660 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e249      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d023      	beq.n	800b62c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5e4:	4b3d      	ldr	r3, [pc, #244]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a3c      	ldr	r2, [pc, #240]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b5ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f0:	f7fa f976 	bl	80058e0 <HAL_GetTick>
 800b5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5f6:	e008      	b.n	800b60a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5f8:	f7fa f972 	bl	80058e0 <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	2b02      	cmp	r3, #2
 800b604:	d901      	bls.n	800b60a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e232      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b60a:	4b34      	ldr	r3, [pc, #208]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b612:	2b00      	cmp	r3, #0
 800b614:	d0f0      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b616:	4b31      	ldr	r3, [pc, #196]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	061b      	lsls	r3, r3, #24
 800b624:	492d      	ldr	r1, [pc, #180]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b626:	4313      	orrs	r3, r2
 800b628:	604b      	str	r3, [r1, #4]
 800b62a:	e01a      	b.n	800b662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b62c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a2a      	ldr	r2, [pc, #168]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b638:	f7fa f952 	bl	80058e0 <HAL_GetTick>
 800b63c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b63e:	e008      	b.n	800b652 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b640:	f7fa f94e 	bl	80058e0 <HAL_GetTick>
 800b644:	4602      	mov	r2, r0
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d901      	bls.n	800b652 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b64e:	2303      	movs	r3, #3
 800b650:	e20e      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b652:	4b22      	ldr	r3, [pc, #136]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1f0      	bne.n	800b640 <HAL_RCC_OscConfig+0x1e0>
 800b65e:	e000      	b.n	800b662 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0308 	and.w	r3, r3, #8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d041      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d01c      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b676:	4b19      	ldr	r3, [pc, #100]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b67c:	4a17      	ldr	r2, [pc, #92]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b686:	f7fa f92b 	bl	80058e0 <HAL_GetTick>
 800b68a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b68c:	e008      	b.n	800b6a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b68e:	f7fa f927 	bl	80058e0 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d901      	bls.n	800b6a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e1e7      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b6a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0ef      	beq.n	800b68e <HAL_RCC_OscConfig+0x22e>
 800b6ae:	e020      	b.n	800b6f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b6b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6b6:	4a09      	ldr	r2, [pc, #36]	@ (800b6dc <HAL_RCC_OscConfig+0x27c>)
 800b6b8:	f023 0301 	bic.w	r3, r3, #1
 800b6bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c0:	f7fa f90e 	bl	80058e0 <HAL_GetTick>
 800b6c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6c6:	e00d      	b.n	800b6e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6c8:	f7fa f90a 	bl	80058e0 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d906      	bls.n	800b6e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e1ca      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
 800b6da:	bf00      	nop
 800b6dc:	40021000 	.word	0x40021000
 800b6e0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6e4:	4b8c      	ldr	r3, [pc, #560]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b6e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1ea      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80a6 	beq.w	800b84c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b700:	2300      	movs	r3, #0
 800b702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b704:	4b84      	ldr	r3, [pc, #528]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <HAL_RCC_OscConfig+0x2b4>
 800b710:	2301      	movs	r3, #1
 800b712:	e000      	b.n	800b716 <HAL_RCC_OscConfig+0x2b6>
 800b714:	2300      	movs	r3, #0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00d      	beq.n	800b736 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b71a:	4b7f      	ldr	r3, [pc, #508]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71e:	4a7e      	ldr	r2, [pc, #504]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b724:	6593      	str	r3, [r2, #88]	@ 0x58
 800b726:	4b7c      	ldr	r3, [pc, #496]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b72a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b732:	2301      	movs	r3, #1
 800b734:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b736:	4b79      	ldr	r3, [pc, #484]	@ (800b91c <HAL_RCC_OscConfig+0x4bc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d118      	bne.n	800b774 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b742:	4b76      	ldr	r3, [pc, #472]	@ (800b91c <HAL_RCC_OscConfig+0x4bc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a75      	ldr	r2, [pc, #468]	@ (800b91c <HAL_RCC_OscConfig+0x4bc>)
 800b748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b74c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b74e:	f7fa f8c7 	bl	80058e0 <HAL_GetTick>
 800b752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b754:	e008      	b.n	800b768 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b756:	f7fa f8c3 	bl	80058e0 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d901      	bls.n	800b768 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e183      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b768:	4b6c      	ldr	r3, [pc, #432]	@ (800b91c <HAL_RCC_OscConfig+0x4bc>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0f0      	beq.n	800b756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d108      	bne.n	800b78e <HAL_RCC_OscConfig+0x32e>
 800b77c:	4b66      	ldr	r3, [pc, #408]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b782:	4a65      	ldr	r2, [pc, #404]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b784:	f043 0301 	orr.w	r3, r3, #1
 800b788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b78c:	e024      	b.n	800b7d8 <HAL_RCC_OscConfig+0x378>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	2b05      	cmp	r3, #5
 800b794:	d110      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x358>
 800b796:	4b60      	ldr	r3, [pc, #384]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79c:	4a5e      	ldr	r2, [pc, #376]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b79e:	f043 0304 	orr.w	r3, r3, #4
 800b7a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b7a6:	4b5c      	ldr	r3, [pc, #368]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ac:	4a5a      	ldr	r2, [pc, #360]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b7b6:	e00f      	b.n	800b7d8 <HAL_RCC_OscConfig+0x378>
 800b7b8:	4b57      	ldr	r3, [pc, #348]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7be:	4a56      	ldr	r2, [pc, #344]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7c0:	f023 0301 	bic.w	r3, r3, #1
 800b7c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b7c8:	4b53      	ldr	r3, [pc, #332]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ce:	4a52      	ldr	r2, [pc, #328]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b7d0:	f023 0304 	bic.w	r3, r3, #4
 800b7d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d016      	beq.n	800b80e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7e0:	f7fa f87e 	bl	80058e0 <HAL_GetTick>
 800b7e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7e6:	e00a      	b.n	800b7fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7e8:	f7fa f87a 	bl	80058e0 <HAL_GetTick>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d901      	bls.n	800b7fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e138      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7fe:	4b46      	ldr	r3, [pc, #280]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0ed      	beq.n	800b7e8 <HAL_RCC_OscConfig+0x388>
 800b80c:	e015      	b.n	800b83a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b80e:	f7fa f867 	bl	80058e0 <HAL_GetTick>
 800b812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b814:	e00a      	b.n	800b82c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b816:	f7fa f863 	bl	80058e0 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b824:	4293      	cmp	r3, r2
 800b826:	d901      	bls.n	800b82c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	e121      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b82c:	4b3a      	ldr	r3, [pc, #232]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1ed      	bne.n	800b816 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b83a:	7ffb      	ldrb	r3, [r7, #31]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d105      	bne.n	800b84c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b840:	4b35      	ldr	r3, [pc, #212]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b844:	4a34      	ldr	r2, [pc, #208]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b84a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d03c      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01c      	beq.n	800b89a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b860:	4b2d      	ldr	r3, [pc, #180]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b866:	4a2c      	ldr	r2, [pc, #176]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b870:	f7fa f836 	bl	80058e0 <HAL_GetTick>
 800b874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b876:	e008      	b.n	800b88a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b878:	f7fa f832 	bl	80058e0 <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	2b02      	cmp	r3, #2
 800b884:	d901      	bls.n	800b88a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e0f2      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b88a:	4b23      	ldr	r3, [pc, #140]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b890:	f003 0302 	and.w	r3, r3, #2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d0ef      	beq.n	800b878 <HAL_RCC_OscConfig+0x418>
 800b898:	e01b      	b.n	800b8d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b89a:	4b1f      	ldr	r3, [pc, #124]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b89c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b8a2:	f023 0301 	bic.w	r3, r3, #1
 800b8a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8aa:	f7fa f819 	bl	80058e0 <HAL_GetTick>
 800b8ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b8b0:	e008      	b.n	800b8c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b8b2:	f7fa f815 	bl	80058e0 <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d901      	bls.n	800b8c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e0d5      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b8c4:	4b14      	ldr	r3, [pc, #80]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b8c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1ef      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 80c9 	beq.w	800ba6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f003 030c 	and.w	r3, r3, #12
 800b8e4:	2b0c      	cmp	r3, #12
 800b8e6:	f000 8083 	beq.w	800b9f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	69db      	ldr	r3, [r3, #28]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d15e      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8f2:	4b09      	ldr	r3, [pc, #36]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a08      	ldr	r2, [pc, #32]	@ (800b918 <HAL_RCC_OscConfig+0x4b8>)
 800b8f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8fe:	f7f9 ffef 	bl	80058e0 <HAL_GetTick>
 800b902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b904:	e00c      	b.n	800b920 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b906:	f7f9 ffeb 	bl	80058e0 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	d905      	bls.n	800b920 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e0ab      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
 800b918:	40021000 	.word	0x40021000
 800b91c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b920:	4b55      	ldr	r3, [pc, #340]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1ec      	bne.n	800b906 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b92c:	4b52      	ldr	r3, [pc, #328]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	4b52      	ldr	r3, [pc, #328]	@ (800ba7c <HAL_RCC_OscConfig+0x61c>)
 800b932:	4013      	ands	r3, r2
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6a11      	ldr	r1, [r2, #32]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b93c:	3a01      	subs	r2, #1
 800b93e:	0112      	lsls	r2, r2, #4
 800b940:	4311      	orrs	r1, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b946:	0212      	lsls	r2, r2, #8
 800b948:	4311      	orrs	r1, r2
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b94e:	0852      	lsrs	r2, r2, #1
 800b950:	3a01      	subs	r2, #1
 800b952:	0552      	lsls	r2, r2, #21
 800b954:	4311      	orrs	r1, r2
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b95a:	0852      	lsrs	r2, r2, #1
 800b95c:	3a01      	subs	r2, #1
 800b95e:	0652      	lsls	r2, r2, #25
 800b960:	4311      	orrs	r1, r2
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b966:	06d2      	lsls	r2, r2, #27
 800b968:	430a      	orrs	r2, r1
 800b96a:	4943      	ldr	r1, [pc, #268]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b970:	4b41      	ldr	r3, [pc, #260]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a40      	ldr	r2, [pc, #256]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b97a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b97c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	4a3d      	ldr	r2, [pc, #244]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b988:	f7f9 ffaa 	bl	80058e0 <HAL_GetTick>
 800b98c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b98e:	e008      	b.n	800b9a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b990:	f7f9 ffa6 	bl	80058e0 <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d901      	bls.n	800b9a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e066      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9a2:	4b35      	ldr	r3, [pc, #212]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0f0      	beq.n	800b990 <HAL_RCC_OscConfig+0x530>
 800b9ae:	e05e      	b.n	800ba6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9b0:	4b31      	ldr	r3, [pc, #196]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a30      	ldr	r2, [pc, #192]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9bc:	f7f9 ff90 	bl	80058e0 <HAL_GetTick>
 800b9c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9c2:	e008      	b.n	800b9d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c4:	f7f9 ff8c 	bl	80058e0 <HAL_GetTick>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d901      	bls.n	800b9d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e04c      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9d6:	4b28      	ldr	r3, [pc, #160]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1f0      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b9e2:	4b25      	ldr	r3, [pc, #148]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9e4:	68da      	ldr	r2, [r3, #12]
 800b9e6:	4924      	ldr	r1, [pc, #144]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ba80 <HAL_RCC_OscConfig+0x620>)
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	60cb      	str	r3, [r1, #12]
 800b9ee:	e03e      	b.n	800ba6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d101      	bne.n	800b9fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e039      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b9fc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba78 <HAL_RCC_OscConfig+0x618>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f003 0203 	and.w	r2, r3, #3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d12c      	bne.n	800ba6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d123      	bne.n	800ba6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d11b      	bne.n	800ba6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d113      	bne.n	800ba6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4c:	085b      	lsrs	r3, r3, #1
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d109      	bne.n	800ba6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba60:	085b      	lsrs	r3, r3, #1
 800ba62:	3b01      	subs	r3, #1
 800ba64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d001      	beq.n	800ba6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e000      	b.n	800ba70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	40021000 	.word	0x40021000
 800ba7c:	019f800c 	.word	0x019f800c
 800ba80:	feeefffc 	.word	0xfeeefffc

0800ba84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e11e      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba9c:	4b91      	ldr	r3, [pc, #580]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 030f 	and.w	r3, r3, #15
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d910      	bls.n	800bacc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baaa:	4b8e      	ldr	r3, [pc, #568]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f023 020f 	bic.w	r2, r3, #15
 800bab2:	498c      	ldr	r1, [pc, #560]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800baba:	4b8a      	ldr	r3, [pc, #552]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 030f 	and.w	r3, r3, #15
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d001      	beq.n	800bacc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e106      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d073      	beq.n	800bbc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	2b03      	cmp	r3, #3
 800bade:	d129      	bne.n	800bb34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bae0:	4b81      	ldr	r3, [pc, #516]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e0f4      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800baf0:	f000 f966 	bl	800bdc0 <RCC_GetSysClockFreqFromPLLSource>
 800baf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	4a7c      	ldr	r2, [pc, #496]	@ (800bcec <HAL_RCC_ClockConfig+0x268>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d93f      	bls.n	800bb7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bafe:	4b7a      	ldr	r3, [pc, #488]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d033      	beq.n	800bb7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d12f      	bne.n	800bb7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb1e:	4b72      	ldr	r3, [pc, #456]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb26:	4a70      	ldr	r2, [pc, #448]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bb2e:	2380      	movs	r3, #128	@ 0x80
 800bb30:	617b      	str	r3, [r7, #20]
 800bb32:	e024      	b.n	800bb7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d107      	bne.n	800bb4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb3c:	4b6a      	ldr	r3, [pc, #424]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d109      	bne.n	800bb5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e0c6      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb4c:	4b66      	ldr	r3, [pc, #408]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e0be      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bb5c:	f000 f8ce 	bl	800bcfc <HAL_RCC_GetSysClockFreq>
 800bb60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	4a61      	ldr	r2, [pc, #388]	@ (800bcec <HAL_RCC_ClockConfig+0x268>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d909      	bls.n	800bb7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb6a:	4b5f      	ldr	r3, [pc, #380]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb72:	4a5d      	ldr	r2, [pc, #372]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bb7a:	2380      	movs	r3, #128	@ 0x80
 800bb7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb7e:	4b5a      	ldr	r3, [pc, #360]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f023 0203 	bic.w	r2, r3, #3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4957      	ldr	r1, [pc, #348]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb90:	f7f9 fea6 	bl	80058e0 <HAL_GetTick>
 800bb94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb96:	e00a      	b.n	800bbae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb98:	f7f9 fea2 	bl	80058e0 <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d901      	bls.n	800bbae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e095      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbae:	4b4e      	ldr	r3, [pc, #312]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f003 020c 	and.w	r2, r3, #12
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d1eb      	bne.n	800bb98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d023      	beq.n	800bc14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d005      	beq.n	800bbe4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbd8:	4b43      	ldr	r3, [pc, #268]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	4a42      	ldr	r2, [pc, #264]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bbde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbe2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d007      	beq.n	800bc00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bbf0:	4b3d      	ldr	r3, [pc, #244]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbf8:	4a3b      	ldr	r2, [pc, #236]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bbfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc00:	4b39      	ldr	r3, [pc, #228]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	4936      	ldr	r1, [pc, #216]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	608b      	str	r3, [r1, #8]
 800bc12:	e008      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b80      	cmp	r3, #128	@ 0x80
 800bc18:	d105      	bne.n	800bc26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bc1a:	4b33      	ldr	r3, [pc, #204]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	4a32      	ldr	r2, [pc, #200]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc26:	4b2f      	ldr	r3, [pc, #188]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d21d      	bcs.n	800bc70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc34:	4b2b      	ldr	r3, [pc, #172]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f023 020f 	bic.w	r2, r3, #15
 800bc3c:	4929      	ldr	r1, [pc, #164]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bc44:	f7f9 fe4c 	bl	80058e0 <HAL_GetTick>
 800bc48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc4a:	e00a      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc4c:	f7f9 fe48 	bl	80058e0 <HAL_GetTick>
 800bc50:	4602      	mov	r2, r0
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d901      	bls.n	800bc62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e03b      	b.n	800bcda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc62:	4b20      	ldr	r3, [pc, #128]	@ (800bce4 <HAL_RCC_ClockConfig+0x260>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 030f 	and.w	r3, r3, #15
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d1ed      	bne.n	800bc4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d008      	beq.n	800bc8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	4917      	ldr	r1, [pc, #92]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc9a:	4b13      	ldr	r3, [pc, #76]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	490f      	ldr	r1, [pc, #60]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bcae:	f000 f825 	bl	800bcfc <HAL_RCC_GetSysClockFreq>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <HAL_RCC_ClockConfig+0x264>)
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	091b      	lsrs	r3, r3, #4
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	490c      	ldr	r1, [pc, #48]	@ (800bcf0 <HAL_RCC_ClockConfig+0x26c>)
 800bcc0:	5ccb      	ldrb	r3, [r1, r3]
 800bcc2:	f003 031f 	and.w	r3, r3, #31
 800bcc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcca:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf4 <HAL_RCC_ClockConfig+0x270>)
 800bccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bcce:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf8 <HAL_RCC_ClockConfig+0x274>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f9 fdb8 	bl	8005848 <HAL_InitTick>
 800bcd8:	4603      	mov	r3, r0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	40022000 	.word	0x40022000
 800bce8:	40021000 	.word	0x40021000
 800bcec:	04c4b400 	.word	0x04c4b400
 800bcf0:	0800d7b8 	.word	0x0800d7b8
 800bcf4:	2000000c 	.word	0x2000000c
 800bcf8:	20000014 	.word	0x20000014

0800bcfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bd02:	4b2c      	ldr	r3, [pc, #176]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 030c 	and.w	r3, r3, #12
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d102      	bne.n	800bd14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bd0e:	4b2a      	ldr	r3, [pc, #168]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	e047      	b.n	800bda4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bd14:	4b27      	ldr	r3, [pc, #156]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f003 030c 	and.w	r3, r3, #12
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	d102      	bne.n	800bd26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bd20:	4b26      	ldr	r3, [pc, #152]	@ (800bdbc <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd22:	613b      	str	r3, [r7, #16]
 800bd24:	e03e      	b.n	800bda4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bd26:	4b23      	ldr	r3, [pc, #140]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f003 030c 	and.w	r3, r3, #12
 800bd2e:	2b0c      	cmp	r3, #12
 800bd30:	d136      	bne.n	800bda0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bd32:	4b20      	ldr	r3, [pc, #128]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	f003 0303 	and.w	r3, r3, #3
 800bd3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	091b      	lsrs	r3, r3, #4
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	3301      	adds	r3, #1
 800bd48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d10c      	bne.n	800bd6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd50:	4a1a      	ldr	r2, [pc, #104]	@ (800bdbc <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd58:	4a16      	ldr	r2, [pc, #88]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd5a:	68d2      	ldr	r2, [r2, #12]
 800bd5c:	0a12      	lsrs	r2, r2, #8
 800bd5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	617b      	str	r3, [r7, #20]
      break;
 800bd68:	e00c      	b.n	800bd84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd6a:	4a13      	ldr	r2, [pc, #76]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd72:	4a10      	ldr	r2, [pc, #64]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd74:	68d2      	ldr	r2, [r2, #12]
 800bd76:	0a12      	lsrs	r2, r2, #8
 800bd78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd7c:	fb02 f303 	mul.w	r3, r2, r3
 800bd80:	617b      	str	r3, [r7, #20]
      break;
 800bd82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd84:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	0e5b      	lsrs	r3, r3, #25
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	3301      	adds	r3, #1
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd9c:	613b      	str	r3, [r7, #16]
 800bd9e:	e001      	b.n	800bda4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bda4:	693b      	ldr	r3, [r7, #16]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	40021000 	.word	0x40021000
 800bdb8:	00f42400 	.word	0x00f42400
 800bdbc:	016e3600 	.word	0x016e3600

0800bdc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b087      	sub	sp, #28
 800bdc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bdc6:	4b1e      	ldr	r3, [pc, #120]	@ (800be40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	f003 0303 	and.w	r3, r3, #3
 800bdce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	@ (800be40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	091b      	lsrs	r3, r3, #4
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	3301      	adds	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d10c      	bne.n	800bdfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bde4:	4a17      	ldr	r2, [pc, #92]	@ (800be44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdec:	4a14      	ldr	r2, [pc, #80]	@ (800be40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdee:	68d2      	ldr	r2, [r2, #12]
 800bdf0:	0a12      	lsrs	r2, r2, #8
 800bdf2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bdf6:	fb02 f303 	mul.w	r3, r2, r3
 800bdfa:	617b      	str	r3, [r7, #20]
    break;
 800bdfc:	e00c      	b.n	800be18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bdfe:	4a12      	ldr	r2, [pc, #72]	@ (800be48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	fbb2 f3f3 	udiv	r3, r2, r3
 800be06:	4a0e      	ldr	r2, [pc, #56]	@ (800be40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be08:	68d2      	ldr	r2, [r2, #12]
 800be0a:	0a12      	lsrs	r2, r2, #8
 800be0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800be10:	fb02 f303 	mul.w	r3, r2, r3
 800be14:	617b      	str	r3, [r7, #20]
    break;
 800be16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be18:	4b09      	ldr	r3, [pc, #36]	@ (800be40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	0e5b      	lsrs	r3, r3, #25
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	3301      	adds	r3, #1
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800be32:	687b      	ldr	r3, [r7, #4]
}
 800be34:	4618      	mov	r0, r3
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	40021000 	.word	0x40021000
 800be44:	016e3600 	.word	0x016e3600
 800be48:	00f42400 	.word	0x00f42400

0800be4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be54:	2300      	movs	r3, #0
 800be56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be58:	2300      	movs	r3, #0
 800be5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8098 	beq.w	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be6a:	2300      	movs	r3, #0
 800be6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be6e:	4b43      	ldr	r3, [pc, #268]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10d      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be7a:	4b40      	ldr	r3, [pc, #256]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be7e:	4a3f      	ldr	r2, [pc, #252]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be84:	6593      	str	r3, [r2, #88]	@ 0x58
 800be86:	4b3d      	ldr	r3, [pc, #244]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be8e:	60bb      	str	r3, [r7, #8]
 800be90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be92:	2301      	movs	r3, #1
 800be94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be96:	4b3a      	ldr	r3, [pc, #232]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a39      	ldr	r2, [pc, #228]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bea2:	f7f9 fd1d 	bl	80058e0 <HAL_GetTick>
 800bea6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bea8:	e009      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800beaa:	f7f9 fd19 	bl	80058e0 <HAL_GetTick>
 800beae:	4602      	mov	r2, r0
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d902      	bls.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	74fb      	strb	r3, [r7, #19]
        break;
 800bebc:	e005      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bebe:	4b30      	ldr	r3, [pc, #192]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0ef      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800beca:	7cfb      	ldrb	r3, [r7, #19]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d159      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bed0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800beda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d01e      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d019      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800beec:	4b23      	ldr	r3, [pc, #140]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800beee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bef8:	4b20      	ldr	r3, [pc, #128]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800befa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800befe:	4a1f      	ldr	r2, [pc, #124]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf08:	4b1c      	ldr	r3, [pc, #112]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf0e:	4a1b      	ldr	r2, [pc, #108]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bf18:	4a18      	ldr	r2, [pc, #96]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d016      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf2a:	f7f9 fcd9 	bl	80058e0 <HAL_GetTick>
 800bf2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf30:	e00b      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf32:	f7f9 fcd5 	bl	80058e0 <HAL_GetTick>
 800bf36:	4602      	mov	r2, r0
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d902      	bls.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bf44:	2303      	movs	r3, #3
 800bf46:	74fb      	strb	r3, [r7, #19]
            break;
 800bf48:	e006      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0ec      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bf58:	7cfb      	ldrb	r3, [r7, #19]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10b      	bne.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf5e:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf6c:	4903      	ldr	r1, [pc, #12]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bf74:	e008      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf76:	7cfb      	ldrb	r3, [r7, #19]
 800bf78:	74bb      	strb	r3, [r7, #18]
 800bf7a:	e005      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bf7c:	40021000 	.word	0x40021000
 800bf80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf84:	7cfb      	ldrb	r3, [r7, #19]
 800bf86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf88:	7c7b      	ldrb	r3, [r7, #17]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d105      	bne.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf8e:	4ba7      	ldr	r3, [pc, #668]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf92:	4aa6      	ldr	r2, [pc, #664]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bfa6:	4ba1      	ldr	r3, [pc, #644]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfac:	f023 0203 	bic.w	r2, r3, #3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	499d      	ldr	r1, [pc, #628]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bfc8:	4b98      	ldr	r3, [pc, #608]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfce:	f023 020c 	bic.w	r2, r3, #12
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	4995      	ldr	r1, [pc, #596]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfea:	4b90      	ldr	r3, [pc, #576]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	498c      	ldr	r1, [pc, #560]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0308 	and.w	r3, r3, #8
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00a      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c00c:	4b87      	ldr	r3, [pc, #540]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c012:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	4984      	ldr	r1, [pc, #528]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c01c:	4313      	orrs	r3, r2
 800c01e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0310 	and.w	r3, r3, #16
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c02e:	4b7f      	ldr	r3, [pc, #508]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	695b      	ldr	r3, [r3, #20]
 800c03c:	497b      	ldr	r1, [pc, #492]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0320 	and.w	r3, r3, #32
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c050:	4b76      	ldr	r3, [pc, #472]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c056:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	4973      	ldr	r1, [pc, #460]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c060:	4313      	orrs	r3, r2
 800c062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c072:	4b6e      	ldr	r3, [pc, #440]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c078:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	496a      	ldr	r1, [pc, #424]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c082:	4313      	orrs	r3, r2
 800c084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c094:	4b65      	ldr	r3, [pc, #404]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c09a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	4962      	ldr	r1, [pc, #392]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c0b6:	4b5d      	ldr	r3, [pc, #372]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c4:	4959      	ldr	r1, [pc, #356]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0d8:	4b54      	ldr	r3, [pc, #336]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0de:	f023 0203 	bic.w	r2, r3, #3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e6:	4951      	ldr	r1, [pc, #324]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0fa:	4b4c      	ldr	r3, [pc, #304]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c100:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c108:	4948      	ldr	r1, [pc, #288]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d015      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c11c:	4b43      	ldr	r3, [pc, #268]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12a:	4940      	ldr	r1, [pc, #256]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c12c:	4313      	orrs	r3, r2
 800c12e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c13a:	d105      	bne.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c13c:	4b3b      	ldr	r3, [pc, #236]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	4a3a      	ldr	r2, [pc, #232]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c146:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c150:	2b00      	cmp	r3, #0
 800c152:	d015      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c154:	4b35      	ldr	r3, [pc, #212]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c15a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c162:	4932      	ldr	r1, [pc, #200]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c164:	4313      	orrs	r3, r2
 800c166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c16e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c172:	d105      	bne.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c174:	4b2d      	ldr	r3, [pc, #180]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	4a2c      	ldr	r2, [pc, #176]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c17e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d015      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c18c:	4b27      	ldr	r3, [pc, #156]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c192:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19a:	4924      	ldr	r1, [pc, #144]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1aa:	d105      	bne.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1ac:	4b1f      	ldr	r3, [pc, #124]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	4a1e      	ldr	r2, [pc, #120]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d015      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1c4:	4b19      	ldr	r3, [pc, #100]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d2:	4916      	ldr	r1, [pc, #88]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1e2:	d105      	bne.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1e4:	4b11      	ldr	r3, [pc, #68]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	4a10      	ldr	r2, [pc, #64]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d019      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c202:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c20a:	4908      	ldr	r1, [pc, #32]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c21a:	d109      	bne.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c21c:	4b03      	ldr	r3, [pc, #12]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	4a02      	ldr	r2, [pc, #8]	@ (800c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c226:	60d3      	str	r3, [r2, #12]
 800c228:	e002      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c22a:	bf00      	nop
 800c22c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d015      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c23c:	4b29      	ldr	r3, [pc, #164]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c242:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c24a:	4926      	ldr	r1, [pc, #152]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c24c:	4313      	orrs	r3, r2
 800c24e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c25a:	d105      	bne.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c25c:	4b21      	ldr	r3, [pc, #132]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	4a20      	ldr	r2, [pc, #128]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c266:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d015      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c274:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c27a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c282:	4918      	ldr	r1, [pc, #96]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c284:	4313      	orrs	r3, r2
 800c286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c292:	d105      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c294:	4b13      	ldr	r3, [pc, #76]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	4a12      	ldr	r2, [pc, #72]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c29a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c29e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d015      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c2b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ba:	490a      	ldr	r1, [pc, #40]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2ca:	d105      	bne.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2cc:	4b05      	ldr	r3, [pc, #20]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	4a04      	ldr	r2, [pc, #16]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c2d8:	7cbb      	ldrb	r3, [r7, #18]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	40021000 	.word	0x40021000

0800c2e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e049      	b.n	800c38e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7f8 fcb4 	bl	8004c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3304      	adds	r3, #4
 800c324:	4619      	mov	r1, r3
 800c326:	4610      	mov	r0, r2
 800c328:	f000 fa5c 	bl	800c7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
	...

0800c398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <HAL_TIM_PWM_Start+0x24>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	bf14      	ite	ne
 800c3b4:	2301      	movne	r3, #1
 800c3b6:	2300      	moveq	r3, #0
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	e03c      	b.n	800c436 <HAL_TIM_PWM_Start+0x9e>
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d109      	bne.n	800c3d6 <HAL_TIM_PWM_Start+0x3e>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	bf14      	ite	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	2300      	moveq	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	e02f      	b.n	800c436 <HAL_TIM_PWM_Start+0x9e>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d109      	bne.n	800c3f0 <HAL_TIM_PWM_Start+0x58>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	bf14      	ite	ne
 800c3e8:	2301      	movne	r3, #1
 800c3ea:	2300      	moveq	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	e022      	b.n	800c436 <HAL_TIM_PWM_Start+0x9e>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b0c      	cmp	r3, #12
 800c3f4:	d109      	bne.n	800c40a <HAL_TIM_PWM_Start+0x72>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	bf14      	ite	ne
 800c402:	2301      	movne	r3, #1
 800c404:	2300      	moveq	r3, #0
 800c406:	b2db      	uxtb	r3, r3
 800c408:	e015      	b.n	800c436 <HAL_TIM_PWM_Start+0x9e>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b10      	cmp	r3, #16
 800c40e:	d109      	bne.n	800c424 <HAL_TIM_PWM_Start+0x8c>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b01      	cmp	r3, #1
 800c41a:	bf14      	ite	ne
 800c41c:	2301      	movne	r3, #1
 800c41e:	2300      	moveq	r3, #0
 800c420:	b2db      	uxtb	r3, r3
 800c422:	e008      	b.n	800c436 <HAL_TIM_PWM_Start+0x9e>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	bf14      	ite	ne
 800c430:	2301      	movne	r3, #1
 800c432:	2300      	moveq	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e0a6      	b.n	800c58c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d104      	bne.n	800c44e <HAL_TIM_PWM_Start+0xb6>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c44c:	e023      	b.n	800c496 <HAL_TIM_PWM_Start+0xfe>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b04      	cmp	r3, #4
 800c452:	d104      	bne.n	800c45e <HAL_TIM_PWM_Start+0xc6>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c45c:	e01b      	b.n	800c496 <HAL_TIM_PWM_Start+0xfe>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b08      	cmp	r3, #8
 800c462:	d104      	bne.n	800c46e <HAL_TIM_PWM_Start+0xd6>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c46c:	e013      	b.n	800c496 <HAL_TIM_PWM_Start+0xfe>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b0c      	cmp	r3, #12
 800c472:	d104      	bne.n	800c47e <HAL_TIM_PWM_Start+0xe6>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c47c:	e00b      	b.n	800c496 <HAL_TIM_PWM_Start+0xfe>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b10      	cmp	r3, #16
 800c482:	d104      	bne.n	800c48e <HAL_TIM_PWM_Start+0xf6>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2202      	movs	r2, #2
 800c488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c48c:	e003      	b.n	800c496 <HAL_TIM_PWM_Start+0xfe>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2202      	movs	r2, #2
 800c492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2201      	movs	r2, #1
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fd7e 	bl	800cfa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a3a      	ldr	r2, [pc, #232]	@ (800c594 <HAL_TIM_PWM_Start+0x1fc>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d018      	beq.n	800c4e0 <HAL_TIM_PWM_Start+0x148>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a39      	ldr	r2, [pc, #228]	@ (800c598 <HAL_TIM_PWM_Start+0x200>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d013      	beq.n	800c4e0 <HAL_TIM_PWM_Start+0x148>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a37      	ldr	r2, [pc, #220]	@ (800c59c <HAL_TIM_PWM_Start+0x204>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d00e      	beq.n	800c4e0 <HAL_TIM_PWM_Start+0x148>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a36      	ldr	r2, [pc, #216]	@ (800c5a0 <HAL_TIM_PWM_Start+0x208>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d009      	beq.n	800c4e0 <HAL_TIM_PWM_Start+0x148>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a34      	ldr	r2, [pc, #208]	@ (800c5a4 <HAL_TIM_PWM_Start+0x20c>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d004      	beq.n	800c4e0 <HAL_TIM_PWM_Start+0x148>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a33      	ldr	r2, [pc, #204]	@ (800c5a8 <HAL_TIM_PWM_Start+0x210>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d101      	bne.n	800c4e4 <HAL_TIM_PWM_Start+0x14c>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <HAL_TIM_PWM_Start+0x14e>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a25      	ldr	r2, [pc, #148]	@ (800c594 <HAL_TIM_PWM_Start+0x1fc>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d022      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c50c:	d01d      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a26      	ldr	r2, [pc, #152]	@ (800c5ac <HAL_TIM_PWM_Start+0x214>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d018      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a24      	ldr	r2, [pc, #144]	@ (800c5b0 <HAL_TIM_PWM_Start+0x218>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d013      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a23      	ldr	r2, [pc, #140]	@ (800c5b4 <HAL_TIM_PWM_Start+0x21c>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00e      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a19      	ldr	r2, [pc, #100]	@ (800c598 <HAL_TIM_PWM_Start+0x200>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d009      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a18      	ldr	r2, [pc, #96]	@ (800c59c <HAL_TIM_PWM_Start+0x204>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d004      	beq.n	800c54a <HAL_TIM_PWM_Start+0x1b2>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a18      	ldr	r2, [pc, #96]	@ (800c5a8 <HAL_TIM_PWM_Start+0x210>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d115      	bne.n	800c576 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	4b19      	ldr	r3, [pc, #100]	@ (800c5b8 <HAL_TIM_PWM_Start+0x220>)
 800c552:	4013      	ands	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b06      	cmp	r3, #6
 800c55a:	d015      	beq.n	800c588 <HAL_TIM_PWM_Start+0x1f0>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c562:	d011      	beq.n	800c588 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f042 0201 	orr.w	r2, r2, #1
 800c572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c574:	e008      	b.n	800c588 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0201 	orr.w	r2, r2, #1
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	e000      	b.n	800c58a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c588:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	40012c00 	.word	0x40012c00
 800c598:	40013400 	.word	0x40013400
 800c59c:	40014000 	.word	0x40014000
 800c5a0:	40014400 	.word	0x40014400
 800c5a4:	40014800 	.word	0x40014800
 800c5a8:	40015000 	.word	0x40015000
 800c5ac:	40000400 	.word	0x40000400
 800c5b0:	40000800 	.word	0x40000800
 800c5b4:	40000c00 	.word	0x40000c00
 800c5b8:	00010007 	.word	0x00010007

0800c5bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e0ff      	b.n	800c7da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b14      	cmp	r3, #20
 800c5e6:	f200 80f0 	bhi.w	800c7ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c645 	.word	0x0800c645
 800c5f4:	0800c7cb 	.word	0x0800c7cb
 800c5f8:	0800c7cb 	.word	0x0800c7cb
 800c5fc:	0800c7cb 	.word	0x0800c7cb
 800c600:	0800c685 	.word	0x0800c685
 800c604:	0800c7cb 	.word	0x0800c7cb
 800c608:	0800c7cb 	.word	0x0800c7cb
 800c60c:	0800c7cb 	.word	0x0800c7cb
 800c610:	0800c6c7 	.word	0x0800c6c7
 800c614:	0800c7cb 	.word	0x0800c7cb
 800c618:	0800c7cb 	.word	0x0800c7cb
 800c61c:	0800c7cb 	.word	0x0800c7cb
 800c620:	0800c707 	.word	0x0800c707
 800c624:	0800c7cb 	.word	0x0800c7cb
 800c628:	0800c7cb 	.word	0x0800c7cb
 800c62c:	0800c7cb 	.word	0x0800c7cb
 800c630:	0800c749 	.word	0x0800c749
 800c634:	0800c7cb 	.word	0x0800c7cb
 800c638:	0800c7cb 	.word	0x0800c7cb
 800c63c:	0800c7cb 	.word	0x0800c7cb
 800c640:	0800c789 	.word	0x0800c789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 f97e 	bl	800c94c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0208 	orr.w	r2, r2, #8
 800c65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	699a      	ldr	r2, [r3, #24]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0204 	bic.w	r2, r2, #4
 800c66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6999      	ldr	r1, [r3, #24]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	691a      	ldr	r2, [r3, #16]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	619a      	str	r2, [r3, #24]
      break;
 800c682:	e0a5      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f9f8 	bl	800ca80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c69e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	699a      	ldr	r2, [r3, #24]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6999      	ldr	r1, [r3, #24]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	021a      	lsls	r2, r3, #8
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	619a      	str	r2, [r3, #24]
      break;
 800c6c4:	e084      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fa6b 	bl	800cba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f042 0208 	orr.w	r2, r2, #8
 800c6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69da      	ldr	r2, [r3, #28]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0204 	bic.w	r2, r2, #4
 800c6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69d9      	ldr	r1, [r3, #28]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	61da      	str	r2, [r3, #28]
      break;
 800c704:	e064      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fadd 	bl	800cccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69da      	ldr	r2, [r3, #28]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69d9      	ldr	r1, [r3, #28]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	021a      	lsls	r2, r3, #8
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	61da      	str	r2, [r3, #28]
      break;
 800c746:	e043      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fb50 	bl	800cdf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0208 	orr.w	r2, r2, #8
 800c762:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0204 	bic.w	r2, r2, #4
 800c772:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	691a      	ldr	r2, [r3, #16]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c786:	e023      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68b9      	ldr	r1, [r7, #8]
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fb9a 	bl	800cec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	021a      	lsls	r2, r3, #8
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c7c8:	e002      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop

0800c7e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a4c      	ldr	r2, [pc, #304]	@ (800c928 <TIM_Base_SetConfig+0x144>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d017      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c802:	d013      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a49      	ldr	r2, [pc, #292]	@ (800c92c <TIM_Base_SetConfig+0x148>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d00f      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a48      	ldr	r2, [pc, #288]	@ (800c930 <TIM_Base_SetConfig+0x14c>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00b      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a47      	ldr	r2, [pc, #284]	@ (800c934 <TIM_Base_SetConfig+0x150>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d007      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a46      	ldr	r2, [pc, #280]	@ (800c938 <TIM_Base_SetConfig+0x154>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d003      	beq.n	800c82c <TIM_Base_SetConfig+0x48>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a45      	ldr	r2, [pc, #276]	@ (800c93c <TIM_Base_SetConfig+0x158>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d108      	bne.n	800c83e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a39      	ldr	r2, [pc, #228]	@ (800c928 <TIM_Base_SetConfig+0x144>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d023      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c84c:	d01f      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a36      	ldr	r2, [pc, #216]	@ (800c92c <TIM_Base_SetConfig+0x148>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d01b      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a35      	ldr	r2, [pc, #212]	@ (800c930 <TIM_Base_SetConfig+0x14c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d017      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a34      	ldr	r2, [pc, #208]	@ (800c934 <TIM_Base_SetConfig+0x150>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d013      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a33      	ldr	r2, [pc, #204]	@ (800c938 <TIM_Base_SetConfig+0x154>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00f      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a33      	ldr	r2, [pc, #204]	@ (800c940 <TIM_Base_SetConfig+0x15c>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d00b      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a32      	ldr	r2, [pc, #200]	@ (800c944 <TIM_Base_SetConfig+0x160>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d007      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a31      	ldr	r2, [pc, #196]	@ (800c948 <TIM_Base_SetConfig+0x164>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d003      	beq.n	800c88e <TIM_Base_SetConfig+0xaa>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a2c      	ldr	r2, [pc, #176]	@ (800c93c <TIM_Base_SetConfig+0x158>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d108      	bne.n	800c8a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	689a      	ldr	r2, [r3, #8]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a18      	ldr	r2, [pc, #96]	@ (800c928 <TIM_Base_SetConfig+0x144>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d013      	beq.n	800c8f4 <TIM_Base_SetConfig+0x110>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c938 <TIM_Base_SetConfig+0x154>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d00f      	beq.n	800c8f4 <TIM_Base_SetConfig+0x110>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c940 <TIM_Base_SetConfig+0x15c>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00b      	beq.n	800c8f4 <TIM_Base_SetConfig+0x110>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a19      	ldr	r2, [pc, #100]	@ (800c944 <TIM_Base_SetConfig+0x160>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d007      	beq.n	800c8f4 <TIM_Base_SetConfig+0x110>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a18      	ldr	r2, [pc, #96]	@ (800c948 <TIM_Base_SetConfig+0x164>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d003      	beq.n	800c8f4 <TIM_Base_SetConfig+0x110>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a13      	ldr	r2, [pc, #76]	@ (800c93c <TIM_Base_SetConfig+0x158>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d103      	bne.n	800c8fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d105      	bne.n	800c91a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	f023 0201 	bic.w	r2, r3, #1
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	611a      	str	r2, [r3, #16]
  }
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	40012c00 	.word	0x40012c00
 800c92c:	40000400 	.word	0x40000400
 800c930:	40000800 	.word	0x40000800
 800c934:	40000c00 	.word	0x40000c00
 800c938:	40013400 	.word	0x40013400
 800c93c:	40015000 	.word	0x40015000
 800c940:	40014000 	.word	0x40014000
 800c944:	40014400 	.word	0x40014400
 800c948:	40014800 	.word	0x40014800

0800c94c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	f023 0201 	bic.w	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c97a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f023 0302 	bic.w	r3, r3, #2
 800c998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a30      	ldr	r2, [pc, #192]	@ (800ca68 <TIM_OC1_SetConfig+0x11c>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d013      	beq.n	800c9d4 <TIM_OC1_SetConfig+0x88>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a2f      	ldr	r2, [pc, #188]	@ (800ca6c <TIM_OC1_SetConfig+0x120>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d00f      	beq.n	800c9d4 <TIM_OC1_SetConfig+0x88>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a2e      	ldr	r2, [pc, #184]	@ (800ca70 <TIM_OC1_SetConfig+0x124>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00b      	beq.n	800c9d4 <TIM_OC1_SetConfig+0x88>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a2d      	ldr	r2, [pc, #180]	@ (800ca74 <TIM_OC1_SetConfig+0x128>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d007      	beq.n	800c9d4 <TIM_OC1_SetConfig+0x88>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a2c      	ldr	r2, [pc, #176]	@ (800ca78 <TIM_OC1_SetConfig+0x12c>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <TIM_OC1_SetConfig+0x88>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a2b      	ldr	r2, [pc, #172]	@ (800ca7c <TIM_OC1_SetConfig+0x130>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d10c      	bne.n	800c9ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f023 0308 	bic.w	r3, r3, #8
 800c9da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f023 0304 	bic.w	r3, r3, #4
 800c9ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca68 <TIM_OC1_SetConfig+0x11c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d013      	beq.n	800ca1e <TIM_OC1_SetConfig+0xd2>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca6c <TIM_OC1_SetConfig+0x120>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d00f      	beq.n	800ca1e <TIM_OC1_SetConfig+0xd2>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a1b      	ldr	r2, [pc, #108]	@ (800ca70 <TIM_OC1_SetConfig+0x124>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d00b      	beq.n	800ca1e <TIM_OC1_SetConfig+0xd2>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a1a      	ldr	r2, [pc, #104]	@ (800ca74 <TIM_OC1_SetConfig+0x128>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d007      	beq.n	800ca1e <TIM_OC1_SetConfig+0xd2>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a19      	ldr	r2, [pc, #100]	@ (800ca78 <TIM_OC1_SetConfig+0x12c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d003      	beq.n	800ca1e <TIM_OC1_SetConfig+0xd2>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a18      	ldr	r2, [pc, #96]	@ (800ca7c <TIM_OC1_SetConfig+0x130>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d111      	bne.n	800ca42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	695b      	ldr	r3, [r3, #20]
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	621a      	str	r2, [r3, #32]
}
 800ca5c:	bf00      	nop
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	40012c00 	.word	0x40012c00
 800ca6c:	40013400 	.word	0x40013400
 800ca70:	40014000 	.word	0x40014000
 800ca74:	40014400 	.word	0x40014400
 800ca78:	40014800 	.word	0x40014800
 800ca7c:	40015000 	.word	0x40015000

0800ca80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f023 0210 	bic.w	r2, r3, #16
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800caae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800caba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	021b      	lsls	r3, r3, #8
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f023 0320 	bic.w	r3, r3, #32
 800cace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	4313      	orrs	r3, r2
 800cada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a2c      	ldr	r2, [pc, #176]	@ (800cb90 <TIM_OC2_SetConfig+0x110>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d007      	beq.n	800caf4 <TIM_OC2_SetConfig+0x74>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a2b      	ldr	r2, [pc, #172]	@ (800cb94 <TIM_OC2_SetConfig+0x114>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d003      	beq.n	800caf4 <TIM_OC2_SetConfig+0x74>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a2a      	ldr	r2, [pc, #168]	@ (800cb98 <TIM_OC2_SetConfig+0x118>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d10d      	bne.n	800cb10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cafa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	011b      	lsls	r3, r3, #4
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a1f      	ldr	r2, [pc, #124]	@ (800cb90 <TIM_OC2_SetConfig+0x110>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d013      	beq.n	800cb40 <TIM_OC2_SetConfig+0xc0>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800cb94 <TIM_OC2_SetConfig+0x114>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d00f      	beq.n	800cb40 <TIM_OC2_SetConfig+0xc0>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a1e      	ldr	r2, [pc, #120]	@ (800cb9c <TIM_OC2_SetConfig+0x11c>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d00b      	beq.n	800cb40 <TIM_OC2_SetConfig+0xc0>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a1d      	ldr	r2, [pc, #116]	@ (800cba0 <TIM_OC2_SetConfig+0x120>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d007      	beq.n	800cb40 <TIM_OC2_SetConfig+0xc0>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a1c      	ldr	r2, [pc, #112]	@ (800cba4 <TIM_OC2_SetConfig+0x124>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d003      	beq.n	800cb40 <TIM_OC2_SetConfig+0xc0>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a17      	ldr	r2, [pc, #92]	@ (800cb98 <TIM_OC2_SetConfig+0x118>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d113      	bne.n	800cb68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	621a      	str	r2, [r3, #32]
}
 800cb82:	bf00      	nop
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	40012c00 	.word	0x40012c00
 800cb94:	40013400 	.word	0x40013400
 800cb98:	40015000 	.word	0x40015000
 800cb9c:	40014000 	.word	0x40014000
 800cba0:	40014400 	.word	0x40014400
 800cba4:	40014800 	.word	0x40014800

0800cba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a2b      	ldr	r2, [pc, #172]	@ (800ccb4 <TIM_OC3_SetConfig+0x10c>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d007      	beq.n	800cc1a <TIM_OC3_SetConfig+0x72>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb8 <TIM_OC3_SetConfig+0x110>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d003      	beq.n	800cc1a <TIM_OC3_SetConfig+0x72>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a29      	ldr	r2, [pc, #164]	@ (800ccbc <TIM_OC3_SetConfig+0x114>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d10d      	bne.n	800cc36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a1e      	ldr	r2, [pc, #120]	@ (800ccb4 <TIM_OC3_SetConfig+0x10c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d013      	beq.n	800cc66 <TIM_OC3_SetConfig+0xbe>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a1d      	ldr	r2, [pc, #116]	@ (800ccb8 <TIM_OC3_SetConfig+0x110>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00f      	beq.n	800cc66 <TIM_OC3_SetConfig+0xbe>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc0 <TIM_OC3_SetConfig+0x118>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00b      	beq.n	800cc66 <TIM_OC3_SetConfig+0xbe>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a1c      	ldr	r2, [pc, #112]	@ (800ccc4 <TIM_OC3_SetConfig+0x11c>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d007      	beq.n	800cc66 <TIM_OC3_SetConfig+0xbe>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a1b      	ldr	r2, [pc, #108]	@ (800ccc8 <TIM_OC3_SetConfig+0x120>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d003      	beq.n	800cc66 <TIM_OC3_SetConfig+0xbe>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a16      	ldr	r2, [pc, #88]	@ (800ccbc <TIM_OC3_SetConfig+0x114>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d113      	bne.n	800cc8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	011b      	lsls	r3, r3, #4
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	621a      	str	r2, [r3, #32]
}
 800cca8:	bf00      	nop
 800ccaa:	371c      	adds	r7, #28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	40012c00 	.word	0x40012c00
 800ccb8:	40013400 	.word	0x40013400
 800ccbc:	40015000 	.word	0x40015000
 800ccc0:	40014000 	.word	0x40014000
 800ccc4:	40014400 	.word	0x40014400
 800ccc8:	40014800 	.word	0x40014800

0800cccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a1b      	ldr	r3, [r3, #32]
 800cce0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ccfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	031b      	lsls	r3, r3, #12
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a2c      	ldr	r2, [pc, #176]	@ (800cddc <TIM_OC4_SetConfig+0x110>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d007      	beq.n	800cd40 <TIM_OC4_SetConfig+0x74>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a2b      	ldr	r2, [pc, #172]	@ (800cde0 <TIM_OC4_SetConfig+0x114>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d003      	beq.n	800cd40 <TIM_OC4_SetConfig+0x74>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a2a      	ldr	r2, [pc, #168]	@ (800cde4 <TIM_OC4_SetConfig+0x118>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d10d      	bne.n	800cd5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	031b      	lsls	r3, r3, #12
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a1f      	ldr	r2, [pc, #124]	@ (800cddc <TIM_OC4_SetConfig+0x110>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d013      	beq.n	800cd8c <TIM_OC4_SetConfig+0xc0>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a1e      	ldr	r2, [pc, #120]	@ (800cde0 <TIM_OC4_SetConfig+0x114>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d00f      	beq.n	800cd8c <TIM_OC4_SetConfig+0xc0>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a1e      	ldr	r2, [pc, #120]	@ (800cde8 <TIM_OC4_SetConfig+0x11c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00b      	beq.n	800cd8c <TIM_OC4_SetConfig+0xc0>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a1d      	ldr	r2, [pc, #116]	@ (800cdec <TIM_OC4_SetConfig+0x120>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d007      	beq.n	800cd8c <TIM_OC4_SetConfig+0xc0>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a1c      	ldr	r2, [pc, #112]	@ (800cdf0 <TIM_OC4_SetConfig+0x124>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d003      	beq.n	800cd8c <TIM_OC4_SetConfig+0xc0>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a17      	ldr	r2, [pc, #92]	@ (800cde4 <TIM_OC4_SetConfig+0x118>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d113      	bne.n	800cdb4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	019b      	lsls	r3, r3, #6
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	019b      	lsls	r3, r3, #6
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	621a      	str	r2, [r3, #32]
}
 800cdce:	bf00      	nop
 800cdd0:	371c      	adds	r7, #28
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	40012c00 	.word	0x40012c00
 800cde0:	40013400 	.word	0x40013400
 800cde4:	40015000 	.word	0x40015000
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	40014800 	.word	0x40014800

0800cdf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a1b      	ldr	r3, [r3, #32]
 800ce02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	041b      	lsls	r3, r3, #16
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a19      	ldr	r2, [pc, #100]	@ (800ceb0 <TIM_OC5_SetConfig+0xbc>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d013      	beq.n	800ce76 <TIM_OC5_SetConfig+0x82>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a18      	ldr	r2, [pc, #96]	@ (800ceb4 <TIM_OC5_SetConfig+0xc0>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d00f      	beq.n	800ce76 <TIM_OC5_SetConfig+0x82>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a17      	ldr	r2, [pc, #92]	@ (800ceb8 <TIM_OC5_SetConfig+0xc4>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d00b      	beq.n	800ce76 <TIM_OC5_SetConfig+0x82>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a16      	ldr	r2, [pc, #88]	@ (800cebc <TIM_OC5_SetConfig+0xc8>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d007      	beq.n	800ce76 <TIM_OC5_SetConfig+0x82>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a15      	ldr	r2, [pc, #84]	@ (800cec0 <TIM_OC5_SetConfig+0xcc>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d003      	beq.n	800ce76 <TIM_OC5_SetConfig+0x82>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a14      	ldr	r2, [pc, #80]	@ (800cec4 <TIM_OC5_SetConfig+0xd0>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d109      	bne.n	800ce8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	621a      	str	r2, [r3, #32]
}
 800cea4:	bf00      	nop
 800cea6:	371c      	adds	r7, #28
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	40012c00 	.word	0x40012c00
 800ceb4:	40013400 	.word	0x40013400
 800ceb8:	40014000 	.word	0x40014000
 800cebc:	40014400 	.word	0x40014400
 800cec0:	40014800 	.word	0x40014800
 800cec4:	40015000 	.word	0x40015000

0800cec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a1b      	ldr	r3, [r3, #32]
 800cedc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cefa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	021b      	lsls	r3, r3, #8
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	051b      	lsls	r3, r3, #20
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a1a      	ldr	r2, [pc, #104]	@ (800cf88 <TIM_OC6_SetConfig+0xc0>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d013      	beq.n	800cf4c <TIM_OC6_SetConfig+0x84>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a19      	ldr	r2, [pc, #100]	@ (800cf8c <TIM_OC6_SetConfig+0xc4>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d00f      	beq.n	800cf4c <TIM_OC6_SetConfig+0x84>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a18      	ldr	r2, [pc, #96]	@ (800cf90 <TIM_OC6_SetConfig+0xc8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d00b      	beq.n	800cf4c <TIM_OC6_SetConfig+0x84>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a17      	ldr	r2, [pc, #92]	@ (800cf94 <TIM_OC6_SetConfig+0xcc>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d007      	beq.n	800cf4c <TIM_OC6_SetConfig+0x84>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a16      	ldr	r2, [pc, #88]	@ (800cf98 <TIM_OC6_SetConfig+0xd0>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d003      	beq.n	800cf4c <TIM_OC6_SetConfig+0x84>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a15      	ldr	r2, [pc, #84]	@ (800cf9c <TIM_OC6_SetConfig+0xd4>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d109      	bne.n	800cf60 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	029b      	lsls	r3, r3, #10
 800cf5a:	697a      	ldr	r2, [r7, #20]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	621a      	str	r2, [r3, #32]
}
 800cf7a:	bf00      	nop
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40012c00 	.word	0x40012c00
 800cf8c:	40013400 	.word	0x40013400
 800cf90:	40014000 	.word	0x40014000
 800cf94:	40014400 	.word	0x40014400
 800cf98:	40014800 	.word	0x40014800
 800cf9c:	40015000 	.word	0x40015000

0800cfa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f003 031f 	and.w	r3, r3, #31
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a1a      	ldr	r2, [r3, #32]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	43db      	mvns	r3, r3
 800cfc2:	401a      	ands	r2, r3
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a1a      	ldr	r2, [r3, #32]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f003 031f 	and.w	r3, r3, #31
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfd8:	431a      	orrs	r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	621a      	str	r2, [r3, #32]
}
 800cfde:	bf00      	nop
 800cfe0:	371c      	adds	r7, #28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
	...

0800cfec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d109      	bne.n	800d010 <HAL_TIMEx_PWMN_Start+0x24>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b01      	cmp	r3, #1
 800d006:	bf14      	ite	ne
 800d008:	2301      	movne	r3, #1
 800d00a:	2300      	moveq	r3, #0
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	e022      	b.n	800d056 <HAL_TIMEx_PWMN_Start+0x6a>
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b04      	cmp	r3, #4
 800d014:	d109      	bne.n	800d02a <HAL_TIMEx_PWMN_Start+0x3e>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b01      	cmp	r3, #1
 800d020:	bf14      	ite	ne
 800d022:	2301      	movne	r3, #1
 800d024:	2300      	moveq	r3, #0
 800d026:	b2db      	uxtb	r3, r3
 800d028:	e015      	b.n	800d056 <HAL_TIMEx_PWMN_Start+0x6a>
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d109      	bne.n	800d044 <HAL_TIMEx_PWMN_Start+0x58>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b01      	cmp	r3, #1
 800d03a:	bf14      	ite	ne
 800d03c:	2301      	movne	r3, #1
 800d03e:	2300      	moveq	r3, #0
 800d040:	b2db      	uxtb	r3, r3
 800d042:	e008      	b.n	800d056 <HAL_TIMEx_PWMN_Start+0x6a>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	bf14      	ite	ne
 800d050:	2301      	movne	r3, #1
 800d052:	2300      	moveq	r3, #0
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e073      	b.n	800d146 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <HAL_TIMEx_PWMN_Start+0x82>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2202      	movs	r2, #2
 800d068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d06c:	e013      	b.n	800d096 <HAL_TIMEx_PWMN_Start+0xaa>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b04      	cmp	r3, #4
 800d072:	d104      	bne.n	800d07e <HAL_TIMEx_PWMN_Start+0x92>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d07c:	e00b      	b.n	800d096 <HAL_TIMEx_PWMN_Start+0xaa>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b08      	cmp	r3, #8
 800d082:	d104      	bne.n	800d08e <HAL_TIMEx_PWMN_Start+0xa2>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d08c:	e003      	b.n	800d096 <HAL_TIMEx_PWMN_Start+0xaa>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2202      	movs	r2, #2
 800d092:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2204      	movs	r2, #4
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 f9a3 	bl	800d3ea <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d0b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a25      	ldr	r2, [pc, #148]	@ (800d150 <HAL_TIMEx_PWMN_Start+0x164>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d022      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0c6:	d01d      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a21      	ldr	r2, [pc, #132]	@ (800d154 <HAL_TIMEx_PWMN_Start+0x168>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d018      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a20      	ldr	r2, [pc, #128]	@ (800d158 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d013      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800d15c <HAL_TIMEx_PWMN_Start+0x170>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00e      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800d160 <HAL_TIMEx_PWMN_Start+0x174>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d009      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800d164 <HAL_TIMEx_PWMN_Start+0x178>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d004      	beq.n	800d104 <HAL_TIMEx_PWMN_Start+0x118>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a1a      	ldr	r2, [pc, #104]	@ (800d168 <HAL_TIMEx_PWMN_Start+0x17c>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d115      	bne.n	800d130 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	4b18      	ldr	r3, [pc, #96]	@ (800d16c <HAL_TIMEx_PWMN_Start+0x180>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b06      	cmp	r3, #6
 800d114:	d015      	beq.n	800d142 <HAL_TIMEx_PWMN_Start+0x156>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d11c:	d011      	beq.n	800d142 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0201 	orr.w	r2, r2, #1
 800d12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d12e:	e008      	b.n	800d142 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f042 0201 	orr.w	r2, r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e000      	b.n	800d144 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	40012c00 	.word	0x40012c00
 800d154:	40000400 	.word	0x40000400
 800d158:	40000800 	.word	0x40000800
 800d15c:	40000c00 	.word	0x40000c00
 800d160:	40013400 	.word	0x40013400
 800d164:	40014000 	.word	0x40014000
 800d168:	40015000 	.word	0x40015000
 800d16c:	00010007 	.word	0x00010007

0800d170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d170:	b480      	push	{r7}
 800d172:	b085      	sub	sp, #20
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d180:	2b01      	cmp	r3, #1
 800d182:	d101      	bne.n	800d188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d184:	2302      	movs	r3, #2
 800d186:	e074      	b.n	800d272 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2202      	movs	r2, #2
 800d194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a34      	ldr	r2, [pc, #208]	@ (800d280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d009      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a33      	ldr	r2, [pc, #204]	@ (800d284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d004      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a31      	ldr	r2, [pc, #196]	@ (800d288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d108      	bne.n	800d1d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d1cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d1de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a21      	ldr	r2, [pc, #132]	@ (800d280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d022      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d208:	d01d      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a1f      	ldr	r2, [pc, #124]	@ (800d28c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d018      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a1d      	ldr	r2, [pc, #116]	@ (800d290 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d013      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a1c      	ldr	r2, [pc, #112]	@ (800d294 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d00e      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a15      	ldr	r2, [pc, #84]	@ (800d284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d009      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a18      	ldr	r2, [pc, #96]	@ (800d298 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d004      	beq.n	800d246 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a11      	ldr	r2, [pc, #68]	@ (800d288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d10c      	bne.n	800d260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d24c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	4313      	orrs	r3, r2
 800d256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	40012c00 	.word	0x40012c00
 800d284:	40013400 	.word	0x40013400
 800d288:	40015000 	.word	0x40015000
 800d28c:	40000400 	.word	0x40000400
 800d290:	40000800 	.word	0x40000800
 800d294:	40000c00 	.word	0x40000c00
 800d298:	40014000 	.word	0x40014000

0800d29c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e078      	b.n	800d3aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	4313      	orrs	r3, r2
 800d304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	4313      	orrs	r3, r2
 800d312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d31e:	4313      	orrs	r3, r2
 800d320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	041b      	lsls	r3, r3, #16
 800d32e:	4313      	orrs	r3, r2
 800d330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	4313      	orrs	r3, r2
 800d33e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a1c      	ldr	r2, [pc, #112]	@ (800d3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d009      	beq.n	800d35e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a1b      	ldr	r2, [pc, #108]	@ (800d3bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d004      	beq.n	800d35e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a19      	ldr	r2, [pc, #100]	@ (800d3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d11c      	bne.n	800d398 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d368:	051b      	lsls	r3, r3, #20
 800d36a:	4313      	orrs	r3, r2
 800d36c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	6a1b      	ldr	r3, [r3, #32]
 800d378:	4313      	orrs	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d386:	4313      	orrs	r3, r2
 800d388:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d394:	4313      	orrs	r3, r2
 800d396:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	40012c00 	.word	0x40012c00
 800d3bc:	40013400 	.word	0x40013400
 800d3c0:	40015000 	.word	0x40015000

0800d3c4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d3da:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b087      	sub	sp, #28
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d402:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6a1a      	ldr	r2, [r3, #32]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	43db      	mvns	r3, r3
 800d40c:	401a      	ands	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6a1a      	ldr	r2, [r3, #32]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f003 030f 	and.w	r3, r3, #15
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	fa01 f303 	lsl.w	r3, r1, r3
 800d422:	431a      	orrs	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	621a      	str	r2, [r3, #32]
}
 800d428:	bf00      	nop
 800d42a:	371c      	adds	r7, #28
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <_ZdlPvj>:
 800d434:	f000 b811 	b.w	800d45a <_ZdlPv>

0800d438 <_Znwj>:
 800d438:	2801      	cmp	r0, #1
 800d43a:	bf38      	it	cc
 800d43c:	2001      	movcc	r0, #1
 800d43e:	b510      	push	{r4, lr}
 800d440:	4604      	mov	r4, r0
 800d442:	4620      	mov	r0, r4
 800d444:	f000 f81c 	bl	800d480 <malloc>
 800d448:	b100      	cbz	r0, 800d44c <_Znwj+0x14>
 800d44a:	bd10      	pop	{r4, pc}
 800d44c:	f000 f808 	bl	800d460 <_ZSt15get_new_handlerv>
 800d450:	b908      	cbnz	r0, 800d456 <_Znwj+0x1e>
 800d452:	f000 f80d 	bl	800d470 <abort>
 800d456:	4780      	blx	r0
 800d458:	e7f3      	b.n	800d442 <_Znwj+0xa>

0800d45a <_ZdlPv>:
 800d45a:	f000 b819 	b.w	800d490 <free>
	...

0800d460 <_ZSt15get_new_handlerv>:
 800d460:	4b02      	ldr	r3, [pc, #8]	@ (800d46c <_ZSt15get_new_handlerv+0xc>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	f3bf 8f5b 	dmb	ish
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	20000658 	.word	0x20000658

0800d470 <abort>:
 800d470:	b508      	push	{r3, lr}
 800d472:	2006      	movs	r0, #6
 800d474:	f000 f8f2 	bl	800d65c <raise>
 800d478:	2001      	movs	r0, #1
 800d47a:	f7f7 fd05 	bl	8004e88 <_exit>
	...

0800d480 <malloc>:
 800d480:	4b02      	ldr	r3, [pc, #8]	@ (800d48c <malloc+0xc>)
 800d482:	4601      	mov	r1, r0
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	f000 b82d 	b.w	800d4e4 <_malloc_r>
 800d48a:	bf00      	nop
 800d48c:	2000001c 	.word	0x2000001c

0800d490 <free>:
 800d490:	4b02      	ldr	r3, [pc, #8]	@ (800d49c <free+0xc>)
 800d492:	4601      	mov	r1, r0
 800d494:	6818      	ldr	r0, [r3, #0]
 800d496:	f000 b939 	b.w	800d70c <_free_r>
 800d49a:	bf00      	nop
 800d49c:	2000001c 	.word	0x2000001c

0800d4a0 <sbrk_aligned>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	4e0f      	ldr	r6, [pc, #60]	@ (800d4e0 <sbrk_aligned+0x40>)
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	6831      	ldr	r1, [r6, #0]
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	b911      	cbnz	r1, 800d4b2 <sbrk_aligned+0x12>
 800d4ac:	f000 f8f2 	bl	800d694 <_sbrk_r>
 800d4b0:	6030      	str	r0, [r6, #0]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f000 f8ed 	bl	800d694 <_sbrk_r>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d103      	bne.n	800d4c6 <sbrk_aligned+0x26>
 800d4be:	f04f 34ff 	mov.w	r4, #4294967295
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	1cc4      	adds	r4, r0, #3
 800d4c8:	f024 0403 	bic.w	r4, r4, #3
 800d4cc:	42a0      	cmp	r0, r4
 800d4ce:	d0f8      	beq.n	800d4c2 <sbrk_aligned+0x22>
 800d4d0:	1a21      	subs	r1, r4, r0
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f000 f8de 	bl	800d694 <_sbrk_r>
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d1f2      	bne.n	800d4c2 <sbrk_aligned+0x22>
 800d4dc:	e7ef      	b.n	800d4be <sbrk_aligned+0x1e>
 800d4de:	bf00      	nop
 800d4e0:	2000065c 	.word	0x2000065c

0800d4e4 <_malloc_r>:
 800d4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	1ccd      	adds	r5, r1, #3
 800d4ea:	f025 0503 	bic.w	r5, r5, #3
 800d4ee:	3508      	adds	r5, #8
 800d4f0:	2d0c      	cmp	r5, #12
 800d4f2:	bf38      	it	cc
 800d4f4:	250c      	movcc	r5, #12
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	db01      	blt.n	800d500 <_malloc_r+0x1c>
 800d4fc:	42a9      	cmp	r1, r5
 800d4fe:	d904      	bls.n	800d50a <_malloc_r+0x26>
 800d500:	230c      	movs	r3, #12
 800d502:	6033      	str	r3, [r6, #0]
 800d504:	2000      	movs	r0, #0
 800d506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5e0 <_malloc_r+0xfc>
 800d50e:	f000 f869 	bl	800d5e4 <__malloc_lock>
 800d512:	f8d8 3000 	ldr.w	r3, [r8]
 800d516:	461c      	mov	r4, r3
 800d518:	bb44      	cbnz	r4, 800d56c <_malloc_r+0x88>
 800d51a:	4629      	mov	r1, r5
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff ffbf 	bl	800d4a0 <sbrk_aligned>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	4604      	mov	r4, r0
 800d526:	d158      	bne.n	800d5da <_malloc_r+0xf6>
 800d528:	f8d8 4000 	ldr.w	r4, [r8]
 800d52c:	4627      	mov	r7, r4
 800d52e:	2f00      	cmp	r7, #0
 800d530:	d143      	bne.n	800d5ba <_malloc_r+0xd6>
 800d532:	2c00      	cmp	r4, #0
 800d534:	d04b      	beq.n	800d5ce <_malloc_r+0xea>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4639      	mov	r1, r7
 800d53a:	4630      	mov	r0, r6
 800d53c:	eb04 0903 	add.w	r9, r4, r3
 800d540:	f000 f8a8 	bl	800d694 <_sbrk_r>
 800d544:	4581      	cmp	r9, r0
 800d546:	d142      	bne.n	800d5ce <_malloc_r+0xea>
 800d548:	6821      	ldr	r1, [r4, #0]
 800d54a:	1a6d      	subs	r5, r5, r1
 800d54c:	4629      	mov	r1, r5
 800d54e:	4630      	mov	r0, r6
 800d550:	f7ff ffa6 	bl	800d4a0 <sbrk_aligned>
 800d554:	3001      	adds	r0, #1
 800d556:	d03a      	beq.n	800d5ce <_malloc_r+0xea>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	442b      	add	r3, r5
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	f8d8 3000 	ldr.w	r3, [r8]
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	bb62      	cbnz	r2, 800d5c0 <_malloc_r+0xdc>
 800d566:	f8c8 7000 	str.w	r7, [r8]
 800d56a:	e00f      	b.n	800d58c <_malloc_r+0xa8>
 800d56c:	6822      	ldr	r2, [r4, #0]
 800d56e:	1b52      	subs	r2, r2, r5
 800d570:	d420      	bmi.n	800d5b4 <_malloc_r+0xd0>
 800d572:	2a0b      	cmp	r2, #11
 800d574:	d917      	bls.n	800d5a6 <_malloc_r+0xc2>
 800d576:	1961      	adds	r1, r4, r5
 800d578:	42a3      	cmp	r3, r4
 800d57a:	6025      	str	r5, [r4, #0]
 800d57c:	bf18      	it	ne
 800d57e:	6059      	strne	r1, [r3, #4]
 800d580:	6863      	ldr	r3, [r4, #4]
 800d582:	bf08      	it	eq
 800d584:	f8c8 1000 	streq.w	r1, [r8]
 800d588:	5162      	str	r2, [r4, r5]
 800d58a:	604b      	str	r3, [r1, #4]
 800d58c:	4630      	mov	r0, r6
 800d58e:	f000 f82f 	bl	800d5f0 <__malloc_unlock>
 800d592:	f104 000b 	add.w	r0, r4, #11
 800d596:	1d23      	adds	r3, r4, #4
 800d598:	f020 0007 	bic.w	r0, r0, #7
 800d59c:	1ac2      	subs	r2, r0, r3
 800d59e:	bf1c      	itt	ne
 800d5a0:	1a1b      	subne	r3, r3, r0
 800d5a2:	50a3      	strne	r3, [r4, r2]
 800d5a4:	e7af      	b.n	800d506 <_malloc_r+0x22>
 800d5a6:	6862      	ldr	r2, [r4, #4]
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	bf0c      	ite	eq
 800d5ac:	f8c8 2000 	streq.w	r2, [r8]
 800d5b0:	605a      	strne	r2, [r3, #4]
 800d5b2:	e7eb      	b.n	800d58c <_malloc_r+0xa8>
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	6864      	ldr	r4, [r4, #4]
 800d5b8:	e7ae      	b.n	800d518 <_malloc_r+0x34>
 800d5ba:	463c      	mov	r4, r7
 800d5bc:	687f      	ldr	r7, [r7, #4]
 800d5be:	e7b6      	b.n	800d52e <_malloc_r+0x4a>
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	d1fb      	bne.n	800d5c0 <_malloc_r+0xdc>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	6053      	str	r3, [r2, #4]
 800d5cc:	e7de      	b.n	800d58c <_malloc_r+0xa8>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	6033      	str	r3, [r6, #0]
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 f80c 	bl	800d5f0 <__malloc_unlock>
 800d5d8:	e794      	b.n	800d504 <_malloc_r+0x20>
 800d5da:	6005      	str	r5, [r0, #0]
 800d5dc:	e7d6      	b.n	800d58c <_malloc_r+0xa8>
 800d5de:	bf00      	nop
 800d5e0:	20000660 	.word	0x20000660

0800d5e4 <__malloc_lock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	@ (800d5ec <__malloc_lock+0x8>)
 800d5e6:	f000 b88f 	b.w	800d708 <__retarget_lock_acquire_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	200007a0 	.word	0x200007a0

0800d5f0 <__malloc_unlock>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	@ (800d5f8 <__malloc_unlock+0x8>)
 800d5f2:	f000 b88a 	b.w	800d70a <__retarget_lock_release_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	200007a0 	.word	0x200007a0

0800d5fc <memset>:
 800d5fc:	4402      	add	r2, r0
 800d5fe:	4603      	mov	r3, r0
 800d600:	4293      	cmp	r3, r2
 800d602:	d100      	bne.n	800d606 <memset+0xa>
 800d604:	4770      	bx	lr
 800d606:	f803 1b01 	strb.w	r1, [r3], #1
 800d60a:	e7f9      	b.n	800d600 <memset+0x4>

0800d60c <_raise_r>:
 800d60c:	291f      	cmp	r1, #31
 800d60e:	b538      	push	{r3, r4, r5, lr}
 800d610:	4605      	mov	r5, r0
 800d612:	460c      	mov	r4, r1
 800d614:	d904      	bls.n	800d620 <_raise_r+0x14>
 800d616:	2316      	movs	r3, #22
 800d618:	6003      	str	r3, [r0, #0]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d622:	b112      	cbz	r2, 800d62a <_raise_r+0x1e>
 800d624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d628:	b94b      	cbnz	r3, 800d63e <_raise_r+0x32>
 800d62a:	4628      	mov	r0, r5
 800d62c:	f000 f830 	bl	800d690 <_getpid_r>
 800d630:	4622      	mov	r2, r4
 800d632:	4601      	mov	r1, r0
 800d634:	4628      	mov	r0, r5
 800d636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d63a:	f000 b817 	b.w	800d66c <_kill_r>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d00a      	beq.n	800d658 <_raise_r+0x4c>
 800d642:	1c59      	adds	r1, r3, #1
 800d644:	d103      	bne.n	800d64e <_raise_r+0x42>
 800d646:	2316      	movs	r3, #22
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	2001      	movs	r0, #1
 800d64c:	e7e7      	b.n	800d61e <_raise_r+0x12>
 800d64e:	2100      	movs	r1, #0
 800d650:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d654:	4620      	mov	r0, r4
 800d656:	4798      	blx	r3
 800d658:	2000      	movs	r0, #0
 800d65a:	e7e0      	b.n	800d61e <_raise_r+0x12>

0800d65c <raise>:
 800d65c:	4b02      	ldr	r3, [pc, #8]	@ (800d668 <raise+0xc>)
 800d65e:	4601      	mov	r1, r0
 800d660:	6818      	ldr	r0, [r3, #0]
 800d662:	f7ff bfd3 	b.w	800d60c <_raise_r>
 800d666:	bf00      	nop
 800d668:	2000001c 	.word	0x2000001c

0800d66c <_kill_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4d07      	ldr	r5, [pc, #28]	@ (800d68c <_kill_r+0x20>)
 800d670:	2300      	movs	r3, #0
 800d672:	4604      	mov	r4, r0
 800d674:	4608      	mov	r0, r1
 800d676:	4611      	mov	r1, r2
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	f7f7 fbf5 	bl	8004e68 <_kill>
 800d67e:	1c43      	adds	r3, r0, #1
 800d680:	d102      	bne.n	800d688 <_kill_r+0x1c>
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	b103      	cbz	r3, 800d688 <_kill_r+0x1c>
 800d686:	6023      	str	r3, [r4, #0]
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	bf00      	nop
 800d68c:	2000079c 	.word	0x2000079c

0800d690 <_getpid_r>:
 800d690:	f7f7 bbe2 	b.w	8004e58 <_getpid>

0800d694 <_sbrk_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4d06      	ldr	r5, [pc, #24]	@ (800d6b0 <_sbrk_r+0x1c>)
 800d698:	2300      	movs	r3, #0
 800d69a:	4604      	mov	r4, r0
 800d69c:	4608      	mov	r0, r1
 800d69e:	602b      	str	r3, [r5, #0]
 800d6a0:	f7f7 fbfe 	bl	8004ea0 <_sbrk>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d102      	bne.n	800d6ae <_sbrk_r+0x1a>
 800d6a8:	682b      	ldr	r3, [r5, #0]
 800d6aa:	b103      	cbz	r3, 800d6ae <_sbrk_r+0x1a>
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	bd38      	pop	{r3, r4, r5, pc}
 800d6b0:	2000079c 	.word	0x2000079c

0800d6b4 <__errno>:
 800d6b4:	4b01      	ldr	r3, [pc, #4]	@ (800d6bc <__errno+0x8>)
 800d6b6:	6818      	ldr	r0, [r3, #0]
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	2000001c 	.word	0x2000001c

0800d6c0 <__libc_init_array>:
 800d6c0:	b570      	push	{r4, r5, r6, lr}
 800d6c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d6f8 <__libc_init_array+0x38>)
 800d6c4:	4c0d      	ldr	r4, [pc, #52]	@ (800d6fc <__libc_init_array+0x3c>)
 800d6c6:	1b64      	subs	r4, r4, r5
 800d6c8:	10a4      	asrs	r4, r4, #2
 800d6ca:	2600      	movs	r6, #0
 800d6cc:	42a6      	cmp	r6, r4
 800d6ce:	d109      	bne.n	800d6e4 <__libc_init_array+0x24>
 800d6d0:	4d0b      	ldr	r5, [pc, #44]	@ (800d700 <__libc_init_array+0x40>)
 800d6d2:	4c0c      	ldr	r4, [pc, #48]	@ (800d704 <__libc_init_array+0x44>)
 800d6d4:	f000 f864 	bl	800d7a0 <_init>
 800d6d8:	1b64      	subs	r4, r4, r5
 800d6da:	10a4      	asrs	r4, r4, #2
 800d6dc:	2600      	movs	r6, #0
 800d6de:	42a6      	cmp	r6, r4
 800d6e0:	d105      	bne.n	800d6ee <__libc_init_array+0x2e>
 800d6e2:	bd70      	pop	{r4, r5, r6, pc}
 800d6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e8:	4798      	blx	r3
 800d6ea:	3601      	adds	r6, #1
 800d6ec:	e7ee      	b.n	800d6cc <__libc_init_array+0xc>
 800d6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f2:	4798      	blx	r3
 800d6f4:	3601      	adds	r6, #1
 800d6f6:	e7f2      	b.n	800d6de <__libc_init_array+0x1e>
 800d6f8:	0800d7d8 	.word	0x0800d7d8
 800d6fc:	0800d7d8 	.word	0x0800d7d8
 800d700:	0800d7d8 	.word	0x0800d7d8
 800d704:	0800d800 	.word	0x0800d800

0800d708 <__retarget_lock_acquire_recursive>:
 800d708:	4770      	bx	lr

0800d70a <__retarget_lock_release_recursive>:
 800d70a:	4770      	bx	lr

0800d70c <_free_r>:
 800d70c:	b538      	push	{r3, r4, r5, lr}
 800d70e:	4605      	mov	r5, r0
 800d710:	2900      	cmp	r1, #0
 800d712:	d041      	beq.n	800d798 <_free_r+0x8c>
 800d714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d718:	1f0c      	subs	r4, r1, #4
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	bfb8      	it	lt
 800d71e:	18e4      	addlt	r4, r4, r3
 800d720:	f7ff ff60 	bl	800d5e4 <__malloc_lock>
 800d724:	4a1d      	ldr	r2, [pc, #116]	@ (800d79c <_free_r+0x90>)
 800d726:	6813      	ldr	r3, [r2, #0]
 800d728:	b933      	cbnz	r3, 800d738 <_free_r+0x2c>
 800d72a:	6063      	str	r3, [r4, #4]
 800d72c:	6014      	str	r4, [r2, #0]
 800d72e:	4628      	mov	r0, r5
 800d730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d734:	f7ff bf5c 	b.w	800d5f0 <__malloc_unlock>
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d908      	bls.n	800d74e <_free_r+0x42>
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	1821      	adds	r1, r4, r0
 800d740:	428b      	cmp	r3, r1
 800d742:	bf01      	itttt	eq
 800d744:	6819      	ldreq	r1, [r3, #0]
 800d746:	685b      	ldreq	r3, [r3, #4]
 800d748:	1809      	addeq	r1, r1, r0
 800d74a:	6021      	streq	r1, [r4, #0]
 800d74c:	e7ed      	b.n	800d72a <_free_r+0x1e>
 800d74e:	461a      	mov	r2, r3
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	b10b      	cbz	r3, 800d758 <_free_r+0x4c>
 800d754:	42a3      	cmp	r3, r4
 800d756:	d9fa      	bls.n	800d74e <_free_r+0x42>
 800d758:	6811      	ldr	r1, [r2, #0]
 800d75a:	1850      	adds	r0, r2, r1
 800d75c:	42a0      	cmp	r0, r4
 800d75e:	d10b      	bne.n	800d778 <_free_r+0x6c>
 800d760:	6820      	ldr	r0, [r4, #0]
 800d762:	4401      	add	r1, r0
 800d764:	1850      	adds	r0, r2, r1
 800d766:	4283      	cmp	r3, r0
 800d768:	6011      	str	r1, [r2, #0]
 800d76a:	d1e0      	bne.n	800d72e <_free_r+0x22>
 800d76c:	6818      	ldr	r0, [r3, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	6053      	str	r3, [r2, #4]
 800d772:	4408      	add	r0, r1
 800d774:	6010      	str	r0, [r2, #0]
 800d776:	e7da      	b.n	800d72e <_free_r+0x22>
 800d778:	d902      	bls.n	800d780 <_free_r+0x74>
 800d77a:	230c      	movs	r3, #12
 800d77c:	602b      	str	r3, [r5, #0]
 800d77e:	e7d6      	b.n	800d72e <_free_r+0x22>
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	1821      	adds	r1, r4, r0
 800d784:	428b      	cmp	r3, r1
 800d786:	bf04      	itt	eq
 800d788:	6819      	ldreq	r1, [r3, #0]
 800d78a:	685b      	ldreq	r3, [r3, #4]
 800d78c:	6063      	str	r3, [r4, #4]
 800d78e:	bf04      	itt	eq
 800d790:	1809      	addeq	r1, r1, r0
 800d792:	6021      	streq	r1, [r4, #0]
 800d794:	6054      	str	r4, [r2, #4]
 800d796:	e7ca      	b.n	800d72e <_free_r+0x22>
 800d798:	bd38      	pop	{r3, r4, r5, pc}
 800d79a:	bf00      	nop
 800d79c:	20000660 	.word	0x20000660

0800d7a0 <_init>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr

0800d7ac <_fini>:
 800d7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ae:	bf00      	nop
 800d7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b2:	bc08      	pop	{r3}
 800d7b4:	469e      	mov	lr, r3
 800d7b6:	4770      	bx	lr
