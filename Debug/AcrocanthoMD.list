
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006a8c  08006a8c  00007a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a9c  08006a9c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a9c  08006a9c  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a9c  08006a9c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a9c  08006a9c  00007a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006aa0  08006aa0  00007aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006aa4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08006ab0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006ab0  000082f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186ce  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7c  00000000  00000000  0002070a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00023588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001264  00000000  00000000  00024d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abad  00000000  00000000  00025fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e56  00000000  00000000  00050b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ea9  00000000  00000000  0006a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000678c  00000000  00000000  0017f894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00186020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006a74 	.word	0x08006a74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006a74 	.word	0x08006a74

08000218 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <LL_CORDIC_Config+0x44>)
 800022c:	4013      	ands	r3, r2
 800022e:	68b9      	ldr	r1, [r7, #8]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	4311      	orrs	r1, r2
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	4311      	orrs	r1, r2
 8000238:	69ba      	ldr	r2, [r7, #24]
 800023a:	4311      	orrs	r1, r2
 800023c:	69fa      	ldr	r2, [r7, #28]
 800023e:	4311      	orrs	r1, r2
 8000240:	6a3a      	ldr	r2, [r7, #32]
 8000242:	4311      	orrs	r1, r2
 8000244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000246:	430a      	orrs	r2, r1
 8000248:	431a      	orrs	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	ff87f800 	.word	0xff87f800

08000260 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	605a      	str	r2, [r3, #4]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689b      	ldr	r3, [r3, #8]
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af04      	add	r7, sp, #16
 800029a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800029e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6493      	str	r3, [r2, #72]	@ 0x48
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80002aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 80002b4:	2300      	movs	r3, #0
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	2300      	movs	r3, #0
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2300      	movs	r3, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2300      	movs	r3, #0
 80002c8:	2250      	movs	r2, #80	@ 0x50
 80002ca:	2100      	movs	r1, #0
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 80002ce:	f7ff ffa3 	bl	8000218 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4618      	mov	r0, r3
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40020c00 	.word	0x40020c00

080002e4 <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	4619      	mov	r1, r3
 80002f2:	4817      	ldr	r0, [pc, #92]	@ (8000350 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 80002f4:	f7ff ffb4 	bl	8000260 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 80002f8:	4815      	ldr	r0, [pc, #84]	@ (8000350 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 80002fa:	f7ff ffbf 	bl	800027c <LL_CORDIC_ReadData>
 80002fe:	4603      	mov	r3, r0
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f88f 	bl	8000424 <_ZN10Acrocantho6Cordic8from_q31Em>
 8000306:	eef0 7a40 	vmov.f32	s15, s0
 800030a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 800030e:	4810      	ldr	r0, [pc, #64]	@ (8000350 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8000310:	f7ff ffb4 	bl	800027c <LL_CORDIC_ReadData>
 8000314:	4603      	mov	r3, r0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f884 	bl	8000424 <_ZN10Acrocantho6Cordic8from_q31Em>
 800031c:	eef0 7a40 	vmov.f32	s15, s0
 8000320:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	f107 0210 	add.w	r2, r7, #16
 800032c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000330:	e883 0003 	stmia.w	r3, {r0, r1}
 8000334:	69ba      	ldr	r2, [r7, #24]
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	ee07 2a10 	vmov	s14, r2
 800033c:	ee07 3a90 	vmov	s15, r3
  };
 8000340:	eeb0 0a47 	vmov.f32	s0, s14
 8000344:	eef0 0a67 	vmov.f32	s1, s15
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020c00 	.word	0x40020c00

08000354 <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	@ 0x28
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 8000364:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000368:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800041c <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 800036c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000370:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 8000374:	edd7 7a08 	vldr	s15, [r7, #32]
 8000378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800037c:	ee17 3a90 	vmov	r3, s15
 8000380:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	ee07 3a90 	vmov	s15, r3
 8000388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800038c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000394:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 8000398:	edd7 7a06 	vldr	s15, [r7, #24]
 800039c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a4:	d507      	bpl.n	80003b6 <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 80003a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80003aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80003ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003b2:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 80003b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80003ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80003be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c6:	dd06      	ble.n	80003d6 <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 80003c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80003cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80003d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80003d4:	e001      	b.n	80003da <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 80003d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80003da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000420 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 80003de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 80003e6:	ee17 1a90 	vmov	r1, s15
 80003ea:	68f8      	ldr	r0, [r7, #12]
 80003ec:	f7ff ff7a 	bl	80002e4 <_ZNK10Acrocantho6CordicclEl>
 80003f0:	eeb0 7a40 	vmov.f32	s14, s0
 80003f4:	eef0 7a60 	vmov.f32	s15, s1
 80003f8:	ed87 7a04 	vstr	s14, [r7, #16]
 80003fc:	edc7 7a05 	vstr	s15, [r7, #20]
 8000400:	693a      	ldr	r2, [r7, #16]
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	ee07 2a10 	vmov	s14, r2
 8000408:	ee07 3a90 	vmov	s15, r3
  }
 800040c:	eeb0 0a47 	vmov.f32	s0, s14
 8000410:	eef0 0a67 	vmov.f32	s1, s15
 8000414:	3728      	adds	r7, #40	@ 0x28
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40c90fdb 	.word	0x40c90fdb
 8000420:	4f800000 	.word	0x4f800000

08000424 <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	ee07 3a90 	vmov	s15, r3
 8000432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000436:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800044c <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 800043a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 800043e:	eeb0 0a67 	vmov.f32	s0, s15
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	30000000 	.word	0x30000000

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 ff6e 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f82d 	bl	80004b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 fb6d 	bl	8000b3c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000462:	f000 fb39 	bl	8000ad8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000466:	f000 f87d 	bl	8000564 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800046a:	f000 f911 	bl	8000690 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 800046e:	f000 f9cb 	bl	8000808 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8000472:	f000 fa15 	bl	80008a0 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000476:	f000 fa61 	bl	800093c <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 800047a:	f000 f9ad 	bl	80007d8 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Acrocantho::Cordic cordic;
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff06 	bl	8000294 <_ZN10Acrocantho6CordicC1Ev>
  float a;
  float b;
  while (1)
  {
    Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80004b4 <main+0x64>
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff5f 	bl	8000354 <_ZNK10Acrocantho6Cordic7radiansEf>
 8000496:	eeb0 7a40 	vmov.f32	s14, s0
 800049a:	eef0 7a60 	vmov.f32	s15, s1
 800049e:	ed87 7a01 	vstr	s14, [r7, #4]
 80004a2:	edc7 7a02 	vstr	s15, [r7, #8]
    a = result.c;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	617b      	str	r3, [r7, #20]
    b = result.s;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	613b      	str	r3, [r7, #16]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80004ae:	bf00      	nop
 80004b0:	e7ea      	b.n	8000488 <main+0x38>
 80004b2:	bf00      	nop
 80004b4:	40490fdb 	.word	0x40490fdb

080004b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b094      	sub	sp, #80	@ 0x50
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	2238      	movs	r2, #56	@ 0x38
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f006 faa7 	bl	8006a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004da:	2000      	movs	r0, #0
 80004dc:	f004 fc1e 	bl	8004d1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ea:	2340      	movs	r3, #64	@ 0x40
 80004ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f2:	2302      	movs	r3, #2
 80004f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80004f6:	2304      	movs	r3, #4
 80004f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80004fa:	2355      	movs	r3, #85	@ 0x55
 80004fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fe:	2302      	movs	r3, #2
 8000500:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000502:	2302      	movs	r3, #2
 8000504:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000506:	2302      	movs	r3, #2
 8000508:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fcb8 	bl	8004e84 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000524:	f000 fb8a 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	230f      	movs	r3, #15
 800052a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052c:	2303      	movs	r3, #3
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2104      	movs	r1, #4
 8000540:	4618      	mov	r0, r3
 8000542:	f004 ffb1 	bl	80054a8 <HAL_RCC_ClockConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	bf14      	ite	ne
 800054c:	2301      	movne	r3, #1
 800054e:	2300      	moveq	r3, #0
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000556:	f000 fb71 	bl	8000c3c <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3750      	adds	r7, #80	@ 0x50
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b092      	sub	sp, #72	@ 0x48
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800056a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	223c      	movs	r2, #60	@ 0x3c
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f006 fa4c 	bl	8006a1a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b41      	ldr	r3, [pc, #260]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 8000584:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800058a:	4b3f      	ldr	r3, [pc, #252]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 800058c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800059e:	4b3a      	ldr	r3, [pc, #232]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a4:	4b38      	ldr	r3, [pc, #224]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005be:	2201      	movs	r2, #1
 80005c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c2:	4b31      	ldr	r3, [pc, #196]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	4829      	ldr	r0, [pc, #164]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 80005e2:	f000 fff5 	bl	80015d0 <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 80005f6:	f000 fb21 	bl	8000c3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 80005fa:	2305      	movs	r3, #5
 80005fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80005fe:	2300      	movs	r3, #0
 8000600:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000602:	2300      	movs	r3, #0
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000606:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800060a:	4619      	mov	r1, r3
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 800060e:	f002 fac1 	bl	8002b94 <HAL_ADCEx_MultiModeConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8000622:	f000 fb0b 	bl	8000c3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <_ZL12MX_ADC1_Initv+0x128>)
 8000628:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800062a:	2309      	movs	r3, #9
 800062c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000632:	237f      	movs	r3, #127	@ 0x7f
 8000634:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000636:	2304      	movs	r3, #4
 8000638:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4808      	ldr	r0, [pc, #32]	@ (8000688 <_ZL12MX_ADC1_Initv+0x124>)
 8000668:	f001 fd68 	bl	800213c <HAL_ADCEx_InjectedConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 800067c:	f000 fade 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3748      	adds	r7, #72	@ 0x48
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	04300002 	.word	0x04300002

08000690 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b090      	sub	sp, #64	@ 0x40
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	223c      	movs	r2, #60	@ 0x3c
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f006 f9bc 	bl	8006a1a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006a2:	4b48      	ldr	r3, [pc, #288]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006a4:	4a48      	ldr	r2, [pc, #288]	@ (80007c8 <_ZL12MX_ADC2_Initv+0x138>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a8:	4b46      	ldr	r3, [pc, #280]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b44      	ldr	r3, [pc, #272]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b6:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006bc:	4b41      	ldr	r3, [pc, #260]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c2:	4b40      	ldr	r3, [pc, #256]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006c8:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b3d      	ldr	r3, [pc, #244]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006da:	4b3a      	ldr	r3, [pc, #232]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006dc:	2201      	movs	r2, #1
 80006de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b38      	ldr	r3, [pc, #224]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e8:	4b36      	ldr	r3, [pc, #216]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f0:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006f6:	4b33      	ldr	r3, [pc, #204]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006fe:	4831      	ldr	r0, [pc, #196]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 8000700:	f000 ff66 	bl	80015d0 <HAL_ADC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8000714:	f000 fa92 	bl	8000c3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000718:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <_ZL12MX_ADC2_Initv+0x13c>)
 800071a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800071c:	2309      	movs	r3, #9
 800071e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000724:	237f      	movs	r3, #127	@ 0x7f
 8000726:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000728:	2304      	movs	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000730:	2303      	movs	r3, #3
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 8000752:	f001 fcf3 	bl	800213c <HAL_ADCEx_InjectedConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8000766:	f000 fa69 	bl	8000c3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <_ZL12MX_ADC2_Initv+0x140>)
 800076c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800076e:	f240 130f 	movw	r3, #271	@ 0x10f
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 800077a:	f001 fcdf 	bl	800213c <HAL_ADCEx_InjectedConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 800078e:	f000 fa55 	bl	8000c3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <_ZL12MX_ADC2_Initv+0x144>)
 8000794:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000796:	f240 2315 	movw	r3, #533	@ 0x215
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <_ZL12MX_ADC2_Initv+0x134>)
 80007a2:	f001 fccb 	bl	800213c <HAL_ADCEx_InjectedConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf14      	ite	ne
 80007ac:	2301      	movne	r3, #1
 80007ae:	2300      	moveq	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 80007b6:	f000 fa41 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3740      	adds	r7, #64	@ 0x40
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	50000100 	.word	0x50000100
 80007cc:	08600004 	.word	0x08600004
 80007d0:	0c900008 	.word	0x0c900008
 80007d4:	10c00010 	.word	0x10c00010

080007d8 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <_ZL14MX_CORDIC_Initv+0x28>)
 80007de:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <_ZL14MX_CORDIC_Initv+0x2c>)
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <_ZL14MX_CORDIC_Initv+0x28>)
 80007e4:	f002 fade 	bl	8002da4 <HAL_CORDIC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 80007f8:	f000 fa20 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000100 	.word	0x20000100
 8000804:	40020c00 	.word	0x40020c00

08000808 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800080e:	4a23      	ldr	r2, [pc, #140]	@ (800089c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800081a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800081e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000834:	2201      	movs	r2, #1
 8000836:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800083a:	2205      	movs	r2, #5
 800083c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000840:	220b      	movs	r2, #11
 8000842:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000846:	2238      	movs	r2, #56	@ 0x38
 8000848:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800084c:	220b      	movs	r2, #11
 800084e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000852:	2205      	movs	r2, #5
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000858:	2204      	movs	r2, #4
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000864:	2204      	movs	r2, #4
 8000866:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <_ZL14MX_FDCAN1_Initv+0x90>)
 800087c:	f002 fe02 	bl	8003484 <HAL_FDCAN_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf14      	ite	ne
 8000886:	2301      	movne	r3, #1
 8000888:	2300      	moveq	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <_ZL14MX_FDCAN1_Initv+0x8c>
  {
    Error_Handler();
 8000890:	f000 f9d4 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000128 	.word	0x20000128
 800089c:	40006400 	.word	0x40006400

080008a0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <_ZL12MX_I2C1_Initv+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008ac:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <_ZL12MX_I2C1_Initv+0x98>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	4815      	ldr	r0, [pc, #84]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008dc:	f003 faef 	bl	8003ebe <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80008f0:	f000 f9a4 	bl	8000c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 80008f8:	f004 f979 	bl	8004bee <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800090c:	f000 f996 	bl	8000c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4807      	ldr	r0, [pc, #28]	@ (8000930 <_ZL12MX_I2C1_Initv+0x90>)
 8000914:	f004 f9b6 	bl	8004c84 <HAL_I2CEx_ConfigDigitalFilter>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000928:	f000 f988 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000018c 	.word	0x2000018c
 8000934:	40005400 	.word	0x40005400
 8000938:	40b285c2 	.word	0x40b285c2

0800093c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b098      	sub	sp, #96	@ 0x60
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2234      	movs	r2, #52	@ 0x34
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f006 f856 	bl	8006a1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096e:	4b58      	ldr	r3, [pc, #352]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000970:	4a58      	ldr	r2, [pc, #352]	@ (8000ad4 <_ZL12MX_TIM1_Initv+0x198>)
 8000972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000974:	4b56      	ldr	r3, [pc, #344]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800097a:	4b55      	ldr	r3, [pc, #340]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 800097c:	2220      	movs	r2, #32
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000980:	4b53      	ldr	r3, [pc, #332]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000982:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800098e:	4b50      	ldr	r3, [pc, #320]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000990:	2201      	movs	r2, #1
 8000992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099a:	484d      	ldr	r0, [pc, #308]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 800099c:	f005 f9b6 	bl	8005d0c <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80009b0:	f000 f944 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009b4:	2320      	movs	r3, #32
 80009b6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80009b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80009bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009c6:	4619      	mov	r1, r3
 80009c8:	4841      	ldr	r0, [pc, #260]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 80009ca:	f005 fee9 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 80009de:	f000 f92d 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	@ 0x60
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000a08:	f005 f9d8 	bl	8005dbc <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8000a1c:	f000 f90e 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a24:	2204      	movs	r2, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000a2a:	f005 f9c7 	bl	8005dbc <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8000a3e:	f000 f8fd 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a46:	2208      	movs	r2, #8
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000a4c:	f005 f9b6 	bl	8005dbc <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000a60:	f000 f8ec 	bl	8000c3c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000a64:	481a      	ldr	r0, [pc, #104]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000a66:	f005 ffc5 	bl	80069f4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000a76:	2314      	movs	r3, #20
 8000a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000aa8:	f005 ff10 	bl	80068cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8000abc:	f000 f8be 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <_ZL12MX_TIM1_Initv+0x194>)
 8000ac2:	f000 fb25 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3760      	adds	r7, #96	@ 0x60
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200002a0 	.word	0x200002a0
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae2:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <_ZL11MX_DMA_Initv+0x60>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	200b      	movs	r0, #11
 8000b14:	f002 fa53 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b18:	200b      	movs	r0, #11
 8000b1a:	f002 fa6a 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	200c      	movs	r0, #12
 8000b24:	f002 fa4b 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b28:	200c      	movs	r0, #12
 8000b2a:	f002 fa62 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4a37      	ldr	r2, [pc, #220]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a31      	ldr	r2, [pc, #196]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f003 f945 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bd6:	f002 ffb5 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bea:	230c      	movs	r3, #12
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f002 ffa4 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f002 ff95 	bl	8003b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2028      	movs	r0, #40	@ 0x28
 8000c20:	f002 f9cd 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c24:	2028      	movs	r0, #40	@ 0x28
 8000c26:	f002 f9e4 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000800 	.word	0x48000800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c7e:	f004 f8f1 	bl	8004e64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	@ 0x80
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	2254      	movs	r2, #84	@ 0x54
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f005 feb2 	bl	8006a1a <memset>
  if(hadc->Instance==ADC1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cbe:	d146      	bne.n	8000d4e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cc6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fdcd 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cdc:	f7ff ffae 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ce0:	4b42      	ldr	r3, [pc, #264]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a41      	ldr	r2, [pc, #260]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000ce8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cea:	4b40      	ldr	r3, [pc, #256]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10b      	bne.n	8000d0a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000cf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a38      	ldr	r2, [pc, #224]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d22:	2301      	movs	r3, #1
 8000d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f002 ff04 	bl	8003b44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2012      	movs	r0, #18
 8000d42:	f002 f93c 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d46:	2012      	movs	r0, #18
 8000d48:	f002 f953 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d4c:	e04a      	b.n	8000de4 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a28      	ldr	r2, [pc, #160]	@ (8000df4 <HAL_ADC_MspInit+0x164>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d145      	bne.n	8000de4 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d5e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 fd81 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8000d74:	f7ff ff62 	bl	8000c3c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000d80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_ADC_MspInit+0x15c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d10b      	bne.n	8000da2 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_ADC_MspInit+0x160>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c2      	movs	r3, #194	@ 0xc2
 8000dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd0:	f002 feb8 	bl	8003b44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2012      	movs	r0, #18
 8000dda:	f002 f8f0 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dde:	2012      	movs	r0, #18
 8000de0:	f002 f907 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3780      	adds	r7, #128	@ 0x80
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200002ec 	.word	0x200002ec
 8000df0:	40021000 	.word	0x40021000
 8000df4:	50000100 	.word	0x50000100

08000df8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_CORDIC_MspInit+0x38>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10b      	bne.n	8000e22 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_CORDIC_MspInit+0x3c>)
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <HAL_CORDIC_MspInit+0x3c>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <HAL_CORDIC_MspInit+0x3c>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09e      	sub	sp, #120	@ 0x78
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2254      	movs	r2, #84	@ 0x54
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 fdde 	bl	8006a1a <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a28      	ldr	r2, [pc, #160]	@ (8000f04 <HAL_FDCAN_MspInit+0xcc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d149      	bne.n	8000efc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fcf9 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e84:	f7ff feda 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e88:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_FDCAN_MspInit+0xd0>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ebc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eca:	2309      	movs	r3, #9
 8000ecc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f002 fe34 	bl	8003b44 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2015      	movs	r0, #21
 8000ee2:	f002 f86c 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ee6:	2015      	movs	r0, #21
 8000ee8:	f002 f883 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2016      	movs	r0, #22
 8000ef2:	f002 f864 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ef6:	2016      	movs	r0, #22
 8000ef8:	f002 f87b 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000efc:	bf00      	nop
 8000efe:	3778      	adds	r7, #120	@ 0x78
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40006400 	.word	0x40006400
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0a0      	sub	sp, #128	@ 0x80
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2254      	movs	r2, #84	@ 0x54
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fd74 	bl	8006a1a <memset>
  if(hi2c->Instance==I2C1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a5f      	ldr	r2, [pc, #380]	@ (80010b4 <HAL_I2C_MspInit+0x1a8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 80b6 	bne.w	80010aa <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3e:	2340      	movs	r3, #64	@ 0x40
 8000f40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 fc90 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f56:	f7ff fe71 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b57      	ldr	r3, [pc, #348]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b54      	ldr	r3, [pc, #336]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b51      	ldr	r3, [pc, #324]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a50      	ldr	r2, [pc, #320]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f002 fdcb 	bl	8003b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	483c      	ldr	r0, [pc, #240]	@ (80010bc <HAL_I2C_MspInit+0x1b0>)
 8000fca:	f002 fdbb 	bl	8003b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fce:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	4a39      	ldr	r2, [pc, #228]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fda:	4b37      	ldr	r3, [pc, #220]	@ (80010b8 <HAL_I2C_MspInit+0x1ac>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8000fe8:	4a36      	ldr	r2, [pc, #216]	@ (80010c4 <HAL_I2C_MspInit+0x1b8>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000fec:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8000fee:	2210      	movs	r2, #16
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff2:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001004:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800101c:	4828      	ldr	r0, [pc, #160]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 800101e:	f002 f803 	bl	8003028 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001028:	f7ff fe08 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001030:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001032:	4a23      	ldr	r2, [pc, #140]	@ (80010c0 <HAL_I2C_MspInit+0x1b4>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 800103a:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <HAL_I2C_MspInit+0x1c0>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800103e:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001040:	2211      	movs	r2, #17
 8001042:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001046:	2210      	movs	r2, #16
 8001048:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800106e:	4816      	ldr	r0, [pc, #88]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001070:	f001 ffda 	bl	8003028 <HAL_DMA_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800107a:	f7ff fddf 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_I2C_MspInit+0x1bc>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	201f      	movs	r0, #31
 8001090:	f001 ff95 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001094:	201f      	movs	r0, #31
 8001096:	f001 ffac 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2020      	movs	r0, #32
 80010a0:	f001 ff8d 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010a4:	2020      	movs	r0, #32
 80010a6:	f001 ffa4 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010aa:	bf00      	nop
 80010ac:	3780      	adds	r7, #128	@ 0x80
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40005400 	.word	0x40005400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	200001e0 	.word	0x200001e0
 80010c4:	40020008 	.word	0x40020008
 80010c8:	20000240 	.word	0x20000240
 80010cc:	4002001c 	.word	0x4002001c

080010d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_TIM_PWM_MspInit+0x38>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10b      	bne.n	80010fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_TIM_PWM_MspInit+0x3c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <HAL_TIM_PWM_MspInit+0x3c>)
 80010e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_TIM_PWM_MspInit+0x3c>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <HAL_TIM_MspPostInit+0x9c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d138      	bne.n	80011a4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001162:	2307      	movs	r3, #7
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001172:	2302      	movs	r3, #2
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <HAL_TIM_MspPostInit+0xa4>)
 800117e:	f002 fce1 	bl	8003b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001182:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001194:	2306      	movs	r3, #6
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <HAL_TIM_MspPostInit+0xa8>)
 80011a0:	f002 fcd0 	bl	8003b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	@ 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000400 	.word	0x48000400

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f8e3 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <DMA1_Channel1_IRQHandler+0x10>)
 8001222:	f002 f810 	bl	8003246 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001e0 	.word	0x200001e0

08001230 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Channel2_IRQHandler+0x10>)
 8001236:	f002 f806 	bl	8003246 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000240 	.word	0x20000240

08001244 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <ADC1_2_IRQHandler+0x14>)
 800124a:	f000 fb7d 	bl	8001948 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800124e:	4803      	ldr	r0, [pc, #12]	@ (800125c <ADC1_2_IRQHandler+0x18>)
 8001250:	f000 fb7a 	bl	8001948 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000028 	.word	0x20000028
 800125c:	20000094 	.word	0x20000094

08001260 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <FDCAN1_IT0_IRQHandler+0x10>)
 8001266:	f002 fa67 	bl	8003738 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000128 	.word	0x20000128

08001274 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <FDCAN1_IT1_IRQHandler+0x10>)
 800127a:	f002 fa5d 	bl	8003738 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000128 	.word	0x20000128

08001288 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <I2C1_EV_IRQHandler+0x10>)
 800128e:	f002 feb1 	bl	8003ff4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000018c 	.word	0x2000018c

0800129c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <I2C1_ER_IRQHandler+0x10>)
 80012a2:	f002 fec1 	bl	8004028 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000018c 	.word	0x2000018c

080012b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012b8:	f002 fdde 	bl	8003e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	@ (8001324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <LoopForever+0xe>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	@ (8001330 <LoopForever+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f005 fb8b 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001316:	f7ff f89b 	bl	8000450 <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
  ldr   r0, =_estack
 800131c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	08006aa4 	.word	0x08006aa4
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	200002f4 	.word	0x200002f4

08001334 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC3_IRQHandler>

08001336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f001 fe31 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f80e 	bl	8001368 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e001      	b.n	800135c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001358:	f7ff fc76 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135c:	79fb      	ldrb	r3, [r7, #7]

}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_InitTick+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d022      	beq.n	80013c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800137c:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_InitTick+0x6c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_InitTick+0x68>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001388:	fbb1 f3f3 	udiv	r3, r1, r3
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fe3c 	bl	800300e <HAL_SYSTICK_Config>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10f      	bne.n	80013bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	d809      	bhi.n	80013b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a2:	2200      	movs	r2, #0
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	f001 fe08 	bl	8002fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <HAL_InitTick+0x70>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e007      	b.n	80013c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e004      	b.n	80013c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e001      	b.n	80013c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_IncTick+0x20>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a03      	ldr	r2, [pc, #12]	@ (80013f8 <HAL_IncTick+0x1c>)
 80013ec:	6013      	str	r3, [r2, #0]
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200002f0 	.word	0x200002f0
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200002f0 	.word	0x200002f0

08001418 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 031f 	and.w	r3, r3, #31
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6093      	str	r3, [r2, #8]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014fa:	d101      	bne.n	8001500 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800151e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001522:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800154a:	d101      	bne.n	8001550 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <LL_ADC_IsEnabled+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_IsEnabled+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b04      	cmp	r3, #4
 8001596:	d101      	bne.n	800159c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d101      	bne.n	80015c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1a9      	b.n	800193e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fb49 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff68 	bl	80014e6 <LL_ADC_IsDeepPowerDownEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff4e 	bl	80014c2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff83 	bl	8001536 <LL_ADC_IsInternalRegulatorEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff67 	bl	800150e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001640:	4b9c      	ldr	r3, [pc, #624]	@ (80018b4 <HAL_ADC_Init+0x2e4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	4a9c      	ldr	r2, [pc, #624]	@ (80018b8 <HAL_ADC_Init+0x2e8>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001654:	e002      	b.n	800165c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f9      	bne.n	8001656 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff65 	bl	8001536 <LL_ADC_IsInternalRegulatorEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10d      	bne.n	800168e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff76 	bl	8001584 <LL_ADC_REG_IsConversionOngoing>
 8001698:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 8142 	bne.w	800192c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 813e 	bne.w	800192c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016b8:	f043 0202 	orr.w	r2, r3, #2
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff4a 	bl	800155e <LL_ADC_IsEnabled>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d141      	bne.n	8001754 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016d8:	d004      	beq.n	80016e4 <HAL_ADC_Init+0x114>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a77      	ldr	r2, [pc, #476]	@ (80018bc <HAL_ADC_Init+0x2ec>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10f      	bne.n	8001704 <HAL_ADC_Init+0x134>
 80016e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80016e8:	f7ff ff39 	bl	800155e <LL_ADC_IsEnabled>
 80016ec:	4604      	mov	r4, r0
 80016ee:	4873      	ldr	r0, [pc, #460]	@ (80018bc <HAL_ADC_Init+0x2ec>)
 80016f0:	f7ff ff35 	bl	800155e <LL_ADC_IsEnabled>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4323      	orrs	r3, r4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e012      	b.n	800172a <HAL_ADC_Init+0x15a>
 8001704:	486e      	ldr	r0, [pc, #440]	@ (80018c0 <HAL_ADC_Init+0x2f0>)
 8001706:	f7ff ff2a 	bl	800155e <LL_ADC_IsEnabled>
 800170a:	4604      	mov	r4, r0
 800170c:	486d      	ldr	r0, [pc, #436]	@ (80018c4 <HAL_ADC_Init+0x2f4>)
 800170e:	f7ff ff26 	bl	800155e <LL_ADC_IsEnabled>
 8001712:	4603      	mov	r3, r0
 8001714:	431c      	orrs	r4, r3
 8001716:	486c      	ldr	r0, [pc, #432]	@ (80018c8 <HAL_ADC_Init+0x2f8>)
 8001718:	f7ff ff21 	bl	800155e <LL_ADC_IsEnabled>
 800171c:	4603      	mov	r3, r0
 800171e:	4323      	orrs	r3, r4
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d012      	beq.n	8001754 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Init+0x172>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a5f      	ldr	r2, [pc, #380]	@ (80018bc <HAL_ADC_Init+0x2ec>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Init+0x176>
 8001742:	4a62      	ldr	r2, [pc, #392]	@ (80018cc <HAL_ADC_Init+0x2fc>)
 8001744:	e000      	b.n	8001748 <HAL_ADC_Init+0x178>
 8001746:	4a62      	ldr	r2, [pc, #392]	@ (80018d0 <HAL_ADC_Init+0x300>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f7ff fe62 	bl	8001418 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7f5b      	ldrb	r3, [r3, #29]
 8001758:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001764:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800176a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001772:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	3b01      	subs	r3, #1
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <HAL_ADC_Init+0x304>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fee5 	bl	80015aa <LL_ADC_INJ_IsConversionOngoing>
 80017e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d17f      	bne.n	80018e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d17c      	bne.n	80018e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800180a:	f023 0302 	bic.w	r3, r3, #2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	69b9      	ldr	r1, [r7, #24]
 8001814:	430b      	orrs	r3, r1
 8001816:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800182e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001838:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800183c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6911      	ldr	r1, [r2, #16]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	430b      	orrs	r3, r1
 800184a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800184e:	e013      	b.n	8001878 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800185e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001874:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12a      	bne.n	80018d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018a4:	430a      	orrs	r2, r1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	e019      	b.n	80018e8 <HAL_ADC_Init+0x318>
 80018b4:	20000000 	.word	0x20000000
 80018b8:	053e2d63 	.word	0x053e2d63
 80018bc:	50000100 	.word	0x50000100
 80018c0:	50000400 	.word	0x50000400
 80018c4:	50000500 	.word	0x50000500
 80018c8:	50000600 	.word	0x50000600
 80018cc:	50000300 	.word	0x50000300
 80018d0:	50000700 	.word	0x50000700
 80018d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10c      	bne.n	800190a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f023 010f 	bic.w	r1, r3, #15
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	631a      	str	r2, [r3, #48]	@ 0x30
 8001908:	e007      	b.n	800191a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 020f 	bic.w	r2, r2, #15
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	@ 0x5c
 800192a:	e007      	b.n	800193c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	f043 0210 	orr.w	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800193c:	7ffb      	ldrb	r3, [r7, #31]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop

08001948 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800196c:	d004      	beq.n	8001978 <HAL_ADC_IRQHandler+0x30>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a8e      	ldr	r2, [pc, #568]	@ (8001bac <HAL_ADC_IRQHandler+0x264>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_ADC_IRQHandler+0x34>
 8001978:	4b8d      	ldr	r3, [pc, #564]	@ (8001bb0 <HAL_ADC_IRQHandler+0x268>)
 800197a:	e000      	b.n	800197e <HAL_ADC_IRQHandler+0x36>
 800197c:	4b8d      	ldr	r3, [pc, #564]	@ (8001bb4 <HAL_ADC_IRQHandler+0x26c>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd83 	bl	800148a <LL_ADC_GetMultimode>
 8001984:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x78>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d012      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fbb7 	bl	8002126 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_IRQHandler+0x8c>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8094 	beq.w	8001b08 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 808e 	beq.w	8001b08 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd18 	bl	800143e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d072      	beq.n	8001afa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a64      	ldr	r2, [pc, #400]	@ (8001bac <HAL_ADC_IRQHandler+0x264>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_ADC_IRQHandler+0xea>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_ADC_IRQHandler+0x270>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d002      	beq.n	8001a2e <HAL_ADC_IRQHandler+0xe6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_IRQHandler+0xee>
 8001a2e:	4b63      	ldr	r3, [pc, #396]	@ (8001bbc <HAL_ADC_IRQHandler+0x274>)
 8001a30:	e001      	b.n	8001a36 <HAL_ADC_IRQHandler+0xee>
 8001a32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d008      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d002      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d104      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	e014      	b.n	8001a84 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a53      	ldr	r2, [pc, #332]	@ (8001bac <HAL_ADC_IRQHandler+0x264>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d009      	beq.n	8001a78 <HAL_ADC_IRQHandler+0x130>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a53      	ldr	r2, [pc, #332]	@ (8001bb8 <HAL_ADC_IRQHandler+0x270>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_ADC_IRQHandler+0x12c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e003      	b.n	8001a7c <HAL_ADC_IRQHandler+0x134>
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <HAL_ADC_IRQHandler+0x274>)
 8001a76:	e001      	b.n	8001a7c <HAL_ADC_IRQHandler+0x134>
 8001a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a7c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d135      	bne.n	8001afa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d12e      	bne.n	8001afa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fd6f 	bl	8001584 <LL_ADC_REG_IsConversionOngoing>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11a      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020c 	bic.w	r2, r2, #12
 8001aba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d112      	bne.n	8001afa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ae0:	e00b      	b.n	8001afa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f984 	bl	8001e08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	220c      	movs	r2, #12
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x1d4>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b3 	beq.w	8001c8e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80ad 	beq.w	8001c8e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fc87 	bl	8001464 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b56:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc6e 	bl	800143e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b62:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <HAL_ADC_IRQHandler+0x264>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_ADC_IRQHandler+0x23a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <HAL_ADC_IRQHandler+0x270>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_IRQHandler+0x236>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e003      	b.n	8001b86 <HAL_ADC_IRQHandler+0x23e>
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_ADC_IRQHandler+0x274>)
 8001b80:	e001      	b.n	8001b86 <HAL_ADC_IRQHandler+0x23e>
 8001b82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d008      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d002      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	e01f      	b.n	8001bea <HAL_ADC_IRQHandler+0x2a2>
 8001baa:	bf00      	nop
 8001bac:	50000100 	.word	0x50000100
 8001bb0:	50000300 	.word	0x50000300
 8001bb4:	50000700 	.word	0x50000700
 8001bb8:	50000500 	.word	0x50000500
 8001bbc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a8b      	ldr	r2, [pc, #556]	@ (8001df4 <HAL_ADC_IRQHandler+0x4ac>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_ADC_IRQHandler+0x296>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a8a      	ldr	r2, [pc, #552]	@ (8001df8 <HAL_ADC_IRQHandler+0x4b0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d002      	beq.n	8001bda <HAL_ADC_IRQHandler+0x292>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e003      	b.n	8001be2 <HAL_ADC_IRQHandler+0x29a>
 8001bda:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <HAL_ADC_IRQHandler+0x4b4>)
 8001bdc:	e001      	b.n	8001be2 <HAL_ADC_IRQHandler+0x29a>
 8001bde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001be2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d047      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x2c2>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d03f      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d13a      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c14:	2b40      	cmp	r3, #64	@ 0x40
 8001c16:	d133      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d12e      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcbf 	bl	80015aa <LL_ADC_INJ_IsConversionOngoing>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11a      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d112      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c66:	e00b      	b.n	8001c80 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	f043 0210 	orr.w	r2, r3, #16
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa28 	bl	80020d6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2260      	movs	r2, #96	@ 0x60
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d011      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x374>
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8b4 	bl	8001e1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <HAL_ADC_IRQHandler+0x3a4>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa0e 	bl	80020fe <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d012      	beq.n	8001d1c <HAL_ADC_IRQHandler+0x3d4>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fa00 	bl	8002112 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d043      	beq.n	8001dae <HAL_ADC_IRQHandler+0x466>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03e      	beq.n	8001dae <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3c:	e021      	b.n	8001d82 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d015      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x410>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <HAL_ADC_IRQHandler+0x4ac>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_IRQHandler+0x414>
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_ADC_IRQHandler+0x4b8>)
 8001d5a:	e000      	b.n	8001d5e <HAL_ADC_IRQHandler+0x416>
 8001d5c:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_ADC_IRQHandler+0x4bc>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fba1 	bl	80014a6 <LL_ADC_GetMultiDMATransfer>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6e:	e008      	b.n	8001d82 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d10e      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d98:	f043 0202 	orr.w	r2, r3, #2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f845 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2210      	movs	r2, #16
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d018      	beq.n	8001dea <HAL_ADC_IRQHandler+0x4a2>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d013      	beq.n	8001dea <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	f043 0208 	orr.w	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f980 	bl	80020ea <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	@ 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	50000100 	.word	0x50000100
 8001df8:	50000500 	.word	0x50000500
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000300 	.word	0x50000300
 8001e04:	50000700 	.word	0x50000700

08001e08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_SetCommonPathInternalCh>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_GetCommonPathInternalCh>:
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <LL_ADC_SetOffset>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3360      	adds	r3, #96	@ 0x60
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <LL_ADC_SetOffset+0x44>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	03fff000 	.word	0x03fff000

08001ed0 <LL_ADC_GetOffsetChannel>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3360      	adds	r3, #96	@ 0x60
 8001ede:	461a      	mov	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_SetOffsetState>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3360      	adds	r3, #96	@ 0x60
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetOffsetSign>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3360      	adds	r3, #96	@ 0x60
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_SetOffsetSaturation>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3360      	adds	r3, #96	@ 0x60
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	615a      	str	r2, [r3, #20]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetChannelSamplingTime>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0e5b      	lsrs	r3, r3, #25
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0d1b      	lsrs	r3, r3, #20
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <LL_ADC_SetChannelSingleDiff>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0318 	and.w	r3, r3, #24
 800203e:	4908      	ldr	r1, [pc, #32]	@ (8002060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002040:	40d9      	lsrs	r1, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	400b      	ands	r3, r1
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	0007ffff 	.word	0x0007ffff

08002064 <LL_ADC_IsEnabled>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <LL_ADC_IsEnabled+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_IsEnabled+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_REG_IsConversionOngoing>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d101      	bne.n	80020a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_INJ_IsConversionOngoing>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0b6      	sub	sp, #216	@ 0xd8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002160:	2302      	movs	r3, #2
 8002162:	f000 bcfd 	b.w	8002b60 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800217a:	2b01      	cmp	r3, #1
 800217c:	d130      	bne.n	80021e0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b09      	cmp	r3, #9
 8002184:	d179      	bne.n	800227a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80021a2:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021ae:	e007      	b.n	80021c0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80021bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021c6:	4b84      	ldr	r3, [pc, #528]	@ (80023d8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80021d2:	430b      	orrs	r3, r1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021dc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80021de:	e04c      	b.n	800227a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11d      	bne.n	8002224 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800220c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002218:	e004      	b.n	8002224 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	3b01      	subs	r3, #1
 8002220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002252:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800226a:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	430b      	orrs	r3, r1
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff16 	bl	80020b0 <LL_ADC_INJ_IsConversionOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d124      	bne.n	80022d4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80022a4:	055a      	lsls	r2, r3, #21
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	e00c      	b.n	80022d4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80022ca:	055a      	lsls	r2, r3, #21
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fed6 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 80022de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fee2 	bl	80020b0 <LL_ADC_INJ_IsConversionOngoing>
 80022ec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 822e 	bne.w	8002756 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8229 	bne.w	8002756 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d116      	bne.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800231a:	2b01      	cmp	r3, #1
 800231c:	d108      	bne.n	8002330 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800232c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800232e:	e01f      	b.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800233e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002340:	e016      	b.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002348:	2b01      	cmp	r3, #1
 800234a:	d109      	bne.n	8002360 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800235e:	e007      	b.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800236e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002376:	2b01      	cmp	r3, #1
 8002378:	d110      	bne.n	800239c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	430b      	orrs	r3, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0202 	orr.w	r2, r2, #2
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	e007      	b.n	80023ac <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0202 	bic.w	r2, r2, #2
 80023aa:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023b4:	d112      	bne.n	80023dc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7ff fdff 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fde5 	bl	8001f9e <LL_ADC_SetSamplingTimeCommonConfig>
 80023d4:	e011      	b.n	80023fa <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80023d6:	bf00      	nop
 80023d8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80023e8:	461a      	mov	r2, r3
 80023ea:	f7ff fdeb 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fdd2 	bl	8001f9e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d022      	beq.n	8002462 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6919      	ldr	r1, [r3, #16]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800242c:	f7ff fd2c 	bl	8001e88 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6919      	ldr	r1, [r3, #16]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	461a      	mov	r2, r3
 800243e:	f7ff fd78 	bl	8001f32 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002456:	e000      	b.n	800245a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002458:	2300      	movs	r3, #0
 800245a:	461a      	mov	r2, r3
 800245c:	f7ff fd84 	bl	8001f68 <LL_ADC_SetOffsetSaturation>
 8002460:	e179      	b.n	8002756 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fd31 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fd26 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	e01e      	b.n	80024cc <HAL_ADCEx_InjectedConfigChannel+0x390>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd1b 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e004      	b.n	80024ca <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 80024c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	e018      	b.n	8002516 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e004      	b.n	8002516 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800250c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fcea 	bl	8001efc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fcce 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fcc3 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	e01e      	b.n	8002592 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fcb8 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800257a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e004      	b.n	8002590 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8002586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	e018      	b.n	80025dc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e004      	b.n	80025dc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80025d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fc87 	bl	8001efc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2102      	movs	r1, #2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fc6b 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fc60 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	e01e      	b.n	8002658 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2102      	movs	r1, #2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fc55 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800263c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e004      	b.n	8002656 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	e014      	b.n	800269a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800267e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e004      	b.n	800269a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8002690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fc28 	bl	8001efc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2103      	movs	r1, #3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fc0c 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2103      	movs	r1, #3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fc01 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	e017      	b.n	8002708 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2103      	movs	r1, #3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fbf6 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80026f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80026fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	e011      	b.n	8002744 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800272e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002730:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800273c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	2103      	movs	r1, #3
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fbd3 	bl	8001efc <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc82 	bl	8002064 <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 813d 	bne.w	80029e2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff fc51 	bl	800201c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4aa2      	ldr	r2, [pc, #648]	@ (8002a08 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f040 812e 	bne.w	80029e2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	bf94      	ite	ls
 80027a6:	2301      	movls	r3, #1
 80027a8:	2300      	movhi	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e019      	b.n	80027e2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80027ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b09      	cmp	r3, #9
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d079      	beq.n	80028da <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002800:	e015      	b.n	800282e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002812:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800281e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	e017      	b.n	800287e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800285c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800286a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	ea42 0103 	orr.w	r1, r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	051b      	lsls	r3, r3, #20
 80028a2:	e018      	b.n	80028d6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d6:	430b      	orrs	r3, r1
 80028d8:	e07e      	b.n	80029d8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	3301      	adds	r3, #1
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f4:	e015      	b.n	8002922 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	069b      	lsls	r3, r3, #26
 800291e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	3301      	adds	r3, #1
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	e017      	b.n	8002972 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	61bb      	str	r3, [r7, #24]
  return result;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	3b1e      	subs	r3, #30
 8002996:	051b      	lsls	r3, r3, #20
 8002998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800299c:	e01b      	b.n	80029d6 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  return result;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e003      	b.n	80029c2 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	3b1e      	subs	r3, #30
 80029d0:	051b      	lsls	r3, r3, #20
 80029d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d6:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	4619      	mov	r1, r3
 80029de:	f7ff faf1 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80b2 	beq.w	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f8:	d004      	beq.n	8002a04 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d109      	bne.n	8002a18 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8002a06:	e008      	b.n	8002a1a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8002a08:	407f0000 	.word	0x407f0000
 8002a0c:	80080000 	.word	0x80080000
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000300 	.word	0x50000300
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fa25 	bl	8001e6a <LL_ADC_GetCommonPathInternalCh>
 8002a20:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a50      	ldr	r2, [pc, #320]	@ (8002b6c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4f      	ldr	r2, [pc, #316]	@ (8002b70 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d139      	bne.n	8002aac <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d133      	bne.n	8002aac <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a4c:	d004      	beq.n	8002a58 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a48      	ldr	r2, [pc, #288]	@ (8002b74 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d17a      	bne.n	8002b4e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a60:	d004      	beq.n	8002a6c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a44      	ldr	r2, [pc, #272]	@ (8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8002a6c:	4a43      	ldr	r2, [pc, #268]	@ (8002b7c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002a6e:	e000      	b.n	8002a72 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8002a70:	4a3d      	ldr	r2, [pc, #244]	@ (8002b68 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7ff f9e1 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	4a3e      	ldr	r2, [pc, #248]	@ (8002b84 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	099a      	lsrs	r2, r3, #6
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002a9a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aaa:	e050      	b.n	8002b4e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a35      	ldr	r2, [pc, #212]	@ (8002b88 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d125      	bne.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d104      	bne.n	8002ad6 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b8c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03d      	beq.n	8002b52 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ade:	d004      	beq.n	8002aea <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	@ (8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8002aea:	4a24      	ldr	r2, [pc, #144]	@ (8002b7c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002aec:	e000      	b.n	8002af0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8002aee:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002af0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7ff f9a2 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b00:	e027      	b.n	8002b52 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a22      	ldr	r2, [pc, #136]	@ (8002b90 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d123      	bne.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11d      	bne.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	@ (8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a11      	ldr	r2, [pc, #68]	@ (8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8002b36:	4a11      	ldr	r2, [pc, #68]	@ (8002b7c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002b38:	e000      	b.n	8002b3c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b68 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7ff f97c 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 8002b4c:	e002      	b.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b52:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	37d8      	adds	r7, #216	@ 0xd8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	50000700 	.word	0x50000700
 8002b6c:	c3210000 	.word	0xc3210000
 8002b70:	90c00010 	.word	0x90c00010
 8002b74:	50000600 	.word	0x50000600
 8002b78:	50000100 	.word	0x50000100
 8002b7c:	50000300 	.word	0x50000300
 8002b80:	20000000 	.word	0x20000000
 8002b84:	053e2d63 	.word	0x053e2d63
 8002b88:	c7520000 	.word	0xc7520000
 8002b8c:	50000500 	.word	0x50000500
 8002b90:	cb840000 	.word	0xcb840000

08002b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b0a1      	sub	sp, #132	@ 0x84
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0e7      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e009      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	e001      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0be      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fa3f 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fa39 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80a0 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 809c 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a55      	ldr	r2, [pc, #340]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c3c:	4b56      	ldr	r3, [pc, #344]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c40:	4b56      	ldr	r3, [pc, #344]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c42:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d04b      	beq.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c5e:	035b      	lsls	r3, r3, #13
 8002c60:	430b      	orrs	r3, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a45      	ldr	r2, [pc, #276]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10f      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c80:	f7ff f9f0 	bl	8002064 <LL_ADC_IsEnabled>
 8002c84:	4604      	mov	r4, r0
 8002c86:	4841      	ldr	r0, [pc, #260]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c88:	f7ff f9ec 	bl	8002064 <LL_ADC_IsEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c9c:	483c      	ldr	r0, [pc, #240]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c9e:	f7ff f9e1 	bl	8002064 <LL_ADC_IsEnabled>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	483b      	ldr	r0, [pc, #236]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ca6:	f7ff f9dd 	bl	8002064 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	431c      	orrs	r4, r3
 8002cae:	483c      	ldr	r0, [pc, #240]	@ (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cb0:	f7ff f9d8 	bl	8002064 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d056      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce2:	e047      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10f      	bne.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d08:	f7ff f9ac 	bl	8002064 <LL_ADC_IsEnabled>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	481f      	ldr	r0, [pc, #124]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d10:	f7ff f9a8 	bl	8002064 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e012      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d24:	481a      	ldr	r0, [pc, #104]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d26:	f7ff f99d 	bl	8002064 <LL_ADC_IsEnabled>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4819      	ldr	r0, [pc, #100]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d2e:	f7ff f999 	bl	8002064 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	431c      	orrs	r4, r3
 8002d36:	481a      	ldr	r0, [pc, #104]	@ (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d38:	f7ff f994 	bl	8002064 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5e:	e009      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d72:	e000      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3784      	adds	r7, #132	@ 0x84
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	50000100 	.word	0x50000100
 8002d90:	50000400 	.word	0x50000400
 8002d94:	50000500 	.word	0x50000500
 8002d98:	50000300 	.word	0x50000300
 8002d9c:	50000700 	.word	0x50000700
 8002da0:	50000600 	.word	0x50000600

08002da4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e023      	b.n	8002dfe <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f814 	bl	8000df8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	@ (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	@ (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	@ (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f7ff ff8e 	bl	8002ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff29 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff40 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff90 	bl	8002efc <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5f 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff33 	bl	8002e6c <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa4 	bl	8002f64 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e08d      	b.n	8003156 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_DMA_Init+0x138>)
 8003042:	429a      	cmp	r2, r3
 8003044:	d80f      	bhi.n	8003066 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b45      	ldr	r3, [pc, #276]	@ (8003164 <HAL_DMA_Init+0x13c>)
 800304e:	4413      	add	r3, r2
 8003050:	4a45      	ldr	r2, [pc, #276]	@ (8003168 <HAL_DMA_Init+0x140>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a42      	ldr	r2, [pc, #264]	@ (800316c <HAL_DMA_Init+0x144>)
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40
 8003064:	e00e      	b.n	8003084 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b40      	ldr	r3, [pc, #256]	@ (8003170 <HAL_DMA_Init+0x148>)
 800306e:	4413      	add	r3, r2
 8003070:	4a3d      	ldr	r2, [pc, #244]	@ (8003168 <HAL_DMA_Init+0x140>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	009a      	lsls	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a3c      	ldr	r2, [pc, #240]	@ (8003174 <HAL_DMA_Init+0x14c>)
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800309a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f972 	bl	80033c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030e4:	d102      	bne.n	80030ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003100:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_DMA_Init+0x104>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b04      	cmp	r3, #4
 8003110:	d80c      	bhi.n	800312c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f992 	bl	800343c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e008      	b.n	800313e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40020407 	.word	0x40020407
 8003164:	bffdfff8 	.word	0xbffdfff8
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	40020000 	.word	0x40020000
 8003170:	bffdfbf8 	.word	0xbffdfbf8
 8003174:	40020400 	.word	0x40020400

08003178 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d00d      	beq.n	80031ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2204      	movs	r2, #4
 8003194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e047      	b.n	800323c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020e 	bic.w	r2, r2, #14
 80031ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003210:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800321a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
    }
  }
  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2204      	movs	r2, #4
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d026      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x7a>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d021      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0204 	bic.w	r2, r2, #4
 8003298:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f003 021f 	and.w	r2, r3, #31
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	2104      	movs	r1, #4
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d071      	beq.n	800339a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032be:	e06c      	b.n	800339a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2202      	movs	r2, #2
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02e      	beq.n	8003332 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d029      	beq.n	8003332 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020a 	bic.w	r2, r2, #10
 80032fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	2102      	movs	r1, #2
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d038      	beq.n	800339a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003330:	e033      	b.n	800339a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2208      	movs	r2, #8
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02a      	beq.n	800339c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d025      	beq.n	800339c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 020e 	bic.w	r2, r2, #14
 800335e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800339a:	bf00      	nop
 800339c:	bf00      	nop
}
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033b2:	b2db      	uxtb	r3, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d802      	bhi.n	80033da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033d4:	4b15      	ldr	r3, [pc, #84]	@ (800342c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e001      	b.n	80033de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3b08      	subs	r3, #8
 80033ea:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	461a      	mov	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0b      	ldr	r2, [pc, #44]	@ (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800340a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40020407 	.word	0x40020407
 800342c:	40020800 	.word	0x40020800
 8003430:	40020820 	.word	0x40020820
 8003434:	cccccccd 	.word	0xcccccccd
 8003438:	40020880 	.word	0x40020880

0800343c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	461a      	mov	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800345e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2201      	movs	r2, #1
 800346a:	409a      	lsls	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	1000823f 	.word	0x1000823f
 8003480:	40020940 	.word	0x40020940

08003484 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e147      	b.n	8003726 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fcc4 	bl	8000e38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0210 	bic.w	r2, r2, #16
 80034be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c0:	f7fd ff9e 	bl	8001400 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034c6:	e012      	b.n	80034ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034c8:	f7fd ff9a 	bl	8001400 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d90b      	bls.n	80034ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e11b      	b.n	8003726 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d0e5      	beq.n	80034c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f7fd ff78 	bl	8001400 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003512:	e012      	b.n	800353a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003514:	f7fd ff74 	bl	8001400 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b0a      	cmp	r3, #10
 8003520:	d90b      	bls.n	800353a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0f5      	b.n	8003726 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0e5      	beq.n	8003514 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0202 	orr.w	r2, r2, #2
 8003556:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a74      	ldr	r2, [pc, #464]	@ (8003730 <HAL_FDCAN_Init+0x2ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d103      	bne.n	800356a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003562:	4a74      	ldr	r2, [pc, #464]	@ (8003734 <HAL_FDCAN_Init+0x2b0>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7c1b      	ldrb	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003580:	619a      	str	r2, [r3, #24]
 8003582:	e007      	b.n	8003594 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003592:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7c5b      	ldrb	r3, [r3, #17]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d108      	bne.n	80035ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	619a      	str	r2, [r3, #24]
 80035ac:	e007      	b.n	80035be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7c9b      	ldrb	r3, [r3, #18]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d108      	bne.n	80035d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d4:	619a      	str	r2, [r3, #24]
 80035d6:	e007      	b.n	80035e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800360c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0210 	bic.w	r2, r2, #16
 800361c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d108      	bne.n	8003638 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0204 	orr.w	r2, r2, #4
 8003634:	619a      	str	r2, [r3, #24]
 8003636:	e02c      	b.n	8003692 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d028      	beq.n	8003692 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d01c      	beq.n	8003682 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003656:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0210 	orr.w	r2, r2, #16
 8003666:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d110      	bne.n	8003692 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	619a      	str	r2, [r3, #24]
 8003680:	e007      	b.n	8003692 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0220 	orr.w	r2, r2, #32
 8003690:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	3b01      	subs	r3, #1
 8003698:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	3b01      	subs	r3, #1
 80036a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c6:	d115      	bne.n	80036f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	3b01      	subs	r3, #1
 80036d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	3b01      	subs	r3, #1
 80036de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9ae 	bl	8003a6c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40006400 	.word	0x40006400
 8003734:	40006500 	.word	0x40006500

08003738 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	@ 0x30
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003746:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003754:	4013      	ands	r3, r2
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800376c:	4013      	ands	r3, r2
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003784:	4013      	ands	r3, r2
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003792:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	4013      	ands	r3, r2
 800379e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80037aa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037be:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2240      	movs	r2, #64	@ 0x40
 80037e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f921 	bl	8003a2c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d019      	beq.n	8003828 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003806:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800381e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003820:	6939      	ldr	r1, [r7, #16]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8e3 	bl	80039ee <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003834:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8a2 	bl	8003982 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800384c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8a2 	bl	8003998 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003860:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8a2 	bl	80039ae <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003886:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f89b 	bl	80039c4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d018      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80038aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f887 	bl	80039d8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f88b 	bl	8003a04 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800390a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f883 	bl	8003a18 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00f      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800392e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003934:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800394a:	69f9      	ldr	r1, [r7, #28]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f881 	bl	8003a54 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f863 	bl	8003a40 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800397a:	bf00      	nop
 800397c:	3730      	adds	r7, #48	@ 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003a74:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003a76:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b3c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d103      	bne.n	8003a8a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003a88:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b40 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003a9a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aaa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	041a      	lsls	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ad0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	061a      	lsls	r2, r3, #24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e005      	b.n	8003b1e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3f3      	bcc.n	8003b12 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	4000a400 	.word	0x4000a400
 8003b3c:	40006800 	.word	0x40006800
 8003b40:	40006c00 	.word	0x40006c00

08003b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b52:	e15a      	b.n	8003e0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 814c 	beq.w	8003e04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d005      	beq.n	8003b84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d130      	bne.n	8003be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bba:	2201      	movs	r2, #1
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0201 	and.w	r2, r3, #1
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d017      	beq.n	8003c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d123      	bne.n	8003c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	220f      	movs	r2, #15
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	08da      	lsrs	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3208      	adds	r2, #8
 8003c70:	6939      	ldr	r1, [r7, #16]
 8003c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a6 	beq.w	8003e04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e28 <HAL_GPIO_Init+0x2e4>)
 8003cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e28 <HAL_GPIO_Init+0x2e4>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cc4:	4b58      	ldr	r3, [pc, #352]	@ (8003e28 <HAL_GPIO_Init+0x2e4>)
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd0:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <HAL_GPIO_Init+0x2e8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cfa:	d01f      	beq.n	8003d3c <HAL_GPIO_Init+0x1f8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003e30 <HAL_GPIO_Init+0x2ec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d019      	beq.n	8003d38 <HAL_GPIO_Init+0x1f4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a4b      	ldr	r2, [pc, #300]	@ (8003e34 <HAL_GPIO_Init+0x2f0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_GPIO_Init+0x1f0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e38 <HAL_GPIO_Init+0x2f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00d      	beq.n	8003d30 <HAL_GPIO_Init+0x1ec>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a49      	ldr	r2, [pc, #292]	@ (8003e3c <HAL_GPIO_Init+0x2f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <HAL_GPIO_Init+0x1e8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a48      	ldr	r2, [pc, #288]	@ (8003e40 <HAL_GPIO_Init+0x2fc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_GPIO_Init+0x1e4>
 8003d24:	2305      	movs	r3, #5
 8003d26:	e00a      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d28:	2306      	movs	r3, #6
 8003d2a:	e008      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e006      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d30:	2303      	movs	r3, #3
 8003d32:	e004      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e002      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_GPIO_Init+0x1fa>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	f002 0203 	and.w	r2, r2, #3
 8003d44:	0092      	lsls	r2, r2, #2
 8003d46:	4093      	lsls	r3, r2
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d4e:	4937      	ldr	r1, [pc, #220]	@ (8003e2c <HAL_GPIO_Init+0x2e8>)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	3302      	adds	r3, #2
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d5c:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d80:	4a30      	ldr	r2, [pc, #192]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d86:	4b2f      	ldr	r3, [pc, #188]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003daa:	4a26      	ldr	r2, [pc, #152]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003db0:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dda:	4b1a      	ldr	r3, [pc, #104]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dfe:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_GPIO_Init+0x300>)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f ae9d 	bne.w	8003b54 <HAL_GPIO_Init+0x10>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	48000400 	.word	0x48000400
 8003e34:	48000800 	.word	0x48000800
 8003e38:	48000c00 	.word	0x48000c00
 8003e3c:	48001000 	.word	0x48001000
 8003e40:	48001400 	.word	0x48001400
 8003e44:	40010400 	.word	0x40010400

08003e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e64:	e002      	b.n	8003e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e82:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f806 	bl	8003ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e08d      	b.n	8003fec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fd f811 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2224      	movs	r2, #36	@ 0x24
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	e006      	b.n	8003f46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d108      	bne.n	8003f60 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e007      	b.n	8003f70 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69d9      	ldr	r1, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
  }
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00f      	beq.n	800406a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004068:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00f      	beq.n	8004094 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0208 	orr.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004092:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00f      	beq.n	80040be <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ac:	f043 0202 	orr.w	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 030b 	and.w	r3, r3, #11
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fbd5 	bl	8004880 <I2C_ITError>
  }
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
 8004112:	4613      	mov	r3, r2
 8004114:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <I2C_Slave_ISR_IT+0x24>
 800417e:	2302      	movs	r3, #2
 8004180:	e0e2      	b.n	8004348 <I2C_Slave_ISR_IT+0x1ea>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f9b5 	bl	8004510 <I2C_ITSlaveCplt>
 80041a6:	e0ca      	b.n	800433e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04b      	beq.n	800424a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d046      	beq.n	800424a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d128      	bne.n	8004218 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b28      	cmp	r3, #40	@ 0x28
 80041d0:	d108      	bne.n	80041e4 <I2C_Slave_ISR_IT+0x86>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041d8:	d104      	bne.n	80041e4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fafb 	bl	80047d8 <I2C_ITListenCplt>
 80041e2:	e031      	b.n	8004248 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b29      	cmp	r3, #41	@ 0x29
 80041ee:	d10e      	bne.n	800420e <I2C_Slave_ISR_IT+0xb0>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041f6:	d00a      	beq.n	800420e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fc54 	bl	8004aae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f926 	bl	8004458 <I2C_ITSlaveSeqCplt>
 800420c:	e01c      	b.n	8004248 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2210      	movs	r2, #16
 8004214:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004216:	e08f      	b.n	8004338 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <I2C_Slave_ISR_IT+0xdc>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004238:	d17e      	bne.n	8004338 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	4619      	mov	r1, r3
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fb1d 	bl	8004880 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004246:	e077      	b.n	8004338 <I2C_Slave_ISR_IT+0x1da>
 8004248:	e076      	b.n	8004338 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02f      	beq.n	80042b4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02a      	beq.n	80042b4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d018      	beq.n	800429a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d14b      	bne.n	800433c <I2C_Slave_ISR_IT+0x1de>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042aa:	d047      	beq.n	800433c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f8d3 	bl	8004458 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80042b2:	e043      	b.n	800433c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f840 	bl	8004350 <I2C_ITAddrCplt>
 80042d0:	e035      	b.n	800433e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d030      	beq.n	800433e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02b      	beq.n	800433e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004320:	e00d      	b.n	800433e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004328:	d002      	beq.n	8004330 <I2C_Slave_ISR_IT+0x1d2>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f891 	bl	8004458 <I2C_ITSlaveSeqCplt>
 8004336:	e002      	b.n	800433e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800433c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004366:	2b28      	cmp	r3, #40	@ 0x28
 8004368:	d16a      	bne.n	8004440 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b29b      	uxth	r3, r3
 8004384:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004388:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004396:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80043a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d138      	bne.n	8004420 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	09db      	lsrs	r3, r3, #7
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	4053      	eors	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f003 0306 	and.w	r3, r3, #6
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11c      	bne.n	80043fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d13b      	bne.n	8004450 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2208      	movs	r2, #8
 80043e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043ee:	89ba      	ldrh	r2, [r7, #12]
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fe86 	bl	8004106 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043fa:	e029      	b.n	8004450 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004400:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fb94 	bl	8004b32 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004412:	89ba      	ldrh	r2, [r7, #12]
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fe74 	bl	8004106 <HAL_I2C_AddrCallback>
}
 800441e:	e017      	b.n	8004450 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004420:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fb84 	bl	8004b32 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004432:	89ba      	ldrh	r2, [r7, #12]
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fe64 	bl	8004106 <HAL_I2C_AddrCallback>
}
 800443e:	e007      	b.n	8004450 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2208      	movs	r2, #8
 8004446:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e00c      	b.n	80044a6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b29      	cmp	r3, #41	@ 0x29
 80044b0:	d112      	bne.n	80044d8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2228      	movs	r2, #40	@ 0x28
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2221      	movs	r2, #33	@ 0x21
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fb35 	bl	8004b32 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fe04 	bl	80040de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044d6:	e017      	b.n	8004508 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80044e2:	d111      	bne.n	8004508 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2228      	movs	r2, #40	@ 0x28
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2222      	movs	r2, #34	@ 0x22
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044f2:	2102      	movs	r1, #2
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb1c 	bl	8004b32 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fdf5 	bl	80040f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004532:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2220      	movs	r2, #32
 800453a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800453c:	7afb      	ldrb	r3, [r7, #11]
 800453e:	2b21      	cmp	r3, #33	@ 0x21
 8004540:	d002      	beq.n	8004548 <I2C_ITSlaveCplt+0x38>
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	2b29      	cmp	r3, #41	@ 0x29
 8004546:	d108      	bne.n	800455a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004548:	f248 0101 	movw	r1, #32769	@ 0x8001
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 faf0 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2221      	movs	r2, #33	@ 0x21
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
 8004558:	e019      	b.n	800458e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	2b22      	cmp	r3, #34	@ 0x22
 800455e:	d002      	beq.n	8004566 <I2C_ITSlaveCplt+0x56>
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d108      	bne.n	8004578 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004566:	f248 0102 	movw	r1, #32770	@ 0x8002
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fae1 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2222      	movs	r2, #34	@ 0x22
 8004574:	631a      	str	r2, [r3, #48]	@ 0x30
 8004576:	e00a      	b.n	800458e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	2b28      	cmp	r3, #40	@ 0x28
 800457c:	d107      	bne.n	800458e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800457e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fad5 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800459c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b89      	ldr	r3, [pc, #548]	@ (80047d0 <I2C_ITSlaveCplt+0x2c0>)
 80045aa:	400b      	ands	r3, r1
 80045ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa7d 	bl	8004aae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01f      	beq.n	8004616 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045e4:	e017      	b.n	8004616 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	d049      	beq.n	8004716 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004688:	2b00      	cmp	r3, #0
 800468a:	d044      	beq.n	8004716 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d128      	bne.n	80046e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b28      	cmp	r3, #40	@ 0x28
 80046a0:	d108      	bne.n	80046b4 <I2C_ITSlaveCplt+0x1a4>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a8:	d104      	bne.n	80046b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f893 	bl	80047d8 <I2C_ITListenCplt>
 80046b2:	e030      	b.n	8004716 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b29      	cmp	r3, #41	@ 0x29
 80046be:	d10e      	bne.n	80046de <I2C_ITSlaveCplt+0x1ce>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046c6:	d00a      	beq.n	80046de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f9ec 	bl	8004aae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff febe 	bl	8004458 <I2C_ITSlaveSeqCplt>
 80046dc:	e01b      	b.n	8004716 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2210      	movs	r2, #16
 80046e4:	61da      	str	r2, [r3, #28]
 80046e6:	e016      	b.n	8004716 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2210      	movs	r2, #16
 80046ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <I2C_ITSlaveCplt+0x1fa>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004708:	d105      	bne.n	8004716 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8b5 	bl	8004880 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8a4 	bl	8004880 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b28      	cmp	r3, #40	@ 0x28
 8004742:	d141      	bne.n	80047c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f846 	bl	80047d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800474c:	e03c      	b.n	80047c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004756:	d014      	beq.n	8004782 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fe7d 	bl	8004458 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1c      	ldr	r2, [pc, #112]	@ (80047d4 <I2C_ITSlaveCplt+0x2c4>)
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fcd1 	bl	8004122 <HAL_I2C_ListenCpltCallback>
}
 8004780:	e022      	b.n	80047c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b22      	cmp	r3, #34	@ 0x22
 800478c:	d10e      	bne.n	80047ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fca4 	bl	80040f2 <HAL_I2C_SlaveRxCpltCallback>
}
 80047aa:	e00d      	b.n	80047c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fc8b 	bl	80040de <HAL_I2C_SlaveTxCpltCallback>
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	fe00e800 	.word	0xfe00e800
 80047d4:	ffff0000 	.word	0xffff0000

080047d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a25      	ldr	r2, [pc, #148]	@ (800487c <I2C_ITListenCplt+0xa4>)
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d022      	beq.n	8004854 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004854:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f96a 	bl	8004b32 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fc57 	bl	8004122 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	ffff0000 	.word	0xffff0000

08004880 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004890:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a6d      	ldr	r2, [pc, #436]	@ (8004a54 <I2C_ITError+0x1d4>)
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b28      	cmp	r3, #40	@ 0x28
 80048b6:	d005      	beq.n	80048c4 <I2C_ITError+0x44>
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b29      	cmp	r3, #41	@ 0x29
 80048bc:	d002      	beq.n	80048c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c2:	d10b      	bne.n	80048dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048c4:	2103      	movs	r1, #3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f933 	bl	8004b32 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2228      	movs	r2, #40	@ 0x28
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a60      	ldr	r2, [pc, #384]	@ (8004a58 <I2C_ITError+0x1d8>)
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80048da:	e030      	b.n	800493e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f926 	bl	8004b32 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8e1 	bl	8004aae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b60      	cmp	r3, #96	@ 0x60
 80048f6:	d01f      	beq.n	8004938 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d114      	bne.n	8004938 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b10      	cmp	r3, #16
 800491a:	d109      	bne.n	8004930 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	f043 0204 	orr.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2220      	movs	r2, #32
 8004936:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d039      	beq.n	80049c0 <I2C_ITError+0x140>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b11      	cmp	r3, #17
 8004950:	d002      	beq.n	8004958 <I2C_ITError+0xd8>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b21      	cmp	r3, #33	@ 0x21
 8004956:	d133      	bne.n	80049c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004966:	d107      	bne.n	8004978 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004976:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fd11 	bl	80033a4 <HAL_DMA_GetState>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d017      	beq.n	80049b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	4a33      	ldr	r2, [pc, #204]	@ (8004a5c <I2C_ITError+0x1dc>)
 800498e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fbeb 	bl	8003178 <HAL_DMA_Abort_IT>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d04d      	beq.n	8004a44 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049b2:	4610      	mov	r0, r2
 80049b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049b6:	e045      	b.n	8004a44 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f851 	bl	8004a60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049be:	e041      	b.n	8004a44 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d039      	beq.n	8004a3c <I2C_ITError+0x1bc>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b12      	cmp	r3, #18
 80049cc:	d002      	beq.n	80049d4 <I2C_ITError+0x154>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b22      	cmp	r3, #34	@ 0x22
 80049d2:	d133      	bne.n	8004a3c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e2:	d107      	bne.n	80049f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fcd3 	bl	80033a4 <HAL_DMA_GetState>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d017      	beq.n	8004a34 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <I2C_ITError+0x1dc>)
 8004a0a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fbad 	bl	8003178 <HAL_DMA_Abort_IT>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d011      	beq.n	8004a48 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a32:	e009      	b.n	8004a48 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f813 	bl	8004a60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a3a:	e005      	b.n	8004a48 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f80f 	bl	8004a60 <I2C_TreatErrorCallback>
  }
}
 8004a42:	e002      	b.n	8004a4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a48:	bf00      	nop
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	ffff0000 	.word	0xffff0000
 8004a58:	0800415f 	.word	0x0800415f
 8004a5c:	08004af7 	.word	0x08004af7

08004a60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b60      	cmp	r3, #96	@ 0x60
 8004a72:	d10e      	bne.n	8004a92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fb5d 	bl	800414a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a90:	e009      	b.n	8004aa6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fb48 	bl	8004136 <HAL_I2C_ErrorCallback>
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d103      	bne.n	8004acc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d007      	beq.n	8004aea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	619a      	str	r2, [r3, #24]
  }
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	2200      	movs	r2, #0
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	2200      	movs	r2, #0
 8004b22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff ff9b 	bl	8004a60 <I2C_TreatErrorCallback>
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b42:	887b      	ldrh	r3, [r7, #2]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00f      	beq.n	8004b6c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004b52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b60:	2b28      	cmp	r3, #40	@ 0x28
 8004b62:	d003      	beq.n	8004b6c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00f      	beq.n	8004b96 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004b7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b8a:	2b28      	cmp	r3, #40	@ 0x28
 8004b8c:	d003      	beq.n	8004b96 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004b94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da03      	bge.n	8004ba6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d103      	bne.n	8004bb4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d103      	bne.n	8004bc2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d103      	bne.n	8004bd0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	400a      	ands	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d138      	bne.n	8004c76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e032      	b.n	8004c78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2224      	movs	r2, #36	@ 0x24
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6819      	ldr	r1, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d139      	bne.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e033      	b.n	8004d10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d141      	bne.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d36:	d131      	bne.n	8004d9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d38:	4b47      	ldr	r3, [pc, #284]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d3e:	4a46      	ldr	r2, [pc, #280]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d48:	4b43      	ldr	r3, [pc, #268]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d50:	4a41      	ldr	r2, [pc, #260]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d58:	4b40      	ldr	r3, [pc, #256]	@ (8004e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2232      	movs	r2, #50	@ 0x32
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	4a3f      	ldr	r2, [pc, #252]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	0c9b      	lsrs	r3, r3, #18
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d6e:	e002      	b.n	8004d76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d76:	4b38      	ldr	r3, [pc, #224]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d82:	d102      	bne.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f2      	bne.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d8a:	4b33      	ldr	r3, [pc, #204]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d96:	d158      	bne.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e057      	b.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004dac:	e04d      	b.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db4:	d141      	bne.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004db6:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d131      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc4:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dca:	4a23      	ldr	r2, [pc, #140]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd4:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2232      	movs	r2, #50	@ 0x32
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	0c9b      	lsrs	r3, r3, #18
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfa:	e002      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d102      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f2      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d112      	bne.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e011      	b.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e38:	e007      	b.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e42:	4a05      	ldr	r2, [pc, #20]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	431bde83 	.word	0x431bde83

08004e64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e72:	6093      	str	r3, [r2, #8]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40007000 	.word	0x40007000

08004e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e2fe      	b.n	8005494 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea2:	4b97      	ldr	r3, [pc, #604]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eac:	4b94      	ldr	r3, [pc, #592]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x3e>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d002      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x44>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x108>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e2d9      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x74>
 8004eea:	4b85      	ldr	r3, [pc, #532]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a84      	ldr	r2, [pc, #528]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x98>
 8004f02:	4b7f      	ldr	r3, [pc, #508]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7e      	ldr	r2, [pc, #504]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7b      	ldr	r2, [pc, #492]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	4b78      	ldr	r3, [pc, #480]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a77      	ldr	r2, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a74      	ldr	r2, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fa60 	bl	8001400 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fc fa5c 	bl	8001400 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e29e      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f56:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xc0>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fa4c 	bl	8001400 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fc fa48 	bl	8001400 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e28a      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f7e:	4b60      	ldr	r3, [pc, #384]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe8>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d075      	beq.n	8005086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b59      	ldr	r3, [pc, #356]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b56      	ldr	r3, [pc, #344]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x136>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x13c>
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11f      	bne.n	8005000 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x154>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e25d      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b49      	ldr	r3, [pc, #292]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	4946      	ldr	r1, [pc, #280]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fec:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <HAL_RCC_OscConfig+0x280>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc f9b9 	bl	8001368 <HAL_InitTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d043      	beq.n	8005084 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e249      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b3d      	ldr	r3, [pc, #244]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3c      	ldr	r2, [pc, #240]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc f9f4 	bl	8001400 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501c:	f7fc f9f0 	bl	8001400 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e232      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800502e:	4b34      	ldr	r3, [pc, #208]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b31      	ldr	r3, [pc, #196]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	492d      	ldr	r1, [pc, #180]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
 800504e:	e01a      	b.n	8005086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005050:	4b2b      	ldr	r3, [pc, #172]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2a      	ldr	r2, [pc, #168]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fc f9d0 	bl	8001400 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fc f9cc 	bl	8001400 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e20e      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1e0>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d041      	beq.n	8005116 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01c      	beq.n	80050d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a0:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fc f9a9 	bl	8001400 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fc f9a5 	bl	8001400 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1e7      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ef      	beq.n	80050b2 <HAL_RCC_OscConfig+0x22e>
 80050d2:	e020      	b.n	8005116 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc f98c 	bl	8001400 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ea:	e00d      	b.n	8005108 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fc f988 	bl	8001400 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d906      	bls.n	8005108 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e1ca      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000
 8005104:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005108:	4b8c      	ldr	r3, [pc, #560]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ea      	bne.n	80050ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80a6 	beq.w	8005270 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005128:	4b84      	ldr	r3, [pc, #528]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_OscConfig+0x2b4>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x2b6>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	4a7e      	ldr	r2, [pc, #504]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	4b7c      	ldr	r3, [pc, #496]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515a:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d118      	bne.n	8005198 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005166:	4b76      	ldr	r3, [pc, #472]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a75      	ldr	r2, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005172:	f7fc f945 	bl	8001400 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fc f941 	bl	8001400 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e183      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518c:	4b6c      	ldr	r3, [pc, #432]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d108      	bne.n	80051b2 <HAL_RCC_OscConfig+0x32e>
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a6:	4a65      	ldr	r2, [pc, #404]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051b0:	e024      	b.n	80051fc <HAL_RCC_OscConfig+0x378>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d110      	bne.n	80051dc <HAL_RCC_OscConfig+0x358>
 80051ba:	4b60      	ldr	r3, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	4a5e      	ldr	r2, [pc, #376]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ca:	4b5c      	ldr	r3, [pc, #368]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051da:	e00f      	b.n	80051fc <HAL_RCC_OscConfig+0x378>
 80051dc:	4b57      	ldr	r3, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	4a56      	ldr	r2, [pc, #344]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ec:	4b53      	ldr	r3, [pc, #332]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f2:	4a52      	ldr	r2, [pc, #328]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fc f8fc 	bl	8001400 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fc f8f8 	bl	8001400 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e138      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	4b46      	ldr	r3, [pc, #280]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ed      	beq.n	800520c <HAL_RCC_OscConfig+0x388>
 8005230:	e015      	b.n	800525e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005232:	f7fc f8e5 	bl	8001400 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fc f8e1 	bl	8001400 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e121      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005250:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ed      	bne.n	800523a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800525e:	7ffb      	ldrb	r3, [r7, #31]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005284:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800528a:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fc f8b4 	bl	8001400 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800529c:	f7fc f8b0 	bl	8001400 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0f2      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ef      	beq.n	800529c <HAL_RCC_OscConfig+0x418>
 80052bc:	e01b      	b.n	80052f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052be:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ce:	f7fc f897 	bl	8001400 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d6:	f7fc f893 	bl	8001400 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0d5      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052e8:	4b14      	ldr	r3, [pc, #80]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ef      	bne.n	80052d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80c9 	beq.w	8005492 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005300:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b0c      	cmp	r3, #12
 800530a:	f000 8083 	beq.w	8005414 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d15e      	bne.n	80053d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a08      	ldr	r2, [pc, #32]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc f86d 	bl	8001400 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	e00c      	b.n	8005344 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7fc f869 	bl	8001400 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d905      	bls.n	8005344 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0ab      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
 800533c:	40021000 	.word	0x40021000
 8005340:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005344:	4b55      	ldr	r3, [pc, #340]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ec      	bne.n	800532a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005350:	4b52      	ldr	r3, [pc, #328]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	4b52      	ldr	r3, [pc, #328]	@ (80054a0 <HAL_RCC_OscConfig+0x61c>)
 8005356:	4013      	ands	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6a11      	ldr	r1, [r2, #32]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005360:	3a01      	subs	r2, #1
 8005362:	0112      	lsls	r2, r2, #4
 8005364:	4311      	orrs	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800536a:	0212      	lsls	r2, r2, #8
 800536c:	4311      	orrs	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005372:	0852      	lsrs	r2, r2, #1
 8005374:	3a01      	subs	r2, #1
 8005376:	0552      	lsls	r2, r2, #21
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800537e:	0852      	lsrs	r2, r2, #1
 8005380:	3a01      	subs	r2, #1
 8005382:	0652      	lsls	r2, r2, #25
 8005384:	4311      	orrs	r1, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800538a:	06d2      	lsls	r2, r2, #27
 800538c:	430a      	orrs	r2, r1
 800538e:	4943      	ldr	r1, [pc, #268]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005390:	4313      	orrs	r3, r2
 8005392:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005394:	4b41      	ldr	r3, [pc, #260]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a40      	ldr	r2, [pc, #256]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800539e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053a0:	4b3e      	ldr	r3, [pc, #248]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4a3d      	ldr	r2, [pc, #244]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fc f828 	bl	8001400 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fc f824 	bl	8001400 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e066      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	4b35      	ldr	r3, [pc, #212]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x530>
 80053d2:	e05e      	b.n	8005492 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d4:	4b31      	ldr	r3, [pc, #196]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a30      	ldr	r2, [pc, #192]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fc f80e 	bl	8001400 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fc f80a 	bl	8001400 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e04c      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fa:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005406:	4b25      	ldr	r3, [pc, #148]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	4924      	ldr	r1, [pc, #144]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 800540c:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <HAL_RCC_OscConfig+0x620>)
 800540e:	4013      	ands	r3, r2
 8005410:	60cb      	str	r3, [r1, #12]
 8005412:	e03e      	b.n	8005492 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e039      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005420:	4b1e      	ldr	r3, [pc, #120]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f003 0203 	and.w	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	429a      	cmp	r2, r3
 8005432:	d12c      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d123      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d11b      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d113      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	3b01      	subs	r3, #1
 8005474:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d109      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	3b01      	subs	r3, #1
 8005488:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	019f800c 	.word	0x019f800c
 80054a4:	feeefffc 	.word	0xfeeefffc

080054a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e11e      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b91      	ldr	r3, [pc, #580]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d910      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 020f 	bic.w	r2, r3, #15
 80054d6:	498c      	ldr	r1, [pc, #560]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b8a      	ldr	r3, [pc, #552]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e106      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d073      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d129      	bne.n	8005558 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005504:	4b81      	ldr	r3, [pc, #516]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0f4      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005514:	f000 f966 	bl	80057e4 <RCC_GetSysClockFreqFromPLLSource>
 8005518:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4a7c      	ldr	r2, [pc, #496]	@ (8005710 <HAL_RCC_ClockConfig+0x268>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d93f      	bls.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005522:	4b7a      	ldr	r3, [pc, #488]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d033      	beq.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800553e:	2b00      	cmp	r3, #0
 8005540:	d12f      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005542:	4b72      	ldr	r3, [pc, #456]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	4a70      	ldr	r2, [pc, #448]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 800554c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005550:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e024      	b.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d107      	bne.n	8005570 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005560:	4b6a      	ldr	r3, [pc, #424]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0c6      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005570:	4b66      	ldr	r3, [pc, #408]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0be      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005580:	f000 f8ce 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8005584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a61      	ldr	r2, [pc, #388]	@ (8005710 <HAL_RCC_ClockConfig+0x268>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d909      	bls.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800558e:	4b5f      	ldr	r3, [pc, #380]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005596:	4a5d      	ldr	r2, [pc, #372]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a2:	4b5a      	ldr	r3, [pc, #360]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f023 0203 	bic.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4957      	ldr	r1, [pc, #348]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b4:	f7fb ff24 	bl	8001400 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055bc:	f7fb ff20 	bl	8001400 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e095      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d2:	4b4e      	ldr	r3, [pc, #312]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 020c 	and.w	r2, r3, #12
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1eb      	bne.n	80055bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d023      	beq.n	8005638 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b43      	ldr	r3, [pc, #268]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a42      	ldr	r2, [pc, #264]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005606:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005614:	4b3d      	ldr	r3, [pc, #244]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800561c:	4a3b      	ldr	r2, [pc, #236]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 800561e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b39      	ldr	r3, [pc, #228]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4936      	ldr	r1, [pc, #216]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	e008      	b.n	800564a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d105      	bne.n	800564a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800563e:	4b33      	ldr	r3, [pc, #204]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4a32      	ldr	r2, [pc, #200]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005648:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800564a:	4b2f      	ldr	r3, [pc, #188]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d21d      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005658:	4b2b      	ldr	r3, [pc, #172]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 020f 	bic.w	r2, r3, #15
 8005660:	4929      	ldr	r1, [pc, #164]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005668:	f7fb feca 	bl	8001400 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fb fec6 	bl	8001400 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e03b      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d1ed      	bne.n	8005670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4917      	ldr	r1, [pc, #92]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	490f      	ldr	r1, [pc, #60]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056d2:	f000 f825 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	490c      	ldr	r1, [pc, #48]	@ (8005714 <HAL_RCC_ClockConfig+0x26c>)
 80056e4:	5ccb      	ldrb	r3, [r1, r3]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	fa22 f303 	lsr.w	r3, r2, r3
 80056ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <HAL_RCC_ClockConfig+0x270>)
 80056f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <HAL_RCC_ClockConfig+0x274>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fb fe36 	bl	8001368 <HAL_InitTick>
 80056fc:	4603      	mov	r3, r0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40022000 	.word	0x40022000
 800570c:	40021000 	.word	0x40021000
 8005710:	04c4b400 	.word	0x04c4b400
 8005714:	08006a8c 	.word	0x08006a8c
 8005718:	20000000 	.word	0x20000000
 800571c:	20000004 	.word	0x20000004

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005726:	4b2c      	ldr	r3, [pc, #176]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b04      	cmp	r3, #4
 8005730:	d102      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005732:	4b2a      	ldr	r3, [pc, #168]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e047      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b08      	cmp	r3, #8
 8005742:	d102      	bne.n	800574a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e03e      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800574a:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d136      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005756:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005760:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	3301      	adds	r3, #1
 800576c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d10c      	bne.n	800578e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005774:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800577e:	68d2      	ldr	r2, [r2, #12]
 8005780:	0a12      	lsrs	r2, r2, #8
 8005782:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800578e:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	4a10      	ldr	r2, [pc, #64]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	0a12      	lsrs	r2, r2, #8
 800579c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
      break;
 80057a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0e5b      	lsrs	r3, r3, #25
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	3301      	adds	r3, #1
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e001      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057c8:	693b      	ldr	r3, [r7, #16]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	00f42400 	.word	0x00f42400
 80057e0:	016e3600 	.word	0x016e3600

080057e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d10c      	bne.n	8005822 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005808:	4a17      	ldr	r2, [pc, #92]	@ (8005868 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	4a14      	ldr	r2, [pc, #80]	@ (8005864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	0a12      	lsrs	r2, r2, #8
 8005816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	617b      	str	r3, [r7, #20]
    break;
 8005820:	e00c      	b.n	800583c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005822:	4a12      	ldr	r2, [pc, #72]	@ (800586c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	4a0e      	ldr	r2, [pc, #56]	@ (8005864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800582c:	68d2      	ldr	r2, [r2, #12]
 800582e:	0a12      	lsrs	r2, r2, #8
 8005830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005834:	fb02 f303 	mul.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]
    break;
 800583a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800583c:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	0e5b      	lsrs	r3, r3, #25
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	3301      	adds	r3, #1
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005856:	687b      	ldr	r3, [r7, #4]
}
 8005858:	4618      	mov	r0, r3
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40021000 	.word	0x40021000
 8005868:	016e3600 	.word	0x016e3600
 800586c:	00f42400 	.word	0x00f42400

08005870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005878:	2300      	movs	r3, #0
 800587a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800587c:	2300      	movs	r3, #0
 800587e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8098 	beq.w	80059be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588e:	2300      	movs	r3, #0
 8005890:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005892:	4b43      	ldr	r3, [pc, #268]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10d      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589e:	4b40      	ldr	r3, [pc, #256]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	4a3f      	ldr	r2, [pc, #252]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058aa:	4b3d      	ldr	r3, [pc, #244]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b6:	2301      	movs	r3, #1
 80058b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ba:	4b3a      	ldr	r3, [pc, #232]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a39      	ldr	r2, [pc, #228]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c6:	f7fb fd9b 	bl	8001400 <HAL_GetTick>
 80058ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058cc:	e009      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ce:	f7fb fd97 	bl	8001400 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d902      	bls.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	74fb      	strb	r3, [r7, #19]
        break;
 80058e0:	e005      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e2:	4b30      	ldr	r3, [pc, #192]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ef      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058ee:	7cfb      	ldrb	r3, [r7, #19]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d159      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058f4:	4b2a      	ldr	r3, [pc, #168]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01e      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	429a      	cmp	r2, r3
 800590e:	d019      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005910:	4b23      	ldr	r3, [pc, #140]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800591c:	4b20      	ldr	r3, [pc, #128]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005922:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800592c:	4b1c      	ldr	r3, [pc, #112]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	4a1b      	ldr	r2, [pc, #108]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800593c:	4a18      	ldr	r2, [pc, #96]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fb fd57 	bl	8001400 <HAL_GetTick>
 8005952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005954:	e00b      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005956:	f7fb fd53 	bl	8001400 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005964:	4293      	cmp	r3, r2
 8005966:	d902      	bls.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	74fb      	strb	r3, [r7, #19]
            break;
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800596e:	4b0c      	ldr	r3, [pc, #48]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ec      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005982:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	4903      	ldr	r1, [pc, #12]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005998:	e008      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	74bb      	strb	r3, [r7, #18]
 800599e:	e005      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ac:	7c7b      	ldrb	r3, [r7, #17]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b6:	4aa6      	ldr	r2, [pc, #664]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ca:	4ba1      	ldr	r3, [pc, #644]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f023 0203 	bic.w	r2, r3, #3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	499d      	ldr	r1, [pc, #628]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ec:	4b98      	ldr	r3, [pc, #608]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f023 020c 	bic.w	r2, r3, #12
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	4995      	ldr	r1, [pc, #596]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a0e:	4b90      	ldr	r3, [pc, #576]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	498c      	ldr	r1, [pc, #560]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a30:	4b87      	ldr	r3, [pc, #540]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4984      	ldr	r1, [pc, #528]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a52:	4b7f      	ldr	r3, [pc, #508]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	497b      	ldr	r1, [pc, #492]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a74:	4b76      	ldr	r3, [pc, #472]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	4973      	ldr	r1, [pc, #460]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a96:	4b6e      	ldr	r3, [pc, #440]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	496a      	ldr	r1, [pc, #424]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab8:	4b65      	ldr	r3, [pc, #404]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	4962      	ldr	r1, [pc, #392]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ada:	4b5d      	ldr	r3, [pc, #372]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	4959      	ldr	r1, [pc, #356]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005afc:	4b54      	ldr	r3, [pc, #336]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b02:	f023 0203 	bic.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	4951      	ldr	r1, [pc, #324]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4948      	ldr	r1, [pc, #288]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b40:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	4940      	ldr	r1, [pc, #256]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b3b      	ldr	r3, [pc, #236]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a3a      	ldr	r2, [pc, #232]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b78:	4b35      	ldr	r3, [pc, #212]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	4932      	ldr	r1, [pc, #200]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b98:	4b2d      	ldr	r3, [pc, #180]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bb0:	4b27      	ldr	r3, [pc, #156]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	4924      	ldr	r1, [pc, #144]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d015      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005be8:	4b19      	ldr	r3, [pc, #100]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	4916      	ldr	r1, [pc, #88]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c06:	d105      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c08:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a10      	ldr	r2, [pc, #64]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d019      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	4908      	ldr	r1, [pc, #32]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3e:	d109      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c40:	4b03      	ldr	r3, [pc, #12]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a02      	ldr	r2, [pc, #8]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	60d3      	str	r3, [r2, #12]
 8005c4c:	e002      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c60:	4b29      	ldr	r3, [pc, #164]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	4926      	ldr	r1, [pc, #152]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c80:	4b21      	ldr	r3, [pc, #132]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a20      	ldr	r2, [pc, #128]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d015      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c98:	4b1b      	ldr	r3, [pc, #108]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca6:	4918      	ldr	r1, [pc, #96]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cb8:	4b13      	ldr	r3, [pc, #76]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a12      	ldr	r2, [pc, #72]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cde:	490a      	ldr	r1, [pc, #40]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cee:	d105      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000

08005d0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e049      	b.n	8005db2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb f9cc 	bl	80010d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 f94a 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0ff      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b14      	cmp	r3, #20
 8005de6:	f200 80f0 	bhi.w	8005fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e45 	.word	0x08005e45
 8005df4:	08005fcb 	.word	0x08005fcb
 8005df8:	08005fcb 	.word	0x08005fcb
 8005dfc:	08005fcb 	.word	0x08005fcb
 8005e00:	08005e85 	.word	0x08005e85
 8005e04:	08005fcb 	.word	0x08005fcb
 8005e08:	08005fcb 	.word	0x08005fcb
 8005e0c:	08005fcb 	.word	0x08005fcb
 8005e10:	08005ec7 	.word	0x08005ec7
 8005e14:	08005fcb 	.word	0x08005fcb
 8005e18:	08005fcb 	.word	0x08005fcb
 8005e1c:	08005fcb 	.word	0x08005fcb
 8005e20:	08005f07 	.word	0x08005f07
 8005e24:	08005fcb 	.word	0x08005fcb
 8005e28:	08005fcb 	.word	0x08005fcb
 8005e2c:	08005fcb 	.word	0x08005fcb
 8005e30:	08005f49 	.word	0x08005f49
 8005e34:	08005fcb 	.word	0x08005fcb
 8005e38:	08005fcb 	.word	0x08005fcb
 8005e3c:	08005fcb 	.word	0x08005fcb
 8005e40:	08005f89 	.word	0x08005f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f97e 	bl	800614c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
      break;
 8005e82:	e0a5      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f9f8 	bl	8006280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6999      	ldr	r1, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	619a      	str	r2, [r3, #24]
      break;
 8005ec4:	e084      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fa6b 	bl	80063a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0208 	orr.w	r2, r2, #8
 8005ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0204 	bic.w	r2, r2, #4
 8005ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	61da      	str	r2, [r3, #28]
      break;
 8005f04:	e064      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fadd 	bl	80064cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	61da      	str	r2, [r3, #28]
      break;
 8005f46:	e043      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fb50 	bl	80065f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0208 	orr.w	r2, r2, #8
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0204 	bic.w	r2, r2, #4
 8005f72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f86:	e023      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fb9a 	bl	80066c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fc8:	e002      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8006128 <TIM_Base_SetConfig+0x144>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d017      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a49      	ldr	r2, [pc, #292]	@ (800612c <TIM_Base_SetConfig+0x148>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a48      	ldr	r2, [pc, #288]	@ (8006130 <TIM_Base_SetConfig+0x14c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a47      	ldr	r2, [pc, #284]	@ (8006134 <TIM_Base_SetConfig+0x150>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a46      	ldr	r2, [pc, #280]	@ (8006138 <TIM_Base_SetConfig+0x154>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x48>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a45      	ldr	r2, [pc, #276]	@ (800613c <TIM_Base_SetConfig+0x158>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a39      	ldr	r2, [pc, #228]	@ (8006128 <TIM_Base_SetConfig+0x144>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d023      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d01f      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a36      	ldr	r2, [pc, #216]	@ (800612c <TIM_Base_SetConfig+0x148>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01b      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a35      	ldr	r2, [pc, #212]	@ (8006130 <TIM_Base_SetConfig+0x14c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d017      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a34      	ldr	r2, [pc, #208]	@ (8006134 <TIM_Base_SetConfig+0x150>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a33      	ldr	r2, [pc, #204]	@ (8006138 <TIM_Base_SetConfig+0x154>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a33      	ldr	r2, [pc, #204]	@ (8006140 <TIM_Base_SetConfig+0x15c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a32      	ldr	r2, [pc, #200]	@ (8006144 <TIM_Base_SetConfig+0x160>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a31      	ldr	r2, [pc, #196]	@ (8006148 <TIM_Base_SetConfig+0x164>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0xaa>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2c      	ldr	r2, [pc, #176]	@ (800613c <TIM_Base_SetConfig+0x158>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <TIM_Base_SetConfig+0x144>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <TIM_Base_SetConfig+0x110>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006138 <TIM_Base_SetConfig+0x154>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00f      	beq.n	80060f4 <TIM_Base_SetConfig+0x110>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006140 <TIM_Base_SetConfig+0x15c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_Base_SetConfig+0x110>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <TIM_Base_SetConfig+0x160>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_Base_SetConfig+0x110>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_Base_SetConfig+0x164>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_Base_SetConfig+0x110>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a13      	ldr	r2, [pc, #76]	@ (800613c <TIM_Base_SetConfig+0x158>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d103      	bne.n	80060fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d105      	bne.n	800611a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]
  }
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40013400 	.word	0x40013400
 800613c:	40015000 	.word	0x40015000
 8006140:	40014000 	.word	0x40014000
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800

0800614c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f023 0201 	bic.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 0302 	bic.w	r3, r3, #2
 8006198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a30      	ldr	r2, [pc, #192]	@ (8006268 <TIM_OC1_SetConfig+0x11c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <TIM_OC1_SetConfig+0x88>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <TIM_OC1_SetConfig+0x120>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_OC1_SetConfig+0x88>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006270 <TIM_OC1_SetConfig+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_OC1_SetConfig+0x88>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a2d      	ldr	r2, [pc, #180]	@ (8006274 <TIM_OC1_SetConfig+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_OC1_SetConfig+0x88>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006278 <TIM_OC1_SetConfig+0x12c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC1_SetConfig+0x88>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2b      	ldr	r2, [pc, #172]	@ (800627c <TIM_OC1_SetConfig+0x130>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d10c      	bne.n	80061ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0308 	bic.w	r3, r3, #8
 80061da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <TIM_OC1_SetConfig+0x11c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <TIM_OC1_SetConfig+0xd2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <TIM_OC1_SetConfig+0x120>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_OC1_SetConfig+0xd2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <TIM_OC1_SetConfig+0x124>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_OC1_SetConfig+0xd2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <TIM_OC1_SetConfig+0x128>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_OC1_SetConfig+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <TIM_OC1_SetConfig+0x12c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC1_SetConfig+0xd2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_OC1_SetConfig+0x130>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d111      	bne.n	8006242 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	40015000 	.word	0x40015000

08006280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f023 0210 	bic.w	r2, r3, #16
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0320 	bic.w	r3, r3, #32
 80062ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2c      	ldr	r2, [pc, #176]	@ (8006390 <TIM_OC2_SetConfig+0x110>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d007      	beq.n	80062f4 <TIM_OC2_SetConfig+0x74>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006394 <TIM_OC2_SetConfig+0x114>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC2_SetConfig+0x74>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006398 <TIM_OC2_SetConfig+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10d      	bne.n	8006310 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a1f      	ldr	r2, [pc, #124]	@ (8006390 <TIM_OC2_SetConfig+0x110>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <TIM_OC2_SetConfig+0xc0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1e      	ldr	r2, [pc, #120]	@ (8006394 <TIM_OC2_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00f      	beq.n	8006340 <TIM_OC2_SetConfig+0xc0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a1e      	ldr	r2, [pc, #120]	@ (800639c <TIM_OC2_SetConfig+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_OC2_SetConfig+0xc0>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1d      	ldr	r2, [pc, #116]	@ (80063a0 <TIM_OC2_SetConfig+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC2_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1c      	ldr	r2, [pc, #112]	@ (80063a4 <TIM_OC2_SetConfig+0x124>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC2_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <TIM_OC2_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d113      	bne.n	8006368 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800634e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40015000 	.word	0x40015000
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2b      	ldr	r2, [pc, #172]	@ (80064b4 <TIM_OC3_SetConfig+0x10c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <TIM_OC3_SetConfig+0x72>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2a      	ldr	r2, [pc, #168]	@ (80064b8 <TIM_OC3_SetConfig+0x110>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC3_SetConfig+0x72>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a29      	ldr	r2, [pc, #164]	@ (80064bc <TIM_OC3_SetConfig+0x114>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1e      	ldr	r2, [pc, #120]	@ (80064b4 <TIM_OC3_SetConfig+0x10c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <TIM_OC3_SetConfig+0xbe>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <TIM_OC3_SetConfig+0x110>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_OC3_SetConfig+0xbe>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1d      	ldr	r2, [pc, #116]	@ (80064c0 <TIM_OC3_SetConfig+0x118>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_OC3_SetConfig+0xbe>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1c      	ldr	r2, [pc, #112]	@ (80064c4 <TIM_OC3_SetConfig+0x11c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_OC3_SetConfig+0xbe>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <TIM_OC3_SetConfig+0x120>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_OC3_SetConfig+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <TIM_OC3_SetConfig+0x114>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d113      	bne.n	800648e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800646c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40015000 	.word	0x40015000
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800

080064cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800651a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2c      	ldr	r2, [pc, #176]	@ (80065dc <TIM_OC4_SetConfig+0x110>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_OC4_SetConfig+0x74>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2b      	ldr	r2, [pc, #172]	@ (80065e0 <TIM_OC4_SetConfig+0x114>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_OC4_SetConfig+0x74>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <TIM_OC4_SetConfig+0x118>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10d      	bne.n	800655c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	031b      	lsls	r3, r3, #12
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800655a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1f      	ldr	r2, [pc, #124]	@ (80065dc <TIM_OC4_SetConfig+0x110>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_OC4_SetConfig+0xc0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1e      	ldr	r2, [pc, #120]	@ (80065e0 <TIM_OC4_SetConfig+0x114>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_OC4_SetConfig+0xc0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1e      	ldr	r2, [pc, #120]	@ (80065e8 <TIM_OC4_SetConfig+0x11c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_OC4_SetConfig+0xc0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <TIM_OC4_SetConfig+0x120>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_OC4_SetConfig+0xc0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <TIM_OC4_SetConfig+0x124>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC4_SetConfig+0xc0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a17      	ldr	r2, [pc, #92]	@ (80065e4 <TIM_OC4_SetConfig+0x118>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d113      	bne.n	80065b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006592:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800659a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	019b      	lsls	r3, r3, #6
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40015000 	.word	0x40015000
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006638:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a19      	ldr	r2, [pc, #100]	@ (80066b0 <TIM_OC5_SetConfig+0xbc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <TIM_OC5_SetConfig+0x82>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a18      	ldr	r2, [pc, #96]	@ (80066b4 <TIM_OC5_SetConfig+0xc0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_OC5_SetConfig+0x82>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a17      	ldr	r2, [pc, #92]	@ (80066b8 <TIM_OC5_SetConfig+0xc4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_OC5_SetConfig+0x82>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <TIM_OC5_SetConfig+0xc8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_OC5_SetConfig+0x82>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <TIM_OC5_SetConfig+0xcc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC5_SetConfig+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <TIM_OC5_SetConfig+0xd0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d109      	bne.n	800668a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800667c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800
 80066c4:	40015000 	.word	0x40015000

080066c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800670e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	051b      	lsls	r3, r3, #20
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <TIM_OC6_SetConfig+0xc0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <TIM_OC6_SetConfig+0x84>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a19      	ldr	r2, [pc, #100]	@ (800678c <TIM_OC6_SetConfig+0xc4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00f      	beq.n	800674c <TIM_OC6_SetConfig+0x84>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a18      	ldr	r2, [pc, #96]	@ (8006790 <TIM_OC6_SetConfig+0xc8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00b      	beq.n	800674c <TIM_OC6_SetConfig+0x84>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a17      	ldr	r2, [pc, #92]	@ (8006794 <TIM_OC6_SetConfig+0xcc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d007      	beq.n	800674c <TIM_OC6_SetConfig+0x84>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a16      	ldr	r2, [pc, #88]	@ (8006798 <TIM_OC6_SetConfig+0xd0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC6_SetConfig+0x84>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a15      	ldr	r2, [pc, #84]	@ (800679c <TIM_OC6_SetConfig+0xd4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d109      	bne.n	8006760 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40013400 	.word	0x40013400
 8006790:	40014000 	.word	0x40014000
 8006794:	40014400 	.word	0x40014400
 8006798:	40014800 	.word	0x40014800
 800679c:	40015000 	.word	0x40015000

080067a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e074      	b.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a34      	ldr	r2, [pc, #208]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a33      	ldr	r2, [pc, #204]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a31      	ldr	r2, [pc, #196]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d022      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006838:	d01d      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1f      	ldr	r2, [pc, #124]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1c      	ldr	r2, [pc, #112]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a11      	ldr	r2, [pc, #68]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10c      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4313      	orrs	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40013400 	.word	0x40013400
 80068b8:	40015000 	.word	0x40015000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40014000 	.word	0x40014000

080068cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e078      	b.n	80069da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1c      	ldr	r2, [pc, #112]	@ (80069e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a19      	ldr	r2, [pc, #100]	@ (80069f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d11c      	bne.n	80069c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	051b      	lsls	r3, r3, #20
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40015000 	.word	0x40015000

080069f4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <memset>:
 8006a1a:	4402      	add	r2, r0
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d100      	bne.n	8006a24 <memset+0xa>
 8006a22:	4770      	bx	lr
 8006a24:	f803 1b01 	strb.w	r1, [r3], #1
 8006a28:	e7f9      	b.n	8006a1e <memset+0x4>
	...

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	@ (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1b64      	subs	r4, r4, r5
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2600      	movs	r6, #0
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a70 <__libc_init_array+0x44>)
 8006a40:	f000 f818 	bl	8006a74 <_init>
 8006a44:	1b64      	subs	r4, r4, r5
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2600      	movs	r6, #0
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08006a9c 	.word	0x08006a9c
 8006a68:	08006a9c 	.word	0x08006a9c
 8006a6c:	08006a9c 	.word	0x08006a9c
 8006a70:	08006aa0 	.word	0x08006aa0

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
