
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800675c  0800675c  0000775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800676c  0800676c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  0800676c  0800676c  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800676c  0800676c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006774  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08006780  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006780  000082f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f56  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c79  00000000  00000000  0001ff92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00022c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001239  00000000  00000000  00024390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286f8  00000000  00000000  000255c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad8  00000000  00000000  0004dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001128c4  00000000  00000000  00067799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000667c  00000000  00000000  0017a0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006744 	.word	0x08006744

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006744 	.word	0x08006744

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fef3 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f812 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 faf2 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 fabe 	bl	80007a8 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f858 	bl	80002e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000230:	f000 f8de 	bl	80003f0 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000234:	f000 f980 	bl	8000538 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000238:	f000 f9c6 	bl	80005c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800023c:	f000 fa04 	bl	8000648 <MX_TIM1_Init>
  MX_CORDIC_Init();
 8000240:	f000 f966 	bl	8000510 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	bf00      	nop
 8000246:	e7fd      	b.n	8000244 <main+0x2c>

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	@ 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2238      	movs	r2, #56	@ 0x38
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f006 fa47 	bl	80066ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800026a:	2000      	movs	r0, #0
 800026c:	f004 fbbe 	bl	80049ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000278:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2340      	movs	r3, #64	@ 0x40
 800027c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000286:	2304      	movs	r3, #4
 8000288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800028a:	2355      	movs	r3, #85	@ 0x55
 800028c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000292:	2302      	movs	r3, #2
 8000294:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 fc58 	bl	8004b54 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002aa:	f000 fb2f 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2104      	movs	r1, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 ff56 	bl	8005178 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002d2:	f000 fb1b 	bl	800090c <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3750      	adds	r7, #80	@ 0x50
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b092      	sub	sp, #72	@ 0x48
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002f2:	463b      	mov	r3, r7
 80002f4:	223c      	movs	r2, #60	@ 0x3c
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f006 f9f6 	bl	80066ea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b3a      	ldr	r3, [pc, #232]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000306:	4b38      	ldr	r3, [pc, #224]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000308:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b36      	ldr	r3, [pc, #216]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b34      	ldr	r3, [pc, #208]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800031a:	4b33      	ldr	r3, [pc, #204]	@ (80003e8 <MX_ADC1_Init+0x108>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000320:	4b31      	ldr	r3, [pc, #196]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000326:	4b30      	ldr	r3, [pc, #192]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000328:	2204      	movs	r2, #4
 800032a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800032c:	4b2e      	ldr	r3, [pc, #184]	@ (80003e8 <MX_ADC1_Init+0x108>)
 800032e:	2200      	movs	r2, #0
 8000330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000332:	4b2d      	ldr	r3, [pc, #180]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000334:	2200      	movs	r2, #0
 8000336:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b2b      	ldr	r3, [pc, #172]	@ (80003e8 <MX_ADC1_Init+0x108>)
 800033a:	2201      	movs	r2, #1
 800033c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b2a      	ldr	r3, [pc, #168]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000346:	4b28      	ldr	r3, [pc, #160]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034e:	4b26      	ldr	r3, [pc, #152]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000350:	2200      	movs	r2, #0
 8000352:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000354:	4b24      	ldr	r3, [pc, #144]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000356:	2200      	movs	r2, #0
 8000358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	4822      	ldr	r0, [pc, #136]	@ (80003e8 <MX_ADC1_Init+0x108>)
 800035e:	f000 ff9f 	bl	80012a0 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000368:	f000 fad0 	bl	800090c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800036c:	2305      	movs	r3, #5
 800036e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000370:	2300      	movs	r3, #0
 8000372:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000374:	2300      	movs	r3, #0
 8000376:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000378:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800037c:	4619      	mov	r1, r3
 800037e:	481a      	ldr	r0, [pc, #104]	@ (80003e8 <MX_ADC1_Init+0x108>)
 8000380:	f002 fa70 	bl	8002864 <HAL_ADCEx_MultiModeConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800038a:	f000 fabf 	bl	800090c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_ADC1_Init+0x10c>)
 8000390:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000392:	2309      	movs	r3, #9
 8000394:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800039a:	237f      	movs	r3, #127	@ 0x7f
 800039c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800039e:	2304      	movs	r3, #4
 80003a0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80003bc:	2380      	movs	r3, #128	@ 0x80
 80003be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80003c0:	2380      	movs	r3, #128	@ 0x80
 80003c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <MX_ADC1_Init+0x108>)
 80003d0:	f001 fd1c 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80003da:	f000 fa97 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3748      	adds	r7, #72	@ 0x48
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028
 80003ec:	04300002 	.word	0x04300002

080003f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	@ 0x40
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	223c      	movs	r2, #60	@ 0x3c
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f006 f974 	bl	80066ea <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000402:	4b3e      	ldr	r3, [pc, #248]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000404:	4a3e      	ldr	r2, [pc, #248]	@ (8000500 <MX_ADC2_Init+0x110>)
 8000406:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000408:	4b3c      	ldr	r3, [pc, #240]	@ (80004fc <MX_ADC2_Init+0x10c>)
 800040a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800040e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000410:	4b3a      	ldr	r3, [pc, #232]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	4b39      	ldr	r3, [pc, #228]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800041c:	4b37      	ldr	r3, [pc, #220]	@ (80004fc <MX_ADC2_Init+0x10c>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000422:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000424:	2201      	movs	r2, #1
 8000426:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000428:	4b34      	ldr	r3, [pc, #208]	@ (80004fc <MX_ADC2_Init+0x10c>)
 800042a:	2208      	movs	r2, #8
 800042c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b33      	ldr	r3, [pc, #204]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000430:	2200      	movs	r2, #0
 8000432:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000434:	4b31      	ldr	r3, [pc, #196]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000436:	2200      	movs	r2, #0
 8000438:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800043a:	4b30      	ldr	r3, [pc, #192]	@ (80004fc <MX_ADC2_Init+0x10c>)
 800043c:	2201      	movs	r2, #1
 800043e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b2e      	ldr	r3, [pc, #184]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000448:	4b2c      	ldr	r3, [pc, #176]	@ (80004fc <MX_ADC2_Init+0x10c>)
 800044a:	2200      	movs	r2, #0
 800044c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000452:	2200      	movs	r2, #0
 8000454:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000456:	4b29      	ldr	r3, [pc, #164]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000458:	2200      	movs	r2, #0
 800045a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800045e:	4827      	ldr	r0, [pc, #156]	@ (80004fc <MX_ADC2_Init+0x10c>)
 8000460:	f000 ff1e 	bl	80012a0 <HAL_ADC_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800046a:	f000 fa4f 	bl	800090c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800046e:	4b25      	ldr	r3, [pc, #148]	@ (8000504 <MX_ADC2_Init+0x114>)
 8000470:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000472:	2309      	movs	r3, #9
 8000474:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800047a:	237f      	movs	r3, #127	@ 0x7f
 800047c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800047e:	2304      	movs	r3, #4
 8000480:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4815      	ldr	r0, [pc, #84]	@ (80004fc <MX_ADC2_Init+0x10c>)
 80004a8:	f001 fcb0 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80004b2:	f000 fa2b 	bl	800090c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_ADC2_Init+0x118>)
 80004b8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80004ba:	f240 130f 	movw	r3, #271	@ 0x10f
 80004be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	480d      	ldr	r0, [pc, #52]	@ (80004fc <MX_ADC2_Init+0x10c>)
 80004c6:	f001 fca1 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80004d0:	f000 fa1c 	bl	800090c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_ADC2_Init+0x11c>)
 80004d6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80004d8:	f240 2315 	movw	r3, #533	@ 0x215
 80004dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <MX_ADC2_Init+0x10c>)
 80004e4:	f001 fc92 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80004ee:	f000 fa0d 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3740      	adds	r7, #64	@ 0x40
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000094 	.word	0x20000094
 8000500:	50000100 	.word	0x50000100
 8000504:	08600004 	.word	0x08600004
 8000508:	0c900008 	.word	0x0c900008
 800050c:	10c00010 	.word	0x10c00010

08000510 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_CORDIC_Init+0x20>)
 8000516:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <MX_CORDIC_Init+0x24>)
 8000518:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_CORDIC_Init+0x20>)
 800051c:	f002 faaa 	bl	8002a74 <HAL_CORDIC_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000526:	f000 f9f1 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000100 	.word	0x20000100
 8000534:	40020c00 	.word	0x40020c00

08000538 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800053e:	4a21      	ldr	r2, [pc, #132]	@ (80005c4 <MX_FDCAN1_Init+0x8c>)
 8000540:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000542:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800054a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800054e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000558:	2200      	movs	r2, #0
 800055a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800055e:	2200      	movs	r2, #0
 8000560:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000564:	2201      	movs	r2, #1
 8000566:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800056a:	2205      	movs	r2, #5
 800056c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000570:	220b      	movs	r2, #11
 8000572:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000576:	2238      	movs	r2, #56	@ 0x38
 8000578:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800057c:	220b      	movs	r2, #11
 800057e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000582:	2205      	movs	r2, #5
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000588:	2204      	movs	r2, #4
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800058e:	220c      	movs	r2, #12
 8000590:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 8000594:	2204      	movs	r2, #4
 8000596:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 800059a:	2200      	movs	r2, #0
 800059c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_FDCAN1_Init+0x88>)
 80005ac:	f002 fdd2 	bl	8003154 <HAL_FDCAN_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80005b6:	f000 f9a9 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000128 	.word	0x20000128
 80005c4:	40006400 	.word	0x40006400

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C1_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C1_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C1_Init+0x74>)
 8000604:	f003 fac3 	bl	8003b8e <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f97d 	bl	800090c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C1_Init+0x74>)
 8000616:	f004 f952 	bl	80048be <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f974 	bl	800090c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C1_Init+0x74>)
 8000628:	f004 f994 	bl	8004954 <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f96b 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000018c 	.word	0x2000018c
 8000640:	40005400 	.word	0x40005400
 8000644:	40b285c2 	.word	0x40b285c2

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b098      	sub	sp, #96	@ 0x60
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2234      	movs	r2, #52	@ 0x34
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f838 	bl	80066ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800067a:	4b49      	ldr	r3, [pc, #292]	@ (80007a0 <MX_TIM1_Init+0x158>)
 800067c:	4a49      	ldr	r2, [pc, #292]	@ (80007a4 <MX_TIM1_Init+0x15c>)
 800067e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000680:	4b47      	ldr	r3, [pc, #284]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000686:	4b46      	ldr	r3, [pc, #280]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000688:	2220      	movs	r2, #32
 800068a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <MX_TIM1_Init+0x158>)
 800068e:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000692:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b42      	ldr	r3, [pc, #264]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800069a:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <MX_TIM1_Init+0x158>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a0:	4b3f      	ldr	r3, [pc, #252]	@ (80007a0 <MX_TIM1_Init+0x158>)
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a6:	483e      	ldr	r0, [pc, #248]	@ (80007a0 <MX_TIM1_Init+0x158>)
 80006a8:	f005 f998 	bl	80059dc <HAL_TIM_PWM_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f92b 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006b6:	2320      	movs	r3, #32
 80006b8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80006ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80006be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006c8:	4619      	mov	r1, r3
 80006ca:	4835      	ldr	r0, [pc, #212]	@ (80007a0 <MX_TIM1_Init+0x158>)
 80006cc:	f005 fed0 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006d6:	f000 f919 	bl	800090c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006da:	2360      	movs	r3, #96	@ 0x60
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e2:	2300      	movs	r3, #0
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	4828      	ldr	r0, [pc, #160]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000700:	f005 f9c4 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800070a:	f000 f8ff 	bl	800090c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000712:	2204      	movs	r2, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000718:	f005 f9b8 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000722:	f000 f8f3 	bl	800090c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000726:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800072a:	2208      	movs	r2, #8
 800072c:	4619      	mov	r1, r3
 800072e:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000730:	f005 f9ac 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800073a:	f000 f8e7 	bl	800090c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800073e:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000740:	f005 ffc0 	bl	80066c4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000750:	2314      	movs	r3, #20
 8000752:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800076a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000782:	f005 ff0b 	bl	800659c <HAL_TIMEx_ConfigBreakDeadTime>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800078c:	f000 f8be 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <MX_TIM1_Init+0x158>)
 8000792:	f000 fb25 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000796:	bf00      	nop
 8000798:	3760      	adds	r7, #96	@ 0x60
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200002a0 	.word	0x200002a0
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_DMA_Init+0x60>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_DMA_Init+0x60>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <MX_DMA_Init+0x60>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_DMA_Init+0x60>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <MX_DMA_Init+0x60>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <MX_DMA_Init+0x60>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200b      	movs	r0, #11
 80007e4:	f002 fa53 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	200b      	movs	r0, #11
 80007ea:	f002 fa6a 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200c      	movs	r0, #12
 80007f4:	f002 fa4b 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f8:	200c      	movs	r0, #12
 80007fa:	f002 fa62 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a37      	ldr	r2, [pc, #220]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b35      	ldr	r3, [pc, #212]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b32      	ldr	r3, [pc, #200]	@ (8000904 <MX_GPIO_Init+0xf8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a31      	ldr	r2, [pc, #196]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a2b      	ldr	r2, [pc, #172]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <MX_GPIO_Init+0xf8>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <MX_GPIO_Init+0xf8>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f003 f945 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4818      	ldr	r0, [pc, #96]	@ (8000908 <MX_GPIO_Init+0xfc>)
 80008a6:	f002 ffb5 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008ba:	230c      	movs	r3, #12
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f002 ffa4 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f002 ff95 	bl	8003814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2028      	movs	r0, #40	@ 0x28
 80008f0:	f002 f9cd 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f4:	2028      	movs	r0, #40	@ 0x28
 80008f6:	f002 f9e4 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	48000800 	.word	0x48000800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	@ 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094e:	f004 f8f1 	bl	8004b34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0a0      	sub	sp, #128	@ 0x80
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	2254      	movs	r2, #84	@ 0x54
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 feb2 	bl	80066ea <memset>
  if(hadc->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800098e:	d146      	bne.n	8000a1e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000996:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800099a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fdcd 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009ac:	f7ff ffae 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009b0:	4b42      	ldr	r3, [pc, #264]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a41      	ldr	r2, [pc, #260]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 80009b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009ba:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d10b      	bne.n	80009da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009c2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a38      	ldr	r2, [pc, #224]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	2303      	movs	r3, #3
 80009f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f002 ff04 	bl	8003814 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2012      	movs	r0, #18
 8000a12:	f002 f93c 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a16:	2012      	movs	r0, #18
 8000a18:	f002 f953 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a1c:	e04a      	b.n	8000ab4 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_ADC_MspInit+0x164>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d145      	bne.n	8000ab4 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 fd81 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8000a44:	f7ff ff62 	bl	800090c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 8000a50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_ADC_MspInit+0x15c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10b      	bne.n	8000a72 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <HAL_ADC_MspInit+0x160>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a8a:	23c2      	movs	r3, #194	@ 0xc2
 8000a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f002 feb8 	bl	8003814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2012      	movs	r0, #18
 8000aaa:	f002 f8f0 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000aae:	2012      	movs	r0, #18
 8000ab0:	f002 f907 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
}
 8000ab4:	bf00      	nop
 8000ab6:	3780      	adds	r7, #128	@ 0x80
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200002ec 	.word	0x200002ec
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	50000100 	.word	0x50000100

08000ac8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_CORDIC_MspInit+0x38>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d10b      	bne.n	8000af2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_CORDIC_MspInit+0x3c>)
 8000adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <HAL_CORDIC_MspInit+0x3c>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <HAL_CORDIC_MspInit+0x3c>)
 8000ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	@ 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	@ 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fdde 	bl	80066ea <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a28      	ldr	r2, [pc, #160]	@ (8000bd4 <HAL_FDCAN_MspInit+0xcc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d149      	bne.n	8000bcc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fcf9 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b54:	f7ff feda 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_FDCAN_MspInit+0xd0>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f002 fe34 	bl	8003814 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2015      	movs	r0, #21
 8000bb2:	f002 f86c 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000bb6:	2015      	movs	r0, #21
 8000bb8:	f002 f883 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2016      	movs	r0, #22
 8000bc2:	f002 f864 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000bc6:	2016      	movs	r0, #22
 8000bc8:	f002 f87b 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3778      	adds	r7, #120	@ 0x78
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40006400 	.word	0x40006400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0a0      	sub	sp, #128	@ 0x80
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	2254      	movs	r2, #84	@ 0x54
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fd74 	bl	80066ea <memset>
  if(hi2c->Instance==I2C1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a5f      	ldr	r2, [pc, #380]	@ (8000d84 <HAL_I2C_MspInit+0x1a8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	f040 80b6 	bne.w	8000d7a <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c0e:	2340      	movs	r3, #64	@ 0x40
 8000c10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fc90 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c26:	f7ff fe71 	bl	800090c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b57      	ldr	r3, [pc, #348]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a56      	ldr	r2, [pc, #344]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b54      	ldr	r3, [pc, #336]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b51      	ldr	r3, [pc, #324]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a50      	ldr	r2, [pc, #320]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f002 fdcb 	bl	8003814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c96:	4619      	mov	r1, r3
 8000c98:	483c      	ldr	r0, [pc, #240]	@ (8000d8c <HAL_I2C_MspInit+0x1b0>)
 8000c9a:	f002 fdbb 	bl	8003814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	4a39      	ldr	r2, [pc, #228]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000ca4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000caa:	4b37      	ldr	r3, [pc, #220]	@ (8000d88 <HAL_I2C_MspInit+0x1ac>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cb8:	4a36      	ldr	r2, [pc, #216]	@ (8000d94 <HAL_I2C_MspInit+0x1b8>)
 8000cba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000cbc:	4b34      	ldr	r3, [pc, #208]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b31      	ldr	r3, [pc, #196]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cec:	4828      	ldr	r0, [pc, #160]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000cee:	f002 f803 	bl	8002cf8 <HAL_DMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000cf8:	f7ff fe08 	bl	800090c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000d00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d02:	4a23      	ldr	r2, [pc, #140]	@ (8000d90 <HAL_I2C_MspInit+0x1b4>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_I2C_MspInit+0x1c0>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000d0e:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d10:	2211      	movs	r2, #17
 8000d12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d14:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d3e:	4816      	ldr	r0, [pc, #88]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d40:	f001 ffda 	bl	8002cf8 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000d4a:	f7ff fddf 	bl	800090c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d52:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d54:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_I2C_MspInit+0x1bc>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	201f      	movs	r0, #31
 8000d60:	f001 ff95 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d64:	201f      	movs	r0, #31
 8000d66:	f001 ffac 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2020      	movs	r0, #32
 8000d70:	f001 ff8d 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d74:	2020      	movs	r0, #32
 8000d76:	f001 ffa4 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3780      	adds	r7, #128	@ 0x80
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	200001e0 	.word	0x200001e0
 8000d94:	40020008 	.word	0x40020008
 8000d98:	20000240 	.word	0x20000240
 8000d9c:	4002001c 	.word	0x4002001c

08000da0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <HAL_TIM_MspPostInit+0x9c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d138      	bne.n	8000e74 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a1e      	ldr	r2, [pc, #120]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_TIM_MspPostInit+0xa0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <HAL_TIM_MspPostInit+0xa4>)
 8000e4e:	f002 fce1 	bl	8003814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000e52:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e64:	2306      	movs	r3, #6
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <HAL_TIM_MspPostInit+0xa8>)
 8000e70:	f002 fcd0 	bl	8003814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000800 	.word	0x48000800
 8000e88:	48000400 	.word	0x48000400

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f8e3 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <DMA1_Channel1_IRQHandler+0x10>)
 8000ef2:	f002 f810 	bl	8002f16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001e0 	.word	0x200001e0

08000f00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <DMA1_Channel2_IRQHandler+0x10>)
 8000f06:	f002 f806 	bl	8002f16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000240 	.word	0x20000240

08000f14 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <ADC1_2_IRQHandler+0x14>)
 8000f1a:	f000 fb7d 	bl	8001618 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f1e:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <ADC1_2_IRQHandler+0x18>)
 8000f20:	f000 fb7a 	bl	8001618 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000028 	.word	0x20000028
 8000f2c:	20000094 	.word	0x20000094

08000f30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <FDCAN1_IT0_IRQHandler+0x10>)
 8000f36:	f002 fa67 	bl	8003408 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000128 	.word	0x20000128

08000f44 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f4a:	f002 fa5d 	bl	8003408 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000128 	.word	0x20000128

08000f58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <I2C1_EV_IRQHandler+0x10>)
 8000f5e:	f002 feb1 	bl	8003cc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000018c 	.word	0x2000018c

08000f6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <I2C1_ER_IRQHandler+0x10>)
 8000f72:	f002 fec1 	bl	8003cf8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000018c 	.word	0x2000018c

08000f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f88:	f002 fdde 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f005 fb8b 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff f917 	bl	8000218 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   r0, =_estack
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08006774 	.word	0x08006774
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	200002f4 	.word	0x200002f4

08001004 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>

08001006 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f001 fe31 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f80e 	bl	8001038 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e001      	b.n	800102c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001028:	f7ff fc76 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	79fb      	ldrb	r3, [r7, #7]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d022      	beq.n	8001092 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_InitTick+0x6c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_InitTick+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001058:	fbb1 f3f3 	udiv	r3, r1, r3
 800105c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fe3c 	bl	8002cde <HAL_SYSTICK_Config>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10f      	bne.n	800108c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d809      	bhi.n	8001086 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001072:	2200      	movs	r2, #0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	f001 fe08 	bl	8002c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_InitTick+0x70>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e007      	b.n	8001096 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e004      	b.n	8001096 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x20>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a03      	ldr	r2, [pc, #12]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	200002f0 	.word	0x200002f0
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200002f0 	.word	0x200002f0

080010e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 031f 	and.w	r3, r3, #31
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6093      	str	r3, [r2, #8]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800121a:	d101      	bne.n	8001220 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <LL_ADC_IsEnabled+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_ADC_IsEnabled+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b04      	cmp	r3, #4
 8001266:	d101      	bne.n	800126c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b08      	cmp	r3, #8
 800128c:	d101      	bne.n	8001292 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e1a9      	b.n	800160e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fb49 	bl	8000960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff68 	bl	80011b6 <LL_ADC_IsDeepPowerDownEnabled>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff4e 	bl	8001192 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff83 	bl	8001206 <LL_ADC_IsInternalRegulatorEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff67 	bl	80011de <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001310:	4b9c      	ldr	r3, [pc, #624]	@ (8001584 <HAL_ADC_Init+0x2e4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	4a9c      	ldr	r2, [pc, #624]	@ (8001588 <HAL_ADC_Init+0x2e8>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	3301      	adds	r3, #1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001324:	e002      	b.n	800132c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff65 	bl	8001206 <LL_ADC_IsInternalRegulatorEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff76 	bl	8001254 <LL_ADC_REG_IsConversionOngoing>
 8001368:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 8142 	bne.w	80015fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 813e 	bne.w	80015fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001388:	f043 0202 	orr.w	r2, r3, #2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff4a 	bl	800122e <LL_ADC_IsEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d141      	bne.n	8001424 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a8:	d004      	beq.n	80013b4 <HAL_ADC_Init+0x114>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a77      	ldr	r2, [pc, #476]	@ (800158c <HAL_ADC_Init+0x2ec>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10f      	bne.n	80013d4 <HAL_ADC_Init+0x134>
 80013b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80013b8:	f7ff ff39 	bl	800122e <LL_ADC_IsEnabled>
 80013bc:	4604      	mov	r4, r0
 80013be:	4873      	ldr	r0, [pc, #460]	@ (800158c <HAL_ADC_Init+0x2ec>)
 80013c0:	f7ff ff35 	bl	800122e <LL_ADC_IsEnabled>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4323      	orrs	r3, r4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	e012      	b.n	80013fa <HAL_ADC_Init+0x15a>
 80013d4:	486e      	ldr	r0, [pc, #440]	@ (8001590 <HAL_ADC_Init+0x2f0>)
 80013d6:	f7ff ff2a 	bl	800122e <LL_ADC_IsEnabled>
 80013da:	4604      	mov	r4, r0
 80013dc:	486d      	ldr	r0, [pc, #436]	@ (8001594 <HAL_ADC_Init+0x2f4>)
 80013de:	f7ff ff26 	bl	800122e <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	431c      	orrs	r4, r3
 80013e6:	486c      	ldr	r0, [pc, #432]	@ (8001598 <HAL_ADC_Init+0x2f8>)
 80013e8:	f7ff ff21 	bl	800122e <LL_ADC_IsEnabled>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4323      	orrs	r3, r4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d012      	beq.n	8001424 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Init+0x172>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5f      	ldr	r2, [pc, #380]	@ (800158c <HAL_ADC_Init+0x2ec>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x176>
 8001412:	4a62      	ldr	r2, [pc, #392]	@ (800159c <HAL_ADC_Init+0x2fc>)
 8001414:	e000      	b.n	8001418 <HAL_ADC_Init+0x178>
 8001416:	4a62      	ldr	r2, [pc, #392]	@ (80015a0 <HAL_ADC_Init+0x300>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4619      	mov	r1, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f7ff fe62 	bl	80010e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7f5b      	ldrb	r3, [r3, #29]
 8001428:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800142e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001434:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800143a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001442:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	3b01      	subs	r3, #1
 8001458:	045b      	lsls	r3, r3, #17
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b48      	ldr	r3, [pc, #288]	@ (80015a4 <HAL_ADC_Init+0x304>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fee5 	bl	800127a <LL_ADC_INJ_IsConversionOngoing>
 80014b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d17f      	bne.n	80015b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d17c      	bne.n	80015b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	69b9      	ldr	r1, [r7, #24]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d017      	beq.n	8001520 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001508:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800150c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6911      	ldr	r1, [r2, #16]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800151e:	e013      	b.n	8001548 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800152e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001544:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12a      	bne.n	80015a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001568:	4311      	orrs	r1, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001574:	430a      	orrs	r2, r1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	e019      	b.n	80015b8 <HAL_ADC_Init+0x318>
 8001584:	20000000 	.word	0x20000000
 8001588:	053e2d63 	.word	0x053e2d63
 800158c:	50000100 	.word	0x50000100
 8001590:	50000400 	.word	0x50000400
 8001594:	50000500 	.word	0x50000500
 8001598:	50000600 	.word	0x50000600
 800159c:	50000300 	.word	0x50000300
 80015a0:	50000700 	.word	0x50000700
 80015a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10c      	bne.n	80015da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f023 010f 	bic.w	r1, r3, #15
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d8:	e007      	b.n	80015ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020f 	bic.w	r2, r2, #15
 80015e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015fa:	e007      	b.n	800160c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001600:	f043 0210 	orr.w	r2, r3, #16
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800160c:	7ffb      	ldrb	r3, [r7, #31]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop

08001618 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163c:	d004      	beq.n	8001648 <HAL_ADC_IRQHandler+0x30>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a8e      	ldr	r2, [pc, #568]	@ (800187c <HAL_ADC_IRQHandler+0x264>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_ADC_IRQHandler+0x34>
 8001648:	4b8d      	ldr	r3, [pc, #564]	@ (8001880 <HAL_ADC_IRQHandler+0x268>)
 800164a:	e000      	b.n	800164e <HAL_ADC_IRQHandler+0x36>
 800164c:	4b8d      	ldr	r3, [pc, #564]	@ (8001884 <HAL_ADC_IRQHandler+0x26c>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd83 	bl	800115a <LL_ADC_GetMultimode>
 8001654:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d017      	beq.n	8001690 <HAL_ADC_IRQHandler+0x78>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fbb7 	bl	8001df6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x8c>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10b      	bne.n	80016bc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8094 	beq.w	80017d8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 808e 	beq.w	80017d8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd18 	bl	800110e <LL_ADC_REG_IsTriggerSourceSWStart>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d072      	beq.n	80017ca <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a64      	ldr	r2, [pc, #400]	@ (800187c <HAL_ADC_IRQHandler+0x264>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <HAL_ADC_IRQHandler+0xea>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a65      	ldr	r2, [pc, #404]	@ (8001888 <HAL_ADC_IRQHandler+0x270>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_IRQHandler+0xe6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e003      	b.n	8001706 <HAL_ADC_IRQHandler+0xee>
 80016fe:	4b63      	ldr	r3, [pc, #396]	@ (800188c <HAL_ADC_IRQHandler+0x274>)
 8001700:	e001      	b.n	8001706 <HAL_ADC_IRQHandler+0xee>
 8001702:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	4293      	cmp	r3, r2
 800170c:	d008      	beq.n	8001720 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d002      	beq.n	8001720 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d104      	bne.n	800172a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	e014      	b.n	8001754 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a53      	ldr	r2, [pc, #332]	@ (800187c <HAL_ADC_IRQHandler+0x264>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_ADC_IRQHandler+0x130>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a53      	ldr	r2, [pc, #332]	@ (8001888 <HAL_ADC_IRQHandler+0x270>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d002      	beq.n	8001744 <HAL_ADC_IRQHandler+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e003      	b.n	800174c <HAL_ADC_IRQHandler+0x134>
 8001744:	4b51      	ldr	r3, [pc, #324]	@ (800188c <HAL_ADC_IRQHandler+0x274>)
 8001746:	e001      	b.n	800174c <HAL_ADC_IRQHandler+0x134>
 8001748:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800174c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d135      	bne.n	80017ca <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b08      	cmp	r3, #8
 800176a:	d12e      	bne.n	80017ca <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fd6f 	bl	8001254 <LL_ADC_REG_IsConversionOngoing>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 020c 	bic.w	r2, r2, #12
 800178a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d112      	bne.n	80017ca <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017b0:	e00b      	b.n	80017ca <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f984 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	220c      	movs	r2, #12
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_ADC_IRQHandler+0x1d4>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b3 	beq.w	800195e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80ad 	beq.w	800195e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001814:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc87 	bl	8001134 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001826:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc6e 	bl	800110e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001832:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_ADC_IRQHandler+0x264>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_ADC_IRQHandler+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_ADC_IRQHandler+0x270>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d002      	beq.n	800184e <HAL_ADC_IRQHandler+0x236>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e003      	b.n	8001856 <HAL_ADC_IRQHandler+0x23e>
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_ADC_IRQHandler+0x274>)
 8001850:	e001      	b.n	8001856 <HAL_ADC_IRQHandler+0x23e>
 8001852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	4293      	cmp	r3, r2
 800185c:	d008      	beq.n	8001870 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d002      	beq.n	8001870 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b07      	cmp	r3, #7
 800186e:	d10f      	bne.n	8001890 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	e01f      	b.n	80018ba <HAL_ADC_IRQHandler+0x2a2>
 800187a:	bf00      	nop
 800187c:	50000100 	.word	0x50000100
 8001880:	50000300 	.word	0x50000300
 8001884:	50000700 	.word	0x50000700
 8001888:	50000500 	.word	0x50000500
 800188c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a8b      	ldr	r2, [pc, #556]	@ (8001ac4 <HAL_ADC_IRQHandler+0x4ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d009      	beq.n	80018ae <HAL_ADC_IRQHandler+0x296>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a8a      	ldr	r2, [pc, #552]	@ (8001ac8 <HAL_ADC_IRQHandler+0x4b0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d002      	beq.n	80018aa <HAL_ADC_IRQHandler+0x292>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e003      	b.n	80018b2 <HAL_ADC_IRQHandler+0x29a>
 80018aa:	4b88      	ldr	r3, [pc, #544]	@ (8001acc <HAL_ADC_IRQHandler+0x4b4>)
 80018ac:	e001      	b.n	80018b2 <HAL_ADC_IRQHandler+0x29a>
 80018ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d047      	beq.n	8001950 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_ADC_IRQHandler+0x2c2>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03f      	beq.n	8001950 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d13a      	bne.n	8001950 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e4:	2b40      	cmp	r3, #64	@ 0x40
 80018e6:	d133      	bne.n	8001950 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d12e      	bne.n	8001950 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fcbf 	bl	800127a <LL_ADC_INJ_IsConversionOngoing>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001910:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d112      	bne.n	8001950 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001936:	e00b      	b.n	8001950 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fa28 	bl	8001da6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2260      	movs	r2, #96	@ 0x60
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001964:	2b00      	cmp	r3, #0
 8001966:	d011      	beq.n	800198c <HAL_ADC_IRQHandler+0x374>
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001976:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b4 	bl	8001aec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d012      	beq.n	80019bc <HAL_ADC_IRQHandler+0x3a4>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00d      	beq.n	80019bc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa0e 	bl	8001dce <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <HAL_ADC_IRQHandler+0x3d4>
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fa00 	bl	8001de2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d043      	beq.n	8001a7e <HAL_ADC_IRQHandler+0x466>
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03e      	beq.n	8001a7e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0c:	e021      	b.n	8001a52 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a1c:	d004      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x410>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <HAL_ADC_IRQHandler+0x4ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_IRQHandler+0x414>
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <HAL_ADC_IRQHandler+0x4b8>)
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_IRQHandler+0x416>
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_ADC_IRQHandler+0x4bc>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fba1 	bl	8001176 <LL_ADC_GetMultiDMATransfer>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10e      	bne.n	8001a76 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a68:	f043 0202 	orr.w	r2, r3, #2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f845 	bl	8001b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d018      	beq.n	8001aba <HAL_ADC_IRQHandler+0x4a2>
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d013      	beq.n	8001aba <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	f043 0208 	orr.w	r2, r3, #8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f980 	bl	8001dba <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	50000100 	.word	0x50000100
 8001ac8:	50000500 	.word	0x50000500
 8001acc:	50000400 	.word	0x50000400
 8001ad0:	50000300 	.word	0x50000300
 8001ad4:	50000700 	.word	0x50000700

08001ad8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetCommonPathInternalCh>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_GetCommonPathInternalCh>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <LL_ADC_SetOffset>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3360      	adds	r3, #96	@ 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <LL_ADC_SetOffset+0x44>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	03fff000 	.word	0x03fff000

08001ba0 <LL_ADC_GetOffsetChannel>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3360      	adds	r3, #96	@ 0x60
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_SetOffsetState>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3360      	adds	r3, #96	@ 0x60
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetOffsetSign>:
{
 8001c02:	b480      	push	{r7}
 8001c04:	b087      	sub	sp, #28
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3360      	adds	r3, #96	@ 0x60
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetOffsetSaturation>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3360      	adds	r3, #96	@ 0x60
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	615a      	str	r2, [r3, #20]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_SetChannelSamplingTime>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3314      	adds	r3, #20
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0e5b      	lsrs	r3, r3, #25
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0d1b      	lsrs	r3, r3, #20
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2107      	movs	r1, #7
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0d1b      	lsrs	r3, r3, #20
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <LL_ADC_SetChannelSingleDiff>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0318 	and.w	r3, r3, #24
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d10:	40d9      	lsrs	r1, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	400b      	ands	r3, r1
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	0007ffff 	.word	0x0007ffff

08001d34 <LL_ADC_IsEnabled>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_IsEnabled+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_IsEnabled+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_INJ_IsConversionOngoing>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d102      	bne.n	8001e36 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f000 bcfd 	b.w	8002830 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d130      	bne.n	8001eb0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d179      	bne.n	8001f4a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001e72:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e7e:	e007      	b.n	8001e90 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8001e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e96:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001eac:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001eae:	e04c      	b.n	8001f4a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11d      	bne.n	8001ef4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001edc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 021f 	and.w	r2, r3, #31
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff16 	bl	8001d80 <LL_ADC_INJ_IsConversionOngoing>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d124      	bne.n	8001fa4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d112      	bne.n	8001f8a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001f74:	055a      	lsls	r2, r3, #21
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	e00c      	b.n	8001fa4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001f9a:	055a      	lsls	r2, r3, #21
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fed6 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8001fae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fee2 	bl	8001d80 <LL_ADC_INJ_IsConversionOngoing>
 8001fbc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 822e 	bne.w	8002426 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8229 	bne.w	8002426 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d116      	bne.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001ffc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8001ffe:	e01f      	b.n	8002040 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800200e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002010:	e016      	b.n	8002040 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002018:	2b01      	cmp	r3, #1
 800201a:	d109      	bne.n	8002030 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800202e:	e007      	b.n	8002040 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800203e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002046:	2b01      	cmp	r3, #1
 8002048:	d110      	bne.n	800206c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205c:	430b      	orrs	r3, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0202 	orr.w	r2, r2, #2
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	e007      	b.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0202 	bic.w	r2, r2, #2
 800207a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002084:	d112      	bne.n	80020ac <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	f7ff fdff 	bl	8001c94 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fde5 	bl	8001c6e <LL_ADC_SetSamplingTimeCommonConfig>
 80020a4:	e011      	b.n	80020ca <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80020a6:	bf00      	nop
 80020a8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fdeb 	bl	8001c94 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fdd2 	bl	8001c6e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d022      	beq.n	8002132 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6919      	ldr	r1, [r3, #16]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020fc:	f7ff fd2c 	bl	8001b58 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6919      	ldr	r1, [r3, #16]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	461a      	mov	r2, r3
 800210e:	f7ff fd78 	bl	8001c02 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002126:	e000      	b.n	800212a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002128:	2300      	movs	r3, #0
 800212a:	461a      	mov	r2, r3
 800212c:	f7ff fd84 	bl	8001c38 <LL_ADC_SetOffsetSaturation>
 8002130:	e179      	b.n	8002426 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fd31 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fd26 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	e01e      	b.n	800219c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fd1b 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800217c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e004      	b.n	800219a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8002190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	e018      	b.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80021c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80021d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e004      	b.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80021dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d106      	bne.n	80021f8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fcea 	bl	8001bcc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fcce 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fcc3 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	e01e      	b.n	8002262 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fcb8 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002242:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800224a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8002252:	2320      	movs	r3, #32
 8002254:	e004      	b.n	8002260 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8002256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	e018      	b.n	80022ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800228e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002292:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002296:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e004      	b.n	80022ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80022a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d106      	bne.n	80022be <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2101      	movs	r1, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fc87 	bl	8001bcc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2102      	movs	r1, #2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc6b 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fc60 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e01e      	b.n	8002328 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2102      	movs	r1, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc55 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800230c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800231c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	e014      	b.n	800236a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800234e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002354:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8002360:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800236a:	429a      	cmp	r2, r3
 800236c:	d106      	bne.n	800237c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc28 	bl	8001bcc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2103      	movs	r1, #3
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fc0c 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2103      	movs	r1, #3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fc01 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	e017      	b.n	80023d8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2103      	movs	r1, #3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fbf6 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80023c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e003      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80023ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	e011      	b.n	8002414 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002400:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002402:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e003      	b.n	8002414 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800240c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fbd3 	bl	8001bcc <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fc82 	bl	8001d34 <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 813d 	bne.w	80026b2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	461a      	mov	r2, r3
 8002446:	f7ff fc51 	bl	8001cec <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4aa2      	ldr	r2, [pc, #648]	@ (80026d8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	f040 812e 	bne.w	80026b2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10b      	bne.n	800247e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	3301      	adds	r3, #1
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2b09      	cmp	r3, #9
 8002474:	bf94      	ite	ls
 8002476:	2301      	movls	r3, #1
 8002478:	2300      	movhi	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e019      	b.n	80024b2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800248c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800249a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d079      	beq.n	80025aa <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	3301      	adds	r3, #1
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d0:	e015      	b.n	80024fe <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e003      	b.n	80024f6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80024ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	069b      	lsls	r3, r3, #26
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0e9b      	lsrs	r3, r3, #26
 8002510:	3301      	adds	r3, #1
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	e017      	b.n	800254e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800252c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800253a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	ea42 0103 	orr.w	r1, r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	e018      	b.n	80025a6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f003 021f 	and.w	r2, r3, #31
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a6:	430b      	orrs	r3, r1
 80025a8:	e07e      	b.n	80026a8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c4:	e015      	b.n	80025f2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e003      	b.n	80025ea <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	069b      	lsls	r3, r3, #26
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	e017      	b.n	8002642 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	61bb      	str	r3, [r7, #24]
  return result;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	051b      	lsls	r3, r3, #20
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800266c:	e01b      	b.n	80026a6 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	60fb      	str	r3, [r7, #12]
  return result;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e003      	b.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	3b1e      	subs	r3, #30
 80026a0:	051b      	lsls	r3, r3, #20
 80026a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a6:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7ff faf1 	bl	8001c94 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80b2 	beq.w	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c8:	d004      	beq.n	80026d4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80026d6:	e008      	b.n	80026ea <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80026d8:	407f0000 	.word	0x407f0000
 80026dc:	80080000 	.word	0x80080000
 80026e0:	50000100 	.word	0x50000100
 80026e4:	50000300 	.word	0x50000300
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fa25 	bl	8001b3a <LL_ADC_GetCommonPathInternalCh>
 80026f0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a50      	ldr	r2, [pc, #320]	@ (800283c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4f      	ldr	r2, [pc, #316]	@ (8002840 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d139      	bne.n	800277c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800270c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d133      	bne.n	800277c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800271c:	d004      	beq.n	8002728 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a48      	ldr	r2, [pc, #288]	@ (8002844 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d17a      	bne.n	800281e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002730:	d004      	beq.n	800273c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a44      	ldr	r2, [pc, #272]	@ (8002848 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800273c:	4a43      	ldr	r2, [pc, #268]	@ (800284c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800273e:	e000      	b.n	8002742 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8002740:	4a3d      	ldr	r2, [pc, #244]	@ (8002838 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8002742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002746:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f7ff f9e1 	bl	8001b14 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	4a3e      	ldr	r2, [pc, #248]	@ (8002854 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	099a      	lsrs	r2, r3, #6
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800276a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800276c:	e002      	b.n	8002774 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3b01      	subs	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800277a:	e050      	b.n	800281e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a35      	ldr	r2, [pc, #212]	@ (8002858 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d125      	bne.n	80027d2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800278a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d104      	bne.n	80027a6 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	@ (800285c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03d      	beq.n	8002822 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ae:	d004      	beq.n	80027ba <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80027ba:	4a24      	ldr	r2, [pc, #144]	@ (800284c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80027bc:	e000      	b.n	80027c0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80027be:	4a1e      	ldr	r2, [pc, #120]	@ (8002838 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80027c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7ff f9a2 	bl	8001b14 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d0:	e027      	b.n	8002822 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d123      	bne.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11d      	bne.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a16      	ldr	r2, [pc, #88]	@ (8002848 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d018      	beq.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fa:	d004      	beq.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8002806:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8002808:	e000      	b.n	800280c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800280a:	4a0b      	ldr	r2, [pc, #44]	@ (8002838 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7ff f97c 	bl	8001b14 <LL_ADC_SetCommonPathInternalCh>
 800281c:	e002      	b.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002822:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800282c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002830:	4618      	mov	r0, r3
 8002832:	37d8      	adds	r7, #216	@ 0xd8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	50000700 	.word	0x50000700
 800283c:	c3210000 	.word	0xc3210000
 8002840:	90c00010 	.word	0x90c00010
 8002844:	50000600 	.word	0x50000600
 8002848:	50000100 	.word	0x50000100
 800284c:	50000300 	.word	0x50000300
 8002850:	20000000 	.word	0x20000000
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	c7520000 	.word	0xc7520000
 800285c:	50000500 	.word	0x50000500
 8002860:	cb840000 	.word	0xcb840000

08002864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b0a1      	sub	sp, #132	@ 0x84
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e0e7      	b.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800288a:	2300      	movs	r3, #0
 800288c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800288e:	2300      	movs	r3, #0
 8002890:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800289a:	d102      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800289c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	e009      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d102      	bne.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80028ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e001      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0be      	b.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fa3f 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 80028dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fa39 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 80a0 	bne.w	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 809c 	bne.w	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002900:	d004      	beq.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a55      	ldr	r2, [pc, #340]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800290c:	4b56      	ldr	r3, [pc, #344]	@ (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800290e:	e000      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002910:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002912:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d04b      	beq.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800291c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800292e:	035b      	lsls	r3, r3, #13
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002940:	d004      	beq.n	800294c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a45      	ldr	r2, [pc, #276]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10f      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800294c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002950:	f7ff f9f0 	bl	8001d34 <LL_ADC_IsEnabled>
 8002954:	4604      	mov	r4, r0
 8002956:	4841      	ldr	r0, [pc, #260]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002958:	f7ff f9ec 	bl	8001d34 <LL_ADC_IsEnabled>
 800295c:	4603      	mov	r3, r0
 800295e:	4323      	orrs	r3, r4
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e012      	b.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800296c:	483c      	ldr	r0, [pc, #240]	@ (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800296e:	f7ff f9e1 	bl	8001d34 <LL_ADC_IsEnabled>
 8002972:	4604      	mov	r4, r0
 8002974:	483b      	ldr	r0, [pc, #236]	@ (8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002976:	f7ff f9dd 	bl	8001d34 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	431c      	orrs	r4, r3
 800297e:	483c      	ldr	r0, [pc, #240]	@ (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002980:	f7ff f9d8 	bl	8001d34 <LL_ADC_IsEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	4323      	orrs	r3, r4
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d056      	beq.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800299e:	f023 030f 	bic.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6811      	ldr	r1, [r2, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029b2:	e047      	b.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c8:	d004      	beq.n	80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10f      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80029d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029d8:	f7ff f9ac 	bl	8001d34 <LL_ADC_IsEnabled>
 80029dc:	4604      	mov	r4, r0
 80029de:	481f      	ldr	r0, [pc, #124]	@ (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029e0:	f7ff f9a8 	bl	8001d34 <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4323      	orrs	r3, r4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029f4:	481a      	ldr	r0, [pc, #104]	@ (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029f6:	f7ff f99d 	bl	8001d34 <LL_ADC_IsEnabled>
 80029fa:	4604      	mov	r4, r0
 80029fc:	4819      	ldr	r0, [pc, #100]	@ (8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029fe:	f7ff f999 	bl	8001d34 <LL_ADC_IsEnabled>
 8002a02:	4603      	mov	r3, r0
 8002a04:	431c      	orrs	r4, r3
 8002a06:	481a      	ldr	r0, [pc, #104]	@ (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a08:	f7ff f994 	bl	8001d34 <LL_ADC_IsEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a26:	f023 030f 	bic.w	r3, r3, #15
 8002a2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2e:	e009      	b.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a42:	e000      	b.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3784      	adds	r7, #132	@ 0x84
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	50000100 	.word	0x50000100
 8002a60:	50000400 	.word	0x50000400
 8002a64:	50000500 	.word	0x50000500
 8002a68:	50000300 	.word	0x50000300
 8002a6c:	50000700 	.word	0x50000700
 8002a70:	50000600 	.word	0x50000600

08002a74 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e023      	b.n	8002ace <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f814 	bl	8000ac8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	@ (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	@ (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	@ 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff40 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff90 	bl	8002bcc <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5f 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff33 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa4 	bl	8002c34 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e08d      	b.n	8002e26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_DMA_Init+0x138>)
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d80f      	bhi.n	8002d36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b45      	ldr	r3, [pc, #276]	@ (8002e34 <HAL_DMA_Init+0x13c>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a45      	ldr	r2, [pc, #276]	@ (8002e38 <HAL_DMA_Init+0x140>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a42      	ldr	r2, [pc, #264]	@ (8002e3c <HAL_DMA_Init+0x144>)
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b40      	ldr	r3, [pc, #256]	@ (8002e40 <HAL_DMA_Init+0x148>)
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a3d      	ldr	r2, [pc, #244]	@ (8002e38 <HAL_DMA_Init+0x140>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	009a      	lsls	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a3c      	ldr	r2, [pc, #240]	@ (8002e44 <HAL_DMA_Init+0x14c>)
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f972 	bl	8003090 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db4:	d102      	bne.n	8002dbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_DMA_Init+0x104>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d80c      	bhi.n	8002dfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f992 	bl	800310c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	e008      	b.n	8002e0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40020407 	.word	0x40020407
 8002e34:	bffdfff8 	.word	0xbffdfff8
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	40020000 	.word	0x40020000
 8002e40:	bffdfbf8 	.word	0xbffdfbf8
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d00d      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2204      	movs	r2, #4
 8002e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e047      	b.n	8002f0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020e 	bic.w	r2, r2, #14
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
    }
  }
  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d026      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0204 	bic.w	r2, r2, #4
 8002f68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2104      	movs	r1, #4
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d071      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f8e:	e06c      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2202      	movs	r2, #2
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02e      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d029      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020a 	bic.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003000:	e033      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02a      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d025      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 020e 	bic.w	r2, r2, #14
 800302e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800306a:	bf00      	nop
 800306c:	bf00      	nop
}
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003082:	b2db      	uxtb	r3, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d802      	bhi.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80030a4:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e001      	b.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3b08      	subs	r3, #8
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40020407 	.word	0x40020407
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020820 	.word	0x40020820
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	40020880 	.word	0x40020880

0800310c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a08      	ldr	r2, [pc, #32]	@ (8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800312e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3b01      	subs	r3, #1
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2201      	movs	r2, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	1000823f 	.word	0x1000823f
 8003150:	40020940 	.word	0x40020940

08003154 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e147      	b.n	80033f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fcc4 	bl	8000b08 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0210 	bic.w	r2, r2, #16
 800318e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003190:	f7fd ff9e 	bl	80010d0 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003196:	e012      	b.n	80031be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003198:	f7fd ff9a 	bl	80010d0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b0a      	cmp	r3, #10
 80031a4:	d90b      	bls.n	80031be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2203      	movs	r2, #3
 80031b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e11b      	b.n	80033f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d0e5      	beq.n	8003198 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031dc:	f7fd ff78 	bl	80010d0 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031e2:	e012      	b.n	800320a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031e4:	f7fd ff74 	bl	80010d0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d90b      	bls.n	800320a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0f5      	b.n	80033f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0e5      	beq.n	80031e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0202 	orr.w	r2, r2, #2
 8003226:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a74      	ldr	r2, [pc, #464]	@ (8003400 <HAL_FDCAN_Init+0x2ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d103      	bne.n	800323a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003232:	4a74      	ldr	r2, [pc, #464]	@ (8003404 <HAL_FDCAN_Init+0x2b0>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7c1b      	ldrb	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003250:	619a      	str	r2, [r3, #24]
 8003252:	e007      	b.n	8003264 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003262:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7c5b      	ldrb	r3, [r3, #17]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d108      	bne.n	800327e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800327a:	619a      	str	r2, [r3, #24]
 800327c:	e007      	b.n	800328e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800328c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7c9b      	ldrb	r3, [r3, #18]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a4:	619a      	str	r2, [r3, #24]
 80032a6:	e007      	b.n	80032b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80032dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0210 	bic.w	r2, r2, #16
 80032ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0204 	orr.w	r2, r2, #4
 8003304:	619a      	str	r2, [r3, #24]
 8003306:	e02c      	b.n	8003362 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d028      	beq.n	8003362 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d01c      	beq.n	8003352 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003326:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0210 	orr.w	r2, r2, #16
 8003336:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d110      	bne.n	8003362 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	e007      	b.n	8003362 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	3b01      	subs	r3, #1
 8003368:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	3b01      	subs	r3, #1
 8003370:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003372:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800337a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	3b01      	subs	r3, #1
 8003384:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800338a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800338c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003396:	d115      	bne.n	80033c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	3b01      	subs	r3, #1
 80033a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	3b01      	subs	r3, #1
 80033ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	3b01      	subs	r3, #1
 80033ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9ae 	bl	800373c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40006400 	.word	0x40006400
 8003404:	40006500 	.word	0x40006500

08003408 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	@ 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	4013      	ands	r3, r2
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343c:	4013      	ands	r3, r2
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	4013      	ands	r3, r2
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003462:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	4013      	ands	r3, r2
 800346e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800347a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	4013      	ands	r3, r2
 8003486:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003496:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2240      	movs	r2, #64	@ 0x40
 80034b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f921 	bl	80036fc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d019      	beq.n	80034f8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8e3 	bl	80036be <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80034f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003504:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8a2 	bl	8003652 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800351c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8a2 	bl	8003668 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8a2 	bl	800367e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003556:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f89b 	bl	8003694 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d018      	beq.n	800359a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d013      	beq.n	800359a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800357a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2280      	movs	r2, #128	@ 0x80
 8003590:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f887 	bl	80036a8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f88b 	bl	80036d4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f883 	bl	80036e8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00f      	beq.n	800360c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800361a:	69f9      	ldr	r1, [r7, #28]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f881 	bl	8003724 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f863 	bl	8003710 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800364a:	bf00      	nop
 800364c:	3730      	adds	r7, #48	@ 0x30
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003744:	4b30      	ldr	r3, [pc, #192]	@ (8003808 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003746:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d103      	bne.n	800375a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003758:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800376a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003782:	041a      	lsls	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037a0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	061a      	lsls	r2, r3, #24
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e005      	b.n	80037ee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3304      	adds	r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3f3      	bcc.n	80037e2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	4000a400 	.word	0x4000a400
 800380c:	40006800 	.word	0x40006800
 8003810:	40006c00 	.word	0x40006c00

08003814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003822:	e15a      	b.n	8003ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 814c 	beq.w	8003ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d005      	beq.n	8003854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003850:	2b02      	cmp	r3, #2
 8003852:	d130      	bne.n	80038b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800388a:	2201      	movs	r2, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0201 	and.w	r2, r3, #1
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d017      	beq.n	80038f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d123      	bne.n	8003946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	08da      	lsrs	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3208      	adds	r2, #8
 8003906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	08da      	lsrs	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3208      	adds	r2, #8
 8003940:	6939      	ldr	r1, [r7, #16]
 8003942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a6 	beq.w	8003ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003988:	4b5b      	ldr	r3, [pc, #364]	@ (8003af8 <HAL_GPIO_Init+0x2e4>)
 800398a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398c:	4a5a      	ldr	r2, [pc, #360]	@ (8003af8 <HAL_GPIO_Init+0x2e4>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6613      	str	r3, [r2, #96]	@ 0x60
 8003994:	4b58      	ldr	r3, [pc, #352]	@ (8003af8 <HAL_GPIO_Init+0x2e4>)
 8003996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a0:	4a56      	ldr	r2, [pc, #344]	@ (8003afc <HAL_GPIO_Init+0x2e8>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	3302      	adds	r3, #2
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039ca:	d01f      	beq.n	8003a0c <HAL_GPIO_Init+0x1f8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003b00 <HAL_GPIO_Init+0x2ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d019      	beq.n	8003a08 <HAL_GPIO_Init+0x1f4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <HAL_GPIO_Init+0x2f0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_GPIO_Init+0x1f0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a4a      	ldr	r2, [pc, #296]	@ (8003b08 <HAL_GPIO_Init+0x2f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00d      	beq.n	8003a00 <HAL_GPIO_Init+0x1ec>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a49      	ldr	r2, [pc, #292]	@ (8003b0c <HAL_GPIO_Init+0x2f8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_Init+0x1e8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a48      	ldr	r2, [pc, #288]	@ (8003b10 <HAL_GPIO_Init+0x2fc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039f4:	2305      	movs	r3, #5
 80039f6:	e00a      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 80039f8:	2306      	movs	r3, #6
 80039fa:	e008      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e006      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a00:	2303      	movs	r3, #3
 8003a02:	e004      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e002      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	f002 0203 	and.w	r2, r2, #3
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	4093      	lsls	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1e:	4937      	ldr	r1, [pc, #220]	@ (8003afc <HAL_GPIO_Init+0x2e8>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a2c:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a50:	4a30      	ldr	r2, [pc, #192]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a56:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a7a:	4a26      	ldr	r2, [pc, #152]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ace:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <HAL_GPIO_Init+0x300>)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f ae9d 	bne.w	8003824 <HAL_GPIO_Init+0x10>
  }
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40010000 	.word	0x40010000
 8003b00:	48000400 	.word	0x48000400
 8003b04:	48000800 	.word	0x48000800
 8003b08:	48000c00 	.word	0x48000c00
 8003b0c:	48001000 	.word	0x48001000
 8003b10:	48001400 	.word	0x48001400
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b34:	e002      	b.n	8003b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b5e:	4a05      	ldr	r2, [pc, #20]	@ (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f806 	bl	8003b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e08d      	b.n	8003cbc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd f811 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2224      	movs	r2, #36	@ 0x24
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	e006      	b.n	8003c16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d108      	bne.n	8003c30 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e007      	b.n	8003c40 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69d9      	ldr	r1, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00f      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d38:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00f      	beq.n	8003d64 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00f      	beq.n	8003d8e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	f043 0202 	orr.w	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 030b 	and.w	r3, r3, #11
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fbd5 	bl	8004550 <I2C_ITError>
  }
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	70fb      	strb	r3, [r7, #3]
 8003de2:	4613      	mov	r3, r2
 8003de4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b086      	sub	sp, #24
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <I2C_Slave_ISR_IT+0x24>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0e2      	b.n	8004018 <I2C_Slave_ISR_IT+0x1ea>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e6e:	6939      	ldr	r1, [r7, #16]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9b5 	bl	80041e0 <I2C_ITSlaveCplt>
 8003e76:	e0ca      	b.n	800400e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04b      	beq.n	8003f1a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d046      	beq.n	8003f1a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d128      	bne.n	8003ee8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b28      	cmp	r3, #40	@ 0x28
 8003ea0:	d108      	bne.n	8003eb4 <I2C_Slave_ISR_IT+0x86>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ea8:	d104      	bne.n	8003eb4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003eaa:	6939      	ldr	r1, [r7, #16]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fafb 	bl	80044a8 <I2C_ITListenCplt>
 8003eb2:	e031      	b.n	8003f18 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b29      	cmp	r3, #41	@ 0x29
 8003ebe:	d10e      	bne.n	8003ede <I2C_Slave_ISR_IT+0xb0>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ec6:	d00a      	beq.n	8003ede <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fc54 	bl	800477e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f926 	bl	8004128 <I2C_ITSlaveSeqCplt>
 8003edc:	e01c      	b.n	8003f18 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ee6:	e08f      	b.n	8004008 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2210      	movs	r2, #16
 8003eee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <I2C_Slave_ISR_IT+0xdc>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f08:	d17e      	bne.n	8004008 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb1d 	bl	8004550 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f16:	e077      	b.n	8004008 <I2C_Slave_ISR_IT+0x1da>
 8003f18:	e076      	b.n	8004008 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02f      	beq.n	8003f84 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02a      	beq.n	8003f84 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d14b      	bne.n	800400c <I2C_Slave_ISR_IT+0x1de>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f7a:	d047      	beq.n	800400c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f8d3 	bl	8004128 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f82:	e043      	b.n	800400c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f98:	6939      	ldr	r1, [r7, #16]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f840 	bl	8004020 <I2C_ITAddrCplt>
 8003fa0:	e035      	b.n	800400e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d030      	beq.n	800400e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02b      	beq.n	800400e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d018      	beq.n	8003ff2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ff0:	e00d      	b.n	800400e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ff8:	d002      	beq.n	8004000 <I2C_Slave_ISR_IT+0x1d2>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f891 	bl	8004128 <I2C_ITSlaveSeqCplt>
 8004006:	e002      	b.n	800400e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800400c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004036:	2b28      	cmp	r3, #40	@ 0x28
 8004038:	d16a      	bne.n	8004110 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b29b      	uxth	r3, r3
 8004054:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004058:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004066:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004074:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d138      	bne.n	80040f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	09db      	lsrs	r3, r3, #7
 8004082:	b29a      	uxth	r2, r3
 8004084:	89bb      	ldrh	r3, [r7, #12]
 8004086:	4053      	eors	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	f003 0306 	and.w	r3, r3, #6
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11c      	bne.n	80040cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d13b      	bne.n	8004120 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2208      	movs	r2, #8
 80040b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe86 	bl	8003dd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040ca:	e029      	b.n	8004120 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80040cc:	893b      	ldrh	r3, [r7, #8]
 80040ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb94 	bl	8004802 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040e2:	89ba      	ldrh	r2, [r7, #12]
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fe74 	bl	8003dd6 <HAL_I2C_AddrCallback>
}
 80040ee:	e017      	b.n	8004120 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb84 	bl	8004802 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004102:	89ba      	ldrh	r2, [r7, #12]
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe64 	bl	8003dd6 <HAL_I2C_AddrCallback>
}
 800410e:	e007      	b.n	8004120 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00c      	b.n	8004176 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004174:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b29      	cmp	r3, #41	@ 0x29
 8004180:	d112      	bne.n	80041a8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2228      	movs	r2, #40	@ 0x28
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2221      	movs	r2, #33	@ 0x21
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004190:	2101      	movs	r1, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb35 	bl	8004802 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe04 	bl	8003dae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041a6:	e017      	b.n	80041d8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041b2:	d111      	bne.n	80041d8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2228      	movs	r2, #40	@ 0x28
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2222      	movs	r2, #34	@ 0x22
 80041c0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041c2:	2102      	movs	r1, #2
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb1c 	bl	8004802 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fdf5 	bl	8003dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004202:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2220      	movs	r2, #32
 800420a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	2b21      	cmp	r3, #33	@ 0x21
 8004210:	d002      	beq.n	8004218 <I2C_ITSlaveCplt+0x38>
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	2b29      	cmp	r3, #41	@ 0x29
 8004216:	d108      	bne.n	800422a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004218:	f248 0101 	movw	r1, #32769	@ 0x8001
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 faf0 	bl	8004802 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2221      	movs	r2, #33	@ 0x21
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
 8004228:	e019      	b.n	800425e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	2b22      	cmp	r3, #34	@ 0x22
 800422e:	d002      	beq.n	8004236 <I2C_ITSlaveCplt+0x56>
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	2b2a      	cmp	r3, #42	@ 0x2a
 8004234:	d108      	bne.n	8004248 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004236:	f248 0102 	movw	r1, #32770	@ 0x8002
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fae1 	bl	8004802 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2222      	movs	r2, #34	@ 0x22
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
 8004246:	e00a      	b.n	800425e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	2b28      	cmp	r3, #40	@ 0x28
 800424c:	d107      	bne.n	800425e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800424e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fad5 	bl	8004802 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800426c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b89      	ldr	r3, [pc, #548]	@ (80044a0 <I2C_ITSlaveCplt+0x2c0>)
 800427a:	400b      	ands	r3, r1
 800427c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa7d 	bl	800477e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d013      	beq.n	80042b6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800429c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01f      	beq.n	80042e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042b4:	e017      	b.n	80042e6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f043 0204 	orr.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d049      	beq.n	80043e6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004358:	2b00      	cmp	r3, #0
 800435a:	d044      	beq.n	80043e6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d128      	bne.n	80043b8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b28      	cmp	r3, #40	@ 0x28
 8004370:	d108      	bne.n	8004384 <I2C_ITSlaveCplt+0x1a4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004378:	d104      	bne.n	8004384 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f893 	bl	80044a8 <I2C_ITListenCplt>
 8004382:	e030      	b.n	80043e6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b29      	cmp	r3, #41	@ 0x29
 800438e:	d10e      	bne.n	80043ae <I2C_ITSlaveCplt+0x1ce>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004396:	d00a      	beq.n	80043ae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9ec 	bl	800477e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff febe 	bl	8004128 <I2C_ITSlaveSeqCplt>
 80043ac:	e01b      	b.n	80043e6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2210      	movs	r2, #16
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	e016      	b.n	80043e6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <I2C_ITSlaveCplt+0x1fa>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d8:	d105      	bne.n	80043e6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8b5 	bl	8004550 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8a4 	bl	8004550 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b28      	cmp	r3, #40	@ 0x28
 8004412:	d141      	bne.n	8004498 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f846 	bl	80044a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441c:	e03c      	b.n	8004498 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004426:	d014      	beq.n	8004452 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fe7d 	bl	8004128 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <I2C_ITSlaveCplt+0x2c4>)
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fcd1 	bl	8003df2 <HAL_I2C_ListenCpltCallback>
}
 8004450:	e022      	b.n	8004498 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b22      	cmp	r3, #34	@ 0x22
 800445c:	d10e      	bne.n	800447c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fca4 	bl	8003dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 800447a:	e00d      	b.n	8004498 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fc8b 	bl	8003dae <HAL_I2C_SlaveTxCpltCallback>
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	fe00e800 	.word	0xfe00e800
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <I2C_ITListenCplt+0xa4>)
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d022      	beq.n	8004524 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004524:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f96a 	bl	8004802 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fc57 	bl	8003df2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	ffff0000 	.word	0xffff0000

08004550 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a6d      	ldr	r2, [pc, #436]	@ (8004724 <I2C_ITError+0x1d4>)
 800456e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b28      	cmp	r3, #40	@ 0x28
 8004586:	d005      	beq.n	8004594 <I2C_ITError+0x44>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b29      	cmp	r3, #41	@ 0x29
 800458c:	d002      	beq.n	8004594 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b2a      	cmp	r3, #42	@ 0x2a
 8004592:	d10b      	bne.n	80045ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004594:	2103      	movs	r1, #3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f933 	bl	8004802 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2228      	movs	r2, #40	@ 0x28
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a60      	ldr	r2, [pc, #384]	@ (8004728 <I2C_ITError+0x1d8>)
 80045a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80045aa:	e030      	b.n	800460e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f926 	bl	8004802 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f8e1 	bl	800477e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b60      	cmp	r3, #96	@ 0x60
 80045c6:	d01f      	beq.n	8004608 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d114      	bne.n	8004608 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d109      	bne.n	8004600 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2210      	movs	r2, #16
 80045f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2220      	movs	r2, #32
 8004606:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d039      	beq.n	8004690 <I2C_ITError+0x140>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b11      	cmp	r3, #17
 8004620:	d002      	beq.n	8004628 <I2C_ITError+0xd8>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b21      	cmp	r3, #33	@ 0x21
 8004626:	d133      	bne.n	8004690 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004636:	d107      	bne.n	8004648 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004646:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fd11 	bl	8003074 <HAL_DMA_GetState>
 8004652:	4603      	mov	r3, r0
 8004654:	2b01      	cmp	r3, #1
 8004656:	d017      	beq.n	8004688 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	4a33      	ldr	r2, [pc, #204]	@ (800472c <I2C_ITError+0x1dc>)
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fbeb 	bl	8002e48 <HAL_DMA_Abort_IT>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d04d      	beq.n	8004714 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004682:	4610      	mov	r0, r2
 8004684:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004686:	e045      	b.n	8004714 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f851 	bl	8004730 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800468e:	e041      	b.n	8004714 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d039      	beq.n	800470c <I2C_ITError+0x1bc>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b12      	cmp	r3, #18
 800469c:	d002      	beq.n	80046a4 <I2C_ITError+0x154>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b22      	cmp	r3, #34	@ 0x22
 80046a2:	d133      	bne.n	800470c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b2:	d107      	bne.n	80046c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fcd3 	bl	8003074 <HAL_DMA_GetState>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d017      	beq.n	8004704 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <I2C_ITError+0x1dc>)
 80046da:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fbad 	bl	8002e48 <HAL_DMA_Abort_IT>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046fe:	4610      	mov	r0, r2
 8004700:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004702:	e009      	b.n	8004718 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f813 	bl	8004730 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800470a:	e005      	b.n	8004718 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f80f 	bl	8004730 <I2C_TreatErrorCallback>
  }
}
 8004712:	e002      	b.n	800471a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004718:	bf00      	nop
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	ffff0000 	.word	0xffff0000
 8004728:	08003e2f 	.word	0x08003e2f
 800472c:	080047c7 	.word	0x080047c7

08004730 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b60      	cmp	r3, #96	@ 0x60
 8004742:	d10e      	bne.n	8004762 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fb5d 	bl	8003e1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004760:	e009      	b.n	8004776 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fb48 	bl	8003e06 <HAL_I2C_ErrorCallback>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d103      	bne.n	800479c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d007      	beq.n	80047ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	619a      	str	r2, [r3, #24]
  }
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	2200      	movs	r2, #0
 80047e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff ff9b 	bl	8004730 <I2C_TreatErrorCallback>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004822:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004830:	2b28      	cmp	r3, #40	@ 0x28
 8004832:	d003      	beq.n	800483c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800483a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00f      	beq.n	8004866 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800484c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800485a:	2b28      	cmp	r3, #40	@ 0x28
 800485c:	d003      	beq.n	8004866 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004864:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da03      	bge.n	8004876 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d103      	bne.n	8004884 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004882:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	2b20      	cmp	r3, #32
 8004888:	d103      	bne.n	8004892 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f043 0320 	orr.w	r3, r3, #32
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004892:	887b      	ldrh	r3, [r7, #2]
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d103      	bne.n	80048a0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800489e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d138      	bne.n	8004946 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048de:	2302      	movs	r3, #2
 80048e0:	e032      	b.n	8004948 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2224      	movs	r2, #36	@ 0x24
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004910:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b20      	cmp	r3, #32
 8004968:	d139      	bne.n	80049de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004974:	2302      	movs	r3, #2
 8004976:	e033      	b.n	80049e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	@ 0x24
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d141      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d131      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a08:	4b47      	ldr	r3, [pc, #284]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a0e:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a18:	4b43      	ldr	r3, [pc, #268]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a20:	4a41      	ldr	r2, [pc, #260]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a28:	4b40      	ldr	r3, [pc, #256]	@ (8004b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2232      	movs	r2, #50	@ 0x32
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	4a3f      	ldr	r2, [pc, #252]	@ (8004b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	0c9b      	lsrs	r3, r3, #18
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a3e:	e002      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a46:	4b38      	ldr	r3, [pc, #224]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d102      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f2      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a5a:	4b33      	ldr	r3, [pc, #204]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a66:	d158      	bne.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e057      	b.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a7c:	e04d      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a84:	d141      	bne.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a86:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a92:	d131      	bne.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a9a:	4a23      	ldr	r2, [pc, #140]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aa4:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aac:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2232      	movs	r2, #50	@ 0x32
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	4a1c      	ldr	r2, [pc, #112]	@ (8004b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0c9b      	lsrs	r3, r3, #18
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aca:	e002      	b.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad2:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d102      	bne.n	8004ae6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f2      	bne.n	8004acc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae6:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af2:	d112      	bne.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e011      	b.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afe:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b08:	e007      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b12:	4a05      	ldr	r2, [pc, #20]	@ (8004b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	20000000 	.word	0x20000000
 8004b30:	431bde83 	.word	0x431bde83

08004b34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	@ (8004b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b42:	6093      	str	r3, [r2, #8]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40007000 	.word	0x40007000

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e2fe      	b.n	8005164 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d075      	beq.n	8004c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b97      	ldr	r3, [pc, #604]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7c:	4b94      	ldr	r3, [pc, #592]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3e>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d002      	beq.n	8004b98 <HAL_RCC_OscConfig+0x44>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d10b      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b98:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05b      	beq.n	8004c5c <HAL_RCC_OscConfig+0x108>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d157      	bne.n	8004c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e2d9      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x74>
 8004bba:	4b85      	ldr	r3, [pc, #532]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a84      	ldr	r2, [pc, #528]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <HAL_RCC_OscConfig+0xb0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0x98>
 8004bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a7b      	ldr	r2, [pc, #492]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0xb0>
 8004bec:	4b78      	ldr	r3, [pc, #480]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a77      	ldr	r2, [pc, #476]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b75      	ldr	r3, [pc, #468]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a74      	ldr	r2, [pc, #464]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fc fa60 	bl	80010d0 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fc fa5c 	bl	80010d0 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	@ 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e29e      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c26:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0xc0>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc fa4c 	bl	80010d0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fc fa48 	bl	80010d0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e28a      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c4e:	4b60      	ldr	r3, [pc, #384]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0xe8>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d075      	beq.n	8004d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6a:	4b59      	ldr	r3, [pc, #356]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c74:	4b56      	ldr	r3, [pc, #344]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_OscConfig+0x136>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d002      	beq.n	8004c90 <HAL_RCC_OscConfig+0x13c>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11f      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c90:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x154>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e25d      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b49      	ldr	r3, [pc, #292]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	4946      	ldr	r1, [pc, #280]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cbc:	4b45      	ldr	r3, [pc, #276]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc f9b9 	bl	8001038 <HAL_InitTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d043      	beq.n	8004d54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e249      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d023      	beq.n	8004d20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc f9f4 	bl	80010d0 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fc f9f0 	bl	80010d0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e232      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfe:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b31      	ldr	r3, [pc, #196]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	492d      	ldr	r1, [pc, #180]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
 8004d1e:	e01a      	b.n	8004d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc f9d0 	bl	80010d0 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d34:	f7fc f9cc 	bl	80010d0 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e20e      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x1e0>
 8004d52:	e000      	b.n	8004d56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d041      	beq.n	8004de6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6a:	4b19      	ldr	r3, [pc, #100]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d70:	4a17      	ldr	r2, [pc, #92]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fc f9a9 	bl	80010d0 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d82:	f7fc f9a5 	bl	80010d0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1e7      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d94:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ef      	beq.n	8004d82 <HAL_RCC_OscConfig+0x22e>
 8004da2:	e020      	b.n	8004de6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004daa:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fc f98c 	bl	80010d0 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dba:	e00d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fc f988 	bl	80010d0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d906      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1ca      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ea      	bne.n	8004dbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80a6 	beq.w	8004f40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004df8:	4b84      	ldr	r3, [pc, #528]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x2b4>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x2b6>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	4a7e      	ldr	r2, [pc, #504]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2a:	4b79      	ldr	r3, [pc, #484]	@ (8005010 <HAL_RCC_OscConfig+0x4bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d118      	bne.n	8004e68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e36:	4b76      	ldr	r3, [pc, #472]	@ (8005010 <HAL_RCC_OscConfig+0x4bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a75      	ldr	r2, [pc, #468]	@ (8005010 <HAL_RCC_OscConfig+0x4bc>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fc f945 	bl	80010d0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fc f941 	bl	80010d0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e183      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005010 <HAL_RCC_OscConfig+0x4bc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_RCC_OscConfig+0x32e>
 8004e70:	4b66      	ldr	r3, [pc, #408]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e76:	4a65      	ldr	r2, [pc, #404]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e80:	e024      	b.n	8004ecc <HAL_RCC_OscConfig+0x378>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d110      	bne.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e8a:	4b60      	ldr	r3, [pc, #384]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e90:	4a5e      	ldr	r2, [pc, #376]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea0:	4a5a      	ldr	r2, [pc, #360]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCC_OscConfig+0x378>
 8004eac:	4b57      	ldr	r3, [pc, #348]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	4a56      	ldr	r2, [pc, #344]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ebc:	4b53      	ldr	r3, [pc, #332]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	4a52      	ldr	r2, [pc, #328]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fc f8fc 	bl	80010d0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fc f8f8 	bl	80010d0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e138      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef2:	4b46      	ldr	r3, [pc, #280]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ed      	beq.n	8004edc <HAL_RCC_OscConfig+0x388>
 8004f00:	e015      	b.n	8004f2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7fc f8e5 	bl	80010d0 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fc f8e1 	bl	80010d0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e121      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f20:	4b3a      	ldr	r3, [pc, #232]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ed      	bne.n	8004f0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f34:	4b35      	ldr	r3, [pc, #212]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	4a34      	ldr	r2, [pc, #208]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f54:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fc f8b4 	bl	80010d0 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f6c:	f7fc f8b0 	bl	80010d0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0f2      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f7e:	4b23      	ldr	r3, [pc, #140]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <HAL_RCC_OscConfig+0x418>
 8004f8c:	e01b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f94:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7fc f897 	bl	80010d0 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa6:	f7fc f893 	bl	80010d0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0d5      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fb8:	4b14      	ldr	r3, [pc, #80]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ef      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80c9 	beq.w	8005162 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	f000 8083 	beq.w	80050e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d15e      	bne.n	80050a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b09      	ldr	r3, [pc, #36]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a08      	ldr	r2, [pc, #32]	@ (800500c <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fc f86d 	bl	80010d0 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff8:	e00c      	b.n	8005014 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc f869 	bl	80010d0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d905      	bls.n	8005014 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e0ab      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
 800500c:	40021000 	.word	0x40021000
 8005010:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	4b55      	ldr	r3, [pc, #340]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1ec      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005020:	4b52      	ldr	r3, [pc, #328]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4b52      	ldr	r3, [pc, #328]	@ (8005170 <HAL_RCC_OscConfig+0x61c>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6a11      	ldr	r1, [r2, #32]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005030:	3a01      	subs	r2, #1
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800503a:	0212      	lsls	r2, r2, #8
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0552      	lsls	r2, r2, #21
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800504e:	0852      	lsrs	r2, r2, #1
 8005050:	3a01      	subs	r2, #1
 8005052:	0652      	lsls	r2, r2, #25
 8005054:	4311      	orrs	r1, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800505a:	06d2      	lsls	r2, r2, #27
 800505c:	430a      	orrs	r2, r1
 800505e:	4943      	ldr	r1, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005060:	4313      	orrs	r3, r2
 8005062:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a40      	ldr	r2, [pc, #256]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005070:	4b3e      	ldr	r3, [pc, #248]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a3d      	ldr	r2, [pc, #244]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fc f828 	bl	80010d0 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fc f824 	bl	80010d0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e066      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x530>
 80050a2:	e05e      	b.n	8005162 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a4:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a30      	ldr	r2, [pc, #192]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fc f80e 	bl	80010d0 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fc f80a 	bl	80010d0 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04c      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ca:	4b28      	ldr	r3, [pc, #160]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050d6:	4b25      	ldr	r3, [pc, #148]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	4924      	ldr	r1, [pc, #144]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_RCC_OscConfig+0x620>)
 80050de:	4013      	ands	r3, r2
 80050e0:	60cb      	str	r3, [r1, #12]
 80050e2:	e03e      	b.n	8005162 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e039      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050f0:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_RCC_OscConfig+0x618>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 0203 	and.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	429a      	cmp	r2, r3
 8005102:	d12c      	bne.n	800515e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	3b01      	subs	r3, #1
 8005110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d123      	bne.n	800515e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11b      	bne.n	800515e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d113      	bne.n	800515e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d109      	bne.n	800515e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	019f800c 	.word	0x019f800c
 8005174:	feeefffc 	.word	0xfeeefffc

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e11e      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b91      	ldr	r3, [pc, #580]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b8e      	ldr	r3, [pc, #568]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	498c      	ldr	r1, [pc, #560]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b8a      	ldr	r3, [pc, #552]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e106      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d073      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d129      	bne.n	8005228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d4:	4b81      	ldr	r3, [pc, #516]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0f4      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051e4:	f000 f966 	bl	80054b4 <RCC_GetSysClockFreqFromPLLSource>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4a7c      	ldr	r2, [pc, #496]	@ (80053e0 <HAL_RCC_ClockConfig+0x268>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d93f      	bls.n	8005272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051f2:	4b7a      	ldr	r3, [pc, #488]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005206:	2b00      	cmp	r3, #0
 8005208:	d033      	beq.n	8005272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12f      	bne.n	8005272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005212:	4b72      	ldr	r3, [pc, #456]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800521a:	4a70      	ldr	r2, [pc, #448]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e024      	b.n	8005272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d107      	bne.n	8005240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005230:	4b6a      	ldr	r3, [pc, #424]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0c6      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005240:	4b66      	ldr	r3, [pc, #408]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0be      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005250:	f000 f8ce 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <HAL_RCC_ClockConfig+0x268>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d909      	bls.n	8005272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800525e:	4b5f      	ldr	r3, [pc, #380]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005266:	4a5d      	ldr	r2, [pc, #372]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b5a      	ldr	r3, [pc, #360]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4957      	ldr	r1, [pc, #348]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005284:	f7fb ff24 	bl	80010d0 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fb ff20 	bl	80010d0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e095      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b4e      	ldr	r3, [pc, #312]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d023      	beq.n	8005308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052cc:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a42      	ldr	r2, [pc, #264]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052e4:	4b3d      	ldr	r3, [pc, #244]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052ec:	4a3b      	ldr	r2, [pc, #236]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4936      	ldr	r1, [pc, #216]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
 8005306:	e008      	b.n	800531a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b80      	cmp	r3, #128	@ 0x80
 800530c:	d105      	bne.n	800531a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800530e:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	4a32      	ldr	r2, [pc, #200]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005314:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d21d      	bcs.n	8005364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 020f 	bic.w	r2, r3, #15
 8005330:	4929      	ldr	r1, [pc, #164]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005338:	f7fb feca 	bl	80010d0 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fb fec6 	bl	80010d0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e03b      	b.n	80053ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <HAL_RCC_ClockConfig+0x260>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d1ed      	bne.n	8005340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005370:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4917      	ldr	r1, [pc, #92]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538e:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	490f      	ldr	r1, [pc, #60]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053a2:	f000 f825 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <HAL_RCC_ClockConfig+0x264>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	490c      	ldr	r1, [pc, #48]	@ (80053e4 <HAL_RCC_ClockConfig+0x26c>)
 80053b4:	5ccb      	ldrb	r3, [r1, r3]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	fa22 f303 	lsr.w	r3, r2, r3
 80053be:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <HAL_RCC_ClockConfig+0x270>)
 80053c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <HAL_RCC_ClockConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb fe36 	bl	8001038 <HAL_InitTick>
 80053cc:	4603      	mov	r3, r0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40022000 	.word	0x40022000
 80053dc:	40021000 	.word	0x40021000
 80053e0:	04c4b400 	.word	0x04c4b400
 80053e4:	0800675c 	.word	0x0800675c
 80053e8:	20000000 	.word	0x20000000
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053f6:	4b2c      	ldr	r3, [pc, #176]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d102      	bne.n	8005408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005402:	4b2a      	ldr	r3, [pc, #168]	@ (80054ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	e047      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005408:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b08      	cmp	r3, #8
 8005412:	d102      	bne.n	800541a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005414:	4b26      	ldr	r3, [pc, #152]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e03e      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800541a:	4b23      	ldr	r3, [pc, #140]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d136      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005426:	4b20      	ldr	r3, [pc, #128]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	3301      	adds	r3, #1
 800543c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d10c      	bne.n	800545e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005444:	4a1a      	ldr	r2, [pc, #104]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	4a16      	ldr	r2, [pc, #88]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800544e:	68d2      	ldr	r2, [r2, #12]
 8005450:	0a12      	lsrs	r2, r2, #8
 8005452:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]
      break;
 800545c:	e00c      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800545e:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	4a10      	ldr	r2, [pc, #64]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005468:	68d2      	ldr	r2, [r2, #12]
 800546a:	0a12      	lsrs	r2, r2, #8
 800546c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005470:	fb02 f303 	mul.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
      break;
 8005476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	0e5b      	lsrs	r3, r3, #25
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	3301      	adds	r3, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e001      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005498:	693b      	ldr	r3, [r7, #16]
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	016e3600 	.word	0x016e3600

080054b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d10c      	bne.n	80054f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054d8:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054e2:	68d2      	ldr	r2, [r2, #12]
 80054e4:	0a12      	lsrs	r2, r2, #8
 80054e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	617b      	str	r3, [r7, #20]
    break;
 80054f0:	e00c      	b.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054fc:	68d2      	ldr	r2, [r2, #12]
 80054fe:	0a12      	lsrs	r2, r2, #8
 8005500:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]
    break;
 800550a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800550c:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	0e5b      	lsrs	r3, r3, #25
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	3301      	adds	r3, #1
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005526:	687b      	ldr	r3, [r7, #4]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40021000 	.word	0x40021000
 8005538:	016e3600 	.word	0x016e3600
 800553c:	00f42400 	.word	0x00f42400

08005540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005548:	2300      	movs	r3, #0
 800554a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800554c:	2300      	movs	r3, #0
 800554e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8098 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555e:	2300      	movs	r3, #0
 8005560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005562:	4b43      	ldr	r3, [pc, #268]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10d      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	4b40      	ldr	r3, [pc, #256]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005572:	4a3f      	ldr	r2, [pc, #252]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005578:	6593      	str	r3, [r2, #88]	@ 0x58
 800557a:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005586:	2301      	movs	r3, #1
 8005588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558a:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a39      	ldr	r2, [pc, #228]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005596:	f7fb fd9b 	bl	80010d0 <HAL_GetTick>
 800559a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559c:	e009      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800559e:	f7fb fd97 	bl	80010d0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d902      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	74fb      	strb	r3, [r7, #19]
        break;
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b2:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d159      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01e      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d019      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e0:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ec:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800560c:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fb fd57 	bl	80010d0 <HAL_GetTick>
 8005622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005624:	e00b      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fb fd53 	bl	80010d0 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d902      	bls.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	74fb      	strb	r3, [r7, #19]
            break;
 800563c:	e006      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ec      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005658:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005660:	4903      	ldr	r1, [pc, #12]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005668:	e008      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	74bb      	strb	r3, [r7, #18]
 800566e:	e005      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567c:	7c7b      	ldrb	r3, [r7, #17]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005682:	4ba7      	ldr	r3, [pc, #668]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4aa6      	ldr	r2, [pc, #664]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569a:	4ba1      	ldr	r3, [pc, #644]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	499d      	ldr	r1, [pc, #628]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056bc:	4b98      	ldr	r3, [pc, #608]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f023 020c 	bic.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4995      	ldr	r1, [pc, #596]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056de:	4b90      	ldr	r3, [pc, #576]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	498c      	ldr	r1, [pc, #560]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005700:	4b87      	ldr	r3, [pc, #540]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4984      	ldr	r1, [pc, #528]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005722:	4b7f      	ldr	r3, [pc, #508]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	497b      	ldr	r1, [pc, #492]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005744:	4b76      	ldr	r3, [pc, #472]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	4973      	ldr	r1, [pc, #460]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005766:	4b6e      	ldr	r3, [pc, #440]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	496a      	ldr	r1, [pc, #424]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005788:	4b65      	ldr	r3, [pc, #404]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4962      	ldr	r1, [pc, #392]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	4959      	ldr	r1, [pc, #356]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057cc:	4b54      	ldr	r3, [pc, #336]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057d2:	f023 0203 	bic.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	4951      	ldr	r1, [pc, #324]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	4948      	ldr	r1, [pc, #288]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005810:	4b43      	ldr	r3, [pc, #268]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	4940      	ldr	r1, [pc, #256]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582e:	d105      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005830:	4b3b      	ldr	r3, [pc, #236]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a3a      	ldr	r2, [pc, #232]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800583a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005848:	4b35      	ldr	r3, [pc, #212]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005856:	4932      	ldr	r1, [pc, #200]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005866:	d105      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005868:	4b2d      	ldr	r3, [pc, #180]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005872:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d015      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005880:	4b27      	ldr	r3, [pc, #156]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005886:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588e:	4924      	ldr	r1, [pc, #144]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800589e:	d105      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058b8:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c6:	4916      	ldr	r1, [pc, #88]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d6:	d105      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d8:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a10      	ldr	r2, [pc, #64]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d019      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	4908      	ldr	r1, [pc, #32]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590e:	d109      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	4b03      	ldr	r3, [pc, #12]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a02      	ldr	r2, [pc, #8]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800591a:	60d3      	str	r3, [r2, #12]
 800591c:	e002      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005930:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	4926      	ldr	r1, [pc, #152]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594e:	d105      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005950:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a20      	ldr	r2, [pc, #128]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005976:	4918      	ldr	r1, [pc, #96]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d105      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005992:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d015      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ae:	490a      	ldr	r1, [pc, #40]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c0:	4b05      	ldr	r3, [pc, #20]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a04      	ldr	r2, [pc, #16]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000

080059dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e049      	b.n	8005a82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb f9cc 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f000 f94a 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0ff      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b14      	cmp	r3, #20
 8005ab6:	f200 80f0 	bhi.w	8005c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005aba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b15 	.word	0x08005b15
 8005ac4:	08005c9b 	.word	0x08005c9b
 8005ac8:	08005c9b 	.word	0x08005c9b
 8005acc:	08005c9b 	.word	0x08005c9b
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005c9b 	.word	0x08005c9b
 8005ad8:	08005c9b 	.word	0x08005c9b
 8005adc:	08005c9b 	.word	0x08005c9b
 8005ae0:	08005b97 	.word	0x08005b97
 8005ae4:	08005c9b 	.word	0x08005c9b
 8005ae8:	08005c9b 	.word	0x08005c9b
 8005aec:	08005c9b 	.word	0x08005c9b
 8005af0:	08005bd7 	.word	0x08005bd7
 8005af4:	08005c9b 	.word	0x08005c9b
 8005af8:	08005c9b 	.word	0x08005c9b
 8005afc:	08005c9b 	.word	0x08005c9b
 8005b00:	08005c19 	.word	0x08005c19
 8005b04:	08005c9b 	.word	0x08005c9b
 8005b08:	08005c9b 	.word	0x08005c9b
 8005b0c:	08005c9b 	.word	0x08005c9b
 8005b10:	08005c59 	.word	0x08005c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f97e 	bl	8005e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]
      break;
 8005b52:	e0a5      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f9f8 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]
      break;
 8005b94:	e084      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fa6b 	bl	8006078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0204 	bic.w	r2, r2, #4
 8005bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      break;
 8005bd4:	e064      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fadd 	bl	800619c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	021a      	lsls	r2, r3, #8
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	61da      	str	r2, [r3, #28]
      break;
 8005c16:	e043      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fb50 	bl	80062c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c56:	e023      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fb9a 	bl	8006398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c98:	e002      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d017      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd2:	d013      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a49      	ldr	r2, [pc, #292]	@ (8005dfc <TIM_Base_SetConfig+0x148>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a48      	ldr	r2, [pc, #288]	@ (8005e00 <TIM_Base_SetConfig+0x14c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a47      	ldr	r2, [pc, #284]	@ (8005e04 <TIM_Base_SetConfig+0x150>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a46      	ldr	r2, [pc, #280]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a45      	ldr	r2, [pc, #276]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a39      	ldr	r2, [pc, #228]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d023      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1c:	d01f      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a36      	ldr	r2, [pc, #216]	@ (8005dfc <TIM_Base_SetConfig+0x148>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01b      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <TIM_Base_SetConfig+0x14c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d017      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a34      	ldr	r2, [pc, #208]	@ (8005e04 <TIM_Base_SetConfig+0x150>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a33      	ldr	r2, [pc, #204]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00f      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a33      	ldr	r2, [pc, #204]	@ (8005e10 <TIM_Base_SetConfig+0x15c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <TIM_Base_SetConfig+0x160>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a31      	ldr	r2, [pc, #196]	@ (8005e18 <TIM_Base_SetConfig+0x164>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2c      	ldr	r2, [pc, #176]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d108      	bne.n	8005d70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e10 <TIM_Base_SetConfig+0x15c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a19      	ldr	r2, [pc, #100]	@ (8005e14 <TIM_Base_SetConfig+0x160>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <TIM_Base_SetConfig+0x164>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a13      	ldr	r2, [pc, #76]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d105      	bne.n	8005dea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]
  }
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40015000 	.word	0x40015000
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 0201 	bic.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0302 	bic.w	r3, r3, #2
 8005e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a30      	ldr	r2, [pc, #192]	@ (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <TIM_OC1_SetConfig+0x120>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00f      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <TIM_OC1_SetConfig+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <TIM_OC1_SetConfig+0x128>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <TIM_OC1_SetConfig+0x12c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <TIM_OC1_SetConfig+0x130>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0308 	bic.w	r3, r3, #8
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f3c <TIM_OC1_SetConfig+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <TIM_OC1_SetConfig+0x124>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <TIM_OC1_SetConfig+0x128>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <TIM_OC1_SetConfig+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <TIM_OC1_SetConfig+0x130>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800
 8005f4c:	40015000 	.word	0x40015000

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f023 0210 	bic.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a2c      	ldr	r2, [pc, #176]	@ (8006060 <TIM_OC2_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <TIM_OC2_SetConfig+0x74>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006064 <TIM_OC2_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_OC2_SetConfig+0x74>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <TIM_OC2_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10d      	bne.n	8005fe0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <TIM_OC2_SetConfig+0x110>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	@ (8006064 <TIM_OC2_SetConfig+0x114>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800606c <TIM_OC2_SetConfig+0x11c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <TIM_OC2_SetConfig+0x120>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <TIM_OC2_SetConfig+0x124>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a17      	ldr	r2, [pc, #92]	@ (8006068 <TIM_OC2_SetConfig+0x118>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d113      	bne.n	8006038 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400
 8006068:	40015000 	.word	0x40015000
 800606c:	40014000 	.word	0x40014000
 8006070:	40014400 	.word	0x40014400
 8006074:	40014800 	.word	0x40014800

08006078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006184 <TIM_OC3_SetConfig+0x10c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <TIM_OC3_SetConfig+0x72>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006188 <TIM_OC3_SetConfig+0x110>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC3_SetConfig+0x72>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	@ (800618c <TIM_OC3_SetConfig+0x114>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10d      	bne.n	8006106 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1e      	ldr	r2, [pc, #120]	@ (8006184 <TIM_OC3_SetConfig+0x10c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a1d      	ldr	r2, [pc, #116]	@ (8006188 <TIM_OC3_SetConfig+0x110>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <TIM_OC3_SetConfig+0x118>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <TIM_OC3_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <TIM_OC3_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <TIM_OC3_SetConfig+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d113      	bne.n	800615e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40015000 	.word	0x40015000
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800

0800619c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <TIM_OC4_SetConfig+0x110>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_OC4_SetConfig+0x74>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a2b      	ldr	r2, [pc, #172]	@ (80062b0 <TIM_OC4_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_OC4_SetConfig+0x74>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <TIM_OC4_SetConfig+0x118>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10d      	bne.n	800622c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800622a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ac <TIM_OC4_SetConfig+0x110>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <TIM_OC4_SetConfig+0x114>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <TIM_OC4_SetConfig+0x11c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1d      	ldr	r2, [pc, #116]	@ (80062bc <TIM_OC4_SetConfig+0x120>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1c      	ldr	r2, [pc, #112]	@ (80062c0 <TIM_OC4_SetConfig+0x124>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <TIM_OC4_SetConfig+0x118>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d113      	bne.n	8006284 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006262:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800626a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	019b      	lsls	r3, r3, #6
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40015000 	.word	0x40015000
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a19      	ldr	r2, [pc, #100]	@ (8006380 <TIM_OC5_SetConfig+0xbc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a18      	ldr	r2, [pc, #96]	@ (8006384 <TIM_OC5_SetConfig+0xc0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <TIM_OC5_SetConfig+0xc4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC5_SetConfig+0xc8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC5_SetConfig+0xcc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a14      	ldr	r2, [pc, #80]	@ (8006394 <TIM_OC5_SetConfig+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d109      	bne.n	800635a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	621a      	str	r2, [r3, #32]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40013400 	.word	0x40013400
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800
 8006394:	40015000 	.word	0x40015000

08006398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	051b      	lsls	r3, r3, #20
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006458 <TIM_OC6_SetConfig+0xc0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a19      	ldr	r2, [pc, #100]	@ (800645c <TIM_OC6_SetConfig+0xc4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00f      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <TIM_OC6_SetConfig+0xc8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <TIM_OC6_SetConfig+0xcc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_OC6_SetConfig+0xd0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a15      	ldr	r2, [pc, #84]	@ (800646c <TIM_OC6_SetConfig+0xd4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d109      	bne.n	8006430 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40013400 	.word	0x40013400
 8006460:	40014000 	.word	0x40014000
 8006464:	40014400 	.word	0x40014400
 8006468:	40014800 	.word	0x40014800
 800646c:	40015000 	.word	0x40015000

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e074      	b.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a34      	ldr	r2, [pc, #208]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a33      	ldr	r2, [pc, #204]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a31      	ldr	r2, [pc, #196]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a21      	ldr	r2, [pc, #132]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006508:	d01d      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1f      	ldr	r2, [pc, #124]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a18      	ldr	r2, [pc, #96]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a11      	ldr	r2, [pc, #68]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d10c      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4313      	orrs	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40013400 	.word	0x40013400
 8006588:	40015000 	.word	0x40015000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e078      	b.n	80066aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a19      	ldr	r2, [pc, #100]	@ (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d11c      	bne.n	8006698 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	051b      	lsls	r3, r3, #20
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40013400 	.word	0x40013400
 80066c0:	40015000 	.word	0x40015000

080066c4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066da:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <memset>:
 80066ea:	4402      	add	r2, r0
 80066ec:	4603      	mov	r3, r0
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d100      	bne.n	80066f4 <memset+0xa>
 80066f2:	4770      	bx	lr
 80066f4:	f803 1b01 	strb.w	r1, [r3], #1
 80066f8:	e7f9      	b.n	80066ee <memset+0x4>
	...

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	@ (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	@ (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	@ (8006740 <__libc_init_array+0x44>)
 8006710:	f000 f818 	bl	8006744 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	0800676c 	.word	0x0800676c
 8006738:	0800676c 	.word	0x0800676c
 800673c:	0800676c 	.word	0x0800676c
 8006740:	08006770 	.word	0x08006770

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
