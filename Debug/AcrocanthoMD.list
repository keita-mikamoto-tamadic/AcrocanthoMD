
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c250  0800c250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c270  0800c270  0000e068  2**0
                  CONTENTS
  4 .ARM          00000000  0800c270  0800c270  0000e068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c270  0800c270  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0800c270  0800c270  0000d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000014  0800c288  0800c288  0000d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c29c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000068  0800c304  0000e068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800c304  0000e584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039626  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d5b  00000000  00000000  000476be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  0004e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001960  00000000  00000000  00050548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f72f  00000000  00000000  00051ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250ae  00000000  00000000  000815d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001281d8  00000000  00000000  000a6685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ce85d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096b4  00000000  00000000  001ce8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001d7f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c238 	.word	0x0800c238

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800c238 	.word	0x0800c238

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <_ZN8UserTask7getDataEv>:
  void cyclicTask();
  void idleTask();
  void motorControl();

  // getter
  UserTaskData* getData() { return data.get(); }
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fb46 	bl	80010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_ZN3Ang7raw2radEt>:

  void elecAngVel();

  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000aa8 <_ZN3Ang7raw2radEt+0x38>
 8000a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000aac <_ZN3Ang7raw2radEt+0x3c>
 8000a92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a96:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40c90fdb 	.word	0x40c90fdb
 8000aac:	45800000 	.word	0x45800000

08000ab0 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TASK_TIME * static_cast<float>(compTime));
 8000abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000b38 <_ZN3Ang8raw2radsEs+0x88>
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000b3c <_ZN3Ang8raw2radsEs+0x8c>
 8000ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ad8:	ee16 0a90 	vmov	r0, s13
 8000adc:	f7ff fd00 	bl	80004e0 <__aeabi_f2d>
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7b9b      	ldrb	r3, [r3, #14]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af0:	ee17 0a90 	vmov	r0, s15
 8000af4:	f7ff fcf4 	bl	80004e0 <__aeabi_f2d>
 8000af8:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b30 <_ZN3Ang8raw2radsEs+0x80>)
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	f7ff fd47 	bl	8000590 <__aeabi_dmul>
 8000b02:	4602      	mov	r2, r0
 8000b04:	460b      	mov	r3, r1
 8000b06:	4620      	mov	r0, r4
 8000b08:	4629      	mov	r1, r5
 8000b0a:	f7ff fe6b 	bl	80007e4 <__aeabi_ddiv>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4610      	mov	r0, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	f7ff ff4d 	bl	80009b4 <__aeabi_d2f>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	ee07 3a90 	vmov	s15, r3
  }
 8000b20:	eeb0 0a67 	vmov.f32	s0, s15
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	f3af 8000 	nop.w
 8000b30:	cd630163 	.word	0xcd630163
 8000b34:	3f0a3618 	.word	0x3f0a3618
 8000b38:	40c90fdb 	.word	0x40c90fdb
 8000b3c:	45800000 	.word	0x45800000

08000b40 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "user_task.h"

extern Ang ang;
extern UserTask usertask;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fb0f 	bl	8001170 <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x74>)
 8000b56:	605a      	str	r2, [r3, #4]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	731a      	strb	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	735a      	strb	r2, [r3, #13]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	739a      	strb	r2, [r3, #14]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	82da      	strh	r2, [r3, #22]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	831a      	strh	r2, [r3, #24]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	851a      	strh	r2, [r3, #40]	@ 0x28
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	42480000 	.word	0x42480000

08000bb8 <_ZN3Ang4readEv>:

void Ang::read() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b1b      	ldrb	r3, [r3, #12]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00c      	beq.n	8000be8 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6898      	ldr	r0, [r3, #8]
 8000bd6:	f107 020f 	add.w	r2, r7, #15
 8000bda:	2301      	movs	r3, #1
 8000bdc:	216c      	movs	r1, #108	@ 0x6c
 8000bde:	f007 f993 	bl	8007f08 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	731a      	strb	r2, [r3, #12]
  }
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf14      	ite	ne
 8000c04:	2301      	movne	r3, #1
 8000c06:	2300      	moveq	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00c      	beq.n	8000c28 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6898      	ldr	r0, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f103 0214 	add.w	r2, r3, #20
 8000c18:	2302      	movs	r3, #2
 8000c1a:	216c      	movs	r1, #108	@ 0x6c
 8000c1c:	f007 fa88 	bl	8008130 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  read();
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffbd 	bl	8000bb8 <_ZN3Ang4readEv>
  receive();
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffd6 	bl	8000bf0 <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d033      	beq.n	8000cc2 <_ZN3Ang8getAngleEv+0x92>
    rawAngPast = rawAng;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	8ada      	ldrh	r2, [r3, #22]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	831a      	strh	r2, [r3, #24]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7d1b      	ldrb	r3, [r3, #20]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7d52      	ldrb	r2, [r2, #21]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	82da      	strh	r2, [r3, #22]
    mechAngPast = data->mechAng;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa96 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61da      	str	r2, [r3, #28]
    data->mechAng = raw2rad(rawAng);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	8add      	ldrh	r5, [r3, #22]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fa8c 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c92:	4604      	mov	r4, r0
 8000c94:	4629      	mov	r1, r5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff feea 	bl	8000a70 <_ZN3Ang7raw2radEt>
 8000c9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ca0:	edc4 7a02 	vstr	s15, [r4, #8]
    
    readStart = false;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	731a      	strb	r2, [r3, #12]
    i2c_rx_complete = false;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    // 速度時間割りのためのカウンタ保存
    compTime = comp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b5a      	ldrb	r2, [r3, #13]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	739a      	strb	r2, [r3, #14]
    comp = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	735a      	strb	r2, [r3, #13]

  } else ++comp;

}
 8000cc0:	e005      	b.n	8000cce <_ZN3Ang8getAngleEv+0x9e>
  } else ++comp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7b5b      	ldrb	r3, [r3, #13]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	735a      	strb	r2, [r3, #13]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdb0      	pop	{r4, r5, r7, pc}

08000cd6 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000cd6:	b5b0      	push	{r4, r5, r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  if (comp) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b5b      	ldrb	r3, [r3, #13]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d13c      	bne.n	8000d60 <_ZN3Ang6getVelEv+0x8a>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8ada      	ldrh	r2, [r3, #22]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	8b1b      	ldrh	r3, [r3, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	841a      	strh	r2, [r3, #32]

    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    if (diff > 2048) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d02:	dd0a      	ble.n	8000d1a <_ZN3Ang6getVelEv+0x44>
      diff -= 4096;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	841a      	strh	r2, [r3, #32]
 8000d18:	e00f      	b.n	8000d3a <_ZN3Ang6getVelEv+0x64>
    } else if (diff < -2048) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d20:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000d24:	da09      	bge.n	8000d3a <_ZN3Ang6getVelEv+0x64>
      diff += 4096;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	841a      	strh	r2, [r3, #32]
    }
    
    data->actVel = raw2rads(diff);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fa31 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d48:	4604      	mov	r4, r0
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff feaf 	bl	8000ab0 <_ZN3Ang8raw2radsEs>
 8000d52:	eef0 7a40 	vmov.f32	s15, s0
 8000d56:	edc4 7a04 	vstr	s15, [r4, #16]
    mechAngleVelLPF();
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f810 	bl	8000d80 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fa21 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d70:	8313      	strh	r3, [r2, #24]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7a:	0000      	movs	r0, r0
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	ed2d 8b02 	vpush	{d8}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d92:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e48 <_ZN3Ang15mechAngleVelLPFEv+0xc8>
 8000d96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da2:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TASK_TIME * static_cast<float>(compTime)) / timeConst;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b9b      	ldrb	r3, [r3, #14]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db2:	ee17 0a90 	vmov	r0, s15
 8000db6:	f7ff fb93 	bl	80004e0 <__aeabi_f2d>
 8000dba:	a321      	add	r3, pc, #132	@ (adr r3, 8000e40 <_ZN3Ang15mechAngleVelLPFEv+0xc0>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fbe6 	bl	8000590 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4614      	mov	r4, r2
 8000dca:	461d      	mov	r5, r3
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f7ff fb87 	bl	80004e0 <__aeabi_f2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fd03 	bl	80007e4 <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fde5 	bl	80009b4 <__aeabi_d2f>
 8000dea:	4603      	mov	r3, r0
 8000dec:	60bb      	str	r3, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9da 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000df6:	4603      	mov	r3, r0
 8000df8:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e00:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e0c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f9c9 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e1e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f9c0 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8000e30:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	ecbd 8b02 	vpop	{d8}
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	cd630163 	.word	0xcd630163
 8000e44:	3f0a3618 	.word	0x3f0a3618
 8000e48:	40c90fdb 	.word	0x40c90fdb

08000e4c <_ZN3Ang7elecAngEv>:

float Ang::elecAng() {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  // comp = 0のときサンプル値更新あり
  // 次の更新まで2周期を補間するので3で割った値を足す
  if (comp == 0) rawElecComp = rawAng;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <_ZN3Ang7elecAngEv+0x1a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8ada      	ldrh	r2, [r3, #22]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000e64:	e00f      	b.n	8000e86 <_ZN3Ang7elecAngEv+0x3a>
  else rawElecComp = rawAng + (diff / 3);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	8ada      	ldrh	r2, [r3, #22]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e70:	4927      	ldr	r1, [pc, #156]	@ (8000f10 <_ZN3Ang7elecAngEv+0xc4>)
 8000e72:	fb81 0103 	smull	r0, r1, r1, r3
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	861a      	strh	r2, [r3, #48]	@ 0x30
  
  // 電気角反転
  static uint16_t elecAngtemp_ = 0;
  if (elecAngDir > 0) {
    elecAngtemp_ = rawElecComp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <_ZN3Ang7elecAngEv+0xc8>)
 8000e8c:	801a      	strh	r2, [r3, #0]

  // CWとCCWを切替
  static float ofs_ = 0.0f;
  if (rotDir > 0) {
    ofs_ = elecAngOfs + user2pi;
  }else ofs_ = elecAngOfs; // 極性反転不要
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e92:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <_ZN3Ang7elecAngEv+0xcc>)
 8000e94:	6013      	str	r3, [r2, #0]

  static uint16_t offset_ = 0;
  static uint16_t elecAngtemp2_ = 0;
  
  offset_ = static_cast<uint16_t>(ofs_ * 4096.0f / user2pi);
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <_ZN3Ang7elecAngEv+0xcc>)
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f1c <_ZN3Ang7elecAngEv+0xd0>
 8000ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000f20 <_ZN3Ang7elecAngEv+0xd4>
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <_ZN3Ang7elecAngEv+0xd8>)
 8000eb8:	801a      	strh	r2, [r3, #0]
  elecAngtemp2_ = (elecAngtemp_ * polePairs + offset_) % 4096;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <_ZN3Ang7elecAngEv+0xc8>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <_ZN3Ang7elecAngEv+0xd8>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	425a      	negs	r2, r3
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000eda:	bf58      	it	pl
 8000edc:	4253      	negpl	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_ZN3Ang7elecAngEv+0xdc>)
 8000ee2:	801a      	strh	r2, [r3, #0]

  return static_cast<float>(elecAngtemp2_) / 4096.0f * user2pi;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_ZN3Ang7elecAngEv+0xdc>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f1c <_ZN3Ang7elecAngEv+0xd0>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f20 <_ZN3Ang7elecAngEv+0xd4>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8000f00:	eeb0 0a67 	vmov.f32	s0, s15
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	55555556 	.word	0x55555556
 8000f14:	20000084 	.word	0x20000084
 8000f18:	20000088 	.word	0x20000088
 8000f1c:	45800000 	.word	0x45800000
 8000f20:	40c90fdb 	.word	0x40c90fdb
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	2000008e 	.word	0x2000008e
 8000f2c:	00000000 	.word	0x00000000

08000f30 <_ZN3Ang14elecAngVirtualEf>:

float Ang::elecAngVirtual(float _virFreqRef) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	ed87 0a00 	vstr	s0, [r7]
  // 仮想電気角
  static float _theta = 0.0f;
  // タスク周期で分割して足しこむ
  float _deltatheta = _virFreqRef * TASK_TIME;
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a327      	add	r3, pc, #156	@ (adr r3, 8000fe0 <_ZN3Ang14elecAngVirtualEf+0xb0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd2e 	bl	80009b4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  _theta += _deltatheta;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

  // 0~1の範囲に収める
  if (_theta > 1.0f) _theta -= 1.0f;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd09      	ble.n	8000f98 <_ZN3Ang14elecAngVirtualEf+0x68>
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
  if (_theta < 0.0f) _theta += 1.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <_ZN3Ang14elecAngVirtualEf+0x8c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

  // ラジアンで返却
  return _theta * user2pi;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fdc <_ZN3Ang14elecAngVirtualEf+0xac>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	cd630163 	.word	0xcd630163
 8000fe4:	3f0a3618 	.word	0x3f0a3618

08000fe8 <_ZN3Ang11elecAngleInEv>:

void Ang::elecAngleIn(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	ed2d 8b02 	vpush	{d8}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  UserTask::UserTaskData* usertaskdata = usertask.getData();
 8000ff4:	4817      	ldr	r0, [pc, #92]	@ (8001054 <_ZN3Ang11elecAngleInEv+0x6c>)
 8000ff6:	f7ff fd2d 	bl	8000a54 <_ZN8UserTask7getDataEv>
 8000ffa:	60f8      	str	r0, [r7, #12]
  
  if (usertaskdata->virAngFreq > 0.0f) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dd11      	ble.n	8001030 <_ZN3Ang11elecAngleInEv+0x48>
    data->elecAng = elecAngVirtual(usertaskdata->virAngFreq);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ed93 8a03 	vldr	s16, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8c8 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 800101a:	4604      	mov	r4, r0
 800101c:	eeb0 0a48 	vmov.f32	s0, s16
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff85 	bl	8000f30 <_ZN3Ang14elecAngVirtualEf>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	edc4 7a00 	vstr	s15, [r4]
  } else {
    data->elecAng = elecAng();
  }
}
 800102e:	e00b      	b.n	8001048 <_ZN3Ang11elecAngleInEv+0x60>
    data->elecAng = elecAng();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8b9 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001038:	4604      	mov	r4, r0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff06 	bl	8000e4c <_ZN3Ang7elecAngEv>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	edc4 7a00 	vstr	s15, [r4]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	ecbd 8b02 	vpop	{d8}
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	2000042c 	.word	0x2000042c

08001058 <_ZNK3Ang14prepareCanDataEPhj>:
int16_t Ang::compAng() {
  return 0;
}


void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]

  memcpy(buffer, &(data->elecAng), sizeof(data->elecAng));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f89f 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 800106c:	4603      	mov	r3, r0
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80010c2:	f7ff ffdc 	bl	800107e <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003c0 	.word	0x200003c0

080010d4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <HAL_I2C_MasterRxCpltCallback+0x18>)
 80010de:	f7ff ffdc 	bl	800109a <_ZN3Ang19i2cMasterRxCallbackEv>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003c0 	.word	0x200003c0

080010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f861 	bl	80011c2 <_ZNKSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f862 	bl	80011de <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN3Ang7AngDataC1Ev>:
  struct AngData{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	831a      	strh	r2, [r3, #24]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001178:	201c      	movs	r0, #28
 800117a:	f00a fea9 	bl	800bed0 <_Znwj>
 800117e:	4603      	mov	r3, r0
 8001180:	461c      	mov	r4, r3
 8001182:	4622      	mov	r2, r4
 8001184:	2300      	movs	r3, #0
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	6053      	str	r3, [r2, #4]
 800118a:	6093      	str	r3, [r2, #8]
 800118c:	60d3      	str	r3, [r2, #12]
 800118e:	6113      	str	r3, [r2, #16]
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ffc5 	bl	8001124 <_ZN3Ang7AngDataC1Ev>
 800119a:	4621      	mov	r1, r4
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f83c 	bl	800121a <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return get();
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa9 	bl	800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 80011b8:	4603      	mov	r3, r0
      }
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZNKSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f840 	bl	8001252 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011d2:	4603      	mov	r3, r0
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f83f 	bl	800126c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011ee:	4603      	mov	r3, r0
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f83b 	bl	8001286 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffe6 	bl	80011fa <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f833 	bl	80012ae <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f833 	bl	80012c8 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f832 	bl	80012e0 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f830 	bl	80012f8 <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffcd 	bl	8001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 800129e:	4602      	mov	r2, r0
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f82a 	bl	8001312 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012be:	4603      	mov	r3, r0
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f82a 	bl	800132a <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f82b 	bl	8001344 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f82b 	bl	800135e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f82f 	bl	800137e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82f 	bl	8001398 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERKS3_>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f82d 	bl	80013ae <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f82c 	bl	80013c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f834 	bl	80013dc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f835 	bl	80013f8 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>:
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>:
      _Tuple_impl()
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f81e 	bl	800140e <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>:
      constexpr _Head_base()
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

// グローバルなインスタンスを使用
extern CanCom cancom;
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
    data(std::make_unique<CanData>()) {}
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f994 	bl	800175e <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    data(std::make_unique<CanData>()) {}
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	609a      	str	r2, [r3, #8]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <_ZN6CanCom12initTxHeaderEmbb+0x28>
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	e000      	b.n	8001488 <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 8001486:	2200      	movs	r2, #0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	60da      	str	r2, [r3, #12]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2208      	movs	r2, #8
 8001496:	615a      	str	r2, [r3, #20]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 80014a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014a8:	e000      	b.n	80014ac <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 80014aa:	2200      	movs	r2, #0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	61da      	str	r2, [r3, #28]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 80014b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014ba:	e000      	b.n	80014be <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80014bc:	2200      	movs	r2, #0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	621a      	str	r2, [r3, #32]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
  txHeader.MessageMarker = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d902      	bls.n	80014f2 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 80014ec:	f000 ff0c 	bl	8002308 <Error_Handler>
 80014f0:	e02a      	b.n	8001548 <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e00c      	b.n	800151a <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	460a      	mov	r2, r1
 8001512:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3ee      	bcc.n	8001500 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6858      	ldr	r0, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3308      	adds	r3, #8
 800152a:	f107 0214 	add.w	r2, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	f005 fdea 	bl	8007108 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 8001544:	f000 fee0 	bl	8002308 <Error_Handler>
  }
}
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d028      	beq.n	80015b4 <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6858      	ldr	r0, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	335c      	adds	r3, #92	@ 0x5c
 8001570:	2140      	movs	r1, #64	@ 0x40
 8001572:	f005 fe0d 	bl	8007190 <HAL_FDCAN_GetRxMessage>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 8001586:	f000 febf 	bl	8002308 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f005 ff04 	bl	80073a0 <HAL_FDCAN_ActivateNotification>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 80015a8:	f000 feae 	bl	8002308 <Error_Handler>
    }

    canRxInterrupt = true;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  }
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d034      	beq.n	8001644 <_ZN6CanCom12handleRxDataEv+0x88>
    data->genFuncRef = rxData[0];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f8da 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015ea:	7013      	strb	r3, [r2, #0]
    data->drvMdRef = rxData[1];
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8d1 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80015fc:	7053      	strb	r3, [r2, #1]
    data->voltDRef = rxData[2];
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f8c8 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001606:	4602      	mov	r2, r0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800160e:	7093      	strb	r3, [r2, #2]
    data->voltQRef = rxData[3];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f8bf 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001620:	70d3      	strb	r3, [r2, #3]
    data->virAngFreq = rxData[4];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8b6 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800162a:	4602      	mov	r2, r0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001632:	7113      	strb	r3, [r2, #4]

    canRxInterrupt = false;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    canTxFlag = true;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  handleRxData();
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffb1 	bl	80015bc <_ZN6CanCom12handleRxDataEv>
 
  uint8_t currentGenFuncRef = data->genFuncRef;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f89a 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001662:	4603      	mov	r3, r0
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	429a      	cmp	r2, r3
 8001672:	d004      	beq.n	800167e <_ZN6CanCom6rxTaskEv+0x32>
    return;
  }
  prevGenFuncRef = currentGenFuncRef;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800167c:	e000      	b.n	8001680 <_ZN6CanCom6rxTaskEv+0x34>
    return;
 800167e:	bf00      	nop
}
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d019      	beq.n	80016d0 <_ZN6CanCom6txTaskEv+0x48>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f879 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	3305      	adds	r3, #5
 80016a8:	2208      	movs	r2, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480a      	ldr	r0, [pc, #40]	@ (80016d8 <_ZN6CanCom6txTaskEv+0x50>)
 80016ae:	f7ff fcd3 	bl	8001058 <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f86e 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3305      	adds	r3, #5
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff09 	bl	80014da <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003c0 	.word	0x200003c0

080016dc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 80016ea:	f7ff ff30 	bl	800154e <_ZN6CanCom15rxFifo0CallbackEm>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000358 	.word	0x20000358

080016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f851 	bl	80017ae <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZN6CanCom7CanDataC1Ev>:
#include <memory>
#include "main.h"

class CanCom {
public:
  struct CanData {
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	705a      	strb	r2, [r3, #1]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	709a      	strb	r2, [r3, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	70da      	strb	r2, [r3, #3]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	711a      	strb	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3305      	adds	r3, #5
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	330d      	adds	r3, #13
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800175e:	b590      	push	{r4, r7, lr}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001766:	2015      	movs	r0, #21
 8001768:	f00a fbb2 	bl	800bed0 <_Znwj>
 800176c:	4603      	mov	r3, r0
 800176e:	461c      	mov	r4, r3
 8001770:	4623      	mov	r3, r4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	751a      	strb	r2, [r3, #20]
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff ffc8 	bl	8001716 <_ZN6CanCom7CanDataC1Ev>
 8001786:	4621      	mov	r1, r4
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f82e 	bl	80017ea <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	return get();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffac 	bl	80016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 80017a4:	4603      	mov	r3, r0
      }
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f832 	bl	8001822 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80017be:	4603      	mov	r3, r0
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f82e 	bl	800183c <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffe6 	bl	80017ca <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f826 	bl	8001864 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f826 	bl	800187e <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f824 	bl	8001896 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffda 	bl	8001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001854:	4602      	mov	r2, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f81e 	bl	80018b0 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001874:	4603      	mov	r3, r0
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f81e 	bl	80018c8 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f81e 	bl	80018e2 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f822 	bl	8001902 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f822 	bl	800191c <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>
 80018d8:	4603      	mov	r3, r0
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f821 	bl	8001932 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f829 	bl	800194a <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f82a 	bl	8001966 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>:
      _Tuple_impl()
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f81e 	bl	800197c <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>:
      constexpr _Head_base()
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <LL_CORDIC_Config+0x44>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4311      	orrs	r1, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4311      	orrs	r1, r2
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	6a3a      	ldr	r2, [r7, #32]
 80019be:	4311      	orrs	r1, r2
 80019c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c2:	430a      	orrs	r2, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	ff87f800 	.word	0xff87f800

080019dc <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6493      	str	r3, [r2, #72]	@ 0x48
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 80019fc:	2300      	movs	r3, #0
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2250      	movs	r2, #80	@ 0x50
 8001a12:	2100      	movs	r1, #0
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 8001a16:	f7ff ffbd 	bl	8001994 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40020c00 	.word	0x40020c00

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a32:	f002 fc3c 	bl	80042ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a36:	f000 f88b 	bl	8001b50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3a:	f000 fbcf 	bl	80021dc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a3e:	f000 fb9b 	bl	8002178 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001a42:	f000 f8db 	bl	8001bfc <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001a46:	f000 f96f 	bl	8001d28 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8001a4a:	f000 fa29 	bl	8001ea0 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8001a4e:	f000 fa73 	bl	8001f38 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8001a52:	f000 fac3 	bl	8001fdc <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 8001a56:	f000 fa0b 	bl	8001e70 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a5a:	217f      	movs	r1, #127	@ 0x7f
 8001a5c:	4837      	ldr	r0, [pc, #220]	@ (8001b3c <main+0x110>)
 8001a5e:	f003 fd89 	bl	8005574 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a62:	217f      	movs	r1, #127	@ 0x7f
 8001a64:	4836      	ldr	r0, [pc, #216]	@ (8001b40 <main+0x114>)
 8001a66:	f003 fd85 	bl	8005574 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001a6a:	4834      	ldr	r0, [pc, #208]	@ (8001b3c <main+0x110>)
 8001a6c:	f002 ff86 	bl	800497c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001a70:	4833      	ldr	r0, [pc, #204]	@ (8001b40 <main+0x114>)
 8001a72:	f002 ff83 	bl	800497c <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001a76:	4831      	ldr	r0, [pc, #196]	@ (8001b3c <main+0x110>)
 8001a78:	f003 fdde 	bl	8005638 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4831      	ldr	r0, [pc, #196]	@ (8001b44 <main+0x118>)
 8001a80:	f009 f9d6 	bl	800ae30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a84:	2104      	movs	r1, #4
 8001a86:	482f      	ldr	r0, [pc, #188]	@ (8001b44 <main+0x118>)
 8001a88:	f009 f9d2 	bl	800ae30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	482d      	ldr	r0, [pc, #180]	@ (8001b44 <main+0x118>)
 8001a90:	f009 f9ce 	bl	800ae30 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001a94:	2100      	movs	r1, #0
 8001a96:	482b      	ldr	r0, [pc, #172]	@ (8001b44 <main+0x118>)
 8001a98:	f009 fff4 	bl	800ba84 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4829      	ldr	r0, [pc, #164]	@ (8001b44 <main+0x118>)
 8001aa0:	f009 fff0 	bl	800ba84 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	4827      	ldr	r0, [pc, #156]	@ (8001b44 <main+0x118>)
 8001aa8:	f009 ffec 	bl	800ba84 <HAL_TIMEx_PWMN_Start>
  
  // ゲートドライバON
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab6:	f006 f951 	bl	8007d5c <HAL_GPIO_WritePin>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481b      	ldr	r0, [pc, #108]	@ (8001b48 <main+0x11c>)
 8001ada:	f005 fa93 	bl	8007004 <HAL_FDCAN_ConfigFilter>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf14      	ite	ne
 8001ae4:	2301      	movne	r3, #1
 8001ae6:	2300      	moveq	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <main+0xc6>
    {
        // フィルタ設定エラー
        Error_Handler();
 8001aee:	f000 fc0b 	bl	8002308 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 8001af2:	4815      	ldr	r0, [pc, #84]	@ (8001b48 <main+0x11c>)
 8001af4:	f005 fae0 	bl	80070b8 <HAL_FDCAN_Start>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <main+0xe0>
	  Error_Handler();
 8001b08:	f000 fbfe 	bl	8002308 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <main+0x11c>)
 8001b12:	f005 fc45 	bl	80073a0 <HAL_FDCAN_ActivateNotification>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <main+0xfe>
    /* Notification Error */
    Error_Handler();
 8001b26:	f000 fbef 	bl	8002308 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff55 	bl	80019dc <_ZN10Acrocantho6CordicC1Ev>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    usertask.idleTask();
 8001b32:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <main+0x120>)
 8001b34:	f002 f8d4 	bl	8003ce0 <_ZN8UserTask8idleTaskEv>
 8001b38:	e7fb      	b.n	8001b32 <main+0x106>
 8001b3a:	bf00      	nop
 8001b3c:	20000094 	.word	0x20000094
 8001b40:	20000100 	.word	0x20000100
 8001b44:	2000030c 	.word	0x2000030c
 8001b48:	20000194 	.word	0x20000194
 8001b4c:	2000042c 	.word	0x2000042c

08001b50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	@ 0x50
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	2238      	movs	r2, #56	@ 0x38
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00a fa98 	bl	800c094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f008 f90c 	bl	8009d90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b82:	2340      	movs	r3, #64	@ 0x40
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b86:	2302      	movs	r3, #2
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b92:	2355      	movs	r3, #85	@ 0x55
 8001b94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba2:	f107 0318 	add.w	r3, r7, #24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 f9a6 	bl	8009ef8 <HAL_RCC_OscConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001bbc:	f000 fba4 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f008 fc9f 	bl	800a51c <HAL_RCC_ClockConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001bee:	f000 fb8b 	bl	8002308 <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	@ 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b092      	sub	sp, #72	@ 0x48
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	223c      	movs	r2, #60	@ 0x3c
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00a fa3d 	bl	800c094 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c22:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c30:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c36:	4b3a      	ldr	r3, [pc, #232]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c3c:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c42:	4b37      	ldr	r3, [pc, #220]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c44:	2204      	movs	r2, #4
 8001c46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c48:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c4e:	4b34      	ldr	r3, [pc, #208]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c54:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5a:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c62:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c70:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c78:	4829      	ldr	r0, [pc, #164]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001c7a:	f002 fcc3 	bl	8004604 <HAL_ADC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8001c8e:	f000 fb3b 	bl	8002308 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8001c92:	2305      	movs	r3, #5
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001c96:	2300      	movs	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481e      	ldr	r0, [pc, #120]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001ca6:	f004 fb21 	bl	80062ec <HAL_ADCEx_MultiModeConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8001cba:	f000 fb25 	bl	8002308 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <_ZL12MX_ADC1_Initv+0x128>)
 8001cc0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001cca:	237f      	movs	r3, #127	@ 0x7f
 8001ccc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <_ZL12MX_ADC1_Initv+0x124>)
 8001d00:	f003 fdc8 	bl	8005894 <HAL_ADCEx_InjectedConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8001d14:	f000 faf8 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3748      	adds	r7, #72	@ 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000094 	.word	0x20000094
 8001d24:	04300002 	.word	0x04300002

08001d28 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	@ 0x40
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	223c      	movs	r2, #60	@ 0x3c
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a f9ad 	bl	800c094 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001d3a:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <_ZL12MX_ADC2_Initv+0x138>)
 8001d3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d40:	4b46      	ldr	r3, [pc, #280]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d46:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d48:	4b44      	ldr	r3, [pc, #272]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d4e:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001d54:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d5a:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d80:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001d8e:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d96:	4831      	ldr	r0, [pc, #196]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001d98:	f002 fc34 	bl	8004604 <HAL_ADC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8001dac:	f000 faac 	bl	8002308 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <_ZL12MX_ADC2_Initv+0x13c>)
 8001db2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001db4:	2309      	movs	r3, #9
 8001db6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001dbc:	237f      	movs	r3, #127	@ 0x7f
 8001dbe:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	481c      	ldr	r0, [pc, #112]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001dea:	f003 fd53 	bl	8005894 <HAL_ADCEx_InjectedConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8001dfe:	f000 fa83 	bl	8002308 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <_ZL12MX_ADC2_Initv+0x140>)
 8001e04:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001e06:	f240 130f 	movw	r3, #271	@ 0x10f
 8001e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4812      	ldr	r0, [pc, #72]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001e12:	f003 fd3f 	bl	8005894 <HAL_ADCEx_InjectedConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8001e26:	f000 fa6f 	bl	8002308 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <_ZL12MX_ADC2_Initv+0x144>)
 8001e2c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001e2e:	f240 2315 	movw	r3, #533	@ 0x215
 8001e32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x134>)
 8001e3a:	f003 fd2b 	bl	8005894 <HAL_ADCEx_InjectedConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8001e4e:	f000 fa5b 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3740      	adds	r7, #64	@ 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000100 	.word	0x20000100
 8001e60:	50000100 	.word	0x50000100
 8001e64:	08600004 	.word	0x08600004
 8001e68:	0c900008 	.word	0x0c900008
 8001e6c:	10c00010 	.word	0x10c00010

08001e70 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <_ZL14MX_CORDIC_Initv+0x28>)
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <_ZL14MX_CORDIC_Initv+0x2c>)
 8001e78:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001e7a:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <_ZL14MX_CORDIC_Initv+0x28>)
 8001e7c:	f004 fb3e 	bl	80064fc <HAL_CORDIC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8001e90:	f000 fa3a 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000016c 	.word	0x2000016c
 8001e9c:	40020c00 	.word	0x40020c00

08001ea0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ea6:	4a23      	ldr	r2, [pc, #140]	@ (8001f34 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ed6:	220b      	movs	r2, #11
 8001ed8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001edc:	2238      	movs	r2, #56	@ 0x38
 8001ede:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ee8:	2205      	movs	r2, #5
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001efa:	2204      	movs	r2, #4
 8001efc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f10:	4807      	ldr	r0, [pc, #28]	@ (8001f30 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f12:	f004 ff1d 	bl	8006d50 <HAL_FDCAN_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001f26:	f000 f9ef 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000194 	.word	0x20000194
 8001f34:	40006400 	.word	0x40006400

08001f38 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f3e:	4a25      	ldr	r2, [pc, #148]	@ (8001fd4 <_ZL12MX_I2C1_Initv+0x9c>)
 8001f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8001f42:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f44:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <_ZL12MX_I2C1_Initv+0xa0>)
 8001f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f72:	4817      	ldr	r0, [pc, #92]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f74:	f005 ff2d 	bl	8007dd2 <HAL_I2C_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001f88:	f000 f9be 	bl	8002308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4810      	ldr	r0, [pc, #64]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f90:	f007 fe46 	bl	8009c20 <HAL_I2CEx_ConfigAnalogFilter>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001fa4:	f000 f9b0 	bl	8002308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <_ZL12MX_I2C1_Initv+0x98>)
 8001fac:	f007 fe83 	bl	8009cb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001fc0:	f000 f9a2 	bl	8002308 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001fc4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001fc8:	f007 fec2 	bl	8009d50 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200001f8 	.word	0x200001f8
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	4052060f 	.word	0x4052060f

08001fdc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b098      	sub	sp, #96	@ 0x60
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2234      	movs	r2, #52	@ 0x34
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00a f843 	bl	800c094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800200e:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002010:	4a58      	ldr	r2, [pc, #352]	@ (8002174 <_ZL12MX_TIM1_Initv+0x198>)
 8002012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002014:	4b56      	ldr	r3, [pc, #344]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800201a:	4b55      	ldr	r3, [pc, #340]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 800201c:	2220      	movs	r2, #32
 800201e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8002020:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002022:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800202e:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002030:	2201      	movs	r2, #1
 8002032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002034:	4b4e      	ldr	r3, [pc, #312]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203a:	484d      	ldr	r0, [pc, #308]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 800203c:	f008 fea0 	bl	800ad80 <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002050:	f000 f95a 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002054:	2320      	movs	r3, #32
 8002056:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002058:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800205c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002062:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002066:	4619      	mov	r1, r3
 8002068:	4841      	ldr	r0, [pc, #260]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 800206a:	f009 fdcd 	bl	800bc08 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 800207e:	f000 f943 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002082:	2360      	movs	r3, #96	@ 0x60
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208a:	2300      	movs	r3, #0
 800208c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800208e:	2300      	movs	r3, #0
 8002090:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4832      	ldr	r0, [pc, #200]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 80020a8:	f008 ffd4 	bl	800b054 <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 80020bc:	f000 f924 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020c4:	2204      	movs	r2, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 80020ca:	f008 ffc3 	bl	800b054 <HAL_TIM_PWM_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 80020de:	f000 f913 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020e6:	2208      	movs	r2, #8
 80020e8:	4619      	mov	r1, r3
 80020ea:	4821      	ldr	r0, [pc, #132]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 80020ec:	f008 ffb2 	bl	800b054 <HAL_TIM_PWM_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8002100:	f000 f902 	bl	8002308 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8002104:	481a      	ldr	r0, [pc, #104]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002106:	f009 fea9 	bl	800be5c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8002116:	2314      	movs	r3, #20
 8002118:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800211e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002122:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	480a      	ldr	r0, [pc, #40]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002148:	f009 fdf4 	bl	800bd34 <HAL_TIMEx_ConfigBreakDeadTime>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 800215c:	f000 f8d4 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <_ZL12MX_TIM1_Initv+0x194>)
 8002162:	f001 fa85 	bl	8003670 <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3760      	adds	r7, #96	@ 0x60
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000030c 	.word	0x2000030c
 8002174:	40012c00 	.word	0x40012c00

08002178 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 8002180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002182:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6493      	str	r3, [r2, #72]	@ 0x48
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 800218c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 8002198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219a:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <_ZL11MX_DMA_Initv+0x60>)
 80021a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	200b      	movs	r0, #11
 80021b4:	f004 faaf 	bl	8006716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021b8:	200b      	movs	r0, #11
 80021ba:	f004 fac6 	bl	800674a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200c      	movs	r0, #12
 80021c4:	f004 faa7 	bl	8006716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021c8:	200c      	movs	r0, #12
 80021ca:	f004 fabe 	bl	800674a <HAL_NVIC_EnableIRQ>

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000

080021dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	4b43      	ldr	r3, [pc, #268]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	4a42      	ldr	r2, [pc, #264]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fe:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a3c      	ldr	r2, [pc, #240]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b3a      	ldr	r3, [pc, #232]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4a36      	ldr	r2, [pc, #216]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222e:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002246:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <_ZL12MX_GPIO_Initv+0x124>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800225c:	f005 fd7e 	bl	8007d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002266:	4827      	ldr	r0, [pc, #156]	@ (8002304 <_ZL12MX_GPIO_Initv+0x128>)
 8002268:	f005 fd78 	bl	8007d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800226c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002272:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4820      	ldr	r0, [pc, #128]	@ (8002304 <_ZL12MX_GPIO_Initv+0x128>)
 8002284:	f005 fbe8 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002288:	230c      	movs	r3, #12
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002298:	230c      	movs	r3, #12
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f005 fbd7 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80022aa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80022ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c6:	f005 fbc7 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4808      	ldr	r0, [pc, #32]	@ (8002304 <_ZL12MX_GPIO_Initv+0x128>)
 80022e4:	f005 fbb8 	bl	8007a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2028      	movs	r0, #40	@ 0x28
 80022ee:	f004 fa12 	bl	8006716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022f2:	2028      	movs	r0, #40	@ 0x28
 80022f4:	f004 fa29 	bl	800674a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	@ 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	48000800 	.word	0x48000800

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <Error_Handler+0x8>

08002314 <_ZN3AngD1Ev>:
class Ang {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f842 	bl	80023a8 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZN6CanComD1Ev>:
class CanCom {
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f857 	bl	80023ec <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10c      	bne.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800235e:	4293      	cmp	r3, r2
 8002360:	d107      	bne.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom cancom(hfdcan1);
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002364:	480d      	ldr	r0, [pc, #52]	@ (800239c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002366:	f7ff f85d 	bl	8001424 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 800236a:	490d      	ldr	r1, [pc, #52]	@ (80023a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800236c:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800236e:	f7fe fbe7 	bl	8000b40 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800237e:	4293      	cmp	r3, r2
 8002380:	d105      	bne.n	800238e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002382:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002384:	f7ff ffc6 	bl	8002314 <_ZN3AngD1Ev>
CanCom cancom(hfdcan1);
 8002388:	4804      	ldr	r0, [pc, #16]	@ (800239c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800238a:	f7ff ffd0 	bl	800232e <_ZN6CanComD1Ev>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000194 	.word	0x20000194
 800239c:	20000358 	.word	0x20000358
 80023a0:	200001f8 	.word	0x200001f8
 80023a4:	200003c0 	.word	0x200003c0

080023a8 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe ff40 	bl	8001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80023b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f834 	bl	8002430 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>
 80023c8:	4604      	mov	r4, r0
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f83d 	bl	800244a <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80023d0:	4603      	mov	r3, r0
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4620      	mov	r0, r4
 80023d8:	f000 f842 	bl	8002460 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>
	__ptr = pointer();
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
      }
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd90      	pop	{r4, r7, pc}

080023ec <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fa06 	bl	8001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 80023fc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f83a 	bl	8002480 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>
 800240c:	4604      	mov	r4, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f843 	bl	800249a <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002414:	4603      	mov	r3, r0
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	4620      	mov	r0, r4
 800241c:	f000 f848 	bl	80024b0 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>
	__ptr = pointer();
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
      }
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}

08002430 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f848 	bl	80024d0 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002440:	4603      	mov	r3, r0
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_+0x18>
 8002470:	211c      	movs	r1, #28
 8002472:	4618      	mov	r0, r3
 8002474:	f009 fd2a 	bl	800becc <_ZdlPvj>
      }
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f82d 	bl	80024ea <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002490:	4603      	mov	r3, r0
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_+0x18>
 80024c0:	2115      	movs	r1, #21
 80024c2:	4618      	mov	r0, r3
 80024c4:	f009 fd02 	bl	800becc <_ZdlPvj>
      }
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f812 	bl	8002504 <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>:
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f811 	bl	800251c <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f811 	bl	8002534 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f811 	bl	800254c <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800252a:	4603      	mov	r3, r0
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f811 	bl	8002564 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>
 8002542:	4603      	mov	r3, r0
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f811 	bl	800257c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>
 800255a:	4603      	mov	r3, r0
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f811 	bl	8002594 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>
 8002572:	4603      	mov	r3, r0
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>:
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f810 	bl	80025aa <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>
 800258a:	4603      	mov	r3, r0
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>:
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_GLOBAL__sub_I_hadc1>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff febd 	bl	8002348 <_Z41__static_initialization_and_destruction_0ii>
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_GLOBAL__sub_D_hadc1>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff feb5 	bl	8002348 <_Z41__static_initialization_and_destruction_0ii>
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN11ModeControlC1Ev>:
#include "user_task.h"

ModeControl modecontrol;
extern UserTask usertask;

ModeControl::ModeControl()
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  : mode(CTRLMODE_NONE){}
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_ZN11ModeControl8modeCtrlEh>:


void ModeControl::modeCtrl(uint8_t mode){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  UserTask::UserTaskData* usertaskdata = usertask.getData();
 8002608:	4812      	ldr	r0, [pc, #72]	@ (8002654 <_ZN11ModeControl8modeCtrlEh+0x58>)
 800260a:	f7fe fa23 	bl	8000a54 <_ZN8UserTask7getDataEv>
 800260e:	60f8      	str	r0, [r7, #12]
  
  switch (mode) {
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d815      	bhi.n	8002642 <_ZN11ModeControl8modeCtrlEh+0x46>
 8002616:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <_ZN11ModeControl8modeCtrlEh+0x20>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002631 	.word	0x08002631
 8002620:	08002649 	.word	0x08002649
 8002624:	08002649 	.word	0x08002649
 8002628:	08002649 	.word	0x08002649
 800262c:	08002649 	.word	0x08002649
    case CTRLMODE_NONE:
      usertaskdata->voltDRef = 0.0f;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
      usertaskdata->voltQRef = 0.0f;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
      break;
 8002640:	e003      	b.n	800264a <_ZN11ModeControl8modeCtrlEh+0x4e>
    case CTRLMODE_VEL:
      break;
    case CTRLMODE_POS:
      break;
    default:
      mode = CTRLMODE_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	70fb      	strb	r3, [r7, #3]
      break;
 8002646:	e000      	b.n	800264a <_ZN11ModeControl8modeCtrlEh+0x4e>
      break;
 8002648:	bf00      	nop
  }
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000042c 	.word	0x2000042c

08002658 <_Z41__static_initialization_and_destruction_0ii>:
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800266e:	4293      	cmp	r3, r2
 8002670:	d102      	bne.n	8002678 <_Z41__static_initialization_and_destruction_0ii+0x20>
ModeControl modecontrol;
 8002672:	4803      	ldr	r0, [pc, #12]	@ (8002680 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002674:	f7ff ffb4 	bl	80025e0 <_ZN11ModeControlC1Ev>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200003f4 	.word	0x200003f4

08002684 <_GLOBAL__sub_I_modecontrol>:
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
 8002688:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff ffe3 	bl	8002658 <_Z41__static_initialization_and_destruction_0ii>
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN6OutPwmC1Ev>:
#include "param.h"
#include "can_communication.h"

OutPwm outpwm;

OutPwm::OutPwm()
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    : data(std::make_unique<outPwmData>()) {}
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <_ZN6OutPwmC1Ev+0x40>)
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <_ZN6OutPwmC1Ev+0x44>)
 80026be:	611a      	str	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3314      	adds	r3, #20
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f8e0 	bl	800288a <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	3c23d70a 	.word	0x3c23d70a
 80026d8:	3f733333 	.word	0x3f733333

080026dc <_ZN6OutPwm3PonEv>:

void OutPwm::Pon(){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  setReg(DUTY_BASE, DUTY_BASE, DUTY_BASE);
 80026e4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80026e8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80026ec:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f81b 	bl	800272c <_ZN6OutPwm6setRegEfff>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <_ZN6OutPwm4PoffEv>:

void OutPwm::Poff(){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  TIM1->CCR1 = 0; 
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <_ZN6OutPwm4PoffEv+0x28>)
 800270a:	2200      	movs	r2, #0
 800270c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0; 
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <_ZN6OutPwm4PoffEv+0x28>)
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0; 
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <_ZN6OutPwm4PoffEv+0x28>)
 8002716:	2200      	movs	r2, #0
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40012c00 	.word	0x40012c00

0800272c <_ZN6OutPwm6setRegEfff>:

void OutPwm::setReg(float u, float v, float w){
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	ed87 0a02 	vstr	s0, [r7, #8]
 8002738:	edc7 0a01 	vstr	s1, [r7, #4]
 800273c:	ed87 1a00 	vstr	s2, [r7]

  TIM1->CCR1 = (uint16_t)((1.0f - dutyGuard(u)) * (float)CCR_MAX);
 8002740:	ed97 0a02 	vldr	s0, [r7, #8]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f845 	bl	80027d4 <_ZN6OutPwm9dutyGuardEf>
 800274a:	eef0 7a40 	vmov.f32	s15, s0
 800274e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002756:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80027cc <_ZN6OutPwm6setRegEfff+0xa0>
 800275a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002762:	ee17 3a90 	vmov	r3, s15
 8002766:	b29a      	uxth	r2, r3
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <_ZN6OutPwm6setRegEfff+0xa4>)
 800276a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = (uint16_t)((1.0f - dutyGuard(v)) * (float)CCR_MAX);
 800276c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f82f 	bl	80027d4 <_ZN6OutPwm9dutyGuardEf>
 8002776:	eef0 7a40 	vmov.f32	s15, s0
 800277a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80027cc <_ZN6OutPwm6setRegEfff+0xa0>
 8002786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278e:	ee17 3a90 	vmov	r3, s15
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <_ZN6OutPwm6setRegEfff+0xa4>)
 8002796:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = (uint16_t)((1.0f - dutyGuard(w)) * (float)CCR_MAX);
 8002798:	ed97 0a00 	vldr	s0, [r7]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f819 	bl	80027d4 <_ZN6OutPwm9dutyGuardEf>
 80027a2:	eef0 7a40 	vmov.f32	s15, s0
 80027a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80027cc <_ZN6OutPwm6setRegEfff+0xa0>
 80027b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ba:	ee17 3a90 	vmov	r3, s15
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <_ZN6OutPwm6setRegEfff+0xa4>)
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	4604cc00 	.word	0x4604cc00
 80027d0:	40012c00 	.word	0x40012c00

080027d4 <_ZN6OutPwm9dutyGuardEf>:


float OutPwm::dutyGuard(float _rawDuty){
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	ed87 0a00 	vstr	s0, [r7]
    float result = 0.0f;
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
    float sum = 0.0f;
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
    static float limp = 0.95f;
    static float limm = 0.01f;
    
    sum = (_rawDuty / VOLT_PBM) + DUTY_BASE;
 80027ec:	ed97 7a00 	vldr	s14, [r7]
 80027f0:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80027f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002800:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (sum > limp){
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <_ZN6OutPwm9dutyGuardEf+0x80>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ed97 7a02 	vldr	s14, [r7, #8]
 800280e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	dd03      	ble.n	8002820 <_ZN6OutPwm9dutyGuardEf+0x4c>
        result = limp;
 8002818:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <_ZN6OutPwm9dutyGuardEf+0x80>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	e00f      	b.n	8002840 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else if(sum < limm){
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <_ZN6OutPwm9dutyGuardEf+0x84>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ed97 7a02 	vldr	s14, [r7, #8]
 800282a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	d503      	bpl.n	800283c <_ZN6OutPwm9dutyGuardEf+0x68>
        result = limm;
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <_ZN6OutPwm9dutyGuardEf+0x84>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e001      	b.n	8002840 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else{
        result = sum;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	ee07 3a90 	vmov	s15, r3
}
 8002846:	eeb0 0a67 	vmov.f32	s0, s15
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <_ZN10outPwmDataC1Ev>:
#include <memory>
#include "main.h"
#include "user_math.h"


struct outPwmData {
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002892:	200c      	movs	r0, #12
 8002894:	f009 fb1c 	bl	800bed0 <_Znwj>
 8002898:	4603      	mov	r3, r0
 800289a:	461c      	mov	r4, r3
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	6063      	str	r3, [r4, #4]
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	60a3      	str	r3, [r4, #8]
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff ffd4 	bl	800285c <_ZN10outPwmDataC1Ev>
 80028b4:	4621      	mov	r1, r4
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f836 	bl	8002928 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}

080028c4 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f839 	bl	8002946 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 80028d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f83e 	bl	8002960 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>
 80028e4:	4604      	mov	r4, r0
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f847 	bl	800297a <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>
 80028ec:	4603      	mov	r3, r0
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4620      	mov	r0, r4
 80028f4:	f000 f84c 	bl	8002990 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>
	__ptr = pointer();
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
      }
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bd90      	pop	{r4, r7, pc}

08002908 <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f849 	bl	80029b0 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffe6 	bl	8002908 <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f841 	bl	80029d8 <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002956:	4603      	mov	r3, r0
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f841 	bl	80029f2 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>
 8002970:	4603      	mov	r3, r0
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_+0x18>
 80029a0:	210c      	movs	r1, #12
 80029a2:	4618      	mov	r0, r3
 80029a4:	f009 fa92 	bl	800becc <_ZdlPvj>
      }
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f825 	bl	8002a0c <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffbf 	bl	8002946 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 80029c8:	4602      	mov	r2, r0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f81f 	bl	8002a26 <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f81e 	bl	8002a3e <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f81d 	bl	8002a56 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f821 	bl	8002a76 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f822 	bl	8002a90 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f822 	bl	8002aa8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f82a 	bl	8002ac0 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f82b 	bl	8002adc <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f82a 	bl	8002af2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>:
      _Tuple_impl()
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f82a 	bl	8002b0a <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>:
      constexpr _Head_base()
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f810 	bl	8002b20 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>:
      constexpr _Head_base()
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_ZN6OutPwmD1Ev>:
  float dutyU = 0.0f;
  float dutyV = 0.0f;
  float dutyW = 0.0f;
};

class OutPwm{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3314      	adds	r3, #20
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff febe 	bl	80028c4 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <_Z41__static_initialization_and_destruction_0ii>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d107      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d102      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x20>
OutPwm outpwm;
 8002b6e:	4809      	ldr	r0, [pc, #36]	@ (8002b94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b70:	f7ff fd90 	bl	8002694 <_ZN6OutPwmC1Ev>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d102      	bne.n	8002b8a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b84:	4803      	ldr	r0, [pc, #12]	@ (8002b94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b86:	f7ff ffd6 	bl	8002b36 <_ZN6OutPwmD1Ev>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200003f8 	.word	0x200003f8

08002b98 <_GLOBAL__sub_I_outpwm>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f7ff ffd7 	bl	8002b54 <_Z41__static_initialization_and_destruction_0ii>
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_GLOBAL__sub_D_outpwm>:
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7ff ffcf 	bl	8002b54 <_Z41__static_initialization_and_destruction_0ii>
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN7SensCurC1Ev>:
#include <cstdint>

SensCur senscur;
extern OutPwm outpwm;

SensCur::SensCur()
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<SensCurData>()) {}
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f906 	bl	8002dd4 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	819a      	strh	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	81da      	strh	r2, [r3, #14]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <_ZN7SensCur9getRawCurEv>:
  
void SensCur::getRawCur() {
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  rawCurU = ADC1 -> JDR1;
 8002bf4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	819a      	strh	r2, [r3, #12]
  rawCurW = ADC2 -> JDR1;
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <_ZN7SensCur9getRawCurEv+0x30>)
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	81da      	strh	r2, [r3, #14]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	50000100 	.word	0x50000100

08002c20 <_ZN7SensCur9sensCurINEv>:

void SensCur::sensCurIN() {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	ed2d 8b02 	vpush	{d8}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  getRawCur();
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffdd 	bl	8002bec <_ZN7SensCur9getRawCurEv>
  
  data->curU = ADC_TO_CUR(rawCurU, curOffsU);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	899b      	ldrh	r3, [r3, #12]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f900 	bl	8002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c52:	4603      	mov	r3, r0
 8002c54:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8002ccc <_ZN7SensCur9sensCurINEv+0xac>
 8002c58:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
  data->curW = ADC_TO_CUR(rawCurW, curOffsW);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	89db      	ldrh	r3, [r3, #14]
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f8e9 	bl	8002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c80:	4603      	mov	r3, r0
 8002c82:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002ccc <_ZN7SensCur9sensCurINEv+0xac>
 8002c86:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c8a:	edc3 7a02 	vstr	s15, [r3, #8]
  

  // V相電流はIu + Iv + Iw = 0より計算
  data->curV = -data->curU - data->curW;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f8de 	bl	8002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c96:	4603      	mov	r3, r0
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eef1 8a67 	vneg.f32	s17, s15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8d5 	bl	8002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	ed93 8a02 	vldr	s16, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f8ce 	bl	8002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8002cbc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	ecbd 8b02 	vpop	{d8}
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	3b840842 	.word	0x3b840842

08002cd0 <_ZN7SensCur11sensCurInitEv>:

bool SensCur::sensCurInit() {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = STEP00;
  static bool _getReady = false;
  static uint16_t _calcount = 0;
  
  switch (seqID) {
 8002cd8:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <_ZN7SensCur11sensCurInitEv+0xac>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d03d      	beq.n	8002d5c <_ZN7SensCur11sensCurInitEv+0x8c>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	dc41      	bgt.n	8002d68 <_ZN7SensCur11sensCurInitEv+0x98>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <_ZN7SensCur11sensCurInitEv+0x1e>
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d007      	beq.n	8002cfc <_ZN7SensCur11sensCurInitEv+0x2c>
 8002cec:	e03c      	b.n	8002d68 <_ZN7SensCur11sensCurInitEv+0x98>
    case STEP00:
      // ServoON
      outpwm.Pon();
 8002cee:	4824      	ldr	r0, [pc, #144]	@ (8002d80 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8002cf0:	f7ff fcf4 	bl	80026dc <_ZN6OutPwm3PonEv>
      seqID = STEP01;
 8002cf4:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <_ZN7SensCur11sensCurInitEv+0xac>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
      break;
 8002cfa:	e039      	b.n	8002d70 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP01:
      // キャリブレーション
      if (_calcount < CALCOUNT) {
 8002cfc:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	2b63      	cmp	r3, #99	@ 0x63
 8002d02:	d817      	bhi.n	8002d34 <_ZN7SensCur11sensCurInitEv+0x64>
        getRawCur();
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff71 	bl	8002bec <_ZN7SensCur9getRawCurEv>
        curOffsU += rawCurU;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	8992      	ldrh	r2, [r2, #12]
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	605a      	str	r2, [r3, #4]
        curOffsW += rawCurW;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	89d2      	ldrh	r2, [r2, #14]
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
        _calcount++;
 8002d26:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8002d30:	801a      	strh	r2, [r3, #0]
      } else {
        curOffsU /= _calcount;
        curOffsW /= _calcount;
        seqID = STEP02;
      }
      break;
 8002d32:	e01d      	b.n	8002d70 <_ZN7SensCur11sensCurInitEv+0xa0>
        curOffsU /= _calcount;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	605a      	str	r2, [r3, #4]
        curOffsW /= _calcount;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
        seqID = STEP02;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <_ZN7SensCur11sensCurInitEv+0xac>)
 8002d56:	2202      	movs	r2, #2
 8002d58:	701a      	strb	r2, [r3, #0]
      break;
 8002d5a:	e009      	b.n	8002d70 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP02:
      // キャリブ完了
      outpwm.Poff();
 8002d5c:	4808      	ldr	r0, [pc, #32]	@ (8002d80 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8002d5e:	f7ff fccf 	bl	8002700 <_ZN6OutPwm4PoffEv>
      _getReady = true;
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <_ZN7SensCur11sensCurInitEv+0xb8>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
    default:
      seqID = STEP00;
 8002d68:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <_ZN7SensCur11sensCurInitEv+0xac>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
      break;
 8002d6e:	bf00      	nop
  }
  return _getReady;
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <_ZN7SensCur11sensCurInitEv+0xb8>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000420 	.word	0x20000420
 8002d80:	200003f8 	.word	0x200003f8
 8002d84:	20000422 	.word	0x20000422
 8002d88:	20000421 	.word	0x20000421

08002d8c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f867 	bl	8002e6a <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZN7SensCur11SensCurDataC1Ev>:
#define ADC_TO_CUR(U2_V, U2_OFFS) (((float)((int16_t)U2_V - (int16_t)U2_OFFS)) * ADGAIN) /* アンプからモータへの電流流し込みでプラス */


class SensCur {
public:
  struct SensCurData {
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002ddc:	200c      	movs	r0, #12
 8002dde:	f009 f877 	bl	800bed0 <_Znwj>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461c      	mov	r4, r3
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	60a3      	str	r3, [r4, #8]
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f7ff ffd4 	bl	8002da6 <_ZN7SensCur11SensCurDataC1Ev>
 8002dfe:	4621      	mov	r1, r4
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f850 	bl	8002ea6 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002e0e:	b590      	push	{r4, r7, lr}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f853 	bl	8002ec4 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002e1e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f858 	bl	8002ede <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f861 	bl	8002ef8 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002e36:	4603      	mov	r3, r0
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f000 f866 	bl	8002f0e <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>
	__ptr = pointer();
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
      }
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	return get();
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff96 	bl	8002d8c <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 8002e60:	4603      	mov	r3, r0
      }
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f85a 	bl	8002f2e <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f856 	bl	8002f48 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffe6 	bl	8002e86 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f84e 	bl	8002f70 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f84e 	bl	8002f8a <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_+0x18>
 8002f1e:	210c      	movs	r1, #12
 8002f20:	4618      	mov	r0, r3
 8002f22:	f008 ffd3 	bl	800becc <_ZdlPvj>
      }
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f833 	bl	8002fa4 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f831 	bl	8002fbc <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffb2 	bl	8002ec4 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002f60:	4602      	mov	r2, r0
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f82b 	bl	8002fd6 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f82a 	bl	8002fee <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f82a 	bl	8003006 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f82a 	bl	8003020 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f82e 	bl	8003040 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f82f 	bl	800305a <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f82e 	bl	8003072 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>
 8003016:	4603      	mov	r3, r0
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f82d 	bl	8003088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f835 	bl	80030a0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f836 	bl	80030bc <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f835 	bl	80030d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>
 8003068:	4603      	mov	r3, r0
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>:
      _Tuple_impl()
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f82a 	bl	80030ea <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>:
      constexpr _Head_base()
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f810 	bl	8003100 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <_ZN7SensCurD1Ev>:
class SensCur {
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe74 	bl	8002e0e <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_Z41__static_initialization_and_destruction_0ii>:

bool SensCur::adjustCur() {
  
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003146:	4293      	cmp	r3, r2
 8003148:	d102      	bne.n	8003150 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensCur senscur;
 800314a:	4809      	ldr	r0, [pc, #36]	@ (8003170 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800314c:	f7ff fd34 	bl	8002bb8 <_ZN7SensCurC1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800315c:	4293      	cmp	r3, r2
 800315e:	d102      	bne.n	8003166 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003160:	4803      	ldr	r0, [pc, #12]	@ (8003170 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003162:	f7ff ffd8 	bl	8003116 <_ZN7SensCurD1Ev>
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000410 	.word	0x20000410

08003174 <_GLOBAL__sub_I_senscur>:
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
 8003178:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800317c:	2001      	movs	r0, #1
 800317e:	f7ff ffd7 	bl	8003130 <_Z41__static_initialization_and_destruction_0ii>
 8003182:	bd80      	pop	{r7, pc}

08003184 <_GLOBAL__sub_D_senscur>:
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
 8003188:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff ffcf 	bl	8003130 <_Z41__static_initialization_and_destruction_0ii>
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <HAL_MspInit+0x44>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	4a0e      	ldr	r2, [pc, #56]	@ (80031d8 <HAL_MspInit+0x44>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <HAL_MspInit+0x44>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_MspInit+0x44>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <HAL_MspInit+0x44>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_MspInit+0x44>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80031ca:	f006 fe85 	bl	8009ed8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0a0      	sub	sp, #128	@ 0x80
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031f4:	f107 0318 	add.w	r3, r7, #24
 80031f8:	2254      	movs	r2, #84	@ 0x54
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f008 ff49 	bl	800c094 <memset>
  if(hadc->Instance==ADC1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320a:	d146      	bne.n	800329a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800320c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003210:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003212:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003216:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	4618      	mov	r0, r3
 800321e:	f007 fb61 	bl	800a8e4 <HAL_RCCEx_PeriphCLKConfig>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003228:	f7ff f86e 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800322c:	4b42      	ldr	r3, [pc, #264]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a41      	ldr	r2, [pc, #260]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 8003234:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003236:	4b40      	ldr	r3, [pc, #256]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10b      	bne.n	8003256 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800323e:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_ADC_MspInit+0x160>)
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	4a3e      	ldr	r2, [pc, #248]	@ (800333c <HAL_ADC_MspInit+0x160>)
 8003244:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800324a:	4b3c      	ldr	r3, [pc, #240]	@ (800333c <HAL_ADC_MspInit+0x160>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_ADC_MspInit+0x160>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	4a38      	ldr	r2, [pc, #224]	@ (800333c <HAL_ADC_MspInit+0x160>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003262:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_ADC_MspInit+0x160>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800326e:	2301      	movs	r3, #1
 8003270:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	2303      	movs	r3, #3
 8003274:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003284:	f004 fbe8 	bl	8007a58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2012      	movs	r0, #18
 800328e:	f003 fa42 	bl	8006716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003292:	2012      	movs	r0, #18
 8003294:	f003 fa59 	bl	800674a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003298:	e04a      	b.n	8003330 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a28      	ldr	r2, [pc, #160]	@ (8003340 <HAL_ADC_MspInit+0x164>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d145      	bne.n	8003330 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80032a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80032aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80032ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032b0:	f107 0318 	add.w	r3, r7, #24
 80032b4:	4618      	mov	r0, r3
 80032b6:	f007 fb15 	bl	800a8e4 <HAL_RCCEx_PeriphCLKConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80032c0:	f7ff f822 	bl	8002308 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 80032cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80032ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <HAL_ADC_MspInit+0x15c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10b      	bne.n	80032ee <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80032d6:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e2:	4b16      	ldr	r3, [pc, #88]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b13      	ldr	r3, [pc, #76]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	4a12      	ldr	r2, [pc, #72]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fa:	4b10      	ldr	r3, [pc, #64]	@ (800333c <HAL_ADC_MspInit+0x160>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003306:	23c2      	movs	r3, #194	@ 0xc2
 8003308:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800330a:	2303      	movs	r3, #3
 800330c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003316:	4619      	mov	r1, r3
 8003318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800331c:	f004 fb9c 	bl	8007a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	2012      	movs	r0, #18
 8003326:	f003 f9f6 	bl	8006716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800332a:	2012      	movs	r0, #18
 800332c:	f003 fa0d 	bl	800674a <HAL_NVIC_EnableIRQ>
}
 8003330:	bf00      	nop
 8003332:	3780      	adds	r7, #128	@ 0x80
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000424 	.word	0x20000424
 800333c:	40021000 	.word	0x40021000
 8003340:	50000100 	.word	0x50000100

08003344 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_CORDIC_MspInit+0x38>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10b      	bne.n	800336e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <HAL_CORDIC_MspInit+0x3c>)
 8003358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_CORDIC_MspInit+0x3c>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6493      	str	r3, [r2, #72]	@ 0x48
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <HAL_CORDIC_MspInit+0x3c>)
 8003364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b09e      	sub	sp, #120	@ 0x78
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	2254      	movs	r2, #84	@ 0x54
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f008 fe75 	bl	800c094 <memset>
  if(hfdcan->Instance==FDCAN1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003464 <HAL_FDCAN_MspInit+0xe0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d153      	bne.n	800345c <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80033b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80033ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	4618      	mov	r0, r3
 80033c6:	f007 fa8d 	bl	800a8e4 <HAL_RCCEx_PeriphCLKConfig>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80033d0:	f7fe ff9a 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033de:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e0:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_FDCAN_MspInit+0xe4>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003408:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800340e:	2301      	movs	r3, #1
 8003410:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003416:	2309      	movs	r3, #9
 8003418:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800341e:	4619      	mov	r1, r3
 8003420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003424:	f004 fb18 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800342c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800343a:	2309      	movs	r3, #9
 800343c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003442:	4619      	mov	r1, r3
 8003444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003448:	f004 fb06 	bl	8007a58 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2100      	movs	r1, #0
 8003450:	2015      	movs	r0, #21
 8003452:	f003 f960 	bl	8006716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003456:	2015      	movs	r0, #21
 8003458:	f003 f977 	bl	800674a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800345c:	bf00      	nop
 800345e:	3778      	adds	r7, #120	@ 0x78
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40006400 	.word	0x40006400
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0a0      	sub	sp, #128	@ 0x80
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	2254      	movs	r2, #84	@ 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f008 fe01 	bl	800c094 <memset>
  if(hi2c->Instance==I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5f      	ldr	r2, [pc, #380]	@ (8003614 <HAL_I2C_MspInit+0x1a8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 80b6 	bne.w	800360a <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800349e:	2340      	movs	r3, #64	@ 0x40
 80034a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034a2:	2300      	movs	r3, #0
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	4618      	mov	r0, r3
 80034ac:	f007 fa1a 	bl	800a8e4 <HAL_RCCEx_PeriphCLKConfig>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034b6:	f7fe ff27 	bl	8002308 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	4b57      	ldr	r3, [pc, #348]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	4a56      	ldr	r2, [pc, #344]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c6:	4b54      	ldr	r3, [pc, #336]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	4a50      	ldr	r2, [pc, #320]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034de:	4b4e      	ldr	r3, [pc, #312]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f0:	2312      	movs	r3, #18
 80034f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034fc:	2304      	movs	r3, #4
 80034fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800350a:	f004 faa5 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003512:	2312      	movs	r3, #18
 8003514:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800351e:	2304      	movs	r3, #4
 8003520:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003526:	4619      	mov	r1, r3
 8003528:	483c      	ldr	r0, [pc, #240]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800352a:	f004 fa95 	bl	8007a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800352e:	4b3a      	ldr	r3, [pc, #232]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	4a39      	ldr	r2, [pc, #228]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 8003534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003538:	6593      	str	r3, [r2, #88]	@ 0x58
 800353a:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8003546:	4b36      	ldr	r3, [pc, #216]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003548:	4a36      	ldr	r2, [pc, #216]	@ (8003624 <HAL_I2C_MspInit+0x1b8>)
 800354a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800354c:	4b34      	ldr	r3, [pc, #208]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800354e:	2210      	movs	r2, #16
 8003550:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003552:	4b33      	ldr	r3, [pc, #204]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003558:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800355e:	4b30      	ldr	r3, [pc, #192]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003564:	4b2e      	ldr	r3, [pc, #184]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003566:	2200      	movs	r2, #0
 8003568:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800356a:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003578:	2200      	movs	r2, #0
 800357a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800357c:	4828      	ldr	r0, [pc, #160]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800357e:	f003 f8ff 	bl	8006780 <HAL_DMA_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8003588:	f7fe febe 	bl	8002308 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003592:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003598:	4b23      	ldr	r3, [pc, #140]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 800359a:	4a24      	ldr	r2, [pc, #144]	@ (800362c <HAL_I2C_MspInit+0x1c0>)
 800359c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800359e:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035a0:	2211      	movs	r2, #17
 80035a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a4:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035a6:	2210      	movs	r2, #16
 80035a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035b2:	2280      	movs	r2, #128	@ 0x80
 80035b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80035c2:	4b19      	ldr	r3, [pc, #100]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80035ce:	4816      	ldr	r0, [pc, #88]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035d0:	f003 f8d6 	bl	8006780 <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80035da:	f7fe fe95 	bl	8002308 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80035e4:	4a10      	ldr	r2, [pc, #64]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	201f      	movs	r0, #31
 80035f0:	f003 f891 	bl	8006716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80035f4:	201f      	movs	r0, #31
 80035f6:	f003 f8a8 	bl	800674a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2020      	movs	r0, #32
 8003600:	f003 f889 	bl	8006716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003604:	2020      	movs	r0, #32
 8003606:	f003 f8a0 	bl	800674a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800360a:	bf00      	nop
 800360c:	3780      	adds	r7, #128	@ 0x80
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40005400 	.word	0x40005400
 8003618:	40021000 	.word	0x40021000
 800361c:	48000400 	.word	0x48000400
 8003620:	2000024c 	.word	0x2000024c
 8003624:	40020008 	.word	0x40020008
 8003628:	200002ac 	.word	0x200002ac
 800362c:	4002001c 	.word	0x4002001c

08003630 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_TIM_PWM_MspInit+0x38>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10b      	bne.n	800365a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_TIM_PWM_MspInit+0x3c>)
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_TIM_PWM_MspInit+0x3c>)
 8003648:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800364c:	6613      	str	r3, [r2, #96]	@ 0x60
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <HAL_TIM_PWM_MspInit+0x3c>)
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_TIM_MspPostInit+0x9c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d138      	bne.n	8003704 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	4b1f      	ldr	r3, [pc, #124]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	4a1e      	ldr	r2, [pc, #120]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800369e:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036b6:	4b16      	ldr	r3, [pc, #88]	@ (8003710 <HAL_TIM_MspPostInit+0xa0>)
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80036c2:	2307      	movs	r3, #7
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036d2:	2302      	movs	r3, #2
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <HAL_TIM_MspPostInit+0xa4>)
 80036de:	f004 f9bb 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80036e2:	f242 0303 	movw	r3, #8195	@ 0x2003
 80036e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	2300      	movs	r3, #0
 80036f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80036f4:	2306      	movs	r3, #6
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4619      	mov	r1, r3
 80036fe:	4806      	ldr	r0, [pc, #24]	@ (8003718 <HAL_TIM_MspPostInit+0xa8>)
 8003700:	f004 f9aa 	bl	8007a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	@ 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40021000 	.word	0x40021000
 8003714:	48000800 	.word	0x48000800
 8003718:	48000400 	.word	0x48000400

0800371c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <NMI_Handler+0x4>

08003724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <HardFault_Handler+0x4>

0800372c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <MemManage_Handler+0x4>

08003734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <BusFault_Handler+0x4>

0800373c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <UsageFault_Handler+0x4>

08003744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003772:	f000 fdef 	bl	8004354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <DMA1_Channel1_IRQHandler+0x10>)
 8003782:	f003 f987 	bl	8006a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000024c 	.word	0x2000024c

08003790 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003794:	4802      	ldr	r0, [pc, #8]	@ (80037a0 <DMA1_Channel2_IRQHandler+0x10>)
 8003796:	f003 f97d 	bl	8006a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200002ac 	.word	0x200002ac

080037a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037a8:	4803      	ldr	r0, [pc, #12]	@ (80037b8 <ADC1_2_IRQHandler+0x14>)
 80037aa:	f001 f9cb 	bl	8004b44 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80037ae:	4803      	ldr	r0, [pc, #12]	@ (80037bc <ADC1_2_IRQHandler+0x18>)
 80037b0:	f001 f9c8 	bl	8004b44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000094 	.word	0x20000094
 80037bc:	20000100 	.word	0x20000100

080037c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80037c4:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80037c6:	f003 fed1 	bl	800756c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000194 	.word	0x20000194

080037d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037d8:	4802      	ldr	r0, [pc, #8]	@ (80037e4 <I2C1_EV_IRQHandler+0x10>)
 80037da:	f004 fd99 	bl	8008310 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200001f8 	.word	0x200001f8

080037e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80037ec:	4802      	ldr	r0, [pc, #8]	@ (80037f8 <I2C1_ER_IRQHandler+0x10>)
 80037ee:	f004 fda9 	bl	8008344 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200001f8 	.word	0x200001f8

080037fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003800:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003804:	f004 fac2 	bl	8007d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}

0800380c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return 1;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_kill>:

int _kill(int pid, int sig)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003826:	f008 fc91 	bl	800c14c <__errno>
 800382a:	4603      	mov	r3, r0
 800382c:	2216      	movs	r2, #22
 800382e:	601a      	str	r2, [r3, #0]
  return -1;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <_exit>:

void _exit (int status)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ffe7 	bl	800381c <_kill>
  while (1) {}    /* Make sure we hang here */
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <_exit+0x12>
	...

08003854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <_sbrk+0x5c>)
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <_sbrk+0x60>)
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003868:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003870:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <_sbrk+0x64>)
 8003872:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <_sbrk+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003876:	4b10      	ldr	r3, [pc, #64]	@ (80038b8 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003884:	f008 fc62 	bl	800c14c <__errno>
 8003888:	4603      	mov	r3, r0
 800388a:	220c      	movs	r2, #12
 800388c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	e009      	b.n	80038a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003894:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389a:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	4a05      	ldr	r2, [pc, #20]	@ (80038b8 <_sbrk+0x64>)
 80038a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20020000 	.word	0x20020000
 80038b4:	00000400 	.word	0x00000400
 80038b8:	20000428 	.word	0x20000428
 80038bc:	20000588 	.word	0x20000588

080038c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <SystemInit+0x20>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ca:	4a05      	ldr	r2, [pc, #20]	@ (80038e0 <SystemInit+0x20>)
 80038cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	605a      	str	r2, [r3, #4]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4619      	mov	r1, r3
 8003926:	4817      	ldr	r0, [pc, #92]	@ (8003984 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8003928:	f7ff ffdc 	bl	80038e4 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 800392c:	4815      	ldr	r0, [pc, #84]	@ (8003984 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 800392e:	f7ff ffe7 	bl	8003900 <LL_CORDIC_ReadData>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f88f 	bl	8003a58 <_ZN10Acrocantho6Cordic8from_q31Em>
 800393a:	eef0 7a40 	vmov.f32	s15, s0
 800393e:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 8003942:	4810      	ldr	r0, [pc, #64]	@ (8003984 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8003944:	f7ff ffdc 	bl	8003900 <LL_CORDIC_ReadData>
 8003948:	4603      	mov	r3, r0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f884 	bl	8003a58 <_ZN10Acrocantho6Cordic8from_q31Em>
 8003950:	eef0 7a40 	vmov.f32	s15, s0
 8003954:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8003958:	f107 0318 	add.w	r3, r7, #24
 800395c:	f107 0210 	add.w	r2, r7, #16
 8003960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003964:	e883 0003 	stmia.w	r3, {r0, r1}
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	ee07 2a10 	vmov	s14, r2
 8003970:	ee07 3a90 	vmov	s15, r3
  };
 8003974:	eeb0 0a47 	vmov.f32	s0, s14
 8003978:	eef0 0a67 	vmov.f32	s1, s15
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40020c00 	.word	0x40020c00

08003988 <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	ed87 0a02 	vstr	s0, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 8003998:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800399c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8003a50 <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 80039a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a4:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 80039a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80039ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b0:	ee17 3a90 	vmov	r3, s15
 80039b4:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 80039cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80039d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	d507      	bpl.n	80039ea <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 80039da:	edd7 7a06 	vldr	s15, [r7, #24]
 80039de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039e6:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 80039ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80039ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	dd06      	ble.n	8003a0a <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 80039fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a08:	e001      	b.n	8003a0e <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8003a0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a0e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003a54 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 8003a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8003a1a:	ee17 1a90 	vmov	r1, s15
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ff7a 	bl	8003918 <_ZNK10Acrocantho6CordicclEl>
 8003a24:	eeb0 7a40 	vmov.f32	s14, s0
 8003a28:	eef0 7a60 	vmov.f32	s15, s1
 8003a2c:	ed87 7a04 	vstr	s14, [r7, #16]
 8003a30:	edc7 7a05 	vstr	s15, [r7, #20]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	ee07 2a10 	vmov	s14, r2
 8003a3c:	ee07 3a90 	vmov	s15, r3
  }
 8003a40:	eeb0 0a47 	vmov.f32	s0, s14
 8003a44:	eef0 0a67 	vmov.f32	s1, s15
 8003a48:	3728      	adds	r7, #40	@ 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40c90fdb 	.word	0x40c90fdb
 8003a54:	4f800000 	.word	0x4f800000

08003a58 <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003a80 <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 8003a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	30000000 	.word	0x30000000

08003a84 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>:
};
struct TrigonTransform {
  /* f4t_trigon1 : V_d*cos - V_q*sin */
  /* f4t_trigon2 : V_d*sin + V_q*cos */
  TrigonTransform(const SinCos& sc, float vd, float vq)
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a92:	edc7 0a00 	vstr	s1, [r7]
    : _trigon1(sc.c * vd - sc.s * vq),
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	edd3 6a00 	vldr	s13, [r3]
 8003aaa:	edd7 7a00 	vldr	s15, [r7]
 8003aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	edc3 7a00 	vstr	s15, [r3]
      _trigon2(sc.s * vd + sc.c * vq) {}
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	ed93 7a00 	vldr	s14, [r3]
 8003ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ad0:	edd7 7a00 	vldr	s15, [r7]
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	edc3 7a01 	vstr	s15, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_ZN10Acrocantho18InverseDqTransformC1Eff>:
  const float _trigon1;
  const float _trigon2;
};

struct InverseDqTransform {
  InverseDqTransform(float _tri1, float _tri2)
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003afc:	edc7 0a01 	vstr	s1, [r7, #4]
      : u_ini(_tri1 * usersqrt1),
 8003b00:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b04:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003b68 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x78>
 8003b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
        v_ini(-(_tri1 * usersqrt3) + _tri2 * usersqrt2),
 8003b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b16:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003b6c <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8003b1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b22:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003b70 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8003b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	edc3 7a01 	vstr	s15, [r3, #4]
        w_ini(-(_tri1 * usersqrt3) - _tri2 * usersqrt2) {}
 8003b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b38:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003b70 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8003b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b40:	eeb1 7a67 	vneg.f32	s14, s15
 8003b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b48:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003b6c <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8003b4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	edc3 7a02 	vstr	s15, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	3f5105eb 	.word	0x3f5105eb
 8003b6c:	3f3504f3 	.word	0x3f3504f3
 8003b70:	3ed105eb 	.word	0x3ed105eb

08003b74 <_ZNK3Ang10getAngDataEv>:
  void elecAngleIn();
  void i2cMasterTxCallback();
  void i2cMasterRxCallback();
  void prepareCanData(uint8_t* buffer, size_t bufferSize) const;
  
  AngData* getAngData() const { return data.get(); }
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fac3 	bl	800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_ZN6CanCom7getDataEv>:
  void rxFifo0Callback(uint32_t RxFifo0ITs);
  void handleRxData();
  void rxTask();
  void txTask();

  CanData* getData() { return data.get(); }
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd fdaf 	bl	80016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN8UserTaskC1Ev>:
extern SensCur senscur;
extern OutPwm outpwm;
extern CanCom cancom;
extern ModeControl modecontrol;

UserTask::UserTask()
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  : count(0), data(std::make_unique<UserTaskData>()){}
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f9b3 	bl	8003f1e <_ZSt11make_uniqueIN8UserTask12UserTaskDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	711a      	strb	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	715a      	strb	r2, [r3, #5]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	719a      	strb	r2, [r3, #6]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZN8UserTask10cyclicTaskEv>:


void UserTask::cyclicTask() {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = INIT;
  static bool curcal = false;

   switch (seqID) {
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b0d      	cmp	r3, #13
 8003be2:	d028      	beq.n	8003c36 <_ZN8UserTask10cyclicTaskEv+0x62>
 8003be4:	2b0d      	cmp	r3, #13
 8003be6:	dc6a      	bgt.n	8003cbe <_ZN8UserTask10cyclicTaskEv+0xea>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d048      	beq.n	8003c7e <_ZN8UserTask10cyclicTaskEv+0xaa>
 8003bec:	2b0b      	cmp	r3, #11
 8003bee:	d166      	bne.n	8003cbe <_ZN8UserTask10cyclicTaskEv+0xea>
    case LOOP:

      // 強制停止
      if (!servoCheck()) {
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f951 	bl	8003e98 <_ZN8UserTask10servoCheckEv>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f083 0301 	eor.w	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <_ZN8UserTask10cyclicTaskEv+0x3c>
        outpwm.Poff();
 8003c02:	4834      	ldr	r0, [pc, #208]	@ (8003cd4 <_ZN8UserTask10cyclicTaskEv+0x100>)
 8003c04:	f7fe fd7c 	bl	8002700 <_ZN6OutPwm4PoffEv>
        seqID = STEP00;
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
        break;
 8003c0e:	e05b      	b.n	8003cc8 <_ZN8UserTask10cyclicTaskEv+0xf4>
      }

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003c10:	2201      	movs	r2, #1
 8003c12:	2120      	movs	r1, #32
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c18:	f004 f8a0 	bl	8007d5c <HAL_GPIO_WritePin>
      ang.getAngle();
 8003c1c:	482e      	ldr	r0, [pc, #184]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c1e:	f7fd f807 	bl	8000c30 <_ZN3Ang8getAngleEv>
      ang.getVel();
 8003c22:	482d      	ldr	r0, [pc, #180]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c24:	f7fd f857 	bl	8000cd6 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 8003c28:	482b      	ldr	r0, [pc, #172]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c2a:	f7fd f9dd 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      motorControl();
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f876 	bl	8003d20 <_ZN8UserTask12motorControlEv>

      break;
 8003c34:	e048      	b.n	8003cc8 <_ZN8UserTask10cyclicTaskEv+0xf4>
    case INIT:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d809      	bhi.n	8003c52 <_ZN8UserTask10cyclicTaskEv+0x7e>
        ang.getAngle();
 8003c3e:	4826      	ldr	r0, [pc, #152]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c40:	f7fc fff6 	bl	8000c30 <_ZN3Ang8getAngleEv>
        count++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	791b      	ldrb	r3, [r3, #4]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	711a      	strb	r2, [r3, #4]
          seqID = STEP00;
          count = 0;
        }
        
      }
      break;
 8003c50:	e039      	b.n	8003cc6 <_ZN8UserTask10cyclicTaskEv+0xf2>
        ang.getAngle();
 8003c52:	4821      	ldr	r0, [pc, #132]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c54:	f7fc ffec 	bl	8000c30 <_ZN3Ang8getAngleEv>
        ang.getVel();
 8003c58:	481f      	ldr	r0, [pc, #124]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c5a:	f7fd f83c 	bl	8000cd6 <_ZN3Ang6getVelEv>
        if (senscur.sensCurInit()) {
 8003c5e:	481f      	ldr	r0, [pc, #124]	@ (8003cdc <_ZN8UserTask10cyclicTaskEv+0x108>)
 8003c60:	f7ff f836 	bl	8002cd0 <_ZN7SensCur11sensCurInitEv>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02d      	beq.n	8003cc6 <_ZN8UserTask10cyclicTaskEv+0xf2>
          senscur.sensCurIN();
 8003c6a:	481c      	ldr	r0, [pc, #112]	@ (8003cdc <_ZN8UserTask10cyclicTaskEv+0x108>)
 8003c6c:	f7fe ffd8 	bl	8002c20 <_ZN7SensCur9sensCurINEv>
          seqID = STEP00;
 8003c70:	4b17      	ldr	r3, [pc, #92]	@ (8003cd0 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
          count = 0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	711a      	strb	r2, [r3, #4]
      break;
 8003c7c:	e023      	b.n	8003cc6 <_ZN8UserTask10cyclicTaskEv+0xf2>
    case STEP00:
      ang.getAngle();
 8003c7e:	4816      	ldr	r0, [pc, #88]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c80:	f7fc ffd6 	bl	8000c30 <_ZN3Ang8getAngleEv>
      ang.getVel();
 8003c84:	4814      	ldr	r0, [pc, #80]	@ (8003cd8 <_ZN8UserTask10cyclicTaskEv+0x104>)
 8003c86:	f7fd f826 	bl	8000cd6 <_ZN3Ang6getVelEv>
      if (servoCheck()){
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f904 	bl	8003e98 <_ZN8UserTask10servoCheckEv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d006      	beq.n	8003ca4 <_ZN8UserTask10cyclicTaskEv+0xd0>
        outpwm.Pon();
 8003c96:	480f      	ldr	r0, [pc, #60]	@ (8003cd4 <_ZN8UserTask10cyclicTaskEv+0x100>)
 8003c98:	f7fe fd20 	bl	80026dc <_ZN6OutPwm3PonEv>
        seqID = LOOP;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003c9e:	220b      	movs	r2, #11
 8003ca0:	701a      	strb	r2, [r3, #0]
        break;
 8003ca2:	e011      	b.n	8003cc8 <_ZN8UserTask10cyclicTaskEv+0xf4>
      }
      senscur.sensCurIN();
 8003ca4:	480d      	ldr	r0, [pc, #52]	@ (8003cdc <_ZN8UserTask10cyclicTaskEv+0x108>)
 8003ca6:	f7fe ffbb 	bl	8002c20 <_ZN7SensCur9sensCurINEv>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2120      	movs	r1, #32
 8003cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb2:	f004 f853 	bl	8007d5c <HAL_GPIO_WritePin>
      outpwm.Poff();
 8003cb6:	4807      	ldr	r0, [pc, #28]	@ (8003cd4 <_ZN8UserTask10cyclicTaskEv+0x100>)
 8003cb8:	f7fe fd22 	bl	8002700 <_ZN6OutPwm4PoffEv>
      break;
 8003cbc:	e004      	b.n	8003cc8 <_ZN8UserTask10cyclicTaskEv+0xf4>

    default:
      seqID = INIT;
 8003cbe:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003cc0:	220d      	movs	r2, #13
 8003cc2:	701a      	strb	r2, [r3, #0]
      break;
 8003cc4:	e000      	b.n	8003cc8 <_ZN8UserTask10cyclicTaskEv+0xf4>
      break;
 8003cc6:	bf00      	nop
    }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	200003f8 	.word	0x200003f8
 8003cd8:	200003c0 	.word	0x200003c0
 8003cdc:	20000410 	.word	0x20000410

08003ce0 <_ZN8UserTask8idleTaskEv>:

void UserTask::idleTask() {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  cancom.rxTask();
 8003ce8:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <_ZN8UserTask8idleTaskEv+0x3c>)
 8003cea:	f7fd fcaf 	bl	800164c <_ZN6CanCom6rxTaskEv>
  setRef();
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f88c 	bl	8003e0c <_ZN8UserTask6setRefEv>

  cancom.initTxHeader(0x01, false, false);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4808      	ldr	r0, [pc, #32]	@ (8003d1c <_ZN8UserTask8idleTaskEv+0x3c>)
 8003cfc:	f7fd fbaf 	bl	800145e <_ZN6CanCom12initTxHeaderEmbb>
  cancom.txTask();
 8003d00:	4806      	ldr	r0, [pc, #24]	@ (8003d1c <_ZN8UserTask8idleTaskEv+0x3c>)
 8003d02:	f7fd fcc1 	bl	8001688 <_ZN6CanCom6txTaskEv>
  servocheck = servoCheck();
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8c6 	bl	8003e98 <_ZN8UserTask10servoCheckEv>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	715a      	strb	r2, [r3, #5]
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000358 	.word	0x20000358

08003d20 <_ZN8UserTask12motorControlEv>:

void UserTask::motorControl() {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	ed2d 8b02 	vpush	{d8}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 8003d2c:	4833      	ldr	r0, [pc, #204]	@ (8003dfc <_ZN8UserTask12motorControlEv+0xdc>)
 8003d2e:	f7ff ff21 	bl	8003b74 <_ZNK3Ang10getAngDataEv>
 8003d32:	6378      	str	r0, [r7, #52]	@ 0x34
  Acrocantho::Cordic cordic;
 8003d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd fe4f 	bl	80019dc <_ZN10Acrocantho6CordicC1Ev>

  // drvMd0のとき電圧を0にする
  modecontrol.modeCtrl(data->drvMdRef);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f928 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	482c      	ldr	r0, [pc, #176]	@ (8003e00 <_ZN8UserTask12motorControlEv+0xe0>)
 8003d4e:	f7fe fc55 	bl	80025fc <_ZN11ModeControl8modeCtrlEh>
  
  senscur.sensCurIN();
 8003d52:	482c      	ldr	r0, [pc, #176]	@ (8003e04 <_ZN8UserTask12motorControlEv+0xe4>)
 8003d54:	f7fe ff64 	bl	8002c20 <_ZN7SensCur9sensCurINEv>
  
  // SinCos演算
  Acrocantho::SinCos result = cordic.radians(angdata->elecAng);
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe0e 	bl	8003988 <_ZNK10Acrocantho6Cordic7radiansEf>
 8003d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8003d70:	eef0 7a60 	vmov.f32	s15, s1
 8003d74:	ed87 7a08 	vstr	s14, [r7, #32]
 8003d78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float s = result.s;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  float c = result.c;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  // dq逆変換
  Acrocantho::TrigonTransform tt(result, data->voltDRef, data->voltQRef);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f905 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	ed93 8a01 	vldr	s16, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f8fe 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003da0:	f107 0220 	add.w	r2, r7, #32
 8003da4:	f107 0318 	add.w	r3, r7, #24
 8003da8:	eef0 0a67 	vmov.f32	s1, s15
 8003dac:	eeb0 0a48 	vmov.f32	s0, s16
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fe66 	bl	8003a84 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>
  Acrocantho::InverseDqTransform idt(tt._trigon1, tt._trigon2);
 8003db8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	eef0 0a47 	vmov.f32	s1, s14
 8003dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fe8f 	bl	8003af0 <_ZN10Acrocantho18InverseDqTransformC1Eff>
  
  outpwm.setReg(idt.u_ini, idt.v_ini, idt.w_ini);
 8003dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dda:	edd7 6a05 	vldr	s13, [r7, #20]
 8003dde:	eeb0 1a66 	vmov.f32	s2, s13
 8003de2:	eef0 0a47 	vmov.f32	s1, s14
 8003de6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dea:	4807      	ldr	r0, [pc, #28]	@ (8003e08 <_ZN8UserTask12motorControlEv+0xe8>)
 8003dec:	f7fe fc9e 	bl	800272c <_ZN6OutPwm6setRegEfff>
}
 8003df0:	bf00      	nop
 8003df2:	3738      	adds	r7, #56	@ 0x38
 8003df4:	46bd      	mov	sp, r7
 8003df6:	ecbd 8b02 	vpop	{d8}
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200003c0 	.word	0x200003c0
 8003e00:	200003f4 	.word	0x200003f4
 8003e04:	20000410 	.word	0x20000410
 8003e08:	200003f8 	.word	0x200003f8

08003e0c <_ZN8UserTask6setRefEv>:

// Canで受け取った指令値のセット
void UserTask::setRef() {
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8003e14:	481f      	ldr	r0, [pc, #124]	@ (8003e94 <_ZN8UserTask6setRefEv+0x88>)
 8003e16:	f7ff feba 	bl	8003b8e <_ZN6CanCom7getDataEv>
 8003e1a:	60f8      	str	r0, [r7, #12]
  
  data->genFuncRef = candata->genFuncRef;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f8b9 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	7013      	strb	r3, [r2, #0]
  data->drvMdRef = candata->drvMdRef;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f8b1 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	7053      	strb	r3, [r2, #1]
  data->voltDRef = static_cast<float>(candata->voltDRef);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	789c      	ldrb	r4, [r3, #2]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f8a7 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	ee07 4a90 	vmov	s15, r4
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	edc3 7a01 	vstr	s15, [r3, #4]
  data->voltQRef = static_cast<float>(candata->voltQRef);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	78dc      	ldrb	r4, [r3, #3]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f89a 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003e62:	4603      	mov	r3, r0
 8003e64:	ee07 4a90 	vmov	s15, r4
 8003e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6c:	edc3 7a02 	vstr	s15, [r3, #8]
  data->virAngFreq = static_cast<float>(candata->virAngFreq);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	791c      	ldrb	r4, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f88d 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	ee07 4a90 	vmov	s15, r4
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	edc3 7a03 	vstr	s15, [r3, #12]
  
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000358 	.word	0x20000358

08003e98 <_ZN8UserTask10servoCheckEv>:

// Poffのみfalseを返す
bool UserTask::servoCheck() {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  switch (data->genFuncRef) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f877 	bl	8003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <_ZN8UserTask10servoCheckEv+0x1e>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <_ZN8UserTask10servoCheckEv+0x22>
 8003eb4:	e003      	b.n	8003ebe <_ZN8UserTask10servoCheckEv+0x26>
    case 0x00:
      return false;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e002      	b.n	8003ec0 <_ZN8UserTask10servoCheckEv+0x28>
    case 0x01:
      return true;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <_ZN8UserTask10servoCheckEv+0x28>
    default:
      return false;
 8003ebe:	2300      	movs	r3, #0
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  usertask.cyclicTask();
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 8003ed2:	f7ff fe7f 	bl	8003bd4 <_ZN8UserTask10cyclicTaskEv>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000042c 	.word	0x2000042c

08003ee4 <_ZN8UserTask12UserTaskDataC1Ev>:
  struct UserTaskData {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	705a      	strb	r2, [r3, #1]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZSt11make_uniqueIN8UserTask12UserTaskDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003f1e:	b590      	push	{r4, r7, lr}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003f26:	2010      	movs	r0, #16
 8003f28:	f007 ffd2 	bl	800bed0 <_Znwj>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461c      	mov	r4, r3
 8003f30:	4622      	mov	r2, r4
 8003f32:	2300      	movs	r3, #0
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	6053      	str	r3, [r2, #4]
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	60d3      	str	r3, [r2, #12]
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff ffd1 	bl	8003ee4 <_ZN8UserTask12UserTaskDataC1Ev>
 8003f42:	4621      	mov	r1, r4
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f842 	bl	8003fce <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd90      	pop	{r4, r7, pc}

08003f52 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003f52:	b590      	push	{r4, r7, lr}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f845 	bl	8003fec <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003f62:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f84a 	bl	8004006 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE11get_deleterEv>
 8003f72:	4604      	mov	r4, r0
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f853 	bl	8004020 <_ZSt4moveIRPN8UserTask12UserTaskDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4620      	mov	r0, r4
 8003f82:	f000 f858 	bl	8004036 <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_>
	__ptr = pointer();
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
      }
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}

08003f96 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
	return get();
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd f8a6 	bl	80010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>
 8003fa4:	4603      	mov	r3, r0
      }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZNSt15__uniq_ptr_dataIN8UserTask12UserTaskDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f849 	bl	8004056 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1EPS1_>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6839      	ldr	r1, [r7, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ffe6 	bl	8003fae <_ZNSt15__uniq_ptr_dataIN8UserTask12UserTaskDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f841 	bl	800407e <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f841 	bl	8004098 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE10_M_deleterEv>
 8004016:	4603      	mov	r3, r0
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZSt4moveIRPN8UserTask12UserTaskDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_+0x18>
 8004046:	2110      	movs	r1, #16
 8004048:	4618      	mov	r0, r3
 800404a:	f007 ff3f 	bl	800becc <_ZdlPvj>
      }
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f825 	bl	80040b2 <_ZNSt5tupleIJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ffbf 	bl	8003fec <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f81f 	bl	80040cc <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800408e:	4603      	mov	r3, r0
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f81e 	bl	80040e4 <_ZSt3getILj1EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_ZNSt5tupleIJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f81d 	bl	80040fc <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1Ev>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f821 	bl	800411c <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80040da:	4603      	mov	r3, r0
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZSt3getILj1EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f822 	bl	8004136 <_ZSt12__get_helperILj1ESt14default_deleteIN8UserTask12UserTaskDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f822 	bl	800414e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEEC1Ev>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f82a 	bl	8004166 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EEC1Ev>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f82b 	bl	8004182 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERS3_>
 800412c:	4603      	mov	r3, r0
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZSt12__get_helperILj1ESt14default_deleteIN8UserTask12UserTaskDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f82a 	bl	8004198 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEE7_M_headERS4_>
 8004144:	4603      	mov	r3, r0
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEEC1Ev>:
      _Tuple_impl()
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f82a 	bl	80041b0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EEC1Ev>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EEC1Ev>:
      constexpr _Head_base()
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f810 	bl	80041c6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EE7_M_headERS4_>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZN8UserTaskD1Ev>:
class UserTask {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff feb3 	bl	8003f52 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <_Z41__static_initialization_and_destruction_0ii>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800420e:	4293      	cmp	r3, r2
 8004210:	d102      	bne.n	8004218 <_Z41__static_initialization_and_destruction_0ii+0x20>
UserTask usertask;
 8004212:	4809      	ldr	r0, [pc, #36]	@ (8004238 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004214:	f7ff fcc8 	bl	8003ba8 <_ZN8UserTaskC1Ev>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004224:	4293      	cmp	r3, r2
 8004226:	d102      	bne.n	800422e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800422a:	f7ff ffd7 	bl	80041dc <_ZN8UserTaskD1Ev>
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000042c 	.word	0x2000042c

0800423c <_GLOBAL__sub_I_usertask>:
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
 8004240:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004244:	2001      	movs	r0, #1
 8004246:	f7ff ffd7 	bl	80041f8 <_Z41__static_initialization_and_destruction_0ii>
 800424a:	bd80      	pop	{r7, pc}

0800424c <_GLOBAL__sub_D_usertask>:
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
 8004250:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004254:	2000      	movs	r0, #0
 8004256:	f7ff ffcf 	bl	80041f8 <_Z41__static_initialization_and_destruction_0ii>
 800425a:	bd80      	pop	{r7, pc}

0800425c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800425c:	480d      	ldr	r0, [pc, #52]	@ (8004294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800425e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004260:	f7ff fb2e 	bl	80038c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004264:	480c      	ldr	r0, [pc, #48]	@ (8004298 <LoopForever+0x6>)
  ldr r1, =_edata
 8004266:	490d      	ldr	r1, [pc, #52]	@ (800429c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <LoopForever+0xe>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800426c:	e002      	b.n	8004274 <LoopCopyDataInit>

0800426e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004272:	3304      	adds	r3, #4

08004274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004278:	d3f9      	bcc.n	800426e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800427c:	4c0a      	ldr	r4, [pc, #40]	@ (80042a8 <LoopForever+0x16>)
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004280:	e001      	b.n	8004286 <LoopFillZerobss>

08004282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004284:	3204      	adds	r2, #4

08004286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004288:	d3fb      	bcc.n	8004282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800428a:	f007 ff65 	bl	800c158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800428e:	f7fd fbcd 	bl	8001a2c <main>

08004292 <LoopForever>:

LoopForever:
    b LoopForever
 8004292:	e7fe      	b.n	8004292 <LoopForever>
  ldr   r0, =_estack
 8004294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800429c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80042a0:	0800c29c 	.word	0x0800c29c
  ldr r2, =_sbss
 80042a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80042a8:	20000584 	.word	0x20000584

080042ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC3_IRQHandler>

080042ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b8:	2003      	movs	r0, #3
 80042ba:	f002 fa21 	bl	8006700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042be:	2000      	movs	r0, #0
 80042c0:	f000 f80e 	bl	80042e0 <HAL_InitTick>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	71fb      	strb	r3, [r7, #7]
 80042ce:	e001      	b.n	80042d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042d0:	f7fe ff60 	bl	8003194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042d4:	79fb      	ldrb	r3, [r7, #7]

}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042ec:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <HAL_InitTick+0x68>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042f4:	4b15      	ldr	r3, [pc, #84]	@ (800434c <HAL_InitTick+0x6c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_InitTick+0x68>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004300:	fbb1 f3f3 	udiv	r3, r1, r3
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fa2c 	bl	8006766 <HAL_SYSTICK_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d809      	bhi.n	800432e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800431a:	2200      	movs	r2, #0
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	f002 f9f8 	bl	8006716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004326:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <HAL_InitTick+0x70>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e007      	b.n	800433e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	e004      	b.n	800433e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e001      	b.n	800433e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000014 	.word	0x20000014
 800434c:	20000008 	.word	0x20000008
 8004350:	20000010 	.word	0x20000010

08004354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <HAL_IncTick+0x1c>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_IncTick+0x20>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4413      	add	r3, r2
 8004362:	4a03      	ldr	r2, [pc, #12]	@ (8004370 <HAL_IncTick+0x1c>)
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	20000434 	.word	0x20000434
 8004374:	20000014 	.word	0x20000014

08004378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return uwTick;
 800437c:	4b03      	ldr	r3, [pc, #12]	@ (800438c <HAL_GetTick+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000434 	.word	0x20000434

08004390 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004466:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6093      	str	r3, [r2, #8]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800448a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448e:	d101      	bne.n	8004494 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80044b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044de:	d101      	bne.n	80044e4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800452a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <LL_ADC_IsEnabled+0x18>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <LL_ADC_IsEnabled+0x1a>
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d101      	bne.n	8004580 <LL_ADC_IsDisableOngoing+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_ADC_IsDisableOngoing+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800459e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d101      	bne.n	80045ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d101      	bne.n	80045f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1a9      	b.n	8004972 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fdd5 	bl	80031dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff18 	bl	800447a <LL_ADC_IsDeepPowerDownEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fefe 	bl	8004456 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ff33 	bl	80044ca <LL_ADC_IsInternalRegulatorEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff17 	bl	80044a2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004674:	4b9c      	ldr	r3, [pc, #624]	@ (80048e8 <HAL_ADC_Init+0x2e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	4a9c      	ldr	r2, [pc, #624]	@ (80048ec <HAL_ADC_Init+0x2e8>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004688:	e002      	b.n	8004690 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b01      	subs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f9      	bne.n	800468a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff15 	bl	80044ca <LL_ADC_IsInternalRegulatorEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	f043 0210 	orr.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff75 	bl	80045b6 <LL_ADC_REG_IsConversionOngoing>
 80046cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8142 	bne.w	8004960 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 813e 	bne.w	8004960 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80046ec:	f043 0202 	orr.w	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff22 	bl	8004542 <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d141      	bne.n	8004788 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470c:	d004      	beq.n	8004718 <HAL_ADC_Init+0x114>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a77      	ldr	r2, [pc, #476]	@ (80048f0 <HAL_ADC_Init+0x2ec>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10f      	bne.n	8004738 <HAL_ADC_Init+0x134>
 8004718:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800471c:	f7ff ff11 	bl	8004542 <LL_ADC_IsEnabled>
 8004720:	4604      	mov	r4, r0
 8004722:	4873      	ldr	r0, [pc, #460]	@ (80048f0 <HAL_ADC_Init+0x2ec>)
 8004724:	f7ff ff0d 	bl	8004542 <LL_ADC_IsEnabled>
 8004728:	4603      	mov	r3, r0
 800472a:	4323      	orrs	r3, r4
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e012      	b.n	800475e <HAL_ADC_Init+0x15a>
 8004738:	486e      	ldr	r0, [pc, #440]	@ (80048f4 <HAL_ADC_Init+0x2f0>)
 800473a:	f7ff ff02 	bl	8004542 <LL_ADC_IsEnabled>
 800473e:	4604      	mov	r4, r0
 8004740:	486d      	ldr	r0, [pc, #436]	@ (80048f8 <HAL_ADC_Init+0x2f4>)
 8004742:	f7ff fefe 	bl	8004542 <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	431c      	orrs	r4, r3
 800474a:	486c      	ldr	r0, [pc, #432]	@ (80048fc <HAL_ADC_Init+0x2f8>)
 800474c:	f7ff fef9 	bl	8004542 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	4323      	orrs	r3, r4
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476a:	d004      	beq.n	8004776 <HAL_ADC_Init+0x172>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a5f      	ldr	r2, [pc, #380]	@ (80048f0 <HAL_ADC_Init+0x2ec>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_Init+0x176>
 8004776:	4a62      	ldr	r2, [pc, #392]	@ (8004900 <HAL_ADC_Init+0x2fc>)
 8004778:	e000      	b.n	800477c <HAL_ADC_Init+0x178>
 800477a:	4a62      	ldr	r2, [pc, #392]	@ (8004904 <HAL_ADC_Init+0x300>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7ff fe04 	bl	8004390 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7f5b      	ldrb	r3, [r3, #29]
 800478c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004792:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004798:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800479e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d106      	bne.n	80047c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	045b      	lsls	r3, r3, #17
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	4b48      	ldr	r3, [pc, #288]	@ (8004908 <HAL_ADC_Init+0x304>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	430b      	orrs	r3, r1
 80047f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fee4 	bl	80045dc <LL_ADC_INJ_IsConversionOngoing>
 8004814:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d17f      	bne.n	800491c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d17c      	bne.n	800491c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004826:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800482e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800483e:	f023 0302 	bic.w	r3, r3, #2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	430b      	orrs	r3, r1
 800484a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004862:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800486c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6911      	ldr	r1, [r2, #16]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004882:	e013      	b.n	80048ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004892:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80048a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d12a      	bne.n	800490c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048d2:	4311      	orrs	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048d8:	430a      	orrs	r2, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	e019      	b.n	800491c <HAL_ADC_Init+0x318>
 80048e8:	20000008 	.word	0x20000008
 80048ec:	053e2d63 	.word	0x053e2d63
 80048f0:	50000100 	.word	0x50000100
 80048f4:	50000400 	.word	0x50000400
 80048f8:	50000500 	.word	0x50000500
 80048fc:	50000600 	.word	0x50000600
 8004900:	50000300 	.word	0x50000300
 8004904:	50000700 	.word	0x50000700
 8004908:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10c      	bne.n	800493e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f023 010f 	bic.w	r1, r3, #15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
 800493c:	e007      	b.n	800494e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 020f 	bic.w	r2, r2, #15
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800495e:	e007      	b.n	8004970 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004964:	f043 0210 	orr.w	r2, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004970:	7ffb      	ldrb	r3, [r7, #31]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	@ 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop

0800497c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800498c:	d004      	beq.n	8004998 <HAL_ADC_Start+0x1c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a67      	ldr	r2, [pc, #412]	@ (8004b30 <HAL_ADC_Start+0x1b4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d101      	bne.n	800499c <HAL_ADC_Start+0x20>
 8004998:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_ADC_Start+0x1b8>)
 800499a:	e000      	b.n	800499e <HAL_ADC_Start+0x22>
 800499c:	4b66      	ldr	r3, [pc, #408]	@ (8004b38 <HAL_ADC_Start+0x1bc>)
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd3d 	bl	800441e <LL_ADC_GetMultimode>
 80049a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe03 	bl	80045b6 <LL_ADC_REG_IsConversionOngoing>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 80b4 	bne.w	8004b20 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_Start+0x4a>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0af      	b.n	8004b26 <HAL_ADC_Start+0x1aa>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fb36 	bl	8005040 <ADC_Enable>
 80049d4:	4603      	mov	r3, r0
 80049d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 809b 	bne.w	8004b16 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004b30 <HAL_ADC_Start+0x1b4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_ADC_Start+0x96>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4e      	ldr	r2, [pc, #312]	@ (8004b3c <HAL_ADC_Start+0x1c0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d002      	beq.n	8004a0e <HAL_ADC_Start+0x92>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	e003      	b.n	8004a16 <HAL_ADC_Start+0x9a>
 8004a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8004b40 <HAL_ADC_Start+0x1c4>)
 8004a10:	e001      	b.n	8004a16 <HAL_ADC_Start+0x9a>
 8004a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d002      	beq.n	8004a24 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d106      	bne.n	8004a4c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a42:	f023 0206 	bic.w	r2, r3, #6
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a4a:	e002      	b.n	8004a52 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	221c      	movs	r2, #28
 8004a58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a32      	ldr	r2, [pc, #200]	@ (8004b30 <HAL_ADC_Start+0x1b4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_ADC_Start+0x104>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a32      	ldr	r2, [pc, #200]	@ (8004b3c <HAL_ADC_Start+0x1c0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d002      	beq.n	8004a7c <HAL_ADC_Start+0x100>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	e003      	b.n	8004a84 <HAL_ADC_Start+0x108>
 8004a7c:	4b30      	ldr	r3, [pc, #192]	@ (8004b40 <HAL_ADC_Start+0x1c4>)
 8004a7e:	e001      	b.n	8004a84 <HAL_ADC_Start+0x108>
 8004a80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d008      	beq.n	8004a9e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d002      	beq.n	8004a9e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	d114      	bne.n	8004ac8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ab4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fd64 	bl	800458e <LL_ADC_REG_StartConversion>
 8004ac6:	e02d      	b.n	8004b24 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_ADC_Start+0x1b4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_ADC_Start+0x176>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	@ (8004b3c <HAL_ADC_Start+0x1c0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d002      	beq.n	8004aee <HAL_ADC_Start+0x172>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	e003      	b.n	8004af6 <HAL_ADC_Start+0x17a>
 8004aee:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <HAL_ADC_Start+0x1c4>)
 8004af0:	e001      	b.n	8004af6 <HAL_ADC_Start+0x17a>
 8004af2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004af6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b14:	e006      	b.n	8004b24 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004b1e:	e001      	b.n	8004b24 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
 8004b22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	50000100 	.word	0x50000100
 8004b34:	50000300 	.word	0x50000300
 8004b38:	50000700 	.word	0x50000700
 8004b3c:	50000500 	.word	0x50000500
 8004b40:	50000400 	.word	0x50000400

08004b44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b68:	d004      	beq.n	8004b74 <HAL_ADC_IRQHandler+0x30>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a8e      	ldr	r2, [pc, #568]	@ (8004da8 <HAL_ADC_IRQHandler+0x264>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_IRQHandler+0x34>
 8004b74:	4b8d      	ldr	r3, [pc, #564]	@ (8004dac <HAL_ADC_IRQHandler+0x268>)
 8004b76:	e000      	b.n	8004b7a <HAL_ADC_IRQHandler+0x36>
 8004b78:	4b8d      	ldr	r3, [pc, #564]	@ (8004db0 <HAL_ADC_IRQHandler+0x26c>)
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fc4f 	bl	800441e <LL_ADC_GetMultimode>
 8004b80:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d017      	beq.n	8004bbc <HAL_ADC_IRQHandler+0x78>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d012      	beq.n	8004bbc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fe66 	bl	8005880 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x8c>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8094 	beq.w	8004d04 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 808e 	beq.w	8004d04 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fbe4 	bl	80043d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d072      	beq.n	8004cf6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <HAL_ADC_IRQHandler+0x264>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_ADC_IRQHandler+0xea>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a65      	ldr	r2, [pc, #404]	@ (8004db4 <HAL_ADC_IRQHandler+0x270>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d002      	beq.n	8004c2a <HAL_ADC_IRQHandler+0xe6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	e003      	b.n	8004c32 <HAL_ADC_IRQHandler+0xee>
 8004c2a:	4b63      	ldr	r3, [pc, #396]	@ (8004db8 <HAL_ADC_IRQHandler+0x274>)
 8004c2c:	e001      	b.n	8004c32 <HAL_ADC_IRQHandler+0xee>
 8004c2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d008      	beq.n	8004c4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d002      	beq.n	8004c4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d104      	bne.n	8004c56 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	e014      	b.n	8004c80 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a53      	ldr	r2, [pc, #332]	@ (8004da8 <HAL_ADC_IRQHandler+0x264>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_ADC_IRQHandler+0x130>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a53      	ldr	r2, [pc, #332]	@ (8004db4 <HAL_ADC_IRQHandler+0x270>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d002      	beq.n	8004c70 <HAL_ADC_IRQHandler+0x12c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_IRQHandler+0x134>
 8004c70:	4b51      	ldr	r3, [pc, #324]	@ (8004db8 <HAL_ADC_IRQHandler+0x274>)
 8004c72:	e001      	b.n	8004c78 <HAL_ADC_IRQHandler+0x134>
 8004c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d135      	bne.n	8004cf6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d12e      	bne.n	8004cf6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fc8a 	bl	80045b6 <LL_ADC_REG_IsConversionOngoing>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11a      	bne.n	8004cde <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 020c 	bic.w	r2, r2, #12
 8004cb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d112      	bne.n	8004cf6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cdc:	e00b      	b.n	8004cf6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f984 	bl	8005004 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	220c      	movs	r2, #12
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_ADC_IRQHandler+0x1d4>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80b3 	beq.w	8004e8a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80ad 	beq.w	8004e8a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fb53 	bl	80043f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fb3a 	bl	80043d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a10      	ldr	r2, [pc, #64]	@ (8004da8 <HAL_ADC_IRQHandler+0x264>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_ADC_IRQHandler+0x23a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <HAL_ADC_IRQHandler+0x270>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d002      	beq.n	8004d7a <HAL_ADC_IRQHandler+0x236>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	e003      	b.n	8004d82 <HAL_ADC_IRQHandler+0x23e>
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <HAL_ADC_IRQHandler+0x274>)
 8004d7c:	e001      	b.n	8004d82 <HAL_ADC_IRQHandler+0x23e>
 8004d7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d008      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d002      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b07      	cmp	r3, #7
 8004d9a:	d10f      	bne.n	8004dbc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	e01f      	b.n	8004de6 <HAL_ADC_IRQHandler+0x2a2>
 8004da6:	bf00      	nop
 8004da8:	50000100 	.word	0x50000100
 8004dac:	50000300 	.word	0x50000300
 8004db0:	50000700 	.word	0x50000700
 8004db4:	50000500 	.word	0x50000500
 8004db8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a8b      	ldr	r2, [pc, #556]	@ (8004ff0 <HAL_ADC_IRQHandler+0x4ac>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_ADC_IRQHandler+0x296>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a8a      	ldr	r2, [pc, #552]	@ (8004ff4 <HAL_ADC_IRQHandler+0x4b0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d002      	beq.n	8004dd6 <HAL_ADC_IRQHandler+0x292>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	e003      	b.n	8004dde <HAL_ADC_IRQHandler+0x29a>
 8004dd6:	4b88      	ldr	r3, [pc, #544]	@ (8004ff8 <HAL_ADC_IRQHandler+0x4b4>)
 8004dd8:	e001      	b.n	8004dde <HAL_ADC_IRQHandler+0x29a>
 8004dda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004dde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d047      	beq.n	8004e7c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_ADC_IRQHandler+0x2c2>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03f      	beq.n	8004e7c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d13a      	bne.n	8004e7c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b40      	cmp	r3, #64	@ 0x40
 8004e12:	d133      	bne.n	8004e7c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d12e      	bne.n	8004e7c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fbda 	bl	80045dc <LL_ADC_INJ_IsConversionOngoing>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11a      	bne.n	8004e64 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d112      	bne.n	8004e7c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e62:	e00b      	b.n	8004e7c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e68:	f043 0210 	orr.w	r2, r3, #16
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f043 0201 	orr.w	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f823 	bl	8003ec8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2260      	movs	r2, #96	@ 0x60
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d011      	beq.n	8004eb8 <HAL_ADC_IRQHandler+0x374>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8b4 	bl	8005018 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2280      	movs	r2, #128	@ 0x80
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <HAL_ADC_IRQHandler+0x3a4>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fcbd 	bl	8005858 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ee6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d012      	beq.n	8004f18 <HAL_ADC_IRQHandler+0x3d4>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fcaf 	bl	800586c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d043      	beq.n	8004faa <HAL_ADC_IRQHandler+0x466>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d03e      	beq.n	8004faa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004f34:	2301      	movs	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f38:	e021      	b.n	8004f7e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f48:	d004      	beq.n	8004f54 <HAL_ADC_IRQHandler+0x410>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a28      	ldr	r2, [pc, #160]	@ (8004ff0 <HAL_ADC_IRQHandler+0x4ac>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_IRQHandler+0x414>
 8004f54:	4b29      	ldr	r3, [pc, #164]	@ (8004ffc <HAL_ADC_IRQHandler+0x4b8>)
 8004f56:	e000      	b.n	8004f5a <HAL_ADC_IRQHandler+0x416>
 8004f58:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <HAL_ADC_IRQHandler+0x4bc>)
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fa6d 	bl	800443a <LL_ADC_GetMultiDMATransfer>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004f66:	2301      	movs	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6a:	e008      	b.n	8004f7e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10e      	bne.n	8004fa2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f88:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f94:	f043 0202 	orr.w	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f845 	bl	800502c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d018      	beq.n	8004fe6 <HAL_ADC_IRQHandler+0x4a2>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d013      	beq.n	8004fe6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fde:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fc2f 	bl	8005844 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004fe6:	bf00      	nop
 8004fe8:	3728      	adds	r7, #40	@ 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	50000100 	.word	0x50000100
 8004ff4:	50000500 	.word	0x50000500
 8004ff8:	50000400 	.word	0x50000400
 8004ffc:	50000300 	.word	0x50000300
 8005000:	50000700 	.word	0x50000700

08005004 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fa76 	bl	8004542 <LL_ADC_IsEnabled>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d176      	bne.n	800514a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	4b3c      	ldr	r3, [pc, #240]	@ (8005154 <ADC_Enable+0x114>)
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	f043 0210 	orr.w	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507a:	f043 0201 	orr.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e062      	b.n	800514c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fa31 	bl	80044f2 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005098:	d004      	beq.n	80050a4 <ADC_Enable+0x64>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <ADC_Enable+0x118>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <ADC_Enable+0x68>
 80050a4:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <ADC_Enable+0x11c>)
 80050a6:	e000      	b.n	80050aa <ADC_Enable+0x6a>
 80050a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <ADC_Enable+0x120>)
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f983 	bl	80043b6 <LL_ADC_GetCommonPathInternalCh>
 80050b0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80050b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <ADC_Enable+0x124>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	4a29      	ldr	r2, [pc, #164]	@ (8005168 <ADC_Enable+0x128>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050d4:	e002      	b.n	80050dc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f9      	bne.n	80050d6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050e2:	f7ff f949 	bl	8004378 <HAL_GetTick>
 80050e6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050e8:	e028      	b.n	800513c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fa27 	bl	8004542 <LL_ADC_IsEnabled>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f9f7 	bl	80044f2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005104:	f7ff f938 	bl	8004378 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d914      	bls.n	800513c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d00d      	beq.n	800513c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005124:	f043 0210 	orr.w	r2, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005130:	f043 0201 	orr.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e007      	b.n	800514c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d1cf      	bne.n	80050ea <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	8000003f 	.word	0x8000003f
 8005158:	50000100 	.word	0x50000100
 800515c:	50000300 	.word	0x50000300
 8005160:	50000700 	.word	0x50000700
 8005164:	20000008 	.word	0x20000008
 8005168:	053e2d63 	.word	0x053e2d63

0800516c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f9f5 	bl	8004568 <LL_ADC_IsDisableOngoing>
 800517e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff f9dc 	bl	8004542 <LL_ADC_IsEnabled>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d047      	beq.n	8005220 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d144      	bne.n	8005220 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030d 	and.w	r3, r3, #13
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10c      	bne.n	80051be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f9b6 	bl	800451a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2203      	movs	r2, #3
 80051b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051b6:	f7ff f8df 	bl	8004378 <HAL_GetTick>
 80051ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051bc:	e029      	b.n	8005212 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c2:	f043 0210 	orr.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e023      	b.n	8005222 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051da:	f7ff f8cd 	bl	8004378 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d914      	bls.n	8005212 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	f043 0210 	orr.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005206:	f043 0201 	orr.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e007      	b.n	8005222 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1dc      	bne.n	80051da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <LL_ADC_SetCommonPathInternalCh>:
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_ADC_GetCommonPathInternalCh>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_ADC_SetOffset>:
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3360      	adds	r3, #96	@ 0x60
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <LL_ADC_SetOffset+0x44>)
 800528e:	4013      	ands	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	4313      	orrs	r3, r2
 800529c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	03fff000 	.word	0x03fff000

080052b4 <LL_ADC_GetOffsetChannel>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3360      	adds	r3, #96	@ 0x60
 80052c2:	461a      	mov	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <LL_ADC_SetOffsetState>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3360      	adds	r3, #96	@ 0x60
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_ADC_SetOffsetSign>:
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3360      	adds	r3, #96	@ 0x60
 8005326:	461a      	mov	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	431a      	orrs	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_ADC_SetOffsetSaturation>:
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3360      	adds	r3, #96	@ 0x60
 800535c:	461a      	mov	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	431a      	orrs	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	615a      	str	r2, [r3, #20]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_ADC_INJ_GetTrigAuto>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_ADC_SetChannelSamplingTime>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3314      	adds	r3, #20
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	0e5b      	lsrs	r3, r3, #25
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	0d1b      	lsrs	r3, r3, #20
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2107      	movs	r1, #7
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	401a      	ands	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0d1b      	lsrs	r3, r3, #20
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	431a      	orrs	r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <LL_ADC_SetChannelSingleDiff>:
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0318 	and.w	r3, r3, #24
 800543e:	4908      	ldr	r1, [pc, #32]	@ (8005460 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005440:	40d9      	lsrs	r1, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	400b      	ands	r3, r1
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	431a      	orrs	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	0007ffff 	.word	0x0007ffff

08005464 <LL_ADC_GetMultimode>:
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 031f 	and.w	r3, r3, #31
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LL_ADC_IsEnabled>:
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <LL_ADC_IsEnabled+0x18>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <LL_ADC_IsEnabled+0x1a>
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_ADC_StartCalibration>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80054b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ec:	d101      	bne.n	80054f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_ADC_REG_IsConversionOngoing>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d101      	bne.n	8005518 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <LL_ADC_INJ_StartConversion>:
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005536:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <LL_ADC_INJ_IsConversionOngoing>:
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b08      	cmp	r3, #8
 8005560:	d101      	bne.n	8005566 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_ADCEx_Calibration_Start+0x1c>
 800558c:	2302      	movs	r3, #2
 800558e:	e04d      	b.n	800562c <HAL_ADCEx_Calibration_Start+0xb8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fde7 	bl	800516c <ADC_Disable>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d136      	bne.n	8005616 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055b0:	f023 0302 	bic.w	r3, r3, #2
 80055b4:	f043 0202 	orr.w	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff6f 	bl	80054a6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055c8:	e014      	b.n	80055f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a18      	ldr	r2, [pc, #96]	@ (8005634 <HAL_ADCEx_Calibration_Start+0xc0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d90d      	bls.n	80055f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055dc:	f023 0312 	bic.w	r3, r3, #18
 80055e0:	f043 0210 	orr.w	r2, r3, #16
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e01b      	b.n	800562c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff6d 	bl	80054d8 <LL_ADC_IsCalibrationOnGoing>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e2      	bne.n	80055ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005608:	f023 0303 	bic.w	r3, r3, #3
 800560c:	f043 0201 	orr.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005614:	e005      	b.n	8005622 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561a:	f043 0210 	orr.w	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	0004de01 	.word	0x0004de01

08005638 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005648:	d004      	beq.n	8005654 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a78      	ldr	r2, [pc, #480]	@ (8005830 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_ADCEx_InjectedStart_IT+0x20>
 8005654:	4b77      	ldr	r3, [pc, #476]	@ (8005834 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8005656:	e000      	b.n	800565a <HAL_ADCEx_InjectedStart_IT+0x22>
 8005658:	4b77      	ldr	r3, [pc, #476]	@ (8005838 <HAL_ADCEx_InjectedStart_IT+0x200>)
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff02 	bl	8005464 <LL_ADC_GetMultimode>
 8005660:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ff71 	bl	800554e <LL_ADC_INJ_IsConversionOngoing>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	e0d8      	b.n	8005828 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005680:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005688:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0c0      	b.n	8005828 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e0b9      	b.n	8005828 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fcbf 	bl	8005040 <ADC_Enable>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 80a8 	bne.w	800581e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d006      	beq.n	80056e8 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056de:	f023 0208 	bic.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80056e6:	e002      	b.n	80056ee <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_ADCEx_InjectedStart_IT+0xe8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a4a      	ldr	r2, [pc, #296]	@ (800583c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d002      	beq.n	800571c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	e003      	b.n	8005724 <HAL_ADCEx_InjectedStart_IT+0xec>
 800571c:	4b48      	ldr	r3, [pc, #288]	@ (8005840 <HAL_ADCEx_InjectedStart_IT+0x208>)
 800571e:	e001      	b.n	8005724 <HAL_ADCEx_InjectedStart_IT+0xec>
 8005720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	4293      	cmp	r3, r2
 800572a:	d002      	beq.n	8005732 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005736:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2260      	movs	r2, #96	@ 0x60
 8005744:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800576a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d110      	bne.n	8005796 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0220 	bic.w	r2, r2, #32
 8005782:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005792:	605a      	str	r2, [r3, #4]
          break;
 8005794:	e010      	b.n	80057b8 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0220 	orr.w	r2, r2, #32
 80057b4:	605a      	str	r2, [r3, #4]
          break;
 80057b6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005830 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_ADCEx_InjectedStart_IT+0x19e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1d      	ldr	r2, [pc, #116]	@ (800583c <HAL_ADCEx_InjectedStart_IT+0x204>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d002      	beq.n	80057d2 <HAL_ADCEx_InjectedStart_IT+0x19a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	e003      	b.n	80057da <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80057d4:	e001      	b.n	80057da <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80057d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	4293      	cmp	r3, r2
 80057e0:	d008      	beq.n	80057f4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d002      	beq.n	80057f4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b07      	cmp	r3, #7
 80057f2:	d10d      	bne.n	8005810 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fdd5 	bl	80053a8 <LL_ADC_INJ_GetTrigAuto>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d110      	bne.n	8005826 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe8c 	bl	8005526 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800580e:	e00a      	b.n	8005826 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800581c:	e003      	b.n	8005826 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	50000100 	.word	0x50000100
 8005834:	50000300 	.word	0x50000300
 8005838:	50000700 	.word	0x50000700
 800583c:	50000500 	.word	0x50000500
 8005840:	50000400 	.word	0x50000400

08005844 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b0b6      	sub	sp, #216	@ 0xd8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f000 bcfd 	b.w	80062b8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d130      	bne.n	8005938 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d179      	bne.n	80059d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d010      	beq.n	8005908 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	0e9b      	lsrs	r3, r3, #26
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80058fa:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005906:	e007      	b.n	8005918 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0e9b      	lsrs	r3, r3, #26
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800591e:	4b84      	ldr	r3, [pc, #528]	@ (8005b30 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800592a:	430b      	orrs	r3, r1
 800592c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005934:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005936:	e04c      	b.n	80059d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11d      	bne.n	800597c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005964:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005970:	e004      	b.n	800597c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	3b01      	subs	r3, #1
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	0e9b      	lsrs	r3, r3, #26
 8005982:	f003 021f 	and.w	r2, r3, #31
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80059aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b30 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	430b      	orrs	r3, r1
 80059d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fdb9 	bl	800554e <LL_ADC_INJ_IsConversionOngoing>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d124      	bne.n	8005a2c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d112      	bne.n	8005a12 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80059fc:	055a      	lsls	r2, r3, #21
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a04:	051b      	lsls	r3, r3, #20
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	e00c      	b.n	8005a2c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005a22:	055a      	lsls	r2, r3, #21
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fd65 	bl	8005500 <LL_ADC_REG_IsConversionOngoing>
 8005a36:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fd85 	bl	800554e <LL_ADC_INJ_IsConversionOngoing>
 8005a44:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 822e 	bne.w	8005eae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8229 	bne.w	8005eae <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d116      	bne.n	8005a9a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d108      	bne.n	8005a88 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005a84:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005a86:	e01f      	b.n	8005ac8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005a96:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005a98:	e016      	b.n	8005ac8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d109      	bne.n	8005ab8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005ab6:	e007      	b.n	8005ac8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005ac6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d110      	bne.n	8005af4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0202 	orr.w	r2, r2, #2
 8005af0:	611a      	str	r2, [r3, #16]
 8005af2:	e007      	b.n	8005b04 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0202 	bic.w	r2, r2, #2
 8005b02:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b0c:	d112      	bne.n	8005b34 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f7ff fc53 	bl	80053c4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fc2b 	bl	8005382 <LL_ADC_SetSamplingTimeCommonConfig>
 8005b2c:	e011      	b.n	8005b52 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005b2e:	bf00      	nop
 8005b30:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8005b40:	461a      	mov	r2, r3
 8005b42:	f7ff fc3f 	bl	80053c4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fc18 	bl	8005382 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d022      	beq.n	8005bba <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6919      	ldr	r1, [r3, #16]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b84:	f7ff fb72 	bl	800526c <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6919      	ldr	r1, [r3, #16]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	461a      	mov	r2, r3
 8005b96:	f7ff fbbe 	bl	8005316 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bae:	e000      	b.n	8005bb2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7ff fbca 	bl	800534c <LL_ADC_SetOffsetSaturation>
 8005bb8:	e179      	b.n	8005eae <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fb77 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fb6c 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	0e9b      	lsrs	r3, r3, #26
 8005be0:	f003 021f 	and.w	r2, r3, #31
 8005be4:	e01e      	b.n	8005c24 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fb61 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8005c14:	2320      	movs	r3, #32
 8005c16:	e004      	b.n	8005c22 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8005c18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c1c:	fab3 f383 	clz	r3, r3
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	0e9b      	lsrs	r3, r3, #26
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	e018      	b.n	8005c6e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c48:	fa93 f3a3 	rbit	r3, r3
 8005c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005c60:	2320      	movs	r3, #32
 8005c62:	e004      	b.n	8005c6e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c68:	fab3 f383 	clz	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d106      	bne.n	8005c80 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fb30 	bl	80052e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2101      	movs	r1, #1
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff fb14 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fb09 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	0e9b      	lsrs	r3, r3, #26
 8005ca6:	f003 021f 	and.w	r2, r3, #31
 8005caa:	e01e      	b.n	8005cea <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fafe 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8005cda:	2320      	movs	r3, #32
 8005cdc:	e004      	b.n	8005ce8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8005cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d105      	bne.n	8005d02 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	0e9b      	lsrs	r3, r3, #26
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	e018      	b.n	8005d34 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d0e:	fa93 f3a3 	rbit	r3, r3
 8005d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8005d26:	2320      	movs	r3, #32
 8005d28:	e004      	b.n	8005d34 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d2e:	fab3 f383 	clz	r3, r3
 8005d32:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d106      	bne.n	8005d46 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2101      	movs	r1, #1
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff facd 	bl	80052e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fab1 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2102      	movs	r1, #2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff faa6 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	0e9b      	lsrs	r3, r3, #26
 8005d6c:	f003 021f 	and.w	r2, r3, #31
 8005d70:	e01e      	b.n	8005db0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2102      	movs	r1, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fa9b 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d88:	fa93 f3a3 	rbit	r3, r3
 8005d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8005da0:	2320      	movs	r3, #32
 8005da2:	e004      	b.n	8005dae <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8005da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	0e9b      	lsrs	r3, r3, #26
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	e014      	b.n	8005df2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005de4:	2320      	movs	r3, #32
 8005de6:	e004      	b.n	8005df2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dec:	fab3 f383 	clz	r3, r3
 8005df0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d106      	bne.n	8005e04 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fa6e 	bl	80052e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2103      	movs	r1, #3
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fa52 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2103      	movs	r1, #3
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fa47 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005e26:	4603      	mov	r3, r0
 8005e28:	0e9b      	lsrs	r3, r3, #26
 8005e2a:	f003 021f 	and.w	r2, r3, #31
 8005e2e:	e017      	b.n	8005e60 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2103      	movs	r1, #3
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fa3c 	bl	80052b4 <LL_ADC_GetOffsetChannel>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e42:	fa93 f3a3 	rbit	r3, r3
 8005e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8005e52:	2320      	movs	r3, #32
 8005e54:	e003      	b.n	8005e5e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8005e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e58:	fab3 f383 	clz	r3, r3
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d105      	bne.n	8005e78 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	0e9b      	lsrs	r3, r3, #26
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	e011      	b.n	8005e9c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e80:	fa93 f3a3 	rbit	r3, r3
 8005e84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005e8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8005e90:	2320      	movs	r3, #32
 8005e92:	e003      	b.n	8005e9c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d106      	bne.n	8005eae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2103      	movs	r1, #3
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fa19 	bl	80052e0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fae4 	bl	8005480 <LL_ADC_IsEnabled>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 813d 	bne.w	800613a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f7ff faa5 	bl	800541c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4aa2      	ldr	r2, [pc, #648]	@ (8006160 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	f040 812e 	bne.w	800613a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	0e9b      	lsrs	r3, r3, #26
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	bf94      	ite	ls
 8005efe:	2301      	movls	r3, #1
 8005f00:	2300      	movhi	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e019      	b.n	8005f3a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e003      	b.n	8005f2a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f24:	fab3 f383 	clz	r3, r3
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	bf94      	ite	ls
 8005f34:	2301      	movls	r3, #1
 8005f36:	2300      	movhi	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d079      	beq.n	8006032 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d107      	bne.n	8005f5a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0e9b      	lsrs	r3, r3, #26
 8005f50:	3301      	adds	r3, #1
 8005f52:	069b      	lsls	r3, r3, #26
 8005f54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f58:	e015      	b.n	8005f86 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f6a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005f72:	2320      	movs	r3, #32
 8005f74:	e003      	b.n	8005f7e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8005f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f78:	fab3 f383 	clz	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	069b      	lsls	r3, r3, #26
 8005f82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	0e9b      	lsrs	r3, r3, #26
 8005f98:	3301      	adds	r3, #1
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	e017      	b.n	8005fd6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005fbe:	2320      	movs	r3, #32
 8005fc0:	e003      	b.n	8005fca <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc4:	fab3 f383 	clz	r3, r3
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	ea42 0103 	orr.w	r1, r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	0e9b      	lsrs	r3, r3, #26
 8005fec:	3301      	adds	r3, #1
 8005fee:	f003 021f 	and.w	r2, r3, #31
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	051b      	lsls	r3, r3, #20
 8005ffa:	e018      	b.n	800602e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	fa93 f3a3 	rbit	r3, r3
 8006008:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8006014:	2320      	movs	r3, #32
 8006016:	e003      	b.n	8006020 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	fab3 f383 	clz	r3, r3
 800601e:	b2db      	uxtb	r3, r3
 8006020:	3301      	adds	r3, #1
 8006022:	f003 021f 	and.w	r2, r3, #31
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800602e:	430b      	orrs	r3, r1
 8006030:	e07e      	b.n	8006130 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	0e9b      	lsrs	r3, r3, #26
 8006044:	3301      	adds	r3, #1
 8006046:	069b      	lsls	r3, r3, #26
 8006048:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800604c:	e015      	b.n	800607a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	fa93 f3a3 	rbit	r3, r3
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8006066:	2320      	movs	r3, #32
 8006068:	e003      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	3301      	adds	r3, #1
 8006074:	069b      	lsls	r3, r3, #26
 8006076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	0e9b      	lsrs	r3, r3, #26
 800608c:	3301      	adds	r3, #1
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2101      	movs	r1, #1
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	e017      	b.n	80060ca <HAL_ADCEx_InjectedConfigChannel+0x836>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	fa93 f3a3 	rbit	r3, r3
 80060a6:	61bb      	str	r3, [r7, #24]
  return result;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80060b2:	2320      	movs	r3, #32
 80060b4:	e003      	b.n	80060be <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	fab3 f383 	clz	r3, r3
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	ea42 0103 	orr.w	r1, r2, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	0e9b      	lsrs	r3, r3, #26
 80060e0:	3301      	adds	r3, #1
 80060e2:	f003 021f 	and.w	r2, r3, #31
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	3b1e      	subs	r3, #30
 80060ee:	051b      	lsls	r3, r3, #20
 80060f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060f4:	e01b      	b.n	800612e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	60fb      	str	r3, [r7, #12]
  return result;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800610e:	2320      	movs	r3, #32
 8006110:	e003      	b.n	800611a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	3301      	adds	r3, #1
 800611c:	f003 021f 	and.w	r2, r3, #31
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	3b1e      	subs	r3, #30
 8006128:	051b      	lsls	r3, r3, #20
 800612a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800612e:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006134:	4619      	mov	r1, r3
 8006136:	f7ff f945 	bl	80053c4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80b2 	beq.w	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006150:	d004      	beq.n	800615c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a04      	ldr	r2, [pc, #16]	@ (8006168 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 800615c:	4b03      	ldr	r3, [pc, #12]	@ (800616c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 800615e:	e008      	b.n	8006172 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8006160:	407f0000 	.word	0x407f0000
 8006164:	80080000 	.word	0x80080000
 8006168:	50000100 	.word	0x50000100
 800616c:	50000300 	.word	0x50000300
 8006170:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff f86c 	bl	8005250 <LL_ADC_GetCommonPathInternalCh>
 8006178:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a50      	ldr	r2, [pc, #320]	@ (80062c4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4f      	ldr	r2, [pc, #316]	@ (80062c8 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d139      	bne.n	8006204 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d133      	bne.n	8006204 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061a4:	d004      	beq.n	80061b0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a48      	ldr	r2, [pc, #288]	@ (80062cc <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d17a      	bne.n	80062a6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061b8:	d004      	beq.n	80061c4 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a44      	ldr	r2, [pc, #272]	@ (80062d0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80061c4:	4a43      	ldr	r2, [pc, #268]	@ (80062d4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80061c6:	e000      	b.n	80061ca <HAL_ADCEx_InjectedConfigChannel+0x936>
 80061c8:	4a3d      	ldr	r2, [pc, #244]	@ (80062c0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80061ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7ff f828 	bl	800522a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80061da:	4b3f      	ldr	r3, [pc, #252]	@ (80062d8 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	4a3e      	ldr	r2, [pc, #248]	@ (80062dc <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	099a      	lsrs	r2, r3, #6
 80061e8:	4613      	mov	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80061f2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80061f4:	e002      	b.n	80061fc <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f9      	bne.n	80061f6 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006202:	e050      	b.n	80062a6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a35      	ldr	r2, [pc, #212]	@ (80062e0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800620e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006212:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11f      	bne.n	800625a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d104      	bne.n	800622e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2e      	ldr	r2, [pc, #184]	@ (80062e4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d03d      	beq.n	80062aa <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006236:	d004      	beq.n	8006242 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a24      	ldr	r2, [pc, #144]	@ (80062d0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d101      	bne.n	8006246 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8006242:	4a24      	ldr	r2, [pc, #144]	@ (80062d4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006244:	e000      	b.n	8006248 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8006246:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800624c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f7fe ffe9 	bl	800522a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006258:	e027      	b.n	80062aa <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a22      	ldr	r2, [pc, #136]	@ (80062e8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d123      	bne.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11d      	bne.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006282:	d004      	beq.n	800628e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a11      	ldr	r2, [pc, #68]	@ (80062d0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d101      	bne.n	8006292 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800628e:	4a11      	ldr	r2, [pc, #68]	@ (80062d4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006290:	e000      	b.n	8006294 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8006292:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe ffc3 	bl	800522a <LL_ADC_SetCommonPathInternalCh>
 80062a4:	e002      	b.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062aa:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80062b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	37d8      	adds	r7, #216	@ 0xd8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	50000700 	.word	0x50000700
 80062c4:	c3210000 	.word	0xc3210000
 80062c8:	90c00010 	.word	0x90c00010
 80062cc:	50000600 	.word	0x50000600
 80062d0:	50000100 	.word	0x50000100
 80062d4:	50000300 	.word	0x50000300
 80062d8:	20000008 	.word	0x20000008
 80062dc:	053e2d63 	.word	0x053e2d63
 80062e0:	c7520000 	.word	0xc7520000
 80062e4:	50000500 	.word	0x50000500
 80062e8:	cb840000 	.word	0xcb840000

080062ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b0a1      	sub	sp, #132	@ 0x84
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006306:	2302      	movs	r3, #2
 8006308:	e0e7      	b.n	80064da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006312:	2300      	movs	r3, #0
 8006314:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006316:	2300      	movs	r3, #0
 8006318:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006322:	d102      	bne.n	800632a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006324:	4b6f      	ldr	r3, [pc, #444]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	e009      	b.n	800633e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a6e      	ldr	r2, [pc, #440]	@ (80064e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d102      	bne.n	800633a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006334:	4b6d      	ldr	r3, [pc, #436]	@ (80064ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	e001      	b.n	800633e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800633a:	2300      	movs	r3, #0
 800633c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0be      	b.n	80064da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff f8ce 	bl	8005500 <LL_ADC_REG_IsConversionOngoing>
 8006364:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff f8c8 	bl	8005500 <LL_ADC_REG_IsConversionOngoing>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 80a0 	bne.w	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 809c 	bne.w	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006388:	d004      	beq.n	8006394 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a55      	ldr	r2, [pc, #340]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006394:	4b56      	ldr	r3, [pc, #344]	@ (80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006396:	e000      	b.n	800639a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006398:	4b56      	ldr	r3, [pc, #344]	@ (80064f4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800639a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d04b      	beq.n	800643c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80063a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063b6:	035b      	lsls	r3, r3, #13
 80063b8:	430b      	orrs	r3, r1
 80063ba:	431a      	orrs	r2, r3
 80063bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063c8:	d004      	beq.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a45      	ldr	r2, [pc, #276]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10f      	bne.n	80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80063d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80063d8:	f7ff f852 	bl	8005480 <LL_ADC_IsEnabled>
 80063dc:	4604      	mov	r4, r0
 80063de:	4841      	ldr	r0, [pc, #260]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063e0:	f7ff f84e 	bl	8005480 <LL_ADC_IsEnabled>
 80063e4:	4603      	mov	r3, r0
 80063e6:	4323      	orrs	r3, r4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e012      	b.n	800641a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80063f4:	483c      	ldr	r0, [pc, #240]	@ (80064e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80063f6:	f7ff f843 	bl	8005480 <LL_ADC_IsEnabled>
 80063fa:	4604      	mov	r4, r0
 80063fc:	483b      	ldr	r0, [pc, #236]	@ (80064ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80063fe:	f7ff f83f 	bl	8005480 <LL_ADC_IsEnabled>
 8006402:	4603      	mov	r3, r0
 8006404:	431c      	orrs	r4, r3
 8006406:	483c      	ldr	r0, [pc, #240]	@ (80064f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006408:	f7ff f83a 	bl	8005480 <LL_ADC_IsEnabled>
 800640c:	4603      	mov	r3, r0
 800640e:	4323      	orrs	r3, r4
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d056      	beq.n	80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800641e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006426:	f023 030f 	bic.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	6892      	ldr	r2, [r2, #8]
 8006432:	430a      	orrs	r2, r1
 8006434:	431a      	orrs	r2, r3
 8006436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006438:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800643a:	e047      	b.n	80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800643c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006446:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006450:	d004      	beq.n	800645c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a23      	ldr	r2, [pc, #140]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d10f      	bne.n	800647c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800645c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006460:	f7ff f80e 	bl	8005480 <LL_ADC_IsEnabled>
 8006464:	4604      	mov	r4, r0
 8006466:	481f      	ldr	r0, [pc, #124]	@ (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006468:	f7ff f80a 	bl	8005480 <LL_ADC_IsEnabled>
 800646c:	4603      	mov	r3, r0
 800646e:	4323      	orrs	r3, r4
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e012      	b.n	80064a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800647c:	481a      	ldr	r0, [pc, #104]	@ (80064e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800647e:	f7fe ffff 	bl	8005480 <LL_ADC_IsEnabled>
 8006482:	4604      	mov	r4, r0
 8006484:	4819      	ldr	r0, [pc, #100]	@ (80064ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006486:	f7fe fffb 	bl	8005480 <LL_ADC_IsEnabled>
 800648a:	4603      	mov	r3, r0
 800648c:	431c      	orrs	r4, r3
 800648e:	481a      	ldr	r0, [pc, #104]	@ (80064f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006490:	f7fe fff6 	bl	8005480 <LL_ADC_IsEnabled>
 8006494:	4603      	mov	r3, r0
 8006496:	4323      	orrs	r3, r4
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d012      	beq.n	80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80064a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80064ae:	f023 030f 	bic.w	r3, r3, #15
 80064b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80064b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80064b6:	e009      	b.n	80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80064ca:	e000      	b.n	80064ce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80064cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80064d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3784      	adds	r7, #132	@ 0x84
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd90      	pop	{r4, r7, pc}
 80064e2:	bf00      	nop
 80064e4:	50000100 	.word	0x50000100
 80064e8:	50000400 	.word	0x50000400
 80064ec:	50000500 	.word	0x50000500
 80064f0:	50000300 	.word	0x50000300
 80064f4:	50000700 	.word	0x50000700
 80064f8:	50000600 	.word	0x50000600

080064fc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e023      	b.n	8006556 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fc ff0e 	bl	8003344 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006570:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800657c:	4013      	ands	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800658c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006592:	4a04      	ldr	r2, [pc, #16]	@ (80065a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	60d3      	str	r3, [r2, #12]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065ac:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <__NVIC_GetPriorityGrouping+0x18>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	0a1b      	lsrs	r3, r3, #8
 80065b2:	f003 0307 	and.w	r3, r3, #7
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db0b      	blt.n	80065ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	4907      	ldr	r1, [pc, #28]	@ (80065fc <__NVIC_EnableIRQ+0x38>)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	2001      	movs	r0, #1
 80065e6:	fa00 f202 	lsl.w	r2, r0, r2
 80065ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	e000e100 	.word	0xe000e100

08006600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800660c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006610:	2b00      	cmp	r3, #0
 8006612:	db0a      	blt.n	800662a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	490c      	ldr	r1, [pc, #48]	@ (800664c <__NVIC_SetPriority+0x4c>)
 800661a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661e:	0112      	lsls	r2, r2, #4
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	440b      	add	r3, r1
 8006624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006628:	e00a      	b.n	8006640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4908      	ldr	r1, [pc, #32]	@ (8006650 <__NVIC_SetPriority+0x50>)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	3b04      	subs	r3, #4
 8006638:	0112      	lsls	r2, r2, #4
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	440b      	add	r3, r1
 800663e:	761a      	strb	r2, [r3, #24]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	e000e100 	.word	0xe000e100
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	@ 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f1c3 0307 	rsb	r3, r3, #7
 800666e:	2b04      	cmp	r3, #4
 8006670:	bf28      	it	cs
 8006672:	2304      	movcs	r3, #4
 8006674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	3304      	adds	r3, #4
 800667a:	2b06      	cmp	r3, #6
 800667c:	d902      	bls.n	8006684 <NVIC_EncodePriority+0x30>
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3b03      	subs	r3, #3
 8006682:	e000      	b.n	8006686 <NVIC_EncodePriority+0x32>
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	401a      	ands	r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800669c:	f04f 31ff 	mov.w	r1, #4294967295
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	fa01 f303 	lsl.w	r3, r1, r3
 80066a6:	43d9      	mvns	r1, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066ac:	4313      	orrs	r3, r2
         );
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3724      	adds	r7, #36	@ 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066cc:	d301      	bcc.n	80066d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ce:	2301      	movs	r3, #1
 80066d0:	e00f      	b.n	80066f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066d2:	4a0a      	ldr	r2, [pc, #40]	@ (80066fc <SysTick_Config+0x40>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066da:	210f      	movs	r1, #15
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	f7ff ff8e 	bl	8006600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <SysTick_Config+0x40>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ea:	4b04      	ldr	r3, [pc, #16]	@ (80066fc <SysTick_Config+0x40>)
 80066ec:	2207      	movs	r2, #7
 80066ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	e000e010 	.word	0xe000e010

08006700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff29 	bl	8006560 <__NVIC_SetPriorityGrouping>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	4603      	mov	r3, r0
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006724:	f7ff ff40 	bl	80065a8 <__NVIC_GetPriorityGrouping>
 8006728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	6978      	ldr	r0, [r7, #20]
 8006730:	f7ff ff90 	bl	8006654 <NVIC_EncodePriority>
 8006734:	4602      	mov	r2, r0
 8006736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff5f 	bl	8006600 <__NVIC_SetPriority>
}
 8006742:	bf00      	nop
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	4603      	mov	r3, r0
 8006752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ff33 	bl	80065c4 <__NVIC_EnableIRQ>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ffa4 	bl	80066bc <SysTick_Config>
 8006774:	4603      	mov	r3, r0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e08d      	b.n	80068ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <HAL_DMA_Init+0x138>)
 800679a:	429a      	cmp	r2, r3
 800679c:	d80f      	bhi.n	80067be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b45      	ldr	r3, [pc, #276]	@ (80068bc <HAL_DMA_Init+0x13c>)
 80067a6:	4413      	add	r3, r2
 80067a8:	4a45      	ldr	r2, [pc, #276]	@ (80068c0 <HAL_DMA_Init+0x140>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	091b      	lsrs	r3, r3, #4
 80067b0:	009a      	lsls	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a42      	ldr	r2, [pc, #264]	@ (80068c4 <HAL_DMA_Init+0x144>)
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80067bc:	e00e      	b.n	80067dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	4b40      	ldr	r3, [pc, #256]	@ (80068c8 <HAL_DMA_Init+0x148>)
 80067c6:	4413      	add	r3, r2
 80067c8:	4a3d      	ldr	r2, [pc, #244]	@ (80068c0 <HAL_DMA_Init+0x140>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	009a      	lsls	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a3c      	ldr	r2, [pc, #240]	@ (80068cc <HAL_DMA_Init+0x14c>)
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800680c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa2c 	bl	8006c8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800683c:	d102      	bne.n	8006844 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006858:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <HAL_DMA_Init+0x104>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d80c      	bhi.n	8006884 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa4c 	bl	8006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	e008      	b.n	8006896 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40020407 	.word	0x40020407
 80068bc:	bffdfff8 	.word	0xbffdfff8
 80068c0:	cccccccd 	.word	0xcccccccd
 80068c4:	40020000 	.word	0x40020000
 80068c8:	bffdfbf8 	.word	0xbffdfbf8
 80068cc:	40020400 	.word	0x40020400

080068d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_DMA_Start_IT+0x20>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e066      	b.n	80069be <HAL_DMA_Start_IT+0xee>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d155      	bne.n	80069b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f970 	bl	8006c0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 020e 	orr.w	r2, r2, #14
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e00f      	b.n	8006968 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0204 	bic.w	r2, r2, #4
 8006956:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 020a 	orr.w	r2, r2, #10
 8006966:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006984:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800699c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e005      	b.n	80069bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
 80069ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d00d      	beq.n	80069fa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2204      	movs	r2, #4
 80069e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e047      	b.n	8006a8a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 020e 	bic.w	r2, r2, #14
 8006a08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2e:	f003 021f 	and.w	r2, r3, #31
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a46:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a68:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
    }
  }
  return status;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d026      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x7a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d021      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0204 	bic.w	r2, r2, #4
 8006ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aec:	f003 021f 	and.w	r2, r3, #31
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	2104      	movs	r1, #4
 8006af6:	fa01 f202 	lsl.w	r2, r1, r2
 8006afa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d071      	beq.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b0c:	e06c      	b.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2202      	movs	r2, #2
 8006b18:	409a      	lsls	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02e      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d029      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 020a 	bic.w	r2, r2, #10
 8006b48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f003 021f 	and.w	r2, r3, #31
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	2102      	movs	r1, #2
 8006b60:	fa01 f202 	lsl.w	r2, r1, r2
 8006b64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d038      	beq.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b7e:	e033      	b.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	2208      	movs	r2, #8
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02a      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d025      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 020e 	bic.w	r2, r2, #14
 8006bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f003 021f 	and.w	r2, r3, #31
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
}
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c00:	b2db      	uxtb	r3, r3
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c24:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3c:	f003 021f 	and.w	r2, r3, #31
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	2101      	movs	r1, #1
 8006c46:	fa01 f202 	lsl.w	r2, r1, r2
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d108      	bne.n	8006c6e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c6c:	e007      	b.n	8006c7e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d802      	bhi.n	8006ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006ca0:	4b15      	ldr	r3, [pc, #84]	@ (8006cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e001      	b.n	8006caa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006ca6:	4b15      	ldr	r3, [pc, #84]	@ (8006cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ca8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3b08      	subs	r3, #8
 8006cb6:	4a12      	ldr	r2, [pc, #72]	@ (8006d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc4:	089b      	lsrs	r3, r3, #2
 8006cc6:	009a      	lsls	r2, r3, #2
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2201      	movs	r2, #1
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40020407 	.word	0x40020407
 8006cf8:	40020800 	.word	0x40020800
 8006cfc:	40020820 	.word	0x40020820
 8006d00:	cccccccd 	.word	0xcccccccd
 8006d04:	40020880 	.word	0x40020880

08006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a08      	ldr	r2, [pc, #32]	@ (8006d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d2a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	1000823f 	.word	0x1000823f
 8006d4c:	40020940 	.word	0x40020940

08006d50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e147      	b.n	8006ff2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc fb04 	bl	8003384 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0210 	bic.w	r2, r2, #16
 8006d8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d8c:	f7fd faf4 	bl	8004378 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006d92:	e012      	b.n	8006dba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006d94:	f7fd faf0 	bl	8004378 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b0a      	cmp	r3, #10
 8006da0:	d90b      	bls.n	8006dba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da6:	f043 0201 	orr.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2203      	movs	r2, #3
 8006db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e11b      	b.n	8006ff2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d0e5      	beq.n	8006d94 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dd8:	f7fd face 	bl	8004378 <HAL_GetTick>
 8006ddc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006dde:	e012      	b.n	8006e06 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006de0:	f7fd faca 	bl	8004378 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b0a      	cmp	r3, #10
 8006dec:	d90b      	bls.n	8006e06 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df2:	f043 0201 	orr.w	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0f5      	b.n	8006ff2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0e5      	beq.n	8006de0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0202 	orr.w	r2, r2, #2
 8006e22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a74      	ldr	r2, [pc, #464]	@ (8006ffc <HAL_FDCAN_Init+0x2ac>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d103      	bne.n	8006e36 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006e2e:	4a74      	ldr	r2, [pc, #464]	@ (8007000 <HAL_FDCAN_Init+0x2b0>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d108      	bne.n	8006e50 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e4c:	619a      	str	r2, [r3, #24]
 8006e4e:	e007      	b.n	8006e60 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7c5b      	ldrb	r3, [r3, #17]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d108      	bne.n	8006e7a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e76:	619a      	str	r2, [r3, #24]
 8006e78:	e007      	b.n	8006e8a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e88:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7c9b      	ldrb	r3, [r3, #18]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d108      	bne.n	8006ea4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ea0:	619a      	str	r2, [r3, #24]
 8006ea2:	e007      	b.n	8006eb4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006eb2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006ed8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0210 	bic.w	r2, r2, #16
 8006ee8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d108      	bne.n	8006f04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0204 	orr.w	r2, r2, #4
 8006f00:	619a      	str	r2, [r3, #24]
 8006f02:	e02c      	b.n	8006f5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d028      	beq.n	8006f5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d01c      	beq.n	8006f4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0210 	orr.w	r2, r2, #16
 8006f32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d110      	bne.n	8006f5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0220 	orr.w	r2, r2, #32
 8006f4a:	619a      	str	r2, [r3, #24]
 8006f4c:	e007      	b.n	8006f5e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0220 	orr.w	r2, r2, #32
 8006f5c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f92:	d115      	bne.n	8006fc0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fa2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fbc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fbe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc56 	bl	8007888 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40006400 	.word	0x40006400
 8007000:	40006500 	.word	0x40006500

08007004 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007014:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d002      	beq.n	8007022 <HAL_FDCAN_ConfigFilter+0x1e>
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d13d      	bne.n	800709e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007036:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800703e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e01d      	b.n	800709a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	075a      	lsls	r2, r3, #29
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	079a      	lsls	r2, r3, #30
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3304      	adds	r3, #4
 8007092:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e006      	b.n	80070ac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a2:	f043 0202 	orr.w	r2, r3, #2
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d110      	bne.n	80070ee <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0201 	bic.w	r2, r2, #1
 80070e2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e006      	b.n	80070fc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d12c      	bne.n	800717a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007134:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e023      	b.n	8007188 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fc02 	bl	8007960 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2101      	movs	r1, #1
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	fa01 f202 	lsl.w	r2, r1, r2
 8007168:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800716c:	2201      	movs	r2, #1
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	409a      	lsls	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e006      	b.n	8007188 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717e:	f043 0208 	orr.w	r2, r3, #8
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	@ 0x2c
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071a8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80071aa:	7efb      	ldrb	r3, [r7, #27]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	f040 80e8 	bne.w	8007382 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b40      	cmp	r3, #64	@ 0x40
 80071b6:	d137      	bne.n	8007228 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d107      	bne.n	80071d8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0db      	b.n	8007390 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d10a      	bne.n	8007200 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f2:	0a5b      	lsrs	r3, r3, #9
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80071fc:	2301      	movs	r3, #1
 80071fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	4613      	mov	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	440b      	add	r3, r1
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
 8007226:	e036      	b.n	8007296 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2b00      	cmp	r3, #0
 8007236:	d107      	bne.n	8007248 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0a3      	b.n	8007390 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10a      	bne.n	8007270 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800726c:	2301      	movs	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	4613      	mov	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4413      	add	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	440b      	add	r3, r1
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d107      	bne.n	80072ba <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	0c9b      	lsrs	r3, r3, #18
 80072b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e005      	b.n	80072c6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	3304      	adds	r3, #4
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f003 020f 	and.w	r2, r3, #15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	0e1b      	lsrs	r3, r3, #24
 800731a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	0fda      	lsrs	r2, r3, #31
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	3304      	adds	r3, #4
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007336:	2300      	movs	r3, #0
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	e00a      	b.n	8007352 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	441a      	add	r2, r3
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	440b      	add	r3, r1
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	3301      	adds	r3, #1
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	4a11      	ldr	r2, [pc, #68]	@ (800739c <HAL_FDCAN_GetRxMessage+0x20c>)
 8007358:	5cd3      	ldrb	r3, [r2, r3]
 800735a:	461a      	mov	r2, r3
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	4293      	cmp	r3, r2
 8007360:	d3ec      	bcc.n	800733c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d105      	bne.n	8007374 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8007372:	e004      	b.n	800737e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e006      	b.n	8007390 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007386:	f043 0208 	orr.w	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
  }
}
 8007390:	4618      	mov	r0, r3
 8007392:	372c      	adds	r7, #44	@ 0x2c
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	0800c260 	.word	0x0800c260

080073a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073b2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d003      	beq.n	80073c2 <HAL_FDCAN_ActivateNotification+0x22>
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	f040 80c8 	bne.w	8007552 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d03b      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d031      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d027      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01d      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b00      	cmp	r3, #0
 800742c:	d013      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00c      	beq.n	8007466 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d13b      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d131      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d127      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d11d      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0202 	orr.w	r2, r2, #2
 8007500:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007508:	2b00      	cmp	r3, #0
 800750a:	d009      	beq.n	8007520 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	430a      	orrs	r2, r1
 800751c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	430a      	orrs	r2, r1
 800753a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	430a      	orrs	r2, r1
 800754c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e006      	b.n	8007560 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007556:	f043 0202 	orr.w	r2, r3, #2
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
  }
}
 8007560:	4618      	mov	r0, r3
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800757e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007588:	4013      	ands	r3, r2
 800758a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075a0:	4013      	ands	r3, r2
 80075a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b8:	4013      	ands	r3, r2
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80075c6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	4013      	ands	r3, r2
 80075d2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80075de:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2240      	movs	r2, #64	@ 0x40
 8007616:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f916 	bl	800784a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d019      	beq.n	800765c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d014      	beq.n	800765c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800763a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4013      	ands	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007652:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007654:	6939      	ldr	r1, [r7, #16]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8d8 	bl	800780c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800765c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800766a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8a2 	bl	80077b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800767e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa f82a 	bl	80016dc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f897 	bl	80077cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f890 	bl	80077e2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d018      	beq.n	80076fe <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d013      	beq.n	80076fe <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80076de:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4013      	ands	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2280      	movs	r2, #128	@ 0x80
 80076f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f87c 	bl	80077f6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00c      	beq.n	8007722 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800771a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f880 	bl	8007822 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800773e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f878 	bl	8007836 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00f      	beq.n	8007770 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007762:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007768:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800777e:	69f9      	ldr	r1, [r7, #28]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f876 	bl	8007872 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d009      	beq.n	80077a0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f858 	bl	800785e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077ae:	bf00      	nop
 80077b0:	3730      	adds	r7, #48	@ 0x30
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007890:	4b30      	ldr	r3, [pc, #192]	@ (8007954 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007892:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a2f      	ldr	r2, [pc, #188]	@ (8007958 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d103      	bne.n	80078a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80078a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2c      	ldr	r2, [pc, #176]	@ (800795c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d103      	bne.n	80078b8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80078b6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ce:	041a      	lsls	r2, r3, #16
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ec:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	061a      	lsls	r2, r3, #24
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e005      	b.n	800793a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3304      	adds	r3, #4
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	429a      	cmp	r2, r3
 8007944:	d3f3      	bcc.n	800792e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	4000a400 	.word	0x4000a400
 8007958:	40006800 	.word	0x40006800
 800795c:	40006c00 	.word	0x40006c00

08007960 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	@ 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800797e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007986:	4313      	orrs	r3, r2
 8007988:	61fb      	str	r3, [r7, #28]
 800798a:	e00a      	b.n	80079a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007994:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800799a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800799c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80079b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80079b8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4413      	add	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	440b      	add	r3, r1
 80079d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	3304      	adds	r3, #4
 80079e0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	3304      	adds	r3, #4
 80079ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e020      	b.n	8007a36 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3303      	adds	r3, #3
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	3302      	adds	r3, #2
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	440b      	add	r3, r1
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a0c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	3301      	adds	r3, #1
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	440b      	add	r3, r1
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a1a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	440a      	add	r2, r1
 8007a22:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a24:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3304      	adds	r3, #4
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	4a06      	ldr	r2, [pc, #24]	@ (8007a54 <FDCAN_CopyMessageToRAM+0xf4>)
 8007a3c:	5cd3      	ldrb	r3, [r2, r3]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d3d6      	bcc.n	80079f4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	3724      	adds	r7, #36	@ 0x24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	0800c260 	.word	0x0800c260

08007a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a66:	e15a      	b.n	8007d1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	4013      	ands	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 814c 	beq.w	8007d18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d005      	beq.n	8007a98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d130      	bne.n	8007afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4013      	ands	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ace:	2201      	movs	r2, #1
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4013      	ands	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	091b      	lsrs	r3, r3, #4
 8007ae4:	f003 0201 	and.w	r2, r3, #1
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d017      	beq.n	8007b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	2203      	movs	r2, #3
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d123      	bne.n	8007b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	08da      	lsrs	r2, r3, #3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3208      	adds	r2, #8
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	220f      	movs	r2, #15
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4013      	ands	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	08da      	lsrs	r2, r3, #3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3208      	adds	r2, #8
 8007b84:	6939      	ldr	r1, [r7, #16]
 8007b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	2203      	movs	r2, #3
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f003 0203 	and.w	r2, r3, #3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80a6 	beq.w	8007d18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8007d3c <HAL_GPIO_Init+0x2e4>)
 8007bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8007d3c <HAL_GPIO_Init+0x2e4>)
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8007bd8:	4b58      	ldr	r3, [pc, #352]	@ (8007d3c <HAL_GPIO_Init+0x2e4>)
 8007bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007be4:	4a56      	ldr	r2, [pc, #344]	@ (8007d40 <HAL_GPIO_Init+0x2e8>)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	3302      	adds	r3, #2
 8007bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	220f      	movs	r2, #15
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	43db      	mvns	r3, r3
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4013      	ands	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007c0e:	d01f      	beq.n	8007c50 <HAL_GPIO_Init+0x1f8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a4c      	ldr	r2, [pc, #304]	@ (8007d44 <HAL_GPIO_Init+0x2ec>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d019      	beq.n	8007c4c <HAL_GPIO_Init+0x1f4>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a4b      	ldr	r2, [pc, #300]	@ (8007d48 <HAL_GPIO_Init+0x2f0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d013      	beq.n	8007c48 <HAL_GPIO_Init+0x1f0>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a4a      	ldr	r2, [pc, #296]	@ (8007d4c <HAL_GPIO_Init+0x2f4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00d      	beq.n	8007c44 <HAL_GPIO_Init+0x1ec>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a49      	ldr	r2, [pc, #292]	@ (8007d50 <HAL_GPIO_Init+0x2f8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d007      	beq.n	8007c40 <HAL_GPIO_Init+0x1e8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a48      	ldr	r2, [pc, #288]	@ (8007d54 <HAL_GPIO_Init+0x2fc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d101      	bne.n	8007c3c <HAL_GPIO_Init+0x1e4>
 8007c38:	2305      	movs	r3, #5
 8007c3a:	e00a      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c3c:	2306      	movs	r3, #6
 8007c3e:	e008      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c40:	2304      	movs	r3, #4
 8007c42:	e006      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c44:	2303      	movs	r3, #3
 8007c46:	e004      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e002      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <HAL_GPIO_Init+0x1fa>
 8007c50:	2300      	movs	r3, #0
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	f002 0203 	and.w	r2, r2, #3
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	4093      	lsls	r3, r2
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c62:	4937      	ldr	r1, [pc, #220]	@ (8007d40 <HAL_GPIO_Init+0x2e8>)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	089b      	lsrs	r3, r3, #2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c70:	4b39      	ldr	r3, [pc, #228]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c94:	4a30      	ldr	r2, [pc, #192]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007cbe:	4a26      	ldr	r2, [pc, #152]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007cc4:	4b24      	ldr	r3, [pc, #144]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007cee:	4b1a      	ldr	r3, [pc, #104]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d12:	4a11      	ldr	r2, [pc, #68]	@ (8007d58 <HAL_GPIO_Init+0x300>)
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f47f ae9d 	bne.w	8007a68 <HAL_GPIO_Init+0x10>
  }
}
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	40010000 	.word	0x40010000
 8007d44:	48000400 	.word	0x48000400
 8007d48:	48000800 	.word	0x48000800
 8007d4c:	48000c00 	.word	0x48000c00
 8007d50:	48001000 	.word	0x48001000
 8007d54:	48001400 	.word	0x48001400
 8007d58:	40010400 	.word	0x40010400

08007d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d6c:	787b      	ldrb	r3, [r7, #1]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d72:	887a      	ldrh	r2, [r7, #2]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d78:	e002      	b.n	8007d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d7a:	887a      	ldrh	r2, [r7, #2]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007d96:	4b08      	ldr	r3, [pc, #32]	@ (8007db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d006      	beq.n	8007db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007da2:	4a05      	ldr	r2, [pc, #20]	@ (8007db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f806 	bl	8007dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40010400 	.word	0x40010400

08007dbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e08d      	b.n	8007f00 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fb fb37 	bl	800346c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2224      	movs	r2, #36	@ 0x24
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d107      	bne.n	8007e4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e48:	609a      	str	r2, [r3, #8]
 8007e4a:	e006      	b.n	8007e5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007e58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d108      	bne.n	8007e74 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	e007      	b.n	8007e84 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e96:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69d9      	ldr	r1, [r3, #28]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1a      	ldr	r2, [r3, #32]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	@ 0x28
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	461a      	mov	r2, r3
 8007f14:	460b      	mov	r3, r1
 8007f16:	817b      	strh	r3, [r7, #10]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	f040 80ef 	bne.w	800810c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f3c:	d101      	bne.n	8007f42 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0e5      	b.n	800810e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0de      	b.n	800810e <HAL_I2C_Master_Transmit_DMA+0x206>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2221      	movs	r2, #33	@ 0x21
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2210      	movs	r2, #16
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	893a      	ldrh	r2, [r7, #8]
 8007f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4a66      	ldr	r2, [pc, #408]	@ (8008118 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a66      	ldr	r2, [pc, #408]	@ (800811c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2bff      	cmp	r3, #255	@ 0xff
 8007f8e:	d906      	bls.n	8007f9e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	22ff      	movs	r2, #255	@ 0xff
 8007f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e007      	b.n	8007fae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01a      	beq.n	8007fec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d074      	beq.n	80080de <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d022      	beq.n	8008042 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008000:	4a47      	ldr	r2, [pc, #284]	@ (8008120 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8008002:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008008:	4a46      	ldr	r2, [pc, #280]	@ (8008124 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800800a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	2200      	movs	r2, #0
 800801a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008024:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800802c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008032:	f7fe fc4d 	bl	80068d0 <HAL_DMA_Start_IT>
 8008036:	4603      	mov	r3, r0
 8008038:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d13a      	bne.n	80080b6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8008040:	e013      	b.n	800806a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e051      	b.n	800810e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806e:	b2db      	uxtb	r3, r3
 8008070:	3301      	adds	r3, #1
 8008072:	b2da      	uxtb	r2, r3
 8008074:	8979      	ldrh	r1, [r7, #10]
 8008076:	4b2c      	ldr	r3, [pc, #176]	@ (8008128 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f001 fcbb 	bl	80099f8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800809c:	2110      	movs	r1, #16
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 fcdc 	bl	8009a5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e028      	b.n	8008108 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	f043 0210 	orr.w	r2, r3, #16
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e017      	b.n	800810e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a12      	ldr	r2, [pc, #72]	@ (800812c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80080e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	8979      	ldrh	r1, [r7, #10]
 80080ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f001 fc80 	bl	80099f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008100:	2101      	movs	r1, #1
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f001 fcaa 	bl	8009a5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	ffff0000 	.word	0xffff0000
 800811c:	080088e3 	.word	0x080088e3
 8008120:	08009863 	.word	0x08009863
 8008124:	0800998f 	.word	0x0800998f
 8008128:	80002000 	.word	0x80002000
 800812c:	080084a3 	.word	0x080084a3

08008130 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	461a      	mov	r2, r3
 800813c:	460b      	mov	r3, r1
 800813e:	817b      	strh	r3, [r7, #10]
 8008140:	4613      	mov	r3, r2
 8008142:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b20      	cmp	r3, #32
 800814e:	f040 80cd 	bne.w	80082ec <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800815c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008160:	d101      	bne.n	8008166 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
 8008164:	e0c3      	b.n	80082ee <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_I2C_Master_Receive_DMA+0x44>
 8008170:	2302      	movs	r3, #2
 8008172:	e0bc      	b.n	80082ee <HAL_I2C_Master_Receive_DMA+0x1be>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2222      	movs	r2, #34	@ 0x22
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2210      	movs	r2, #16
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	893a      	ldrh	r2, [r7, #8]
 800819c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a55      	ldr	r2, [pc, #340]	@ (80082f8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80081a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a55      	ldr	r2, [pc, #340]	@ (80082fc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80081a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2bff      	cmp	r3, #255	@ 0xff
 80081b2:	d906      	bls.n	80081c2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	22ff      	movs	r2, #255	@ 0xff
 80081b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80081ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e007      	b.n	80081d2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80081cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d070      	beq.n	80082bc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e6:	4a46      	ldr	r2, [pc, #280]	@ (8008300 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80081e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ee:	4a45      	ldr	r2, [pc, #276]	@ (8008304 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80081f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081fe:	2200      	movs	r2, #0
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3324      	adds	r3, #36	@ 0x24
 800820c:	4619      	mov	r1, r3
 800820e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008214:	f7fe fb5c 	bl	80068d0 <HAL_DMA_Start_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800821c:	7cfb      	ldrb	r3, [r7, #19]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d138      	bne.n	8008294 <HAL_I2C_Master_Receive_DMA+0x164>
 8008222:	e013      	b.n	800824c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008238:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e050      	b.n	80082ee <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008250:	b2da      	uxtb	r2, r3
 8008252:	8979      	ldrh	r1, [r7, #10]
 8008254:	4b2c      	ldr	r3, [pc, #176]	@ (8008308 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f001 fbcc 	bl	80099f8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800827a:	2110      	movs	r1, #16
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f001 fbed 	bl	8009a5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e029      	b.n	80082e8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2220      	movs	r2, #32
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a8:	f043 0210 	orr.w	r2, r3, #16
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e018      	b.n	80082ee <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a13      	ldr	r2, [pc, #76]	@ (800830c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80082c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	8979      	ldrh	r1, [r7, #10]
 80082ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f001 fb90 	bl	80099f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80082e0:	2102      	movs	r1, #2
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f001 fbba 	bl	8009a5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	ffff0000 	.word	0xffff0000
 80082fc:	080088e3 	.word	0x080088e3
 8008300:	080098f9 	.word	0x080098f9
 8008304:	0800998f 	.word	0x0800998f
 8008308:	80002400 	.word	0x80002400
 800830c:	080084a3 	.word	0x080084a3

08008310 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
  }
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00f      	beq.n	8008386 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008374:	f043 0201 	orr.w	r2, r3, #1
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008384:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00f      	beq.n	80083b0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839e:	f043 0208 	orr.w	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c8:	f043 0202 	orr.w	r2, r3, #2
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 030b 	and.w	r3, r3, #11
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f8fd 	bl	80095ec <I2C_ITError>
  }
}
 80083f2:	bf00      	nop
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
 800842e:	4613      	mov	r3, r2
 8008430:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af02      	add	r7, sp, #8
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d101      	bne.n	80084c0 <I2C_Master_ISR_IT+0x1e>
 80084bc:	2302      	movs	r3, #2
 80084be:	e113      	b.n	80086e8 <I2C_Master_ISR_IT+0x246>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00d      	beq.n	80084f8 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2210      	movs	r2, #16
 80084e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e8:	f043 0204 	orr.w	r2, r3, #4
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f001 f992 	bl	800981a <I2C_Flush_TXDR>
 80084f6:	e0e4      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d022      	beq.n	8008548 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01d      	beq.n	8008548 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f023 0304 	bic.w	r3, r3, #4
 8008512:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008530:	3b01      	subs	r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008546:	e0bc      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d128      	bne.n	80085a4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008558:	2b00      	cmp	r3, #0
 800855a:	d023      	beq.n	80085a4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01e      	beq.n	80085a4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a8 	beq.w	80086c2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80085a2:	e08e      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d05c      	beq.n	8008668 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d057      	beq.n	8008668 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d040      	beq.n	8008644 <I2C_Master_ISR_IT+0x1a2>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d13c      	bne.n	8008644 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2bff      	cmp	r3, #255	@ 0xff
 80085e0:	d90e      	bls.n	8008600 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	22ff      	movs	r2, #255	@ 0xff
 80085e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	8a79      	ldrh	r1, [r7, #18]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f001 f9fd 	bl	80099f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085fe:	e032      	b.n	8008666 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008612:	d00b      	beq.n	800862c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008618:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800861e:	8a79      	ldrh	r1, [r7, #18]
 8008620:	2000      	movs	r0, #0
 8008622:	9000      	str	r0, [sp, #0]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f001 f9e7 	bl	80099f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800862a:	e01c      	b.n	8008666 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008630:	b2da      	uxtb	r2, r3
 8008632:	8a79      	ldrh	r1, [r7, #18]
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f001 f9db 	bl	80099f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008642:	e010      	b.n	8008666 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008652:	d003      	beq.n	800865c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fcb0 	bl	8008fba <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800865a:	e032      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800865c:	2140      	movs	r1, #64	@ 0x40
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 ffc4 	bl	80095ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008664:	e02d      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
 8008666:	e02c      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d027      	beq.n	80086c2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008678:	2b00      	cmp	r3, #0
 800867a:	d022      	beq.n	80086c2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d119      	bne.n	80086ba <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008694:	d015      	beq.n	80086c2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800869e:	d108      	bne.n	80086b2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086ae:	605a      	str	r2, [r3, #4]
 80086b0:	e007      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fc81 	bl	8008fba <I2C_ITMasterSeqCplt>
 80086b8:	e003      	b.n	80086c2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80086ba:	2140      	movs	r1, #64	@ 0x40
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 ff95 	bl	80095ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80086d6:	6979      	ldr	r1, [r7, #20]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fd07 	bl	80090ec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <I2C_Slave_ISR_IT+0x24>
 8008710:	2302      	movs	r3, #2
 8008712:	e0e2      	b.n	80088da <I2C_Slave_ISR_IT+0x1ea>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008730:	6939      	ldr	r1, [r7, #16]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fda2 	bl	800927c <I2C_ITSlaveCplt>
 8008738:	e0ca      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d04b      	beq.n	80087dc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800874a:	2b00      	cmp	r3, #0
 800874c:	d046      	beq.n	80087dc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d128      	bne.n	80087aa <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b28      	cmp	r3, #40	@ 0x28
 8008762:	d108      	bne.n	8008776 <I2C_Slave_ISR_IT+0x86>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800876a:	d104      	bne.n	8008776 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800876c:	6939      	ldr	r1, [r7, #16]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fee8 	bl	8009544 <I2C_ITListenCplt>
 8008774:	e031      	b.n	80087da <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b29      	cmp	r3, #41	@ 0x29
 8008780:	d10e      	bne.n	80087a0 <I2C_Slave_ISR_IT+0xb0>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008788:	d00a      	beq.n	80087a0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f001 f841 	bl	800981a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fc4b 	bl	8009034 <I2C_ITSlaveSeqCplt>
 800879e:	e01c      	b.n	80087da <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2210      	movs	r2, #16
 80087a6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80087a8:	e08f      	b.n	80088ca <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2210      	movs	r2, #16
 80087b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	f043 0204 	orr.w	r2, r3, #4
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <I2C_Slave_ISR_IT+0xdc>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087ca:	d17e      	bne.n	80088ca <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d0:	4619      	mov	r1, r3
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 ff0a 	bl	80095ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087d8:	e077      	b.n	80088ca <I2C_Slave_ISR_IT+0x1da>
 80087da:	e076      	b.n	80088ca <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02f      	beq.n	8008846 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02a      	beq.n	8008846 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d018      	beq.n	800882c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	b2d2      	uxtb	r2, r2
 8008806:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008816:	3b01      	subs	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d14b      	bne.n	80088ce <I2C_Slave_ISR_IT+0x1de>
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800883c:	d047      	beq.n	80088ce <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fbf8 	bl	8009034 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008844:	e043      	b.n	80088ce <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b00      	cmp	r3, #0
 800884e:	d009      	beq.n	8008864 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800885a:	6939      	ldr	r1, [r7, #16]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fb28 	bl	8008eb2 <I2C_ITAddrCplt>
 8008862:	e035      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d030      	beq.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008874:	2b00      	cmp	r3, #0
 8008876:	d02b      	beq.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d018      	beq.n	80088b4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80088b2:	e00d      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088ba:	d002      	beq.n	80088c2 <I2C_Slave_ISR_IT+0x1d2>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 fbb6 	bl	8009034 <I2C_ITSlaveSeqCplt>
 80088c8:	e002      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80088ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af02      	add	r7, sp, #8
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <I2C_Master_ISR_DMA+0x1a>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e0d9      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1ce>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0310 	and.w	r3, r3, #16
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2210      	movs	r2, #16
 800891e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008924:	f043 0204 	orr.w	r2, r3, #4
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800892c:	2120      	movs	r1, #32
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f001 f894 	bl	8009a5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 ff70 	bl	800981a <I2C_Flush_TXDR>
 800893a:	e0b4      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d071      	beq.n	8008a2a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06c      	beq.n	8008a2a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800895e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04e      	beq.n	8008a08 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	b29b      	uxth	r3, r3
 8008972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008976:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2bff      	cmp	r3, #255	@ 0xff
 8008980:	d906      	bls.n	8008990 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	22ff      	movs	r2, #255	@ 0xff
 8008986:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e010      	b.n	80089b2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089a2:	d003      	beq.n	80089ac <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e002      	b.n	80089b2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80089ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089b0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	8a79      	ldrh	r1, [r7, #18]
 80089ba:	2300      	movs	r3, #0
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f001 f819 	bl	80099f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b22      	cmp	r3, #34	@ 0x22
 80089e2:	d108      	bne.n	80089f6 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089f2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089f4:	e057      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a06:	e04e      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a16:	d003      	beq.n	8008a20 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 face 	bl	8008fba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008a1e:	e042      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a20:	2140      	movs	r1, #64	@ 0x40
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fde2 	bl	80095ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a28:	e03d      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d028      	beq.n	8008a86 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d023      	beq.n	8008a86 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d119      	bne.n	8008a7c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a56:	d025      	beq.n	8008aa4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a60:	d108      	bne.n	8008a74 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a70:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008a72:	e017      	b.n	8008aa4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 faa0 	bl	8008fba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008a7a:	e013      	b.n	8008aa4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a7c:	2140      	movs	r1, #64	@ 0x40
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 fdb4 	bl	80095ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a84:	e00e      	b.n	8008aa4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fb25 	bl	80090ec <I2C_ITMasterCplt>
 8008aa2:	e000      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008aa4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8008cfc <I2C_Mem_ISR_DMA+0x244>)
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <I2C_Mem_ISR_DMA+0x1e>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e10e      	b.n	8008cf4 <I2C_Mem_ISR_DMA+0x23c>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d016      	beq.n	8008b16 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d011      	beq.n	8008b16 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2210      	movs	r2, #16
 8008af8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afe:	f043 0204 	orr.w	r2, r3, #4
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b06:	2120      	movs	r1, #32
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 ffa7 	bl	8009a5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fe83 	bl	800981a <I2C_Flush_TXDR>
 8008b14:	e0e9      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00e      	beq.n	8008b3e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b3c:	e0d5      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d05f      	beq.n	8008c08 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d05a      	beq.n	8008c08 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b52:	2101      	movs	r1, #1
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f001 f805 	bl	8009b64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b5a:	2110      	movs	r1, #16
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 ff7d 	bl	8009a5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d048      	beq.n	8008bfe <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2bff      	cmp	r3, #255	@ 0xff
 8008b74:	d910      	bls.n	8008b98 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	22ff      	movs	r2, #255	@ 0xff
 8008b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b80:	b299      	uxth	r1, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 ff31 	bl	80099f8 <I2C_TransferConfig>
 8008b96:	e011      	b.n	8008bbc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba6:	b299      	uxth	r1, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 ff1e 	bl	80099f8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b22      	cmp	r3, #34	@ 0x22
 8008bd8:	d108      	bne.n	8008bec <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008be8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bea:	e07e      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bfa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bfc:	e075      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008bfe:	2140      	movs	r1, #64	@ 0x40
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 fcf3 	bl	80095ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008c06:	e070      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d05d      	beq.n	8008cce <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d058      	beq.n	8008cce <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 ffa0 	bl	8009b64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c24:	2110      	movs	r1, #16
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 ff18 	bl	8009a5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b22      	cmp	r3, #34	@ 0x22
 8008c36:	d101      	bne.n	8008c3c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008c38:	4b31      	ldr	r3, [pc, #196]	@ (8008d00 <I2C_Mem_ISR_DMA+0x248>)
 8008c3a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2bff      	cmp	r3, #255	@ 0xff
 8008c44:	d910      	bls.n	8008c68 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	22ff      	movs	r2, #255	@ 0xff
 8008c4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c50:	b299      	uxth	r1, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fec9 	bl	80099f8 <I2C_TransferConfig>
 8008c66:	e011      	b.n	8008c8c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c76:	b299      	uxth	r1, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 feb6 	bl	80099f8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b22      	cmp	r3, #34	@ 0x22
 8008ca8:	d108      	bne.n	8008cbc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cb8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cba:	e016      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ccc:	e00d      	b.n	8008cea <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fa01 	bl	80090ec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	80002000 	.word	0x80002000
 8008d00:	80002400 	.word	0x80002400

08008d04 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d14:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <I2C_Slave_ISR_DMA+0x24>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e0c0      	b.n	8008eaa <I2C_Slave_ISR_DMA+0x1a6>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fa98 	bl	800927c <I2C_ITSlaveCplt>
 8008d4c:	e0a8      	b.n	8008ea0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f003 0310 	and.w	r3, r3, #16
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8095 	beq.w	8008e84 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 808f 	beq.w	8008e84 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d07d      	beq.n	8008e76 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00c      	beq.n	8008d9c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d007      	beq.n	8008d9c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d128      	bne.n	8008e16 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b28      	cmp	r3, #40	@ 0x28
 8008dce:	d108      	bne.n	8008de2 <I2C_Slave_ISR_DMA+0xde>
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dd6:	d104      	bne.n	8008de2 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fbb2 	bl	8009544 <I2C_ITListenCplt>
 8008de0:	e048      	b.n	8008e74 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b29      	cmp	r3, #41	@ 0x29
 8008dec:	d10e      	bne.n	8008e0c <I2C_Slave_ISR_DMA+0x108>
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008df4:	d00a      	beq.n	8008e0c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2210      	movs	r2, #16
 8008dfc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fd0b 	bl	800981a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f915 	bl	8009034 <I2C_ITSlaveSeqCplt>
 8008e0a:	e033      	b.n	8008e74 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2210      	movs	r2, #16
 8008e12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008e14:	e034      	b.n	8008e80 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2210      	movs	r2, #16
 8008e1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e22:	f043 0204 	orr.w	r2, r3, #4
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <I2C_Slave_ISR_DMA+0x13c>
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e3e:	d11f      	bne.n	8008e80 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	2b21      	cmp	r3, #33	@ 0x21
 8008e44:	d002      	beq.n	8008e4c <I2C_Slave_ISR_DMA+0x148>
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	2b29      	cmp	r3, #41	@ 0x29
 8008e4a:	d103      	bne.n	8008e54 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2221      	movs	r2, #33	@ 0x21
 8008e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e52:	e008      	b.n	8008e66 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	2b22      	cmp	r3, #34	@ 0x22
 8008e58:	d002      	beq.n	8008e60 <I2C_Slave_ISR_DMA+0x15c>
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5e:	d102      	bne.n	8008e66 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2222      	movs	r2, #34	@ 0x22
 8008e64:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fbbd 	bl	80095ec <I2C_ITError>
      if (treatdmanack == 1U)
 8008e72:	e005      	b.n	8008e80 <I2C_Slave_ISR_DMA+0x17c>
 8008e74:	e004      	b.n	8008e80 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2210      	movs	r2, #16
 8008e7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e7e:	e00f      	b.n	8008ea0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8008e80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e82:	e00d      	b.n	8008ea0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f809 	bl	8008eb2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ec8:	2b28      	cmp	r3, #40	@ 0x28
 8008eca:	d16a      	bne.n	8008fa2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	0c1b      	lsrs	r3, r3, #16
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008eea:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ef8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008f06:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d138      	bne.n	8008f82 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008f10:	897b      	ldrh	r3, [r7, #10]
 8008f12:	09db      	lsrs	r3, r3, #7
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	89bb      	ldrh	r3, [r7, #12]
 8008f18:	4053      	eors	r3, r2
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f003 0306 	and.w	r3, r3, #6
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d11c      	bne.n	8008f5e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008f24:	897b      	ldrh	r3, [r7, #10]
 8008f26:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d13b      	bne.n	8008fb2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2208      	movs	r2, #8
 8008f46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f50:	89ba      	ldrh	r2, [r7, #12]
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fa63 	bl	8008422 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008f5c:	e029      	b.n	8008fb2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008f5e:	893b      	ldrh	r3, [r7, #8]
 8008f60:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fdfc 	bl	8009b64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f74:	89ba      	ldrh	r2, [r7, #12]
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fa51 	bl	8008422 <HAL_I2C_AddrCallback>
}
 8008f80:	e017      	b.n	8008fb2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fdec 	bl	8009b64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f94:	89ba      	ldrh	r2, [r7, #12]
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fa41 	bl	8008422 <HAL_I2C_AddrCallback>
}
 8008fa0:	e007      	b.n	8008fb2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b21      	cmp	r3, #33	@ 0x21
 8008fd4:	d115      	bne.n	8009002 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2211      	movs	r2, #17
 8008fe2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fea:	2101      	movs	r1, #1
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fdb9 	bl	8009b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7f8 f85c 	bl	80010b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009000:	e014      	b.n	800902c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2212      	movs	r2, #18
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009016:	2102      	movs	r1, #2
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fda3 	bl	8009b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7f8 f854 	bl	80010d4 <HAL_I2C_MasterRxCpltCallback>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e00c      	b.n	8009082 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009080:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b29      	cmp	r3, #41	@ 0x29
 800908c:	d112      	bne.n	80090b4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2228      	movs	r2, #40	@ 0x28
 8009092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2221      	movs	r2, #33	@ 0x21
 800909a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800909c:	2101      	movs	r1, #1
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fd60 	bl	8009b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff f9a4 	bl	80083fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090b2:	e017      	b.n	80090e4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80090be:	d111      	bne.n	80090e4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2228      	movs	r2, #40	@ 0x28
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2222      	movs	r2, #34	@ 0x22
 80090cc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090ce:	2102      	movs	r1, #2
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fd47 	bl	8009b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff f995 	bl	800840e <HAL_I2C_SlaveRxCpltCallback>
}
 80090e4:	bf00      	nop
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2220      	movs	r2, #32
 8009100:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b21      	cmp	r3, #33	@ 0x21
 800910c:	d107      	bne.n	800911e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800910e:	2101      	movs	r1, #1
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fd27 	bl	8009b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2211      	movs	r2, #17
 800911a:	631a      	str	r2, [r3, #48]	@ 0x30
 800911c:	e00c      	b.n	8009138 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b22      	cmp	r3, #34	@ 0x22
 8009128:	d106      	bne.n	8009138 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800912a:	2102      	movs	r1, #2
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fd19 	bl	8009b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2212      	movs	r2, #18
 8009136:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6859      	ldr	r1, [r3, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b4c      	ldr	r3, [pc, #304]	@ (8009274 <I2C_ITMasterCplt+0x188>)
 8009144:	400b      	ands	r3, r1
 8009146:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a49      	ldr	r2, [pc, #292]	@ (8009278 <I2C_ITMasterCplt+0x18c>)
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b00      	cmp	r3, #0
 800915c:	d009      	beq.n	8009172 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2210      	movs	r2, #16
 8009164:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800916a:	f043 0204 	orr.w	r2, r3, #4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b60      	cmp	r3, #96	@ 0x60
 800917c:	d10a      	bne.n	8009194 <I2C_ITMasterCplt+0xa8>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	b2db      	uxtb	r3, r3
 8009190:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009192:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fb40 	bl	800981a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b60      	cmp	r3, #96	@ 0x60
 80091aa:	d002      	beq.n	80091b2 <I2C_ITMasterCplt+0xc6>
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa17 	bl	80095ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091be:	e054      	b.n	800926a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b21      	cmp	r3, #33	@ 0x21
 80091ca:	d124      	bne.n	8009216 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d10b      	bne.n	80091fe <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff f92b 	bl	8008452 <HAL_I2C_MemTxCpltCallback>
}
 80091fc:	e035      	b.n	800926a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7f7 ff52 	bl	80010b8 <HAL_I2C_MasterTxCpltCallback>
}
 8009214:	e029      	b.n	800926a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b22      	cmp	r3, #34	@ 0x22
 8009220:	d123      	bne.n	800926a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b40      	cmp	r3, #64	@ 0x40
 800923a:	d10b      	bne.n	8009254 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff f90a 	bl	8008466 <HAL_I2C_MemRxCpltCallback>
}
 8009252:	e00a      	b.n	800926a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7f7 ff35 	bl	80010d4 <HAL_I2C_MasterRxCpltCallback>
}
 800926a:	bf00      	nop
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	fe00e800 	.word	0xfe00e800
 8009278:	ffff0000 	.word	0xffff0000

0800927c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800929e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2220      	movs	r2, #32
 80092a6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	2b21      	cmp	r3, #33	@ 0x21
 80092ac:	d002      	beq.n	80092b4 <I2C_ITSlaveCplt+0x38>
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	2b29      	cmp	r3, #41	@ 0x29
 80092b2:	d108      	bne.n	80092c6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80092b4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fc53 	bl	8009b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2221      	movs	r2, #33	@ 0x21
 80092c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80092c4:	e019      	b.n	80092fa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	2b22      	cmp	r3, #34	@ 0x22
 80092ca:	d002      	beq.n	80092d2 <I2C_ITSlaveCplt+0x56>
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d0:	d108      	bne.n	80092e4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80092d2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fc44 	bl	8009b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2222      	movs	r2, #34	@ 0x22
 80092e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80092e2:	e00a      	b.n	80092fa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	2b28      	cmp	r3, #40	@ 0x28
 80092e8:	d107      	bne.n	80092fa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80092ea:	f248 0103 	movw	r1, #32771	@ 0x8003
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fc38 	bl	8009b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009308:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6859      	ldr	r1, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b89      	ldr	r3, [pc, #548]	@ (800953c <I2C_ITSlaveCplt+0x2c0>)
 8009316:	400b      	ands	r3, r1
 8009318:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa7d 	bl	800981a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d013      	beq.n	8009352 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009338:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01f      	beq.n	8009382 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009350:	e017      	b.n	8009382 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d012      	beq.n	8009382 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800936a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b00      	cmp	r3, #0
 800938a:	d020      	beq.n	80093ce <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f023 0304 	bic.w	r3, r3, #4
 8009392:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939e:	b2d2      	uxtb	r2, r2
 80093a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093dc:	f043 0204 	orr.w	r2, r3, #4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d049      	beq.n	8009482 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d044      	beq.n	8009482 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d128      	bne.n	8009454 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b28      	cmp	r3, #40	@ 0x28
 800940c:	d108      	bne.n	8009420 <I2C_ITSlaveCplt+0x1a4>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009414:	d104      	bne.n	8009420 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009416:	6979      	ldr	r1, [r7, #20]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f893 	bl	8009544 <I2C_ITListenCplt>
 800941e:	e030      	b.n	8009482 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b29      	cmp	r3, #41	@ 0x29
 800942a:	d10e      	bne.n	800944a <I2C_ITSlaveCplt+0x1ce>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009432:	d00a      	beq.n	800944a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2210      	movs	r2, #16
 800943a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f9ec 	bl	800981a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fdf6 	bl	8009034 <I2C_ITSlaveSeqCplt>
 8009448:	e01b      	b.n	8009482 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2210      	movs	r2, #16
 8009450:	61da      	str	r2, [r3, #28]
 8009452:	e016      	b.n	8009482 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2210      	movs	r2, #16
 800945a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009460:	f043 0204 	orr.w	r2, r3, #4
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <I2C_ITSlaveCplt+0x1fa>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009474:	d105      	bne.n	8009482 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8b5 	bl	80095ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009494:	2b00      	cmp	r3, #0
 8009496:	d010      	beq.n	80094ba <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8a4 	bl	80095ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b28      	cmp	r3, #40	@ 0x28
 80094ae:	d141      	bne.n	8009534 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f846 	bl	8009544 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094b8:	e03c      	b.n	8009534 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094c2:	d014      	beq.n	80094ee <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff fdb5 	bl	8009034 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009540 <I2C_ITSlaveCplt+0x2c4>)
 80094ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fe ffa9 	bl	800843e <HAL_I2C_ListenCpltCallback>
}
 80094ec:	e022      	b.n	8009534 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b22      	cmp	r3, #34	@ 0x22
 80094f8:	d10e      	bne.n	8009518 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7fe ff7c 	bl	800840e <HAL_I2C_SlaveRxCpltCallback>
}
 8009516:	e00d      	b.n	8009534 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7fe ff63 	bl	80083fa <HAL_I2C_SlaveTxCpltCallback>
}
 8009534:	bf00      	nop
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	fe00e800 	.word	0xfe00e800
 8009540:	ffff0000 	.word	0xffff0000

08009544 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a25      	ldr	r2, [pc, #148]	@ (80095e8 <I2C_ITListenCplt+0xa4>)
 8009552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d022      	beq.n	80095c0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d012      	beq.n	80095c0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b8:	f043 0204 	orr.w	r2, r3, #4
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 facd 	bl	8009b64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2210      	movs	r2, #16
 80095d0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fe ff2f 	bl	800843e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	ffff0000 	.word	0xffff0000

080095ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095fc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a6d      	ldr	r2, [pc, #436]	@ (80097c0 <I2C_ITError+0x1d4>)
 800960a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	2b28      	cmp	r3, #40	@ 0x28
 8009622:	d005      	beq.n	8009630 <I2C_ITError+0x44>
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	2b29      	cmp	r3, #41	@ 0x29
 8009628:	d002      	beq.n	8009630 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b2a      	cmp	r3, #42	@ 0x2a
 800962e:	d10b      	bne.n	8009648 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009630:	2103      	movs	r1, #3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa96 	bl	8009b64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2228      	movs	r2, #40	@ 0x28
 800963c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a60      	ldr	r2, [pc, #384]	@ (80097c4 <I2C_ITError+0x1d8>)
 8009644:	635a      	str	r2, [r3, #52]	@ 0x34
 8009646:	e030      	b.n	80096aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009648:	f248 0103 	movw	r1, #32771	@ 0x8003
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa89 	bl	8009b64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8e1 	bl	800981a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b60      	cmp	r3, #96	@ 0x60
 8009662:	d01f      	beq.n	80096a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b20      	cmp	r3, #32
 8009678:	d114      	bne.n	80096a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b10      	cmp	r3, #16
 8009686:	d109      	bne.n	800969c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2210      	movs	r2, #16
 800968e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009694:	f043 0204 	orr.w	r2, r3, #4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2220      	movs	r2, #32
 80096a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d039      	beq.n	800972c <I2C_ITError+0x140>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b11      	cmp	r3, #17
 80096bc:	d002      	beq.n	80096c4 <I2C_ITError+0xd8>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b21      	cmp	r3, #33	@ 0x21
 80096c2:	d133      	bne.n	800972c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d2:	d107      	bne.n	80096e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fa82 	bl	8006bf2 <HAL_DMA_GetState>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d017      	beq.n	8009724 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f8:	4a33      	ldr	r2, [pc, #204]	@ (80097c8 <I2C_ITError+0x1dc>)
 80096fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009708:	4618      	mov	r0, r3
 800970a:	f7fd f95c 	bl	80069c6 <HAL_DMA_Abort_IT>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d04d      	beq.n	80097b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800971e:	4610      	mov	r0, r2
 8009720:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009722:	e045      	b.n	80097b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f851 	bl	80097cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800972a:	e041      	b.n	80097b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d039      	beq.n	80097a8 <I2C_ITError+0x1bc>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b12      	cmp	r3, #18
 8009738:	d002      	beq.n	8009740 <I2C_ITError+0x154>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b22      	cmp	r3, #34	@ 0x22
 800973e:	d133      	bne.n	80097a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800974a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974e:	d107      	bne.n	8009760 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800975e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009764:	4618      	mov	r0, r3
 8009766:	f7fd fa44 	bl	8006bf2 <HAL_DMA_GetState>
 800976a:	4603      	mov	r3, r0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d017      	beq.n	80097a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009774:	4a14      	ldr	r2, [pc, #80]	@ (80097c8 <I2C_ITError+0x1dc>)
 8009776:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd f91e 	bl	80069c6 <HAL_DMA_Abort_IT>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d011      	beq.n	80097b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800979a:	4610      	mov	r0, r2
 800979c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800979e:	e009      	b.n	80097b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f813 	bl	80097cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097a6:	e005      	b.n	80097b4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f80f 	bl	80097cc <I2C_TreatErrorCallback>
  }
}
 80097ae:	e002      	b.n	80097b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097b0:	bf00      	nop
 80097b2:	e000      	b.n	80097b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b4:	bf00      	nop
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	ffff0000 	.word	0xffff0000
 80097c4:	080086f1 	.word	0x080086f1
 80097c8:	080099bd 	.word	0x080099bd

080097cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b60      	cmp	r3, #96	@ 0x60
 80097de:	d10e      	bne.n	80097fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7fe fe49 	bl	800848e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097fc:	e009      	b.n	8009812 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7fe fe34 	bl	800847a <HAL_I2C_ErrorCallback>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d103      	bne.n	8009838 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2200      	movs	r2, #0
 8009836:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	d007      	beq.n	8009856 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0201 	orr.w	r2, r2, #1
 8009854:	619a      	str	r2, [r3, #24]
  }
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800987e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800988a:	2120      	movs	r1, #32
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 f8e5 	bl	8009a5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009892:	e02d      	b.n	80098f0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2bff      	cmp	r3, #255	@ 0xff
 80098aa:	d903      	bls.n	80098b4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	22ff      	movs	r2, #255	@ 0xff
 80098b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80098b2:	e004      	b.n	80098be <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c6:	4619      	mov	r1, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3328      	adds	r3, #40	@ 0x28
 80098ce:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098d4:	f7fc fffc 	bl	80068d0 <HAL_DMA_Start_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098de:	2110      	movs	r1, #16
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fe83 	bl	80095ec <I2C_ITError>
}
 80098e6:	e003      	b.n	80098f0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80098e8:	2140      	movs	r1, #64	@ 0x40
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f8b6 	bl	8009a5c <I2C_Enable_IRQ>
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009904:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009914:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800991a:	b29b      	uxth	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d104      	bne.n	800992a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009920:	2120      	movs	r1, #32
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f89a 	bl	8009a5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009928:	e02d      	b.n	8009986 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009932:	441a      	add	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2bff      	cmp	r3, #255	@ 0xff
 8009940:	d903      	bls.n	800994a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	22ff      	movs	r2, #255	@ 0xff
 8009946:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009948:	e004      	b.n	8009954 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3324      	adds	r3, #36	@ 0x24
 800995e:	4619      	mov	r1, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009964:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800996a:	f7fc ffb1 	bl	80068d0 <HAL_DMA_Start_IT>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009974:	2110      	movs	r1, #16
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff fe38 	bl	80095ec <I2C_ITError>
}
 800997c:	e003      	b.n	8009986 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800997e:	2140      	movs	r1, #64	@ 0x40
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f86b 	bl	8009a5c <I2C_Enable_IRQ>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099aa:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80099ac:	2110      	movs	r1, #16
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7ff fe1c 	bl	80095ec <I2C_ITError>
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d6:	2200      	movs	r2, #0
 80099d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e6:	2200      	movs	r2, #0
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7ff feee 	bl	80097cc <I2C_TreatErrorCallback>
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	817b      	strh	r3, [r7, #10]
 8009a06:	4613      	mov	r3, r2
 8009a08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a0a:	897b      	ldrh	r3, [r7, #10]
 8009a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a10:	7a7b      	ldrb	r3, [r7, #9]
 8009a12:	041b      	lsls	r3, r3, #16
 8009a14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	0d5b      	lsrs	r3, r3, #21
 8009a32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009a36:	4b08      	ldr	r3, [pc, #32]	@ (8009a58 <I2C_TransferConfig+0x60>)
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	43db      	mvns	r3, r3
 8009a3c:	ea02 0103 	and.w	r1, r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	03ff63ff 	.word	0x03ff63ff

08009a5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a70:	4a39      	ldr	r2, [pc, #228]	@ (8009b58 <I2C_Enable_IRQ+0xfc>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d032      	beq.n	8009adc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009a7a:	4a38      	ldr	r2, [pc, #224]	@ (8009b5c <I2C_Enable_IRQ+0x100>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d02d      	beq.n	8009adc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009a84:	4a36      	ldr	r2, [pc, #216]	@ (8009b60 <I2C_Enable_IRQ+0x104>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d028      	beq.n	8009adc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da03      	bge.n	8009a9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009a98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009aaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009aac:	887b      	ldrh	r3, [r7, #2]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009abc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009abe:	887b      	ldrh	r3, [r7, #2]
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	d103      	bne.n	8009acc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009aca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009acc:	887b      	ldrh	r3, [r7, #2]
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d133      	bne.n	8009b3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ada:	e02e      	b.n	8009b3a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da03      	bge.n	8009aec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009aea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009aec:	887b      	ldrh	r3, [r7, #2]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009afc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009afe:	887b      	ldrh	r3, [r7, #2]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009b0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009b10:	887b      	ldrh	r3, [r7, #2]
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d103      	bne.n	8009b1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009b1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d103      	bne.n	8009b2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009b2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009b2c:	887b      	ldrh	r3, [r7, #2]
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	d103      	bne.n	8009b3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	601a      	str	r2, [r3, #0]
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	080088e3 	.word	0x080088e3
 8009b5c:	08008d05 	.word	0x08008d05
 8009b60:	08008ab9 	.word	0x08008ab9

08009b64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009b74:	887b      	ldrh	r3, [r7, #2]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00f      	beq.n	8009b9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009b84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009b92:	2b28      	cmp	r3, #40	@ 0x28
 8009b94:	d003      	beq.n	8009b9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009b9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009b9e:	887b      	ldrh	r3, [r7, #2]
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00f      	beq.n	8009bc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009bae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009bbc:	2b28      	cmp	r3, #40	@ 0x28
 8009bbe:	d003      	beq.n	8009bc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009bc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009bc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da03      	bge.n	8009bd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009bd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009bd8:	887b      	ldrh	r3, [r7, #2]
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d103      	bne.n	8009be6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009be4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d103      	bne.n	8009bf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f043 0320 	orr.w	r3, r3, #32
 8009bf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009bf4:	887b      	ldrh	r3, [r7, #2]
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d103      	bne.n	8009c02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6819      	ldr	r1, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	43da      	mvns	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	400a      	ands	r2, r1
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d138      	bne.n	8009ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e032      	b.n	8009caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	@ 0x24
 8009c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0201 	bic.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6819      	ldr	r1, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e000      	b.n	8009caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d139      	bne.n	8009d40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e033      	b.n	8009d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2224      	movs	r2, #36	@ 0x24
 8009ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e000      	b.n	8009d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
  }
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
	...

08009d50 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d58:	4b0b      	ldr	r3, [pc, #44]	@ (8009d88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	6613      	str	r3, [r2, #96]	@ 0x60
 8009d64:	4b08      	ldr	r3, [pc, #32]	@ (8009d88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009d70:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	4905      	ldr	r1, [pc, #20]	@ (8009d8c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	604b      	str	r3, [r1, #4]
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	40010000 	.word	0x40010000

08009d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d141      	bne.n	8009e22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009daa:	d131      	bne.n	8009e10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009dac:	4b47      	ldr	r3, [pc, #284]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db2:	4a46      	ldr	r2, [pc, #280]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009dbc:	4b43      	ldr	r3, [pc, #268]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009dc4:	4a41      	ldr	r2, [pc, #260]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009dca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009dcc:	4b40      	ldr	r3, [pc, #256]	@ (8009ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2232      	movs	r2, #50	@ 0x32
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8009ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	0c9b      	lsrs	r3, r3, #18
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009de2:	e002      	b.n	8009dea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009dea:	4b38      	ldr	r3, [pc, #224]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009df6:	d102      	bne.n	8009dfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f2      	bne.n	8009de4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009dfe:	4b33      	ldr	r3, [pc, #204]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e0a:	d158      	bne.n	8009ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e057      	b.n	8009ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e10:	4b2e      	ldr	r3, [pc, #184]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e16:	4a2d      	ldr	r2, [pc, #180]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009e20:	e04d      	b.n	8009ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e28:	d141      	bne.n	8009eae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e2a:	4b28      	ldr	r3, [pc, #160]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e36:	d131      	bne.n	8009e9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e38:	4b24      	ldr	r3, [pc, #144]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	4a23      	ldr	r2, [pc, #140]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e48:	4b20      	ldr	r3, [pc, #128]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009e50:	4a1e      	ldr	r2, [pc, #120]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009e58:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2232      	movs	r2, #50	@ 0x32
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
 8009e62:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e64:	fba2 2303 	umull	r2, r3, r2, r3
 8009e68:	0c9b      	lsrs	r3, r3, #18
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e6e:	e002      	b.n	8009e76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e76:	4b15      	ldr	r3, [pc, #84]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e82:	d102      	bne.n	8009e8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1f2      	bne.n	8009e70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e8a:	4b10      	ldr	r3, [pc, #64]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e96:	d112      	bne.n	8009ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e011      	b.n	8009ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009eac:	e007      	b.n	8009ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009eae:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009eb6:	4a05      	ldr	r2, [pc, #20]	@ (8009ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ebc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	40007000 	.word	0x40007000
 8009ed0:	20000008 	.word	0x20000008
 8009ed4:	431bde83 	.word	0x431bde83

08009ed8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009edc:	4b05      	ldr	r3, [pc, #20]	@ (8009ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	4a04      	ldr	r2, [pc, #16]	@ (8009ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ee6:	6093      	str	r3, [r2, #8]
}
 8009ee8:	bf00      	nop
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40007000 	.word	0x40007000

08009ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e2fe      	b.n	800a508 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d075      	beq.n	800a002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f16:	4b97      	ldr	r3, [pc, #604]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 030c 	and.w	r3, r3, #12
 8009f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f20:	4b94      	ldr	r3, [pc, #592]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d102      	bne.n	8009f36 <HAL_RCC_OscConfig+0x3e>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d002      	beq.n	8009f3c <HAL_RCC_OscConfig+0x44>
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d10b      	bne.n	8009f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f3c:	4b8d      	ldr	r3, [pc, #564]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d05b      	beq.n	800a000 <HAL_RCC_OscConfig+0x108>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d157      	bne.n	800a000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e2d9      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f5c:	d106      	bne.n	8009f6c <HAL_RCC_OscConfig+0x74>
 8009f5e:	4b85      	ldr	r3, [pc, #532]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a84      	ldr	r2, [pc, #528]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	e01d      	b.n	8009fa8 <HAL_RCC_OscConfig+0xb0>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f74:	d10c      	bne.n	8009f90 <HAL_RCC_OscConfig+0x98>
 8009f76:	4b7f      	ldr	r3, [pc, #508]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a7e      	ldr	r2, [pc, #504]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	4b7c      	ldr	r3, [pc, #496]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a7b      	ldr	r2, [pc, #492]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	e00b      	b.n	8009fa8 <HAL_RCC_OscConfig+0xb0>
 8009f90:	4b78      	ldr	r3, [pc, #480]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a77      	ldr	r2, [pc, #476]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	4b75      	ldr	r3, [pc, #468]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a74      	ldr	r2, [pc, #464]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d013      	beq.n	8009fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb0:	f7fa f9e2 	bl	8004378 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fb8:	f7fa f9de 	bl	8004378 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b64      	cmp	r3, #100	@ 0x64
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e29e      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fca:	4b6a      	ldr	r3, [pc, #424]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0f0      	beq.n	8009fb8 <HAL_RCC_OscConfig+0xc0>
 8009fd6:	e014      	b.n	800a002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd8:	f7fa f9ce 	bl	8004378 <HAL_GetTick>
 8009fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009fde:	e008      	b.n	8009ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fe0:	f7fa f9ca 	bl	8004378 <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b64      	cmp	r3, #100	@ 0x64
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e28a      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ff2:	4b60      	ldr	r3, [pc, #384]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f0      	bne.n	8009fe0 <HAL_RCC_OscConfig+0xe8>
 8009ffe:	e000      	b.n	800a002 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d075      	beq.n	800a0fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a00e:	4b59      	ldr	r3, [pc, #356]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 030c 	and.w	r3, r3, #12
 800a016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a018:	4b56      	ldr	r3, [pc, #344]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b0c      	cmp	r3, #12
 800a026:	d102      	bne.n	800a02e <HAL_RCC_OscConfig+0x136>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d002      	beq.n	800a034 <HAL_RCC_OscConfig+0x13c>
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b04      	cmp	r3, #4
 800a032:	d11f      	bne.n	800a074 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a034:	4b4f      	ldr	r3, [pc, #316]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <HAL_RCC_OscConfig+0x154>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e25d      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a04c:	4b49      	ldr	r3, [pc, #292]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	061b      	lsls	r3, r3, #24
 800a05a:	4946      	ldr	r1, [pc, #280]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a060:	4b45      	ldr	r3, [pc, #276]	@ (800a178 <HAL_RCC_OscConfig+0x280>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f7fa f93b 	bl	80042e0 <HAL_InitTick>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d043      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e249      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d023      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a07c:	4b3d      	ldr	r3, [pc, #244]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a3c      	ldr	r2, [pc, #240]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a088:	f7fa f976 	bl	8004378 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a090:	f7fa f972 	bl	8004378 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e232      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0a2:	4b34      	ldr	r3, [pc, #208]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0ae:	4b31      	ldr	r3, [pc, #196]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	061b      	lsls	r3, r3, #24
 800a0bc:	492d      	ldr	r1, [pc, #180]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	604b      	str	r3, [r1, #4]
 800a0c2:	e01a      	b.n	800a0fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d0:	f7fa f952 	bl	8004378 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0d8:	f7fa f94e 	bl	8004378 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e20e      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0ea:	4b22      	ldr	r3, [pc, #136]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x1e0>
 800a0f6:	e000      	b.n	800a0fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d041      	beq.n	800a18a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d01c      	beq.n	800a148 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a10e:	4b19      	ldr	r3, [pc, #100]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a114:	4a17      	ldr	r2, [pc, #92]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11e:	f7fa f92b 	bl	8004378 <HAL_GetTick>
 800a122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a124:	e008      	b.n	800a138 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a126:	f7fa f927 	bl	8004378 <HAL_GetTick>
 800a12a:	4602      	mov	r2, r0
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	2b02      	cmp	r3, #2
 800a132:	d901      	bls.n	800a138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e1e7      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a138:	4b0e      	ldr	r3, [pc, #56]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0ef      	beq.n	800a126 <HAL_RCC_OscConfig+0x22e>
 800a146:	e020      	b.n	800a18a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a148:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a14e:	4a09      	ldr	r2, [pc, #36]	@ (800a174 <HAL_RCC_OscConfig+0x27c>)
 800a150:	f023 0301 	bic.w	r3, r3, #1
 800a154:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a158:	f7fa f90e 	bl	8004378 <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a15e:	e00d      	b.n	800a17c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a160:	f7fa f90a 	bl	8004378 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d906      	bls.n	800a17c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e1ca      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
 800a172:	bf00      	nop
 800a174:	40021000 	.word	0x40021000
 800a178:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a17c:	4b8c      	ldr	r3, [pc, #560]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1ea      	bne.n	800a160 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80a6 	beq.w	800a2e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a198:	2300      	movs	r3, #0
 800a19a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a19c:	4b84      	ldr	r3, [pc, #528]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_RCC_OscConfig+0x2b4>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <HAL_RCC_OscConfig+0x2b6>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1b2:	4b7f      	ldr	r3, [pc, #508]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b6:	4a7e      	ldr	r2, [pc, #504]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a1b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1be:	4b7c      	ldr	r3, [pc, #496]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ce:	4b79      	ldr	r3, [pc, #484]	@ (800a3b4 <HAL_RCC_OscConfig+0x4bc>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d118      	bne.n	800a20c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1da:	4b76      	ldr	r3, [pc, #472]	@ (800a3b4 <HAL_RCC_OscConfig+0x4bc>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a75      	ldr	r2, [pc, #468]	@ (800a3b4 <HAL_RCC_OscConfig+0x4bc>)
 800a1e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1e6:	f7fa f8c7 	bl	8004378 <HAL_GetTick>
 800a1ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ec:	e008      	b.n	800a200 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1ee:	f7fa f8c3 	bl	8004378 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e183      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a200:	4b6c      	ldr	r3, [pc, #432]	@ (800a3b4 <HAL_RCC_OscConfig+0x4bc>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f0      	beq.n	800a1ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d108      	bne.n	800a226 <HAL_RCC_OscConfig+0x32e>
 800a214:	4b66      	ldr	r3, [pc, #408]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21a:	4a65      	ldr	r2, [pc, #404]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a224:	e024      	b.n	800a270 <HAL_RCC_OscConfig+0x378>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d110      	bne.n	800a250 <HAL_RCC_OscConfig+0x358>
 800a22e:	4b60      	ldr	r3, [pc, #384]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a234:	4a5e      	ldr	r2, [pc, #376]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a236:	f043 0304 	orr.w	r3, r3, #4
 800a23a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a23e:	4b5c      	ldr	r3, [pc, #368]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a244:	4a5a      	ldr	r2, [pc, #360]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a24e:	e00f      	b.n	800a270 <HAL_RCC_OscConfig+0x378>
 800a250:	4b57      	ldr	r3, [pc, #348]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a256:	4a56      	ldr	r2, [pc, #344]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a260:	4b53      	ldr	r3, [pc, #332]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a266:	4a52      	ldr	r2, [pc, #328]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a268:	f023 0304 	bic.w	r3, r3, #4
 800a26c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d016      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a278:	f7fa f87e 	bl	8004378 <HAL_GetTick>
 800a27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a27e:	e00a      	b.n	800a296 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a280:	f7fa f87a 	bl	8004378 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a28e:	4293      	cmp	r3, r2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e138      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a296:	4b46      	ldr	r3, [pc, #280]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a29c:	f003 0302 	and.w	r3, r3, #2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0ed      	beq.n	800a280 <HAL_RCC_OscConfig+0x388>
 800a2a4:	e015      	b.n	800a2d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2a6:	f7fa f867 	bl	8004378 <HAL_GetTick>
 800a2aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2ac:	e00a      	b.n	800a2c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ae:	f7fa f863 	bl	8004378 <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d901      	bls.n	800a2c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e121      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1ed      	bne.n	800a2ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2d2:	7ffb      	ldrb	r3, [r7, #31]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d105      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2d8:	4b35      	ldr	r3, [pc, #212]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a2da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2dc:	4a34      	ldr	r2, [pc, #208]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a2de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d03c      	beq.n	800a36a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01c      	beq.n	800a332 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2f8:	4b2d      	ldr	r3, [pc, #180]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a2fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a308:	f7fa f836 	bl	8004378 <HAL_GetTick>
 800a30c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a310:	f7fa f832 	bl	8004378 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e0f2      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a322:	4b23      	ldr	r3, [pc, #140]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0ef      	beq.n	800a310 <HAL_RCC_OscConfig+0x418>
 800a330:	e01b      	b.n	800a36a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a332:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a338:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a342:	f7fa f819 	bl	8004378 <HAL_GetTick>
 800a346:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a348:	e008      	b.n	800a35c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a34a:	f7fa f815 	bl	8004378 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b02      	cmp	r3, #2
 800a356:	d901      	bls.n	800a35c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e0d5      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a35c:	4b14      	ldr	r3, [pc, #80]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a35e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1ef      	bne.n	800a34a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 80c9 	beq.w	800a506 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a374:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f003 030c 	and.w	r3, r3, #12
 800a37c:	2b0c      	cmp	r3, #12
 800a37e:	f000 8083 	beq.w	800a488 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d15e      	bne.n	800a448 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a38a:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a08      	ldr	r2, [pc, #32]	@ (800a3b0 <HAL_RCC_OscConfig+0x4b8>)
 800a390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a396:	f7f9 ffef 	bl	8004378 <HAL_GetTick>
 800a39a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a39c:	e00c      	b.n	800a3b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a39e:	f7f9 ffeb 	bl	8004378 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d905      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e0ab      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
 800a3b0:	40021000 	.word	0x40021000
 800a3b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3b8:	4b55      	ldr	r3, [pc, #340]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1ec      	bne.n	800a39e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3c4:	4b52      	ldr	r3, [pc, #328]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	4b52      	ldr	r3, [pc, #328]	@ (800a514 <HAL_RCC_OscConfig+0x61c>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6a11      	ldr	r1, [r2, #32]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a3d4:	3a01      	subs	r2, #1
 800a3d6:	0112      	lsls	r2, r2, #4
 800a3d8:	4311      	orrs	r1, r2
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a3de:	0212      	lsls	r2, r2, #8
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a3e6:	0852      	lsrs	r2, r2, #1
 800a3e8:	3a01      	subs	r2, #1
 800a3ea:	0552      	lsls	r2, r2, #21
 800a3ec:	4311      	orrs	r1, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a3f2:	0852      	lsrs	r2, r2, #1
 800a3f4:	3a01      	subs	r2, #1
 800a3f6:	0652      	lsls	r2, r2, #25
 800a3f8:	4311      	orrs	r1, r2
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a3fe:	06d2      	lsls	r2, r2, #27
 800a400:	430a      	orrs	r2, r1
 800a402:	4943      	ldr	r1, [pc, #268]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a404:	4313      	orrs	r3, r2
 800a406:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a408:	4b41      	ldr	r3, [pc, #260]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a40      	ldr	r2, [pc, #256]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a40e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a412:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a414:	4b3e      	ldr	r3, [pc, #248]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	4a3d      	ldr	r2, [pc, #244]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a41a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a41e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a420:	f7f9 ffaa 	bl	8004378 <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a426:	e008      	b.n	800a43a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a428:	f7f9 ffa6 	bl	8004378 <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b02      	cmp	r3, #2
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e066      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a43a:	4b35      	ldr	r3, [pc, #212]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0f0      	beq.n	800a428 <HAL_RCC_OscConfig+0x530>
 800a446:	e05e      	b.n	800a506 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a448:	4b31      	ldr	r3, [pc, #196]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a30      	ldr	r2, [pc, #192]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a44e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a454:	f7f9 ff90 	bl	8004378 <HAL_GetTick>
 800a458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a45a:	e008      	b.n	800a46e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a45c:	f7f9 ff8c 	bl	8004378 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d901      	bls.n	800a46e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e04c      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a46e:	4b28      	ldr	r3, [pc, #160]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f0      	bne.n	800a45c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a47a:	4b25      	ldr	r3, [pc, #148]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	4924      	ldr	r1, [pc, #144]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a480:	4b25      	ldr	r3, [pc, #148]	@ (800a518 <HAL_RCC_OscConfig+0x620>)
 800a482:	4013      	ands	r3, r2
 800a484:	60cb      	str	r3, [r1, #12]
 800a486:	e03e      	b.n	800a506 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e039      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a494:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <HAL_RCC_OscConfig+0x618>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 0203 	and.w	r2, r3, #3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d12c      	bne.n	800a502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d123      	bne.n	800a502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d11b      	bne.n	800a502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d113      	bne.n	800a502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d109      	bne.n	800a502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	085b      	lsrs	r3, r3, #1
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d001      	beq.n	800a506 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3720      	adds	r7, #32
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40021000 	.word	0x40021000
 800a514:	019f800c 	.word	0x019f800c
 800a518:	feeefffc 	.word	0xfeeefffc

0800a51c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a526:	2300      	movs	r3, #0
 800a528:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e11e      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a534:	4b91      	ldr	r3, [pc, #580]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d910      	bls.n	800a564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a542:	4b8e      	ldr	r3, [pc, #568]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f023 020f 	bic.w	r2, r3, #15
 800a54a:	498c      	ldr	r1, [pc, #560]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	4313      	orrs	r3, r2
 800a550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a552:	4b8a      	ldr	r3, [pc, #552]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 030f 	and.w	r3, r3, #15
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d001      	beq.n	800a564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e106      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d073      	beq.n	800a658 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d129      	bne.n	800a5cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a578:	4b81      	ldr	r3, [pc, #516]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0f4      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a588:	f000 f966 	bl	800a858 <RCC_GetSysClockFreqFromPLLSource>
 800a58c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	4a7c      	ldr	r2, [pc, #496]	@ (800a784 <HAL_RCC_ClockConfig+0x268>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d93f      	bls.n	800a616 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a596:	4b7a      	ldr	r3, [pc, #488]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d033      	beq.n	800a616 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d12f      	bne.n	800a616 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a5b6:	4b72      	ldr	r3, [pc, #456]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5be:	4a70      	ldr	r2, [pc, #448]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a5c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a5c6:	2380      	movs	r3, #128	@ 0x80
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e024      	b.n	800a616 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d107      	bne.n	800a5e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5d4:	4b6a      	ldr	r3, [pc, #424]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e0c6      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5e4:	4b66      	ldr	r3, [pc, #408]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0be      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a5f4:	f000 f8ce 	bl	800a794 <HAL_RCC_GetSysClockFreq>
 800a5f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	4a61      	ldr	r2, [pc, #388]	@ (800a784 <HAL_RCC_ClockConfig+0x268>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d909      	bls.n	800a616 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a602:	4b5f      	ldr	r3, [pc, #380]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a60a:	4a5d      	ldr	r2, [pc, #372]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a60c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a610:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a612:	2380      	movs	r3, #128	@ 0x80
 800a614:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a616:	4b5a      	ldr	r3, [pc, #360]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f023 0203 	bic.w	r2, r3, #3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4957      	ldr	r1, [pc, #348]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a624:	4313      	orrs	r3, r2
 800a626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a628:	f7f9 fea6 	bl	8004378 <HAL_GetTick>
 800a62c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a62e:	e00a      	b.n	800a646 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a630:	f7f9 fea2 	bl	8004378 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a63e:	4293      	cmp	r3, r2
 800a640:	d901      	bls.n	800a646 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e095      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a646:	4b4e      	ldr	r3, [pc, #312]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f003 020c 	and.w	r2, r3, #12
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	429a      	cmp	r2, r3
 800a656:	d1eb      	bne.n	800a630 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d023      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a670:	4b43      	ldr	r3, [pc, #268]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	4a42      	ldr	r2, [pc, #264]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a676:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a67a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a688:	4b3d      	ldr	r3, [pc, #244]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a690:	4a3b      	ldr	r2, [pc, #236]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a698:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	4936      	ldr	r1, [pc, #216]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	608b      	str	r3, [r1, #8]
 800a6aa:	e008      	b.n	800a6be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b80      	cmp	r3, #128	@ 0x80
 800a6b0:	d105      	bne.n	800a6be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a6b2:	4b33      	ldr	r3, [pc, #204]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	4a32      	ldr	r2, [pc, #200]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a6b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6be:	4b2f      	ldr	r3, [pc, #188]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d21d      	bcs.n	800a708 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f023 020f 	bic.w	r2, r3, #15
 800a6d4:	4929      	ldr	r1, [pc, #164]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a6dc:	f7f9 fe4c 	bl	8004378 <HAL_GetTick>
 800a6e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e2:	e00a      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e4:	f7f9 fe48 	bl	8004378 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e03b      	b.n	800a772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fa:	4b20      	ldr	r3, [pc, #128]	@ (800a77c <HAL_RCC_ClockConfig+0x260>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d1ed      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a714:	4b1a      	ldr	r3, [pc, #104]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	4917      	ldr	r1, [pc, #92]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a722:	4313      	orrs	r3, r2
 800a724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a732:	4b13      	ldr	r3, [pc, #76]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	490f      	ldr	r1, [pc, #60]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a742:	4313      	orrs	r3, r2
 800a744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a746:	f000 f825 	bl	800a794 <HAL_RCC_GetSysClockFreq>
 800a74a:	4602      	mov	r2, r0
 800a74c:	4b0c      	ldr	r3, [pc, #48]	@ (800a780 <HAL_RCC_ClockConfig+0x264>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	091b      	lsrs	r3, r3, #4
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	490c      	ldr	r1, [pc, #48]	@ (800a788 <HAL_RCC_ClockConfig+0x26c>)
 800a758:	5ccb      	ldrb	r3, [r1, r3]
 800a75a:	f003 031f 	and.w	r3, r3, #31
 800a75e:	fa22 f303 	lsr.w	r3, r2, r3
 800a762:	4a0a      	ldr	r2, [pc, #40]	@ (800a78c <HAL_RCC_ClockConfig+0x270>)
 800a764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a766:	4b0a      	ldr	r3, [pc, #40]	@ (800a790 <HAL_RCC_ClockConfig+0x274>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f9 fdb8 	bl	80042e0 <HAL_InitTick>
 800a770:	4603      	mov	r3, r0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	40022000 	.word	0x40022000
 800a780:	40021000 	.word	0x40021000
 800a784:	04c4b400 	.word	0x04c4b400
 800a788:	0800c250 	.word	0x0800c250
 800a78c:	20000008 	.word	0x20000008
 800a790:	20000010 	.word	0x20000010

0800a794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a79a:	4b2c      	ldr	r3, [pc, #176]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 030c 	and.w	r3, r3, #12
 800a7a2:	2b04      	cmp	r3, #4
 800a7a4:	d102      	bne.n	800a7ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a850 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e047      	b.n	800a83c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a7ac:	4b27      	ldr	r3, [pc, #156]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f003 030c 	and.w	r3, r3, #12
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d102      	bne.n	800a7be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7b8:	4b26      	ldr	r3, [pc, #152]	@ (800a854 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	e03e      	b.n	800a83c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a7be:	4b23      	ldr	r3, [pc, #140]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	2b0c      	cmp	r3, #12
 800a7c8:	d136      	bne.n	800a838 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7ca:	4b20      	ldr	r3, [pc, #128]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	091b      	lsrs	r3, r3, #4
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	3301      	adds	r3, #1
 800a7e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d10c      	bne.n	800a802 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a854 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f0:	4a16      	ldr	r2, [pc, #88]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7f2:	68d2      	ldr	r2, [r2, #12]
 800a7f4:	0a12      	lsrs	r2, r2, #8
 800a7f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	617b      	str	r3, [r7, #20]
      break;
 800a800:	e00c      	b.n	800a81c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a802:	4a13      	ldr	r2, [pc, #76]	@ (800a850 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80a:	4a10      	ldr	r2, [pc, #64]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a80c:	68d2      	ldr	r2, [r2, #12]
 800a80e:	0a12      	lsrs	r2, r2, #8
 800a810:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	617b      	str	r3, [r7, #20]
      break;
 800a81a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a81c:	4b0b      	ldr	r3, [pc, #44]	@ (800a84c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	0e5b      	lsrs	r3, r3, #25
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	3301      	adds	r3, #1
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	fbb2 f3f3 	udiv	r3, r2, r3
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	e001      	b.n	800a83c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a83c:	693b      	ldr	r3, [r7, #16]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	371c      	adds	r7, #28
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40021000 	.word	0x40021000
 800a850:	00f42400 	.word	0x00f42400
 800a854:	016e3600 	.word	0x016e3600

0800a858 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a85e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a868:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	091b      	lsrs	r3, r3, #4
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d10c      	bne.n	800a896 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a87c:	4a17      	ldr	r2, [pc, #92]	@ (800a8dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	fbb2 f3f3 	udiv	r3, r2, r3
 800a884:	4a14      	ldr	r2, [pc, #80]	@ (800a8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a886:	68d2      	ldr	r2, [r2, #12]
 800a888:	0a12      	lsrs	r2, r2, #8
 800a88a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
 800a892:	617b      	str	r3, [r7, #20]
    break;
 800a894:	e00c      	b.n	800a8b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a896:	4a12      	ldr	r2, [pc, #72]	@ (800a8e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89e:	4a0e      	ldr	r2, [pc, #56]	@ (800a8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8a0:	68d2      	ldr	r2, [r2, #12]
 800a8a2:	0a12      	lsrs	r2, r2, #8
 800a8a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ac:	617b      	str	r3, [r7, #20]
    break;
 800a8ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a8b0:	4b09      	ldr	r3, [pc, #36]	@ (800a8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	0e5b      	lsrs	r3, r3, #25
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a8ca:	687b      	ldr	r3, [r7, #4]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	40021000 	.word	0x40021000
 800a8dc:	016e3600 	.word	0x016e3600
 800a8e0:	00f42400 	.word	0x00f42400

0800a8e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8098 	beq.w	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a902:	2300      	movs	r3, #0
 800a904:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a906:	4b43      	ldr	r3, [pc, #268]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a90a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10d      	bne.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a912:	4b40      	ldr	r3, [pc, #256]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a916:	4a3f      	ldr	r2, [pc, #252]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a91c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a91e:	4b3d      	ldr	r3, [pc, #244]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a926:	60bb      	str	r3, [r7, #8]
 800a928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a92a:	2301      	movs	r3, #1
 800a92c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a92e:	4b3a      	ldr	r3, [pc, #232]	@ (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a39      	ldr	r2, [pc, #228]	@ (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a93a:	f7f9 fd1d 	bl	8004378 <HAL_GetTick>
 800a93e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a940:	e009      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a942:	f7f9 fd19 	bl	8004378 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d902      	bls.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	74fb      	strb	r3, [r7, #19]
        break;
 800a954:	e005      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a956:	4b30      	ldr	r3, [pc, #192]	@ (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0ef      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a962:	7cfb      	ldrb	r3, [r7, #19]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d159      	bne.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a968:	4b2a      	ldr	r3, [pc, #168]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a96e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a972:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d01e      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	429a      	cmp	r2, r3
 800a982:	d019      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a984:	4b23      	ldr	r3, [pc, #140]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a98e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a990:	4b20      	ldr	r3, [pc, #128]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a996:	4a1f      	ldr	r2, [pc, #124]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a99c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9a6:	4a1b      	ldr	r2, [pc, #108]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9b0:	4a18      	ldr	r2, [pc, #96]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d016      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c2:	f7f9 fcd9 	bl	8004378 <HAL_GetTick>
 800a9c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9c8:	e00b      	b.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9ca:	f7f9 fcd5 	bl	8004378 <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d902      	bls.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	74fb      	strb	r3, [r7, #19]
            break;
 800a9e0:	e006      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9e8:	f003 0302 	and.w	r3, r3, #2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0ec      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a9f0:	7cfb      	ldrb	r3, [r7, #19]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10b      	bne.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9f6:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa04:	4903      	ldr	r1, [pc, #12]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800aa0c:	e008      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa0e:	7cfb      	ldrb	r3, [r7, #19]
 800aa10:	74bb      	strb	r3, [r7, #18]
 800aa12:	e005      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800aa14:	40021000 	.word	0x40021000
 800aa18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1c:	7cfb      	ldrb	r3, [r7, #19]
 800aa1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa20:	7c7b      	ldrb	r3, [r7, #17]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d105      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa26:	4ba7      	ldr	r3, [pc, #668]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2a:	4aa6      	ldr	r2, [pc, #664]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa3e:	4ba1      	ldr	r3, [pc, #644]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa44:	f023 0203 	bic.w	r2, r3, #3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	499d      	ldr	r1, [pc, #628]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa60:	4b98      	ldr	r3, [pc, #608]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa66:	f023 020c 	bic.w	r2, r3, #12
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	4995      	ldr	r1, [pc, #596]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0304 	and.w	r3, r3, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aa82:	4b90      	ldr	r3, [pc, #576]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	498c      	ldr	r1, [pc, #560]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0308 	and.w	r3, r3, #8
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00a      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aaa4:	4b87      	ldr	r3, [pc, #540]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	4984      	ldr	r1, [pc, #528]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0310 	and.w	r3, r3, #16
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00a      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aac6:	4b7f      	ldr	r3, [pc, #508]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aacc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	497b      	ldr	r1, [pc, #492]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00a      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aae8:	4b76      	ldr	r3, [pc, #472]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	4973      	ldr	r1, [pc, #460]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab0a:	4b6e      	ldr	r3, [pc, #440]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	496a      	ldr	r1, [pc, #424]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00a      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab2c:	4b65      	ldr	r3, [pc, #404]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	4962      	ldr	r1, [pc, #392]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab4e:	4b5d      	ldr	r3, [pc, #372]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5c:	4959      	ldr	r1, [pc, #356]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab70:	4b54      	ldr	r3, [pc, #336]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab76:	f023 0203 	bic.w	r2, r3, #3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7e:	4951      	ldr	r1, [pc, #324]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab92:	4b4c      	ldr	r3, [pc, #304]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba0:	4948      	ldr	r1, [pc, #288]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d015      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800abb4:	4b43      	ldr	r3, [pc, #268]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	4940      	ldr	r1, [pc, #256]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abd2:	d105      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abd4:	4b3b      	ldr	r3, [pc, #236]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	4a3a      	ldr	r2, [pc, #232]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abde:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d015      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800abec:	4b35      	ldr	r3, [pc, #212]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfa:	4932      	ldr	r1, [pc, #200]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac0a:	d105      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac0c:	4b2d      	ldr	r3, [pc, #180]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	4a2c      	ldr	r2, [pc, #176]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac16:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d015      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac24:	4b27      	ldr	r3, [pc, #156]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac32:	4924      	ldr	r1, [pc, #144]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac34:	4313      	orrs	r3, r2
 800ac36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac42:	d105      	bne.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac44:	4b1f      	ldr	r3, [pc, #124]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	4a1e      	ldr	r2, [pc, #120]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d015      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac5c:	4b19      	ldr	r3, [pc, #100]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6a:	4916      	ldr	r1, [pc, #88]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac7a:	d105      	bne.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac7c:	4b11      	ldr	r3, [pc, #68]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	4a10      	ldr	r2, [pc, #64]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d019      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac94:	4b0b      	ldr	r3, [pc, #44]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	4908      	ldr	r1, [pc, #32]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acb2:	d109      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acb4:	4b03      	ldr	r3, [pc, #12]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a02      	ldr	r2, [pc, #8]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acbe:	60d3      	str	r3, [r2, #12]
 800acc0:	e002      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800acc2:	bf00      	nop
 800acc4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d015      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800acd4:	4b29      	ldr	r3, [pc, #164]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace2:	4926      	ldr	r1, [pc, #152]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acf2:	d105      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800acf4:	4b21      	ldr	r3, [pc, #132]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4a20      	ldr	r2, [pc, #128]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800acfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acfe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d015      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ad0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad1a:	4918      	ldr	r1, [pc, #96]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad2a:	d105      	bne.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ad2c:	4b13      	ldr	r3, [pc, #76]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	4a12      	ldr	r2, [pc, #72]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d015      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad44:	4b0d      	ldr	r3, [pc, #52]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad52:	490a      	ldr	r1, [pc, #40]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad62:	d105      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad64:	4b05      	ldr	r3, [pc, #20]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	4a04      	ldr	r2, [pc, #16]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ad70:	7cbb      	ldrb	r3, [r7, #18]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	40021000 	.word	0x40021000

0800ad80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e049      	b.n	800ae26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7f8 fc42 	bl	8003630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f000 fa5c 	bl	800b27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d109      	bne.n	800ae54 <HAL_TIM_PWM_Start+0x24>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	bf14      	ite	ne
 800ae4c:	2301      	movne	r3, #1
 800ae4e:	2300      	moveq	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	e03c      	b.n	800aece <HAL_TIM_PWM_Start+0x9e>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d109      	bne.n	800ae6e <HAL_TIM_PWM_Start+0x3e>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	bf14      	ite	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	2300      	moveq	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	e02f      	b.n	800aece <HAL_TIM_PWM_Start+0x9e>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b08      	cmp	r3, #8
 800ae72:	d109      	bne.n	800ae88 <HAL_TIM_PWM_Start+0x58>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	e022      	b.n	800aece <HAL_TIM_PWM_Start+0x9e>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b0c      	cmp	r3, #12
 800ae8c:	d109      	bne.n	800aea2 <HAL_TIM_PWM_Start+0x72>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	bf14      	ite	ne
 800ae9a:	2301      	movne	r3, #1
 800ae9c:	2300      	moveq	r3, #0
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	e015      	b.n	800aece <HAL_TIM_PWM_Start+0x9e>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b10      	cmp	r3, #16
 800aea6:	d109      	bne.n	800aebc <HAL_TIM_PWM_Start+0x8c>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	bf14      	ite	ne
 800aeb4:	2301      	movne	r3, #1
 800aeb6:	2300      	moveq	r3, #0
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	e008      	b.n	800aece <HAL_TIM_PWM_Start+0x9e>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	bf14      	ite	ne
 800aec8:	2301      	movne	r3, #1
 800aeca:	2300      	moveq	r3, #0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e0a6      	b.n	800b024 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_PWM_Start+0xb6>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aee4:	e023      	b.n	800af2e <HAL_TIM_PWM_Start+0xfe>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_PWM_Start+0xc6>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aef4:	e01b      	b.n	800af2e <HAL_TIM_PWM_Start+0xfe>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d104      	bne.n	800af06 <HAL_TIM_PWM_Start+0xd6>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af04:	e013      	b.n	800af2e <HAL_TIM_PWM_Start+0xfe>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b0c      	cmp	r3, #12
 800af0a:	d104      	bne.n	800af16 <HAL_TIM_PWM_Start+0xe6>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2202      	movs	r2, #2
 800af10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af14:	e00b      	b.n	800af2e <HAL_TIM_PWM_Start+0xfe>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b10      	cmp	r3, #16
 800af1a:	d104      	bne.n	800af26 <HAL_TIM_PWM_Start+0xf6>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af24:	e003      	b.n	800af2e <HAL_TIM_PWM_Start+0xfe>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2202      	movs	r2, #2
 800af2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2201      	movs	r2, #1
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fd7e 	bl	800ba38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a3a      	ldr	r2, [pc, #232]	@ (800b02c <HAL_TIM_PWM_Start+0x1fc>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d018      	beq.n	800af78 <HAL_TIM_PWM_Start+0x148>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a39      	ldr	r2, [pc, #228]	@ (800b030 <HAL_TIM_PWM_Start+0x200>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d013      	beq.n	800af78 <HAL_TIM_PWM_Start+0x148>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a37      	ldr	r2, [pc, #220]	@ (800b034 <HAL_TIM_PWM_Start+0x204>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00e      	beq.n	800af78 <HAL_TIM_PWM_Start+0x148>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a36      	ldr	r2, [pc, #216]	@ (800b038 <HAL_TIM_PWM_Start+0x208>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d009      	beq.n	800af78 <HAL_TIM_PWM_Start+0x148>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a34      	ldr	r2, [pc, #208]	@ (800b03c <HAL_TIM_PWM_Start+0x20c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d004      	beq.n	800af78 <HAL_TIM_PWM_Start+0x148>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a33      	ldr	r2, [pc, #204]	@ (800b040 <HAL_TIM_PWM_Start+0x210>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d101      	bne.n	800af7c <HAL_TIM_PWM_Start+0x14c>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <HAL_TIM_PWM_Start+0x14e>
 800af7c:	2300      	movs	r3, #0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a25      	ldr	r2, [pc, #148]	@ (800b02c <HAL_TIM_PWM_Start+0x1fc>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d022      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afa4:	d01d      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a26      	ldr	r2, [pc, #152]	@ (800b044 <HAL_TIM_PWM_Start+0x214>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d018      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a24      	ldr	r2, [pc, #144]	@ (800b048 <HAL_TIM_PWM_Start+0x218>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d013      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a23      	ldr	r2, [pc, #140]	@ (800b04c <HAL_TIM_PWM_Start+0x21c>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00e      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a19      	ldr	r2, [pc, #100]	@ (800b030 <HAL_TIM_PWM_Start+0x200>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d009      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a18      	ldr	r2, [pc, #96]	@ (800b034 <HAL_TIM_PWM_Start+0x204>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d004      	beq.n	800afe2 <HAL_TIM_PWM_Start+0x1b2>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <HAL_TIM_PWM_Start+0x210>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d115      	bne.n	800b00e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	4b19      	ldr	r3, [pc, #100]	@ (800b050 <HAL_TIM_PWM_Start+0x220>)
 800afea:	4013      	ands	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b06      	cmp	r3, #6
 800aff2:	d015      	beq.n	800b020 <HAL_TIM_PWM_Start+0x1f0>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affa:	d011      	beq.n	800b020 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0201 	orr.w	r2, r2, #1
 800b00a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b00c:	e008      	b.n	800b020 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0201 	orr.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e000      	b.n	800b022 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	40012c00 	.word	0x40012c00
 800b030:	40013400 	.word	0x40013400
 800b034:	40014000 	.word	0x40014000
 800b038:	40014400 	.word	0x40014400
 800b03c:	40014800 	.word	0x40014800
 800b040:	40015000 	.word	0x40015000
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	00010007 	.word	0x00010007

0800b054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b06e:	2302      	movs	r3, #2
 800b070:	e0ff      	b.n	800b272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b14      	cmp	r3, #20
 800b07e:	f200 80f0 	bhi.w	800b262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b082:	a201      	add	r2, pc, #4	@ (adr r2, 800b088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b0dd 	.word	0x0800b0dd
 800b08c:	0800b263 	.word	0x0800b263
 800b090:	0800b263 	.word	0x0800b263
 800b094:	0800b263 	.word	0x0800b263
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b263 	.word	0x0800b263
 800b0a0:	0800b263 	.word	0x0800b263
 800b0a4:	0800b263 	.word	0x0800b263
 800b0a8:	0800b15f 	.word	0x0800b15f
 800b0ac:	0800b263 	.word	0x0800b263
 800b0b0:	0800b263 	.word	0x0800b263
 800b0b4:	0800b263 	.word	0x0800b263
 800b0b8:	0800b19f 	.word	0x0800b19f
 800b0bc:	0800b263 	.word	0x0800b263
 800b0c0:	0800b263 	.word	0x0800b263
 800b0c4:	0800b263 	.word	0x0800b263
 800b0c8:	0800b1e1 	.word	0x0800b1e1
 800b0cc:	0800b263 	.word	0x0800b263
 800b0d0:	0800b263 	.word	0x0800b263
 800b0d4:	0800b263 	.word	0x0800b263
 800b0d8:	0800b221 	.word	0x0800b221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f97e 	bl	800b3e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0208 	orr.w	r2, r2, #8
 800b0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f022 0204 	bic.w	r2, r2, #4
 800b106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6999      	ldr	r1, [r3, #24]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	691a      	ldr	r2, [r3, #16]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	619a      	str	r2, [r3, #24]
      break;
 800b11a:	e0a5      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68b9      	ldr	r1, [r7, #8]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f9f8 	bl	800b518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6999      	ldr	r1, [r3, #24]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	021a      	lsls	r2, r3, #8
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	619a      	str	r2, [r3, #24]
      break;
 800b15c:	e084      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 fa6b 	bl	800b640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f042 0208 	orr.w	r2, r2, #8
 800b178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69da      	ldr	r2, [r3, #28]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0204 	bic.w	r2, r2, #4
 800b188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69d9      	ldr	r1, [r3, #28]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	61da      	str	r2, [r3, #28]
      break;
 800b19c:	e064      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fadd 	bl	800b764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69da      	ldr	r2, [r3, #28]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69da      	ldr	r2, [r3, #28]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	69d9      	ldr	r1, [r3, #28]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	021a      	lsls	r2, r3, #8
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	61da      	str	r2, [r3, #28]
      break;
 800b1de:	e043      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 fb50 	bl	800b88c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0208 	orr.w	r2, r2, #8
 800b1fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 0204 	bic.w	r2, r2, #4
 800b20a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	430a      	orrs	r2, r1
 800b21c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b21e:	e023      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fb9a 	bl	800b960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b23a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b24a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	021a      	lsls	r2, r3, #8
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b260:	e002      	b.n	800b268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	75fb      	strb	r3, [r7, #23]
      break;
 800b266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop

0800b27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a4c      	ldr	r2, [pc, #304]	@ (800b3c0 <TIM_Base_SetConfig+0x144>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d017      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29a:	d013      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a49      	ldr	r2, [pc, #292]	@ (800b3c4 <TIM_Base_SetConfig+0x148>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d00f      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a48      	ldr	r2, [pc, #288]	@ (800b3c8 <TIM_Base_SetConfig+0x14c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d00b      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a47      	ldr	r2, [pc, #284]	@ (800b3cc <TIM_Base_SetConfig+0x150>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d007      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a46      	ldr	r2, [pc, #280]	@ (800b3d0 <TIM_Base_SetConfig+0x154>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d003      	beq.n	800b2c4 <TIM_Base_SetConfig+0x48>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a45      	ldr	r2, [pc, #276]	@ (800b3d4 <TIM_Base_SetConfig+0x158>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d108      	bne.n	800b2d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a39      	ldr	r2, [pc, #228]	@ (800b3c0 <TIM_Base_SetConfig+0x144>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d023      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e4:	d01f      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a36      	ldr	r2, [pc, #216]	@ (800b3c4 <TIM_Base_SetConfig+0x148>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d01b      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a35      	ldr	r2, [pc, #212]	@ (800b3c8 <TIM_Base_SetConfig+0x14c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d017      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a34      	ldr	r2, [pc, #208]	@ (800b3cc <TIM_Base_SetConfig+0x150>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d013      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a33      	ldr	r2, [pc, #204]	@ (800b3d0 <TIM_Base_SetConfig+0x154>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00f      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a33      	ldr	r2, [pc, #204]	@ (800b3d8 <TIM_Base_SetConfig+0x15c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00b      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a32      	ldr	r2, [pc, #200]	@ (800b3dc <TIM_Base_SetConfig+0x160>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d007      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a31      	ldr	r2, [pc, #196]	@ (800b3e0 <TIM_Base_SetConfig+0x164>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d003      	beq.n	800b326 <TIM_Base_SetConfig+0xaa>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a2c      	ldr	r2, [pc, #176]	@ (800b3d4 <TIM_Base_SetConfig+0x158>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d108      	bne.n	800b338 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b32c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	4313      	orrs	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	4313      	orrs	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689a      	ldr	r2, [r3, #8]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a18      	ldr	r2, [pc, #96]	@ (800b3c0 <TIM_Base_SetConfig+0x144>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d013      	beq.n	800b38c <TIM_Base_SetConfig+0x110>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a1a      	ldr	r2, [pc, #104]	@ (800b3d0 <TIM_Base_SetConfig+0x154>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00f      	beq.n	800b38c <TIM_Base_SetConfig+0x110>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a1a      	ldr	r2, [pc, #104]	@ (800b3d8 <TIM_Base_SetConfig+0x15c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00b      	beq.n	800b38c <TIM_Base_SetConfig+0x110>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a19      	ldr	r2, [pc, #100]	@ (800b3dc <TIM_Base_SetConfig+0x160>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d007      	beq.n	800b38c <TIM_Base_SetConfig+0x110>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a18      	ldr	r2, [pc, #96]	@ (800b3e0 <TIM_Base_SetConfig+0x164>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d003      	beq.n	800b38c <TIM_Base_SetConfig+0x110>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a13      	ldr	r2, [pc, #76]	@ (800b3d4 <TIM_Base_SetConfig+0x158>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d103      	bne.n	800b394 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d105      	bne.n	800b3b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f023 0201 	bic.w	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	611a      	str	r2, [r3, #16]
  }
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40000400 	.word	0x40000400
 800b3c8:	40000800 	.word	0x40000800
 800b3cc:	40000c00 	.word	0x40000c00
 800b3d0:	40013400 	.word	0x40013400
 800b3d4:	40015000 	.word	0x40015000
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	40014400 	.word	0x40014400
 800b3e0:	40014800 	.word	0x40014800

0800b3e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a1b      	ldr	r3, [r3, #32]
 800b3f8:	f023 0201 	bic.w	r2, r3, #1
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f023 0302 	bic.w	r3, r3, #2
 800b430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a30      	ldr	r2, [pc, #192]	@ (800b500 <TIM_OC1_SetConfig+0x11c>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d013      	beq.n	800b46c <TIM_OC1_SetConfig+0x88>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a2f      	ldr	r2, [pc, #188]	@ (800b504 <TIM_OC1_SetConfig+0x120>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d00f      	beq.n	800b46c <TIM_OC1_SetConfig+0x88>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a2e      	ldr	r2, [pc, #184]	@ (800b508 <TIM_OC1_SetConfig+0x124>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00b      	beq.n	800b46c <TIM_OC1_SetConfig+0x88>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a2d      	ldr	r2, [pc, #180]	@ (800b50c <TIM_OC1_SetConfig+0x128>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d007      	beq.n	800b46c <TIM_OC1_SetConfig+0x88>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a2c      	ldr	r2, [pc, #176]	@ (800b510 <TIM_OC1_SetConfig+0x12c>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d003      	beq.n	800b46c <TIM_OC1_SetConfig+0x88>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a2b      	ldr	r2, [pc, #172]	@ (800b514 <TIM_OC1_SetConfig+0x130>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d10c      	bne.n	800b486 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0308 	bic.w	r3, r3, #8
 800b472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 0304 	bic.w	r3, r3, #4
 800b484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a1d      	ldr	r2, [pc, #116]	@ (800b500 <TIM_OC1_SetConfig+0x11c>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d013      	beq.n	800b4b6 <TIM_OC1_SetConfig+0xd2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a1c      	ldr	r2, [pc, #112]	@ (800b504 <TIM_OC1_SetConfig+0x120>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00f      	beq.n	800b4b6 <TIM_OC1_SetConfig+0xd2>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a1b      	ldr	r2, [pc, #108]	@ (800b508 <TIM_OC1_SetConfig+0x124>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00b      	beq.n	800b4b6 <TIM_OC1_SetConfig+0xd2>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b50c <TIM_OC1_SetConfig+0x128>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d007      	beq.n	800b4b6 <TIM_OC1_SetConfig+0xd2>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a19      	ldr	r2, [pc, #100]	@ (800b510 <TIM_OC1_SetConfig+0x12c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d003      	beq.n	800b4b6 <TIM_OC1_SetConfig+0xd2>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a18      	ldr	r2, [pc, #96]	@ (800b514 <TIM_OC1_SetConfig+0x130>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d111      	bne.n	800b4da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	621a      	str	r2, [r3, #32]
}
 800b4f4:	bf00      	nop
 800b4f6:	371c      	adds	r7, #28
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	40012c00 	.word	0x40012c00
 800b504:	40013400 	.word	0x40013400
 800b508:	40014000 	.word	0x40014000
 800b50c:	40014400 	.word	0x40014400
 800b510:	40014800 	.word	0x40014800
 800b514:	40015000 	.word	0x40015000

0800b518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	f023 0210 	bic.w	r2, r3, #16
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	021b      	lsls	r3, r3, #8
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0320 	bic.w	r3, r3, #32
 800b566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a2c      	ldr	r2, [pc, #176]	@ (800b628 <TIM_OC2_SetConfig+0x110>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d007      	beq.n	800b58c <TIM_OC2_SetConfig+0x74>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a2b      	ldr	r2, [pc, #172]	@ (800b62c <TIM_OC2_SetConfig+0x114>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d003      	beq.n	800b58c <TIM_OC2_SetConfig+0x74>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a2a      	ldr	r2, [pc, #168]	@ (800b630 <TIM_OC2_SetConfig+0x118>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d10d      	bne.n	800b5a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a1f      	ldr	r2, [pc, #124]	@ (800b628 <TIM_OC2_SetConfig+0x110>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d013      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xc0>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b62c <TIM_OC2_SetConfig+0x114>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00f      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xc0>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b634 <TIM_OC2_SetConfig+0x11c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00b      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xc0>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b638 <TIM_OC2_SetConfig+0x120>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xc0>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b63c <TIM_OC2_SetConfig+0x124>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xc0>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a17      	ldr	r2, [pc, #92]	@ (800b630 <TIM_OC2_SetConfig+0x118>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d113      	bne.n	800b600 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	bf00      	nop
 800b61c:	371c      	adds	r7, #28
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	40012c00 	.word	0x40012c00
 800b62c:	40013400 	.word	0x40013400
 800b630:	40015000 	.word	0x40015000
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800

0800b640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b66e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0303 	bic.w	r3, r3, #3
 800b67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a2b      	ldr	r2, [pc, #172]	@ (800b74c <TIM_OC3_SetConfig+0x10c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d007      	beq.n	800b6b2 <TIM_OC3_SetConfig+0x72>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a2a      	ldr	r2, [pc, #168]	@ (800b750 <TIM_OC3_SetConfig+0x110>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d003      	beq.n	800b6b2 <TIM_OC3_SetConfig+0x72>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a29      	ldr	r2, [pc, #164]	@ (800b754 <TIM_OC3_SetConfig+0x114>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d10d      	bne.n	800b6ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a1e      	ldr	r2, [pc, #120]	@ (800b74c <TIM_OC3_SetConfig+0x10c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d013      	beq.n	800b6fe <TIM_OC3_SetConfig+0xbe>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b750 <TIM_OC3_SetConfig+0x110>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00f      	beq.n	800b6fe <TIM_OC3_SetConfig+0xbe>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b758 <TIM_OC3_SetConfig+0x118>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00b      	beq.n	800b6fe <TIM_OC3_SetConfig+0xbe>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b75c <TIM_OC3_SetConfig+0x11c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d007      	beq.n	800b6fe <TIM_OC3_SetConfig+0xbe>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b760 <TIM_OC3_SetConfig+0x120>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d003      	beq.n	800b6fe <TIM_OC3_SetConfig+0xbe>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a16      	ldr	r2, [pc, #88]	@ (800b754 <TIM_OC3_SetConfig+0x114>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d113      	bne.n	800b726 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b70c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	4313      	orrs	r3, r2
 800b724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	621a      	str	r2, [r3, #32]
}
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	40012c00 	.word	0x40012c00
 800b750:	40013400 	.word	0x40013400
 800b754:	40015000 	.word	0x40015000
 800b758:	40014000 	.word	0x40014000
 800b75c:	40014400 	.word	0x40014400
 800b760:	40014800 	.word	0x40014800

0800b764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	031b      	lsls	r3, r3, #12
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a2c      	ldr	r2, [pc, #176]	@ (800b874 <TIM_OC4_SetConfig+0x110>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d007      	beq.n	800b7d8 <TIM_OC4_SetConfig+0x74>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b878 <TIM_OC4_SetConfig+0x114>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d003      	beq.n	800b7d8 <TIM_OC4_SetConfig+0x74>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b87c <TIM_OC4_SetConfig+0x118>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d10d      	bne.n	800b7f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	031b      	lsls	r3, r3, #12
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b874 <TIM_OC4_SetConfig+0x110>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d013      	beq.n	800b824 <TIM_OC4_SetConfig+0xc0>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b878 <TIM_OC4_SetConfig+0x114>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d00f      	beq.n	800b824 <TIM_OC4_SetConfig+0xc0>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a1e      	ldr	r2, [pc, #120]	@ (800b880 <TIM_OC4_SetConfig+0x11c>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d00b      	beq.n	800b824 <TIM_OC4_SetConfig+0xc0>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a1d      	ldr	r2, [pc, #116]	@ (800b884 <TIM_OC4_SetConfig+0x120>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d007      	beq.n	800b824 <TIM_OC4_SetConfig+0xc0>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a1c      	ldr	r2, [pc, #112]	@ (800b888 <TIM_OC4_SetConfig+0x124>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d003      	beq.n	800b824 <TIM_OC4_SetConfig+0xc0>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <TIM_OC4_SetConfig+0x118>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d113      	bne.n	800b84c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b82a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b832:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	019b      	lsls	r3, r3, #6
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	019b      	lsls	r3, r3, #6
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	697a      	ldr	r2, [r7, #20]
 800b864:	621a      	str	r2, [r3, #32]
}
 800b866:	bf00      	nop
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40012c00 	.word	0x40012c00
 800b878:	40013400 	.word	0x40013400
 800b87c:	40015000 	.word	0x40015000
 800b880:	40014000 	.word	0x40014000
 800b884:	40014400 	.word	0x40014400
 800b888:	40014800 	.word	0x40014800

0800b88c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b8d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	041b      	lsls	r3, r3, #16
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a19      	ldr	r2, [pc, #100]	@ (800b948 <TIM_OC5_SetConfig+0xbc>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d013      	beq.n	800b90e <TIM_OC5_SetConfig+0x82>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a18      	ldr	r2, [pc, #96]	@ (800b94c <TIM_OC5_SetConfig+0xc0>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d00f      	beq.n	800b90e <TIM_OC5_SetConfig+0x82>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a17      	ldr	r2, [pc, #92]	@ (800b950 <TIM_OC5_SetConfig+0xc4>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00b      	beq.n	800b90e <TIM_OC5_SetConfig+0x82>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a16      	ldr	r2, [pc, #88]	@ (800b954 <TIM_OC5_SetConfig+0xc8>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d007      	beq.n	800b90e <TIM_OC5_SetConfig+0x82>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a15      	ldr	r2, [pc, #84]	@ (800b958 <TIM_OC5_SetConfig+0xcc>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d003      	beq.n	800b90e <TIM_OC5_SetConfig+0x82>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a14      	ldr	r2, [pc, #80]	@ (800b95c <TIM_OC5_SetConfig+0xd0>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d109      	bne.n	800b922 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	021b      	lsls	r3, r3, #8
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	4313      	orrs	r3, r2
 800b920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	621a      	str	r2, [r3, #32]
}
 800b93c:	bf00      	nop
 800b93e:	371c      	adds	r7, #28
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	40012c00 	.word	0x40012c00
 800b94c:	40013400 	.word	0x40013400
 800b950:	40014000 	.word	0x40014000
 800b954:	40014400 	.word	0x40014400
 800b958:	40014800 	.word	0x40014800
 800b95c:	40015000 	.word	0x40015000

0800b960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b98e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	021b      	lsls	r3, r3, #8
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b9a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	051b      	lsls	r3, r3, #20
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a1a      	ldr	r2, [pc, #104]	@ (800ba20 <TIM_OC6_SetConfig+0xc0>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d013      	beq.n	800b9e4 <TIM_OC6_SetConfig+0x84>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a19      	ldr	r2, [pc, #100]	@ (800ba24 <TIM_OC6_SetConfig+0xc4>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d00f      	beq.n	800b9e4 <TIM_OC6_SetConfig+0x84>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4a18      	ldr	r2, [pc, #96]	@ (800ba28 <TIM_OC6_SetConfig+0xc8>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d00b      	beq.n	800b9e4 <TIM_OC6_SetConfig+0x84>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a17      	ldr	r2, [pc, #92]	@ (800ba2c <TIM_OC6_SetConfig+0xcc>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d007      	beq.n	800b9e4 <TIM_OC6_SetConfig+0x84>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a16      	ldr	r2, [pc, #88]	@ (800ba30 <TIM_OC6_SetConfig+0xd0>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d003      	beq.n	800b9e4 <TIM_OC6_SetConfig+0x84>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a15      	ldr	r2, [pc, #84]	@ (800ba34 <TIM_OC6_SetConfig+0xd4>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d109      	bne.n	800b9f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	695b      	ldr	r3, [r3, #20]
 800b9f0:	029b      	lsls	r3, r3, #10
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	621a      	str	r2, [r3, #32]
}
 800ba12:	bf00      	nop
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	40012c00 	.word	0x40012c00
 800ba24:	40013400 	.word	0x40013400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40014400 	.word	0x40014400
 800ba30:	40014800 	.word	0x40014800
 800ba34:	40015000 	.word	0x40015000

0800ba38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 031f 	and.w	r3, r3, #31
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	43db      	mvns	r3, r3
 800ba5a:	401a      	ands	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a1a      	ldr	r2, [r3, #32]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba70:	431a      	orrs	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	621a      	str	r2, [r3, #32]
}
 800ba76:	bf00      	nop
 800ba78:	371c      	adds	r7, #28
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d109      	bne.n	800baa8 <HAL_TIMEx_PWMN_Start+0x24>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	bf14      	ite	ne
 800baa0:	2301      	movne	r3, #1
 800baa2:	2300      	moveq	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	e022      	b.n	800baee <HAL_TIMEx_PWMN_Start+0x6a>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b04      	cmp	r3, #4
 800baac:	d109      	bne.n	800bac2 <HAL_TIMEx_PWMN_Start+0x3e>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	bf14      	ite	ne
 800baba:	2301      	movne	r3, #1
 800babc:	2300      	moveq	r3, #0
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	e015      	b.n	800baee <HAL_TIMEx_PWMN_Start+0x6a>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d109      	bne.n	800badc <HAL_TIMEx_PWMN_Start+0x58>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	bf14      	ite	ne
 800bad4:	2301      	movne	r3, #1
 800bad6:	2300      	moveq	r3, #0
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	e008      	b.n	800baee <HAL_TIMEx_PWMN_Start+0x6a>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	bf14      	ite	ne
 800bae8:	2301      	movne	r3, #1
 800baea:	2300      	moveq	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e073      	b.n	800bbde <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <HAL_TIMEx_PWMN_Start+0x82>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2202      	movs	r2, #2
 800bb00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb04:	e013      	b.n	800bb2e <HAL_TIMEx_PWMN_Start+0xaa>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	d104      	bne.n	800bb16 <HAL_TIMEx_PWMN_Start+0x92>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb14:	e00b      	b.n	800bb2e <HAL_TIMEx_PWMN_Start+0xaa>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d104      	bne.n	800bb26 <HAL_TIMEx_PWMN_Start+0xa2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb24:	e003      	b.n	800bb2e <HAL_TIMEx_PWMN_Start+0xaa>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2204      	movs	r2, #4
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 f9a3 	bl	800be82 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a25      	ldr	r2, [pc, #148]	@ (800bbe8 <HAL_TIMEx_PWMN_Start+0x164>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d022      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb5e:	d01d      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a21      	ldr	r2, [pc, #132]	@ (800bbec <HAL_TIMEx_PWMN_Start+0x168>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d018      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a20      	ldr	r2, [pc, #128]	@ (800bbf0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d013      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a1e      	ldr	r2, [pc, #120]	@ (800bbf4 <HAL_TIMEx_PWMN_Start+0x170>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d00e      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a1d      	ldr	r2, [pc, #116]	@ (800bbf8 <HAL_TIMEx_PWMN_Start+0x174>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d009      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a1b      	ldr	r2, [pc, #108]	@ (800bbfc <HAL_TIMEx_PWMN_Start+0x178>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d004      	beq.n	800bb9c <HAL_TIMEx_PWMN_Start+0x118>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a1a      	ldr	r2, [pc, #104]	@ (800bc00 <HAL_TIMEx_PWMN_Start+0x17c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d115      	bne.n	800bbc8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689a      	ldr	r2, [r3, #8]
 800bba2:	4b18      	ldr	r3, [pc, #96]	@ (800bc04 <HAL_TIMEx_PWMN_Start+0x180>)
 800bba4:	4013      	ands	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b06      	cmp	r3, #6
 800bbac:	d015      	beq.n	800bbda <HAL_TIMEx_PWMN_Start+0x156>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbb4:	d011      	beq.n	800bbda <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f042 0201 	orr.w	r2, r2, #1
 800bbc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc6:	e008      	b.n	800bbda <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f042 0201 	orr.w	r2, r2, #1
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	e000      	b.n	800bbdc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40012c00 	.word	0x40012c00
 800bbec:	40000400 	.word	0x40000400
 800bbf0:	40000800 	.word	0x40000800
 800bbf4:	40000c00 	.word	0x40000c00
 800bbf8:	40013400 	.word	0x40013400
 800bbfc:	40014000 	.word	0x40014000
 800bc00:	40015000 	.word	0x40015000
 800bc04:	00010007 	.word	0x00010007

0800bc08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d101      	bne.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e074      	b.n	800bd0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a34      	ldr	r2, [pc, #208]	@ (800bd18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d009      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a33      	ldr	r2, [pc, #204]	@ (800bd1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d004      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a31      	ldr	r2, [pc, #196]	@ (800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d108      	bne.n	800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a21      	ldr	r2, [pc, #132]	@ (800bd18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d022      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bca0:	d01d      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a1f      	ldr	r2, [pc, #124]	@ (800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d018      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d013      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a1c      	ldr	r2, [pc, #112]	@ (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00e      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a15      	ldr	r2, [pc, #84]	@ (800bd1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d009      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a18      	ldr	r2, [pc, #96]	@ (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d004      	beq.n	800bcde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a11      	ldr	r2, [pc, #68]	@ (800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d10c      	bne.n	800bcf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	40012c00 	.word	0x40012c00
 800bd1c:	40013400 	.word	0x40013400
 800bd20:	40015000 	.word	0x40015000
 800bd24:	40000400 	.word	0x40000400
 800bd28:	40000800 	.word	0x40000800
 800bd2c:	40000c00 	.word	0x40000c00
 800bd30:	40014000 	.word	0x40014000

0800bd34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d101      	bne.n	800bd50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e078      	b.n	800be42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	041b      	lsls	r3, r3, #16
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a1c      	ldr	r2, [pc, #112]	@ (800be50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d009      	beq.n	800bdf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a1b      	ldr	r2, [pc, #108]	@ (800be54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d004      	beq.n	800bdf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a19      	ldr	r2, [pc, #100]	@ (800be58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d11c      	bne.n	800be30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be00:	051b      	lsls	r3, r3, #20
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	4313      	orrs	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	4313      	orrs	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	40012c00 	.word	0x40012c00
 800be54:	40013400 	.word	0x40013400
 800be58:	40015000 	.word	0x40015000

0800be5c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800be72:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800be82:	b480      	push	{r7}
 800be84:	b087      	sub	sp, #28
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	f003 030f 	and.w	r3, r3, #15
 800be94:	2204      	movs	r2, #4
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a1a      	ldr	r2, [r3, #32]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	43db      	mvns	r3, r3
 800bea4:	401a      	ands	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6a1a      	ldr	r2, [r3, #32]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	431a      	orrs	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	621a      	str	r2, [r3, #32]
}
 800bec0:	bf00      	nop
 800bec2:	371c      	adds	r7, #28
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <_ZdlPvj>:
 800becc:	f000 b811 	b.w	800bef2 <_ZdlPv>

0800bed0 <_Znwj>:
 800bed0:	2801      	cmp	r0, #1
 800bed2:	bf38      	it	cc
 800bed4:	2001      	movcc	r0, #1
 800bed6:	b510      	push	{r4, lr}
 800bed8:	4604      	mov	r4, r0
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f81c 	bl	800bf18 <malloc>
 800bee0:	b100      	cbz	r0, 800bee4 <_Znwj+0x14>
 800bee2:	bd10      	pop	{r4, pc}
 800bee4:	f000 f808 	bl	800bef8 <_ZSt15get_new_handlerv>
 800bee8:	b908      	cbnz	r0, 800beee <_Znwj+0x1e>
 800beea:	f000 f80d 	bl	800bf08 <abort>
 800beee:	4780      	blx	r0
 800bef0:	e7f3      	b.n	800beda <_Znwj+0xa>

0800bef2 <_ZdlPv>:
 800bef2:	f000 b819 	b.w	800bf28 <free>
	...

0800bef8 <_ZSt15get_new_handlerv>:
 800bef8:	4b02      	ldr	r3, [pc, #8]	@ (800bf04 <_ZSt15get_new_handlerv+0xc>)
 800befa:	6818      	ldr	r0, [r3, #0]
 800befc:	f3bf 8f5b 	dmb	ish
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20000438 	.word	0x20000438

0800bf08 <abort>:
 800bf08:	b508      	push	{r3, lr}
 800bf0a:	2006      	movs	r0, #6
 800bf0c:	f000 f8f2 	bl	800c0f4 <raise>
 800bf10:	2001      	movs	r0, #1
 800bf12:	f7f7 fc93 	bl	800383c <_exit>
	...

0800bf18 <malloc>:
 800bf18:	4b02      	ldr	r3, [pc, #8]	@ (800bf24 <malloc+0xc>)
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f000 b82d 	b.w	800bf7c <_malloc_r>
 800bf22:	bf00      	nop
 800bf24:	20000018 	.word	0x20000018

0800bf28 <free>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	@ (800bf34 <free+0xc>)
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f000 b939 	b.w	800c1a4 <_free_r>
 800bf32:	bf00      	nop
 800bf34:	20000018 	.word	0x20000018

0800bf38 <sbrk_aligned>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4e0f      	ldr	r6, [pc, #60]	@ (800bf78 <sbrk_aligned+0x40>)
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	6831      	ldr	r1, [r6, #0]
 800bf40:	4605      	mov	r5, r0
 800bf42:	b911      	cbnz	r1, 800bf4a <sbrk_aligned+0x12>
 800bf44:	f000 f8f2 	bl	800c12c <_sbrk_r>
 800bf48:	6030      	str	r0, [r6, #0]
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f000 f8ed 	bl	800c12c <_sbrk_r>
 800bf52:	1c43      	adds	r3, r0, #1
 800bf54:	d103      	bne.n	800bf5e <sbrk_aligned+0x26>
 800bf56:	f04f 34ff 	mov.w	r4, #4294967295
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	1cc4      	adds	r4, r0, #3
 800bf60:	f024 0403 	bic.w	r4, r4, #3
 800bf64:	42a0      	cmp	r0, r4
 800bf66:	d0f8      	beq.n	800bf5a <sbrk_aligned+0x22>
 800bf68:	1a21      	subs	r1, r4, r0
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f8de 	bl	800c12c <_sbrk_r>
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1f2      	bne.n	800bf5a <sbrk_aligned+0x22>
 800bf74:	e7ef      	b.n	800bf56 <sbrk_aligned+0x1e>
 800bf76:	bf00      	nop
 800bf78:	2000043c 	.word	0x2000043c

0800bf7c <_malloc_r>:
 800bf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf80:	1ccd      	adds	r5, r1, #3
 800bf82:	f025 0503 	bic.w	r5, r5, #3
 800bf86:	3508      	adds	r5, #8
 800bf88:	2d0c      	cmp	r5, #12
 800bf8a:	bf38      	it	cc
 800bf8c:	250c      	movcc	r5, #12
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	4606      	mov	r6, r0
 800bf92:	db01      	blt.n	800bf98 <_malloc_r+0x1c>
 800bf94:	42a9      	cmp	r1, r5
 800bf96:	d904      	bls.n	800bfa2 <_malloc_r+0x26>
 800bf98:	230c      	movs	r3, #12
 800bf9a:	6033      	str	r3, [r6, #0]
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c078 <_malloc_r+0xfc>
 800bfa6:	f000 f869 	bl	800c07c <__malloc_lock>
 800bfaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bfae:	461c      	mov	r4, r3
 800bfb0:	bb44      	cbnz	r4, 800c004 <_malloc_r+0x88>
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7ff ffbf 	bl	800bf38 <sbrk_aligned>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	d158      	bne.n	800c072 <_malloc_r+0xf6>
 800bfc0:	f8d8 4000 	ldr.w	r4, [r8]
 800bfc4:	4627      	mov	r7, r4
 800bfc6:	2f00      	cmp	r7, #0
 800bfc8:	d143      	bne.n	800c052 <_malloc_r+0xd6>
 800bfca:	2c00      	cmp	r4, #0
 800bfcc:	d04b      	beq.n	800c066 <_malloc_r+0xea>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	eb04 0903 	add.w	r9, r4, r3
 800bfd8:	f000 f8a8 	bl	800c12c <_sbrk_r>
 800bfdc:	4581      	cmp	r9, r0
 800bfde:	d142      	bne.n	800c066 <_malloc_r+0xea>
 800bfe0:	6821      	ldr	r1, [r4, #0]
 800bfe2:	1a6d      	subs	r5, r5, r1
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7ff ffa6 	bl	800bf38 <sbrk_aligned>
 800bfec:	3001      	adds	r0, #1
 800bfee:	d03a      	beq.n	800c066 <_malloc_r+0xea>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	442b      	add	r3, r5
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	f8d8 3000 	ldr.w	r3, [r8]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	bb62      	cbnz	r2, 800c058 <_malloc_r+0xdc>
 800bffe:	f8c8 7000 	str.w	r7, [r8]
 800c002:	e00f      	b.n	800c024 <_malloc_r+0xa8>
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	1b52      	subs	r2, r2, r5
 800c008:	d420      	bmi.n	800c04c <_malloc_r+0xd0>
 800c00a:	2a0b      	cmp	r2, #11
 800c00c:	d917      	bls.n	800c03e <_malloc_r+0xc2>
 800c00e:	1961      	adds	r1, r4, r5
 800c010:	42a3      	cmp	r3, r4
 800c012:	6025      	str	r5, [r4, #0]
 800c014:	bf18      	it	ne
 800c016:	6059      	strne	r1, [r3, #4]
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	bf08      	it	eq
 800c01c:	f8c8 1000 	streq.w	r1, [r8]
 800c020:	5162      	str	r2, [r4, r5]
 800c022:	604b      	str	r3, [r1, #4]
 800c024:	4630      	mov	r0, r6
 800c026:	f000 f82f 	bl	800c088 <__malloc_unlock>
 800c02a:	f104 000b 	add.w	r0, r4, #11
 800c02e:	1d23      	adds	r3, r4, #4
 800c030:	f020 0007 	bic.w	r0, r0, #7
 800c034:	1ac2      	subs	r2, r0, r3
 800c036:	bf1c      	itt	ne
 800c038:	1a1b      	subne	r3, r3, r0
 800c03a:	50a3      	strne	r3, [r4, r2]
 800c03c:	e7af      	b.n	800bf9e <_malloc_r+0x22>
 800c03e:	6862      	ldr	r2, [r4, #4]
 800c040:	42a3      	cmp	r3, r4
 800c042:	bf0c      	ite	eq
 800c044:	f8c8 2000 	streq.w	r2, [r8]
 800c048:	605a      	strne	r2, [r3, #4]
 800c04a:	e7eb      	b.n	800c024 <_malloc_r+0xa8>
 800c04c:	4623      	mov	r3, r4
 800c04e:	6864      	ldr	r4, [r4, #4]
 800c050:	e7ae      	b.n	800bfb0 <_malloc_r+0x34>
 800c052:	463c      	mov	r4, r7
 800c054:	687f      	ldr	r7, [r7, #4]
 800c056:	e7b6      	b.n	800bfc6 <_malloc_r+0x4a>
 800c058:	461a      	mov	r2, r3
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	d1fb      	bne.n	800c058 <_malloc_r+0xdc>
 800c060:	2300      	movs	r3, #0
 800c062:	6053      	str	r3, [r2, #4]
 800c064:	e7de      	b.n	800c024 <_malloc_r+0xa8>
 800c066:	230c      	movs	r3, #12
 800c068:	6033      	str	r3, [r6, #0]
 800c06a:	4630      	mov	r0, r6
 800c06c:	f000 f80c 	bl	800c088 <__malloc_unlock>
 800c070:	e794      	b.n	800bf9c <_malloc_r+0x20>
 800c072:	6005      	str	r5, [r0, #0]
 800c074:	e7d6      	b.n	800c024 <_malloc_r+0xa8>
 800c076:	bf00      	nop
 800c078:	20000440 	.word	0x20000440

0800c07c <__malloc_lock>:
 800c07c:	4801      	ldr	r0, [pc, #4]	@ (800c084 <__malloc_lock+0x8>)
 800c07e:	f000 b88f 	b.w	800c1a0 <__retarget_lock_acquire_recursive>
 800c082:	bf00      	nop
 800c084:	20000580 	.word	0x20000580

0800c088 <__malloc_unlock>:
 800c088:	4801      	ldr	r0, [pc, #4]	@ (800c090 <__malloc_unlock+0x8>)
 800c08a:	f000 b88a 	b.w	800c1a2 <__retarget_lock_release_recursive>
 800c08e:	bf00      	nop
 800c090:	20000580 	.word	0x20000580

0800c094 <memset>:
 800c094:	4402      	add	r2, r0
 800c096:	4603      	mov	r3, r0
 800c098:	4293      	cmp	r3, r2
 800c09a:	d100      	bne.n	800c09e <memset+0xa>
 800c09c:	4770      	bx	lr
 800c09e:	f803 1b01 	strb.w	r1, [r3], #1
 800c0a2:	e7f9      	b.n	800c098 <memset+0x4>

0800c0a4 <_raise_r>:
 800c0a4:	291f      	cmp	r1, #31
 800c0a6:	b538      	push	{r3, r4, r5, lr}
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	d904      	bls.n	800c0b8 <_raise_r+0x14>
 800c0ae:	2316      	movs	r3, #22
 800c0b0:	6003      	str	r3, [r0, #0]
 800c0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0ba:	b112      	cbz	r2, 800c0c2 <_raise_r+0x1e>
 800c0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c0:	b94b      	cbnz	r3, 800c0d6 <_raise_r+0x32>
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f000 f830 	bl	800c128 <_getpid_r>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d2:	f000 b817 	b.w	800c104 <_kill_r>
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d00a      	beq.n	800c0f0 <_raise_r+0x4c>
 800c0da:	1c59      	adds	r1, r3, #1
 800c0dc:	d103      	bne.n	800c0e6 <_raise_r+0x42>
 800c0de:	2316      	movs	r3, #22
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7e7      	b.n	800c0b6 <_raise_r+0x12>
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4798      	blx	r3
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	e7e0      	b.n	800c0b6 <_raise_r+0x12>

0800c0f4 <raise>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	@ (800c100 <raise+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f7ff bfd3 	b.w	800c0a4 <_raise_r>
 800c0fe:	bf00      	nop
 800c100:	20000018 	.word	0x20000018

0800c104 <_kill_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	@ (800c124 <_kill_r+0x20>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	4611      	mov	r1, r2
 800c110:	602b      	str	r3, [r5, #0]
 800c112:	f7f7 fb83 	bl	800381c <_kill>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d102      	bne.n	800c120 <_kill_r+0x1c>
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	b103      	cbz	r3, 800c120 <_kill_r+0x1c>
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	bf00      	nop
 800c124:	2000057c 	.word	0x2000057c

0800c128 <_getpid_r>:
 800c128:	f7f7 bb70 	b.w	800380c <_getpid>

0800c12c <_sbrk_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d06      	ldr	r5, [pc, #24]	@ (800c148 <_sbrk_r+0x1c>)
 800c130:	2300      	movs	r3, #0
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	602b      	str	r3, [r5, #0]
 800c138:	f7f7 fb8c 	bl	8003854 <_sbrk>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_sbrk_r+0x1a>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	b103      	cbz	r3, 800c146 <_sbrk_r+0x1a>
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	2000057c 	.word	0x2000057c

0800c14c <__errno>:
 800c14c:	4b01      	ldr	r3, [pc, #4]	@ (800c154 <__errno+0x8>)
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20000018 	.word	0x20000018

0800c158 <__libc_init_array>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	4d0d      	ldr	r5, [pc, #52]	@ (800c190 <__libc_init_array+0x38>)
 800c15c:	4c0d      	ldr	r4, [pc, #52]	@ (800c194 <__libc_init_array+0x3c>)
 800c15e:	1b64      	subs	r4, r4, r5
 800c160:	10a4      	asrs	r4, r4, #2
 800c162:	2600      	movs	r6, #0
 800c164:	42a6      	cmp	r6, r4
 800c166:	d109      	bne.n	800c17c <__libc_init_array+0x24>
 800c168:	4d0b      	ldr	r5, [pc, #44]	@ (800c198 <__libc_init_array+0x40>)
 800c16a:	4c0c      	ldr	r4, [pc, #48]	@ (800c19c <__libc_init_array+0x44>)
 800c16c:	f000 f864 	bl	800c238 <_init>
 800c170:	1b64      	subs	r4, r4, r5
 800c172:	10a4      	asrs	r4, r4, #2
 800c174:	2600      	movs	r6, #0
 800c176:	42a6      	cmp	r6, r4
 800c178:	d105      	bne.n	800c186 <__libc_init_array+0x2e>
 800c17a:	bd70      	pop	{r4, r5, r6, pc}
 800c17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c180:	4798      	blx	r3
 800c182:	3601      	adds	r6, #1
 800c184:	e7ee      	b.n	800c164 <__libc_init_array+0xc>
 800c186:	f855 3b04 	ldr.w	r3, [r5], #4
 800c18a:	4798      	blx	r3
 800c18c:	3601      	adds	r6, #1
 800c18e:	e7f2      	b.n	800c176 <__libc_init_array+0x1e>
 800c190:	0800c270 	.word	0x0800c270
 800c194:	0800c270 	.word	0x0800c270
 800c198:	0800c270 	.word	0x0800c270
 800c19c:	0800c288 	.word	0x0800c288

0800c1a0 <__retarget_lock_acquire_recursive>:
 800c1a0:	4770      	bx	lr

0800c1a2 <__retarget_lock_release_recursive>:
 800c1a2:	4770      	bx	lr

0800c1a4 <_free_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d041      	beq.n	800c230 <_free_r+0x8c>
 800c1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b0:	1f0c      	subs	r4, r1, #4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	bfb8      	it	lt
 800c1b6:	18e4      	addlt	r4, r4, r3
 800c1b8:	f7ff ff60 	bl	800c07c <__malloc_lock>
 800c1bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c234 <_free_r+0x90>)
 800c1be:	6813      	ldr	r3, [r2, #0]
 800c1c0:	b933      	cbnz	r3, 800c1d0 <_free_r+0x2c>
 800c1c2:	6063      	str	r3, [r4, #4]
 800c1c4:	6014      	str	r4, [r2, #0]
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1cc:	f7ff bf5c 	b.w	800c088 <__malloc_unlock>
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d908      	bls.n	800c1e6 <_free_r+0x42>
 800c1d4:	6820      	ldr	r0, [r4, #0]
 800c1d6:	1821      	adds	r1, r4, r0
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf01      	itttt	eq
 800c1dc:	6819      	ldreq	r1, [r3, #0]
 800c1de:	685b      	ldreq	r3, [r3, #4]
 800c1e0:	1809      	addeq	r1, r1, r0
 800c1e2:	6021      	streq	r1, [r4, #0]
 800c1e4:	e7ed      	b.n	800c1c2 <_free_r+0x1e>
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b10b      	cbz	r3, 800c1f0 <_free_r+0x4c>
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	d9fa      	bls.n	800c1e6 <_free_r+0x42>
 800c1f0:	6811      	ldr	r1, [r2, #0]
 800c1f2:	1850      	adds	r0, r2, r1
 800c1f4:	42a0      	cmp	r0, r4
 800c1f6:	d10b      	bne.n	800c210 <_free_r+0x6c>
 800c1f8:	6820      	ldr	r0, [r4, #0]
 800c1fa:	4401      	add	r1, r0
 800c1fc:	1850      	adds	r0, r2, r1
 800c1fe:	4283      	cmp	r3, r0
 800c200:	6011      	str	r1, [r2, #0]
 800c202:	d1e0      	bne.n	800c1c6 <_free_r+0x22>
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	6053      	str	r3, [r2, #4]
 800c20a:	4408      	add	r0, r1
 800c20c:	6010      	str	r0, [r2, #0]
 800c20e:	e7da      	b.n	800c1c6 <_free_r+0x22>
 800c210:	d902      	bls.n	800c218 <_free_r+0x74>
 800c212:	230c      	movs	r3, #12
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	e7d6      	b.n	800c1c6 <_free_r+0x22>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	1821      	adds	r1, r4, r0
 800c21c:	428b      	cmp	r3, r1
 800c21e:	bf04      	itt	eq
 800c220:	6819      	ldreq	r1, [r3, #0]
 800c222:	685b      	ldreq	r3, [r3, #4]
 800c224:	6063      	str	r3, [r4, #4]
 800c226:	bf04      	itt	eq
 800c228:	1809      	addeq	r1, r1, r0
 800c22a:	6021      	streq	r1, [r4, #0]
 800c22c:	6054      	str	r4, [r2, #4]
 800c22e:	e7ca      	b.n	800c1c6 <_free_r+0x22>
 800c230:	bd38      	pop	{r3, r4, r5, pc}
 800c232:	bf00      	nop
 800c234:	20000440 	.word	0x20000440

0800c238 <_init>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr

0800c244 <_fini>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	bf00      	nop
 800c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24a:	bc08      	pop	{r3}
 800c24c:	469e      	mov	lr, r3
 800c24e:	4770      	bx	lr
