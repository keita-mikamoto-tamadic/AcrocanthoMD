
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f24  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008124  08008124  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  08008124  08008124  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008124  08008124  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008124  08008124  00009124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800812c  0800812c  0000912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008130  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000000c  0800813c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  0800813c  0000a358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a50  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000324d  00000000  00000000  00023a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00026ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a8  00000000  00000000  000284f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae08  00000000  00000000  000297a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa84  00000000  00000000  000545a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001150fd  00000000  00000000  0006f02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e4  00000000  00000000  0018416c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080080e4 	.word	0x080080e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080080e4 	.word	0x080080e4

08000218 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

#include "main.h"

extern CanCom canCom;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0){}
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4618      	mov	r0, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr

08000246 <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	60f8      	str	r0, [r7, #12]
 800024e:	60b9      	str	r1, [r7, #8]
 8000250:	4611      	mov	r1, r2
 8000252:	461a      	mov	r2, r3
 8000254:	460b      	mov	r3, r1
 8000256:	71fb      	strb	r3, [r7, #7]
 8000258:	4613      	mov	r3, r2
 800025a:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	605a      	str	r2, [r3, #4]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <_ZN6CanCom12initTxHeaderEmbb+0x28>
 8000268:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026c:	e000      	b.n	8000270 <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 800026e:	2200      	movs	r2, #0
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	609a      	str	r2, [r3, #8]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2208      	movs	r2, #8
 800027e:	611a      	str	r2, [r3, #16]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 800028c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000290:	e000      	b.n	8000294 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 8000292:	2200      	movs	r2, #0
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	619a      	str	r2, [r3, #24]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 800029e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002a2:	e000      	b.n	80002a6 <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80002a4:	2200      	movs	r2, #0
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	61da      	str	r2, [r3, #28]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	2200      	movs	r2, #0
 80002ae:	621a      	str	r2, [r3, #32]
  txHeader.MessageMarker = 0;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2200      	movs	r2, #0
 80002b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b088      	sub	sp, #32
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d902      	bls.n	80002da <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 80002d4:	f000 fe6a 	bl	8000fac <Error_Handler>
 80002d8:	e02a      	b.n	8000330 <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]
 80002e6:	e00c      	b.n	8000302 <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 80002e8:	68ba      	ldr	r2, [r7, #8]
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	4413      	add	r3, r2
 80002ee:	7819      	ldrb	r1, [r3, #0]
 80002f0:	f107 0214 	add.w	r2, r7, #20
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	4413      	add	r3, r2
 80002f8:	460a      	mov	r2, r1
 80002fa:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	3301      	adds	r3, #1
 8000300:	61fb      	str	r3, [r7, #28]
 8000302:	69fa      	ldr	r2, [r7, #28]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d3ee      	bcc.n	80002e8 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	6818      	ldr	r0, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3304      	adds	r3, #4
 8000312:	f107 0214 	add.w	r2, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	f004 f886 	bl	8004428 <HAL_FDCAN_AddMessageToTxFifoQ>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	bf14      	ite	ne
 8000322:	2301      	movne	r3, #1
 8000324:	2300      	moveq	r3, #0
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 800032c:	f000 fe3e 	bl	8000fac <Error_Handler>
  }
}
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d02e      	beq.n	80003a8 <_ZN6CanCom15rxFifo0CallbackEm+0x72>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6818      	ldr	r0, [r3, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3358      	adds	r3, #88	@ 0x58
 8000358:	2140      	movs	r1, #64	@ 0x40
 800035a:	f004 f8a9 	bl	80044b0 <HAL_FDCAN_GetRxMessage>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf14      	ite	ne
 8000364:	2301      	movne	r3, #1
 8000366:	2300      	moveq	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 800036e:	f000 fe1d 	bl	8000fac <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f004 f9a0 	bl	80046c0 <HAL_FDCAN_ActivateNotification>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	bf14      	ite	ne
 8000386:	2301      	movne	r3, #1
 8000388:	2300      	moveq	r3, #0
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 8000390:	f000 fe0c 	bl	8000fac <Error_Handler>
    }

    canRxInterrupt = 1;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2201      	movs	r2, #1
 8000398:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a4:	f004 fe6a 	bl	800507c <HAL_GPIO_WritePin>

  }
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == 1) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	bf0c      	ite	eq
 80003c4:	2301      	moveq	r3, #1
 80003c6:	2300      	movne	r3, #0
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d009      	beq.n	80003e2 <_ZN6CanCom12handleRxDataEv+0x32>
    canData.genFuncRef = rxData[0];
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
    canRxInterrupt = 0;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  handleRxData();
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ffda 	bl	80003b0 <_ZN6CanCom12handleRxDataEv>

  uint8_t currentGenFuncRef = canData.genFuncRef;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8000402:	73fb      	strb	r3, [r7, #15]
  uint8_t diff = prevGenFuncRef ^ currentGenFuncRef;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4053      	eors	r3, r2
 800040e:	73bb      	strb	r3, [r7, #14]

  if (diff == 0) {
 8000410:	7bbb      	ldrb	r3, [r7, #14]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d01b      	beq.n	800044e <_ZN6CanCom6rxTaskEv+0x60>
    return;
  }

  if (canData.genFuncRef == 0) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800041c:	2b00      	cmp	r3, #0
 800041e:	d106      	bne.n	800042e <_ZN6CanCom6rxTaskEv+0x40>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2120      	movs	r1, #32
 8000424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000428:	f004 fe28 	bl	800507c <HAL_GPIO_WritePin>
 800042c:	e00a      	b.n	8000444 <_ZN6CanCom6rxTaskEv+0x56>
  } else if (canData.genFuncRef == 1) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8000434:	2b01      	cmp	r3, #1
 8000436:	d105      	bne.n	8000444 <_ZN6CanCom6rxTaskEv+0x56>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2120      	movs	r1, #32
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f004 fe1c 	bl	800507c <HAL_GPIO_WritePin>
  }
  prevGenFuncRef = currentGenFuncRef;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7bfa      	ldrb	r2, [r7, #15]
 8000448:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800044c:	e000      	b.n	8000450 <_ZN6CanCom6rxTaskEv+0x62>
    return;
 800044e:	bf00      	nop
}
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <HAL_FDCAN_RxFifo0Callback>:

extern "C" void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
      canCom.rxFifo0Callback(RxFifo0ITs);
 8000462:	6839      	ldr	r1, [r7, #0]
 8000464:	4803      	ldr	r0, [pc, #12]	@ (8000474 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8000466:	f7ff ff66 	bl	8000336 <_ZN6CanCom15rxFifo0CallbackEm>
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200002ec 	.word	0x200002ec

08000478 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <LL_CORDIC_Config+0x44>)
 800048c:	4013      	ands	r3, r2
 800048e:	68b9      	ldr	r1, [r7, #8]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	4311      	orrs	r1, r2
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	4311      	orrs	r1, r2
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	4311      	orrs	r1, r2
 800049c:	69fa      	ldr	r2, [r7, #28]
 800049e:	4311      	orrs	r1, r2
 80004a0:	6a3a      	ldr	r2, [r7, #32]
 80004a2:	4311      	orrs	r1, r2
 80004a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004a6:	430a      	orrs	r2, r1
 80004a8:	431a      	orrs	r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	ff87f800 	.word	0xff87f800

080004c0 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	605a      	str	r2, [r3, #4]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af04      	add	r7, sp, #16
 80004fa:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80004fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6493      	str	r3, [r2, #72]	@ 0x48
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800050a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8000514:	2300      	movs	r3, #0
 8000516:	9303      	str	r3, [sp, #12]
 8000518:	2300      	movs	r3, #0
 800051a:	9302      	str	r3, [sp, #8]
 800051c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2300      	movs	r3, #0
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2250      	movs	r2, #80	@ 0x50
 800052a:	2100      	movs	r1, #0
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 800052e:	f7ff ffa3 	bl	8000478 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	40020c00 	.word	0x40020c00

08000544 <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4619      	mov	r1, r3
 8000552:	4817      	ldr	r0, [pc, #92]	@ (80005b0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8000554:	f7ff ffb4 	bl	80004c0 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8000558:	4815      	ldr	r0, [pc, #84]	@ (80005b0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 800055a:	f7ff ffbf 	bl	80004dc <LL_CORDIC_ReadData>
 800055e:	4603      	mov	r3, r0
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f88f 	bl	8000684 <_ZN10Acrocantho6Cordic8from_q31Em>
 8000566:	eef0 7a40 	vmov.f32	s15, s0
 800056a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 800056e:	4810      	ldr	r0, [pc, #64]	@ (80005b0 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8000570:	f7ff ffb4 	bl	80004dc <LL_CORDIC_ReadData>
 8000574:	4603      	mov	r3, r0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f884 	bl	8000684 <_ZN10Acrocantho6Cordic8from_q31Em>
 800057c:	eef0 7a40 	vmov.f32	s15, s0
 8000580:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	f107 0210 	add.w	r2, r7, #16
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
 8000594:	69ba      	ldr	r2, [r7, #24]
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	ee07 2a10 	vmov	s14, r2
 800059c:	ee07 3a90 	vmov	s15, r3
  };
 80005a0:	eeb0 0a47 	vmov.f32	s0, s14
 80005a4:	eef0 0a67 	vmov.f32	s1, s15
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 80005c4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005c8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800067c <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 80005cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d0:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 80005d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 3a90 	vmov	r3, s15
 80005e0:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80005f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005f4:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 80005f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80005fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000604:	d507      	bpl.n	8000616 <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 8000606:	edd7 7a06 	vldr	s15, [r7, #24]
 800060a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800060e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000612:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 8000616:	edd7 7a06 	vldr	s15, [r7, #24]
 800061a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800061e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000626:	dd06      	ble.n	8000636 <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8000628:	edd7 7a06 	vldr	s15, [r7, #24]
 800062c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000634:	e001      	b.n	800063a <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8000636:	edd7 7a06 	vldr	s15, [r7, #24]
 800063a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000680 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 800063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8000646:	ee17 1a90 	vmov	r1, s15
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff ff7a 	bl	8000544 <_ZNK10Acrocantho6CordicclEl>
 8000650:	eeb0 7a40 	vmov.f32	s14, s0
 8000654:	eef0 7a60 	vmov.f32	s15, s1
 8000658:	ed87 7a04 	vstr	s14, [r7, #16]
 800065c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	ee07 2a10 	vmov	s14, r2
 8000668:	ee07 3a90 	vmov	s15, r3
  }
 800066c:	eeb0 0a47 	vmov.f32	s0, s14
 8000670:	eef0 0a67 	vmov.f32	s1, s15
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40c90fdb 	.word	0x40c90fdb
 8000680:	4f800000 	.word	0x4f800000

08000684 <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000696:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80006ac <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 800069a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 800069e:	eeb0 0a67 	vmov.f32	s0, s15
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	30000000 	.word	0x30000000

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08e      	sub	sp, #56	@ 0x38
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 f818 	bl	80016ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f8b5 	bl	8000828 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fbf5 	bl	8000eac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006c2:	f000 fbc1 	bl	8000e48 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 80006c6:	f000 f905 	bl	80008d4 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80006ca:	f000 f999 	bl	8000a00 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 80006ce:	f000 fa53 	bl	8000b78 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 80006d2:	f000 fa9d 	bl	8000c10 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 80006d6:	f000 fae9 	bl	8000cac <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 80006da:	f000 fa35 	bl	8000b48 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006de:	217f      	movs	r1, #127	@ 0x7f
 80006e0:	484a      	ldr	r0, [pc, #296]	@ (800080c <main+0x15c>)
 80006e2:	f002 f987 	bl	80029f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80006e6:	217f      	movs	r1, #127	@ 0x7f
 80006e8:	4849      	ldr	r0, [pc, #292]	@ (8000810 <main+0x160>)
 80006ea:	f002 f983 	bl	80029f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80006ee:	4847      	ldr	r0, [pc, #284]	@ (800080c <main+0x15c>)
 80006f0:	f001 fb84 	bl	8001dfc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80006f4:	4846      	ldr	r0, [pc, #280]	@ (8000810 <main+0x160>)
 80006f6:	f001 fb81 	bl	8001dfc <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80006fa:	4844      	ldr	r0, [pc, #272]	@ (800080c <main+0x15c>)
 80006fc:	f002 f9dc 	bl	8002ab8 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4844      	ldr	r0, [pc, #272]	@ (8000814 <main+0x164>)
 8000704:	f006 fc74 	bl	8006ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000708:	2104      	movs	r1, #4
 800070a:	4842      	ldr	r0, [pc, #264]	@ (8000814 <main+0x164>)
 800070c:	f006 fc70 	bl	8006ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000710:	2108      	movs	r1, #8
 8000712:	4840      	ldr	r0, [pc, #256]	@ (8000814 <main+0x164>)
 8000714:	f006 fc6c 	bl	8006ff0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	483e      	ldr	r0, [pc, #248]	@ (8000814 <main+0x164>)
 800071c:	f007 fa92 	bl	8007c44 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	483c      	ldr	r0, [pc, #240]	@ (8000814 <main+0x164>)
 8000724:	f007 fa8e 	bl	8007c44 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000728:	2108      	movs	r1, #8
 800072a:	483a      	ldr	r0, [pc, #232]	@ (8000814 <main+0x164>)
 800072c:	f007 fa8a 	bl	8007c44 <HAL_TIMEx_PWMN_Start>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterIndex = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800073c:	2301      	movs	r3, #1
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	4619      	mov	r1, r3
 800074e:	4832      	ldr	r0, [pc, #200]	@ (8000818 <main+0x168>)
 8000750:	f003 fde8 	bl	8004324 <HAL_FDCAN_ConfigFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <main+0xb8>
    {
        // フィルタ設定エラー
        Error_Handler();
 8000764:	f000 fc22 	bl	8000fac <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 8000768:	482b      	ldr	r0, [pc, #172]	@ (8000818 <main+0x168>)
 800076a:	f003 fe35 	bl	80043d8 <HAL_FDCAN_Start>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0xd2>
	  Error_Handler();
 800077e:	f000 fc15 	bl	8000fac <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	4824      	ldr	r0, [pc, #144]	@ (8000818 <main+0x168>)
 8000788:	f003 ff9a 	bl	80046c0 <HAL_FDCAN_ActivateNotification>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <main+0xf0>
    /* Notification Error */
    Error_Handler();
 800079c:	f000 fc06 	bl	8000fac <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fea5 	bl	80004f4 <_ZN10Acrocantho6CordicC1Ev>
  
  canCom.initTxHeader(0x00, false, false);
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	481a      	ldr	r0, [pc, #104]	@ (800081c <main+0x16c>)
 80007b2:	f7ff fd48 	bl	8000246 <_ZN6CanCom12initTxHeaderEmbb>
  uint8_t dataToSend[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
 80007b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <main+0x170>)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c0:	e883 0003 	stmia.w	r3, {r0, r1}
  canCom.sendData(dataToSend, sizeof(dataToSend));
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2208      	movs	r2, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	4813      	ldr	r0, [pc, #76]	@ (800081c <main+0x16c>)
 80007ce:	f7ff fd78 	bl	80002c2 <_ZN6CanCom8sendDataEPKhj>
  HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d6:	f000 fff9 	bl	80017cc <HAL_Delay>

  float a;
  float b;
  while (1)
  {
    Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000824 <main+0x174>
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fee6 	bl	80005b4 <_ZNK10Acrocantho6Cordic7radiansEf>
 80007e8:	eeb0 7a40 	vmov.f32	s14, s0
 80007ec:	eef0 7a60 	vmov.f32	s15, s1
 80007f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80007f4:	edc7 7a02 	vstr	s15, [r7, #8]
    a = result.c;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
    b = result.s;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	633b      	str	r3, [r7, #48]	@ 0x30
    
    canCom.rxTask();
 8000800:	4806      	ldr	r0, [pc, #24]	@ (800081c <main+0x16c>)
 8000802:	f7ff fdf4 	bl	80003ee <_ZN6CanCom6rxTaskEv>
    

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000806:	bf00      	nop
 8000808:	e7e7      	b.n	80007da <main+0x12a>
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	20000094 	.word	0x20000094
 8000814:	200002a0 	.word	0x200002a0
 8000818:	20000128 	.word	0x20000128
 800081c:	200002ec 	.word	0x200002ec
 8000820:	080080fc 	.word	0x080080fc
 8000824:	40490fdb 	.word	0x40490fdb

08000828 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	2238      	movs	r2, #56	@ 0x38
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fc28 	bl	800808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800084a:	2000      	movs	r0, #0
 800084c:	f005 fb80 	bl	8005f50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000866:	2304      	movs	r3, #4
 8000868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800086a:	2355      	movs	r3, #85	@ 0x55
 800086c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	4618      	mov	r0, r3
 8000880:	f005 fc1a 	bl	80060b8 <HAL_RCC_OscConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf14      	ite	ne
 800088a:	2301      	movne	r3, #1
 800088c:	2300      	moveq	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000894:	f000 fb8a 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2303      	movs	r3, #3
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2104      	movs	r1, #4
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 ff13 	bl	80066dc <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80008c6:	f000 fb71 	bl	8000fac <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	@ 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b092      	sub	sp, #72	@ 0x48
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	223c      	movs	r2, #60	@ 0x3c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 fbcd 	bl	800808c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f2:	4b41      	ldr	r3, [pc, #260]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 80008f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008fa:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 80008fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000900:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000902:	4b3d      	ldr	r3, [pc, #244]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800090e:	4b3a      	ldr	r3, [pc, #232]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000914:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091a:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800091c:	2204      	movs	r2, #4
 800091e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000920:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000922:	2200      	movs	r2, #0
 8000924:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000926:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000928:	2200      	movs	r2, #0
 800092a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800092c:	4b32      	ldr	r3, [pc, #200]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800092e:	2201      	movs	r2, #1
 8000930:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800093a:	4b2f      	ldr	r3, [pc, #188]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000942:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000944:	2200      	movs	r2, #0
 8000946:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	4829      	ldr	r0, [pc, #164]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 8000952:	f001 f897 	bl	8001a84 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf14      	ite	ne
 800095c:	2301      	movne	r3, #1
 800095e:	2300      	moveq	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8000966:	f000 fb21 	bl	8000fac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800096a:	2305      	movs	r3, #5
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800096e:	2300      	movs	r3, #0
 8000970:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000972:	2300      	movs	r3, #0
 8000974:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000976:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800097a:	4619      	mov	r1, r3
 800097c:	481e      	ldr	r0, [pc, #120]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 800097e:	f002 feff 	bl	8003780 <HAL_ADCEx_MultiModeConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8000992:	f000 fb0b 	bl	8000fac <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <_ZL12MX_ADC1_Initv+0x128>)
 8000998:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800099a:	2309      	movs	r3, #9
 800099c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80009a2:	237f      	movs	r3, #127	@ 0x7f
 80009a4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80009a6:	2304      	movs	r3, #4
 80009a8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <_ZL12MX_ADC1_Initv+0x124>)
 80009d8:	f002 f9a6 	bl	8002d28 <HAL_ADCEx_InjectedConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf14      	ite	ne
 80009e2:	2301      	movne	r3, #1
 80009e4:	2300      	moveq	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 80009ec:	f000 fade 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3748      	adds	r7, #72	@ 0x48
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000028 	.word	0x20000028
 80009fc:	04300002 	.word	0x04300002

08000a00 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	@ 0x40
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	223c      	movs	r2, #60	@ 0x3c
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f007 fb3d 	bl	800808c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a12:	4b48      	ldr	r3, [pc, #288]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a14:	4a48      	ldr	r2, [pc, #288]	@ (8000b38 <_ZL12MX_ADC2_Initv+0x138>)
 8000a16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a18:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a1e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a20:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a26:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a2c:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a44:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a50:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a58:	4b36      	ldr	r3, [pc, #216]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a66:	4b33      	ldr	r3, [pc, #204]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a6e:	4831      	ldr	r0, [pc, #196]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000a70:	f001 f808 	bl	8001a84 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8000a84:	f000 fa92 	bl	8000fac <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <_ZL12MX_ADC2_Initv+0x13c>)
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000a8c:	2309      	movs	r3, #9
 8000a8e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a94:	237f      	movs	r3, #127	@ 0x7f
 8000a96:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000ac2:	f002 f931 	bl	8002d28 <HAL_ADCEx_InjectedConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8000ad6:	f000 fa69 	bl	8000fac <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <_ZL12MX_ADC2_Initv+0x140>)
 8000adc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ade:	f240 130f 	movw	r3, #271	@ 0x10f
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000aea:	f002 f91d 	bl	8002d28 <HAL_ADCEx_InjectedConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8000afe:	f000 fa55 	bl	8000fac <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <_ZL12MX_ADC2_Initv+0x144>)
 8000b04:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000b06:	f240 2315 	movw	r3, #533	@ 0x215
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <_ZL12MX_ADC2_Initv+0x134>)
 8000b12:	f002 f909 	bl	8002d28 <HAL_ADCEx_InjectedConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf14      	ite	ne
 8000b1c:	2301      	movne	r3, #1
 8000b1e:	2300      	moveq	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8000b26:	f000 fa41 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3740      	adds	r7, #64	@ 0x40
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000094 	.word	0x20000094
 8000b38:	50000100 	.word	0x50000100
 8000b3c:	08600004 	.word	0x08600004
 8000b40:	0c900008 	.word	0x0c900008
 8000b44:	10c00010 	.word	0x10c00010

08000b48 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_ZL14MX_CORDIC_Initv+0x28>)
 8000b4e:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <_ZL14MX_CORDIC_Initv+0x2c>)
 8000b50:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b52:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <_ZL14MX_CORDIC_Initv+0x28>)
 8000b54:	f002 ff1c 	bl	8003990 <HAL_CORDIC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8000b68:	f000 fa20 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000100 	.word	0x20000100
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b8a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bb0:	220b      	movs	r2, #11
 8000bb2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bb6:	2238      	movs	r2, #56	@ 0x38
 8000bb8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bbc:	220b      	movs	r2, #11
 8000bbe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bc2:	2205      	movs	r2, #5
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bea:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000bec:	f003 fa40 	bl	8004070 <HAL_FDCAN_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL14MX_FDCAN1_Initv+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f9d4 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000128 	.word	0x20000128
 8000c0c:	40006400 	.word	0x40006400

08000c10 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <_ZL12MX_I2C1_Initv+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <_ZL12MX_I2C1_Initv+0x98>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	4815      	ldr	r0, [pc, #84]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c4c:	f004 fa51 	bl	80050f2 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000c60:	f000 f9a4 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c68:	f005 f8db 	bl	8005e22 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000c7c:	f000 f996 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <_ZL12MX_I2C1_Initv+0x90>)
 8000c84:	f005 f918 	bl	8005eb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f988 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000018c 	.word	0x2000018c
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40b285c2 	.word	0x40b285c2

08000cac <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b098      	sub	sp, #96	@ 0x60
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2234      	movs	r2, #52	@ 0x34
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f007 f9d7 	bl	800808c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cde:	4b58      	ldr	r3, [pc, #352]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000ce0:	4a58      	ldr	r2, [pc, #352]	@ (8000e44 <_ZL12MX_TIM1_Initv+0x198>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ce4:	4b56      	ldr	r3, [pc, #344]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cea:	4b55      	ldr	r3, [pc, #340]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000cec:	2220      	movs	r2, #32
 8000cee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000cf0:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000cf2:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000cf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000cfe:	4b50      	ldr	r3, [pc, #320]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d04:	4b4e      	ldr	r3, [pc, #312]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d0a:	484d      	ldr	r0, [pc, #308]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d0c:	f006 f918 	bl	8006f40 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2301      	movne	r3, #1
 8000d18:	2300      	moveq	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000d20:	f000 f944 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d24:	2320      	movs	r3, #32
 8000d26:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000d28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d36:	4619      	mov	r1, r3
 8000d38:	4841      	ldr	r0, [pc, #260]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d3a:	f007 f845 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 8000d4e:	f000 f92d 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	@ 0x60
 8000d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d78:	f006 fa4c 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8000d8c:	f000 f90e 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4829      	ldr	r0, [pc, #164]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000d9a:	f006 fa3b 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8000dae:	f000 f8fd 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000db6:	2208      	movs	r2, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	4821      	ldr	r0, [pc, #132]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000dbc:	f006 fa2a 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000dd0:	f000 f8ec 	bl	8000fac <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000dd4:	481a      	ldr	r0, [pc, #104]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000dd6:	f007 f921 	bl	800801c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000de6:	2314      	movs	r3, #20
 8000de8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	480a      	ldr	r0, [pc, #40]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000e18:	f007 f86c 	bl	8007ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8000e2c:	f000 f8be 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e30:	4803      	ldr	r0, [pc, #12]	@ (8000e40 <_ZL12MX_TIM1_Initv+0x194>)
 8000e32:	f000 fb47 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 8000e36:	bf00      	nop
 8000e38:	3760      	adds	r7, #96	@ 0x60
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200002a0 	.word	0x200002a0
 8000e44:	40012c00 	.word	0x40012c00

08000e48 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e52:	4a15      	ldr	r2, [pc, #84]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <_ZL11MX_DMA_Initv+0x60>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200b      	movs	r0, #11
 8000e84:	f002 fe91 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e88:	200b      	movs	r0, #11
 8000e8a:	f002 fea8 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200c      	movs	r0, #12
 8000e94:	f002 fe89 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e98:	200c      	movs	r0, #12
 8000e9a:	f002 fea0 	bl	8003bde <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a37      	ldr	r2, [pc, #220]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	4b32      	ldr	r3, [pc, #200]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a31      	ldr	r2, [pc, #196]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a25      	ldr	r2, [pc, #148]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2120      	movs	r1, #32
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2a:	f004 f8a7 	bl	800507c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000f46:	f003 ff17 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f003 ff06 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f003 fef7 	bl	8004d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2028      	movs	r0, #40	@ 0x28
 8000f90:	f002 fe0b 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f94:	2028      	movs	r0, #40	@ 0x28
 8000f96:	f002 fe22 	bl	8003bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000800 	.word	0x48000800

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d103      	bne.n	8000fda <_Z41__static_initialization_and_destruction_0ii+0x22>
CanCom canCom(hfdcan1);
 8000fd2:	4904      	ldr	r1, [pc, #16]	@ (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000fd6:	f7ff f91f 	bl	8000218 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000128 	.word	0x20000128
 8000fe8:	200002ec 	.word	0x200002ec

08000fec <_GLOBAL__sub_I_hadc1>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ffdf 	bl	8000fb8 <_Z41__static_initialization_and_destruction_0ii>
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	@ 0x60
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x44>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x44>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	6593      	str	r3, [r2, #88]	@ 0x58
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x44>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001032:	f005 f831 	bl	8006098 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0a0      	sub	sp, #128	@ 0x80
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	2254      	movs	r2, #84	@ 0x54
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f007 f811 	bl	800808c <memset>
  if(hadc->Instance==ADC1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001072:	d146      	bne.n	8001102 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001078:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800107a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800107e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fd0d 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001090:	f7ff ff8c 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001094:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a41      	ldr	r2, [pc, #260]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 800109c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109e:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10b      	bne.n	80010be <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a6:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a3e      	ldr	r2, [pc, #248]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a38      	ldr	r2, [pc, #224]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d6:	2301      	movs	r3, #1
 80010d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f003 fe44 	bl	8004d78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2012      	movs	r0, #18
 80010f6:	f002 fd58 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010fa:	2012      	movs	r0, #18
 80010fc:	f002 fd6f 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001100:	e04a      	b.n	8001198 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a28      	ldr	r2, [pc, #160]	@ (80011a8 <HAL_ADC_MspInit+0x164>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d145      	bne.n	8001198 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800110c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001110:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001112:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001116:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fcc1 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8001128:	f7ff ff40 	bl	8000fac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 8001134:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_ADC_MspInit+0x15c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10b      	bne.n	8001156 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 8001144:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_ADC_MspInit+0x160>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800116e:	23c2      	movs	r3, #194	@ 0xc2
 8001170:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f003 fdf8 	bl	8004d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2012      	movs	r0, #18
 800118e:	f002 fd0c 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001192:	2012      	movs	r0, #18
 8001194:	f002 fd23 	bl	8003bde <HAL_NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3780      	adds	r7, #128	@ 0x80
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000350 	.word	0x20000350
 80011a4:	40021000 	.word	0x40021000
 80011a8:	50000100 	.word	0x50000100

080011ac <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_CORDIC_MspInit+0x38>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10b      	bne.n	80011d6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_CORDIC_MspInit+0x3c>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_CORDIC_MspInit+0x3c>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <HAL_CORDIC_MspInit+0x3c>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09e      	sub	sp, #120	@ 0x78
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2254      	movs	r2, #84	@ 0x54
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f006 ff3d 	bl	800808c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <HAL_FDCAN_MspInit+0xcc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d149      	bne.n	80012b0 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800121c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001220:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001226:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f005 fc39 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001238:	f7ff feb8 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001246:	6593      	str	r3, [r2, #88]	@ 0x58
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_FDCAN_MspInit+0xd0>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001270:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800127e:	2309      	movs	r3, #9
 8001280:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f003 fd74 	bl	8004d78 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2015      	movs	r0, #21
 8001296:	f002 fc88 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800129a:	2015      	movs	r0, #21
 800129c:	f002 fc9f 	bl	8003bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2016      	movs	r0, #22
 80012a6:	f002 fc80 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80012aa:	2016      	movs	r0, #22
 80012ac:	f002 fc97 	bl	8003bde <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	3778      	adds	r7, #120	@ 0x78
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40006400 	.word	0x40006400
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a0      	sub	sp, #128	@ 0x80
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2254      	movs	r2, #84	@ 0x54
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fed3 	bl	800808c <memset>
  if(hi2c->Instance==I2C1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001468 <HAL_I2C_MspInit+0x1a8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f040 80b6 	bne.w	800145e <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fbd0 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800130a:	f7ff fe4f 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a56      	ldr	r2, [pc, #344]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b51      	ldr	r3, [pc, #324]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800133e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001342:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135e:	f003 fd0b 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001366:	2312      	movs	r3, #18
 8001368:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001372:	2304      	movs	r3, #4
 8001374:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800137a:	4619      	mov	r1, r3
 800137c:	483c      	ldr	r0, [pc, #240]	@ (8001470 <HAL_I2C_MspInit+0x1b0>)
 800137e:	f003 fcfb 	bl	8004d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001382:	4b3a      	ldr	r3, [pc, #232]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	4a39      	ldr	r2, [pc, #228]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001388:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800138c:	6593      	str	r3, [r2, #88]	@ 0x58
 800138e:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_I2C_MspInit+0x1ac>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800139a:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 800139c:	4a36      	ldr	r2, [pc, #216]	@ (8001478 <HAL_I2C_MspInit+0x1b8>)
 800139e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80013a0:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a6:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b2:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013d0:	4828      	ldr	r0, [pc, #160]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013d2:	f002 fc1f 	bl	8003c14 <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80013dc:	f7ff fde6 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a24      	ldr	r2, [pc, #144]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <HAL_I2C_MspInit+0x1b4>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 80013ee:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_I2C_MspInit+0x1c0>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 80013f4:	2211      	movs	r2, #17
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f8:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 80013fa:	2210      	movs	r2, #16
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001422:	4816      	ldr	r0, [pc, #88]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001424:	f002 fbf6 	bl	8003c14 <HAL_DMA_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800142e:	f7ff fdbd 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a11      	ldr	r2, [pc, #68]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 8001436:	639a      	str	r2, [r3, #56]	@ 0x38
 8001438:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_I2C_MspInit+0x1bc>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201f      	movs	r0, #31
 8001444:	f002 fbb1 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001448:	201f      	movs	r0, #31
 800144a:	f002 fbc8 	bl	8003bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2020      	movs	r0, #32
 8001454:	f002 fba9 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001458:	2020      	movs	r0, #32
 800145a:	f002 fbc0 	bl	8003bde <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3780      	adds	r7, #128	@ 0x80
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40005400 	.word	0x40005400
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	200001e0 	.word	0x200001e0
 8001478:	40020008 	.word	0x40020008
 800147c:	20000240 	.word	0x20000240
 8001480:	4002001c 	.word	0x4002001c

08001484 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_TIM_PWM_MspInit+0x38>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10b      	bne.n	80014ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800149c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40012c00 	.word	0x40012c00
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <HAL_TIM_MspPostInit+0x9c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d138      	bne.n	8001558 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_TIM_MspPostInit+0xa0>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001516:	2307      	movs	r3, #7
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001526:	2302      	movs	r3, #2
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <HAL_TIM_MspPostInit+0xa4>)
 8001532:	f003 fc21 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001536:	f242 0303 	movw	r3, #8195	@ 0x2003
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001548:	2306      	movs	r3, #6
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	@ (800156c <HAL_TIM_MspPostInit+0xa8>)
 8001554:	f003 fc10 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40021000 	.word	0x40021000
 8001568:	48000800 	.word	0x48000800
 800156c:	48000400 	.word	0x48000400

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 f8e3 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <DMA1_Channel1_IRQHandler+0x10>)
 80015d6:	f002 fc2c 	bl	8003e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001e0 	.word	0x200001e0

080015e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <DMA1_Channel2_IRQHandler+0x10>)
 80015ea:	f002 fc22 	bl	8003e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000240 	.word	0x20000240

080015f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <ADC1_2_IRQHandler+0x14>)
 80015fe:	f000 fce1 	bl	8001fc4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001602:	4803      	ldr	r0, [pc, #12]	@ (8001610 <ADC1_2_IRQHandler+0x18>)
 8001604:	f000 fcde 	bl	8001fc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000028 	.word	0x20000028
 8001610:	20000094 	.word	0x20000094

08001614 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <FDCAN1_IT0_IRQHandler+0x10>)
 800161a:	f003 f937 	bl	800488c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000128 	.word	0x20000128

08001628 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <FDCAN1_IT1_IRQHandler+0x10>)
 800162e:	f003 f92d 	bl	800488c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000128 	.word	0x20000128

0800163c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <I2C1_EV_IRQHandler+0x10>)
 8001642:	f003 fdf1 	bl	8005228 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000018c 	.word	0x2000018c

08001650 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <I2C1_ER_IRQHandler+0x10>)
 8001656:	f003 fe01 	bl	800525c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000018c 	.word	0x2000018c

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001668:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800166c:	f003 fd1e 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001698:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800169a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff ffea 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	@ (80016d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <LoopForever+0xe>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <LoopForever+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f006 fce9 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7fe fff1 	bl	80006b0 <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   r0, =_estack
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016dc:	08008130 	.word	0x08008130
  ldr r2, =_sbss
 80016e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016e4:	20000358 	.word	0x20000358

080016e8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC3_IRQHandler>

080016ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f002 fa4d 	bl	8003b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f80e 	bl	800171c <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e001      	b.n	8001710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800170c:	f7ff fc76 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001710:	79fb      	ldrb	r3, [r7, #7]

}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_InitTick+0x68>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d022      	beq.n	8001776 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_InitTick+0x6c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_InitTick+0x68>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800173c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fa58 	bl	8003bfa <HAL_SYSTICK_Config>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10f      	bne.n	8001770 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	d809      	bhi.n	800176a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001756:	2200      	movs	r2, #0
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	f04f 30ff 	mov.w	r0, #4294967295
 800175e:	f002 fa24 	bl	8003baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_InitTick+0x70>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e007      	b.n	800177a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e004      	b.n	800177a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_IncTick+0x1c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_IncTick+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4413      	add	r3, r2
 800179e:	4a03      	ldr	r2, [pc, #12]	@ (80017ac <HAL_IncTick+0x1c>)
 80017a0:	6013      	str	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000354 	.word	0x20000354
 80017b0:	20000008 	.word	0x20000008

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000354 	.word	0x20000354

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d004      	beq.n	80017f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_Delay+0x40>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f0:	bf00      	nop
 80017f2:	f7ff ffdf 	bl	80017b4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d8f7      	bhi.n	80017f2 <HAL_Delay+0x26>
  {
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000008 	.word	0x20000008

08001810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001884:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6093      	str	r3, [r2, #8]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800190a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800190e:	d101      	bne.n	8001914 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001932:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001936:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001982:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <LL_ADC_IsEnabled+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_ADC_IsEnabled+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_IsDisableOngoing+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_IsDisableOngoing+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a22:	f043 0204 	orr.w	r2, r3, #4
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d101      	bne.n	8001a74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1a9      	b.n	8001df2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fac9 	bl	8001044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff18 	bl	80018fa <LL_ADC_IsDeepPowerDownEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fefe 	bl	80018d6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff33 	bl	800194a <LL_ADC_IsInternalRegulatorEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d115      	bne.n	8001b16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff17 	bl	8001922 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d68 <HAL_ADC_Init+0x2e4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	4a9c      	ldr	r2, [pc, #624]	@ (8001d6c <HAL_ADC_Init+0x2e8>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff15 	bl	800194a <LL_ADC_IsInternalRegulatorEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff75 	bl	8001a36 <LL_ADC_REG_IsConversionOngoing>
 8001b4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 8142 	bne.w	8001de0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 813e 	bne.w	8001de0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b6c:	f043 0202 	orr.w	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff22 	bl	80019c2 <LL_ADC_IsEnabled>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d141      	bne.n	8001c08 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b8c:	d004      	beq.n	8001b98 <HAL_ADC_Init+0x114>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	@ (8001d70 <HAL_ADC_Init+0x2ec>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d10f      	bne.n	8001bb8 <HAL_ADC_Init+0x134>
 8001b98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b9c:	f7ff ff11 	bl	80019c2 <LL_ADC_IsEnabled>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	4873      	ldr	r0, [pc, #460]	@ (8001d70 <HAL_ADC_Init+0x2ec>)
 8001ba4:	f7ff ff0d 	bl	80019c2 <LL_ADC_IsEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4323      	orrs	r3, r4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e012      	b.n	8001bde <HAL_ADC_Init+0x15a>
 8001bb8:	486e      	ldr	r0, [pc, #440]	@ (8001d74 <HAL_ADC_Init+0x2f0>)
 8001bba:	f7ff ff02 	bl	80019c2 <LL_ADC_IsEnabled>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	486d      	ldr	r0, [pc, #436]	@ (8001d78 <HAL_ADC_Init+0x2f4>)
 8001bc2:	f7ff fefe 	bl	80019c2 <LL_ADC_IsEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	431c      	orrs	r4, r3
 8001bca:	486c      	ldr	r0, [pc, #432]	@ (8001d7c <HAL_ADC_Init+0x2f8>)
 8001bcc:	f7ff fef9 	bl	80019c2 <LL_ADC_IsEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4323      	orrs	r3, r4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d012      	beq.n	8001c08 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bea:	d004      	beq.n	8001bf6 <HAL_ADC_Init+0x172>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5f      	ldr	r2, [pc, #380]	@ (8001d70 <HAL_ADC_Init+0x2ec>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x176>
 8001bf6:	4a62      	ldr	r2, [pc, #392]	@ (8001d80 <HAL_ADC_Init+0x2fc>)
 8001bf8:	e000      	b.n	8001bfc <HAL_ADC_Init+0x178>
 8001bfa:	4a62      	ldr	r2, [pc, #392]	@ (8001d84 <HAL_ADC_Init+0x300>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f7ff fe04 	bl	8001810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7f5b      	ldrb	r3, [r3, #29]
 8001c0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d106      	bne.n	8001c44 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	045b      	lsls	r3, r3, #17
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <HAL_ADC_Init+0x304>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fee4 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 8001c94:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d17f      	bne.n	8001d9c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d17c      	bne.n	8001d9c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ca6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cbe:	f023 0302 	bic.w	r3, r3, #2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d017      	beq.n	8001d04 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ce2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6911      	ldr	r1, [r2, #16]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001d02:	e013      	b.n	8001d2c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12a      	bne.n	8001d8c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	e019      	b.n	8001d9c <HAL_ADC_Init+0x318>
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	053e2d63 	.word	0x053e2d63
 8001d70:	50000100 	.word	0x50000100
 8001d74:	50000400 	.word	0x50000400
 8001d78:	50000500 	.word	0x50000500
 8001d7c:	50000600 	.word	0x50000600
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700
 8001d88:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10c      	bne.n	8001dbe <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f023 010f 	bic.w	r1, r3, #15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dbc:	e007      	b.n	8001dce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 020f 	bic.w	r2, r2, #15
 8001dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dde:	e007      	b.n	8001df0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	f043 0210 	orr.w	r2, r3, #16
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop

08001dfc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_Start+0x1c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a67      	ldr	r2, [pc, #412]	@ (8001fb0 <HAL_ADC_Start+0x1b4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_Start+0x20>
 8001e18:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <HAL_ADC_Start+0x1b8>)
 8001e1a:	e000      	b.n	8001e1e <HAL_ADC_Start+0x22>
 8001e1c:	4b66      	ldr	r3, [pc, #408]	@ (8001fb8 <HAL_ADC_Start+0x1bc>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fd3d 	bl	800189e <LL_ADC_GetMultimode>
 8001e24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fe03 	bl	8001a36 <LL_ADC_REG_IsConversionOngoing>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 80b4 	bne.w	8001fa0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start+0x4a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0af      	b.n	8001fa6 <HAL_ADC_Start+0x1aa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fb36 	bl	80024c0 <ADC_Enable>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 809b 	bne.w	8001f96 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb0 <HAL_ADC_Start+0x1b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_ADC_Start+0x96>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4e      	ldr	r2, [pc, #312]	@ (8001fbc <HAL_ADC_Start+0x1c0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0x92>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e003      	b.n	8001e96 <HAL_ADC_Start+0x9a>
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc0 <HAL_ADC_Start+0x1c4>)
 8001e90:	e001      	b.n	8001e96 <HAL_ADC_Start+0x9a>
 8001e92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d002      	beq.n	8001ea4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ebc:	d106      	bne.n	8001ecc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	f023 0206 	bic.w	r2, r3, #6
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	661a      	str	r2, [r3, #96]	@ 0x60
 8001eca:	e002      	b.n	8001ed2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	221c      	movs	r2, #28
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a32      	ldr	r2, [pc, #200]	@ (8001fb0 <HAL_ADC_Start+0x1b4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_ADC_Start+0x104>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <HAL_ADC_Start+0x1c0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d002      	beq.n	8001efc <HAL_ADC_Start+0x100>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_Start+0x108>
 8001efc:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <HAL_ADC_Start+0x1c4>)
 8001efe:	e001      	b.n	8001f04 <HAL_ADC_Start+0x108>
 8001f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d008      	beq.n	8001f1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d002      	beq.n	8001f1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	d114      	bne.n	8001f48 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fd64 	bl	8001a0e <LL_ADC_REG_StartConversion>
 8001f46:	e02d      	b.n	8001fa4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <HAL_ADC_Start+0x1b4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_ADC_Start+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <HAL_ADC_Start+0x1c0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_Start+0x172>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e003      	b.n	8001f76 <HAL_ADC_Start+0x17a>
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_ADC_Start+0x1c4>)
 8001f70:	e001      	b.n	8001f76 <HAL_ADC_Start+0x17a>
 8001f72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f76:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f94:	e006      	b.n	8001fa4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001f9e:	e001      	b.n	8001fa4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	50000100 	.word	0x50000100
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	50000700 	.word	0x50000700
 8001fbc:	50000500 	.word	0x50000500
 8001fc0:	50000400 	.word	0x50000400

08001fc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe8:	d004      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x30>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a8e      	ldr	r2, [pc, #568]	@ (8002228 <HAL_ADC_IRQHandler+0x264>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x34>
 8001ff4:	4b8d      	ldr	r3, [pc, #564]	@ (800222c <HAL_ADC_IRQHandler+0x268>)
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_IRQHandler+0x36>
 8001ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8002230 <HAL_ADC_IRQHandler+0x26c>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fc4f 	bl	800189e <LL_ADC_GetMultimode>
 8002000:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d017      	beq.n	800203c <HAL_ADC_IRQHandler+0x78>
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fe70 	bl	8002d14 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_ADC_IRQHandler+0x8c>
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8094 	beq.w	8002184 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 808e 	beq.w	8002184 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fbe4 	bl	8001852 <LL_ADC_REG_IsTriggerSourceSWStart>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d072      	beq.n	8002176 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a64      	ldr	r2, [pc, #400]	@ (8002228 <HAL_ADC_IRQHandler+0x264>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_ADC_IRQHandler+0xea>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a65      	ldr	r2, [pc, #404]	@ (8002234 <HAL_ADC_IRQHandler+0x270>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_IRQHandler+0xe6>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_IRQHandler+0xee>
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_ADC_IRQHandler+0x274>)
 80020ac:	e001      	b.n	80020b2 <HAL_ADC_IRQHandler+0xee>
 80020ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d002      	beq.n	80020cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d104      	bne.n	80020d6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	e014      	b.n	8002100 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a53      	ldr	r2, [pc, #332]	@ (8002228 <HAL_ADC_IRQHandler+0x264>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x130>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a53      	ldr	r2, [pc, #332]	@ (8002234 <HAL_ADC_IRQHandler+0x270>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x12c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_IRQHandler+0x134>
 80020f0:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_ADC_IRQHandler+0x274>)
 80020f2:	e001      	b.n	80020f8 <HAL_ADC_IRQHandler+0x134>
 80020f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d135      	bne.n	8002176 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d12e      	bne.n	8002176 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fc8a 	bl	8001a36 <LL_ADC_REG_IsConversionOngoing>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11a      	bne.n	800215e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 020c 	bic.w	r2, r2, #12
 8002136:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800215c:	e00b      	b.n	8002176 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f984 	bl	8002484 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	220c      	movs	r2, #12
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_ADC_IRQHandler+0x1d4>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10b      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80b3 	beq.w	800230a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80ad 	beq.w	800230a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fb53 	bl	8001878 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fb3a 	bl	8001852 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_ADC_IRQHandler+0x264>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_ADC_IRQHandler+0x23a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_ADC_IRQHandler+0x270>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d002      	beq.n	80021fa <HAL_ADC_IRQHandler+0x236>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e003      	b.n	8002202 <HAL_ADC_IRQHandler+0x23e>
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_ADC_IRQHandler+0x274>)
 80021fc:	e001      	b.n	8002202 <HAL_ADC_IRQHandler+0x23e>
 80021fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4293      	cmp	r3, r2
 8002208:	d008      	beq.n	800221c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d002      	beq.n	800221c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b07      	cmp	r3, #7
 800221a:	d10f      	bne.n	800223c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	e01f      	b.n	8002266 <HAL_ADC_IRQHandler+0x2a2>
 8002226:	bf00      	nop
 8002228:	50000100 	.word	0x50000100
 800222c:	50000300 	.word	0x50000300
 8002230:	50000700 	.word	0x50000700
 8002234:	50000500 	.word	0x50000500
 8002238:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a8b      	ldr	r2, [pc, #556]	@ (8002470 <HAL_ADC_IRQHandler+0x4ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_ADC_IRQHandler+0x296>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a8a      	ldr	r2, [pc, #552]	@ (8002474 <HAL_ADC_IRQHandler+0x4b0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d002      	beq.n	8002256 <HAL_ADC_IRQHandler+0x292>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e003      	b.n	800225e <HAL_ADC_IRQHandler+0x29a>
 8002256:	4b88      	ldr	r3, [pc, #544]	@ (8002478 <HAL_ADC_IRQHandler+0x4b4>)
 8002258:	e001      	b.n	800225e <HAL_ADC_IRQHandler+0x29a>
 800225a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800225e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d047      	beq.n	80022fc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_ADC_IRQHandler+0x2c2>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03f      	beq.n	80022fc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d13a      	bne.n	80022fc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002290:	2b40      	cmp	r3, #64	@ 0x40
 8002292:	d133      	bne.n	80022fc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12e      	bne.n	80022fc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fbda 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11a      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d112      	bne.n	80022fc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e2:	e00b      	b.n	80022fc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	f043 0210 	orr.w	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fce1 	bl	8002cc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2260      	movs	r2, #96	@ 0x60
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d011      	beq.n	8002338 <HAL_ADC_IRQHandler+0x374>
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8b4 	bl	8002498 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3a4>
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00d      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fcc7 	bl	8002cec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <HAL_ADC_IRQHandler+0x3d4>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fcb9 	bl	8002d00 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d043      	beq.n	800242a <HAL_ADC_IRQHandler+0x466>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03e      	beq.n	800242a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b8:	e021      	b.n	80023fe <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x410>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <HAL_ADC_IRQHandler+0x4ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_IRQHandler+0x414>
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_ADC_IRQHandler+0x4b8>)
 80023d6:	e000      	b.n	80023da <HAL_ADC_IRQHandler+0x416>
 80023d8:	4b29      	ldr	r3, [pc, #164]	@ (8002480 <HAL_ADC_IRQHandler+0x4bc>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa6d 	bl	80018ba <LL_ADC_GetMultiDMATransfer>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80023e6:	2301      	movs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ea:	e008      	b.n	80023fe <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10e      	bne.n	8002422 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f845 	bl	80024ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d018      	beq.n	8002466 <HAL_ADC_IRQHandler+0x4a2>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	f043 0208 	orr.w	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800245e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fc39 	bl	8002cd8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	50000100 	.word	0x50000100
 8002474:	50000500 	.word	0x50000500
 8002478:	50000400 	.word	0x50000400
 800247c:	50000300 	.word	0x50000300
 8002480:	50000700 	.word	0x50000700

08002484 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fa76 	bl	80019c2 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d176      	bne.n	80025ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	4b3c      	ldr	r3, [pc, #240]	@ (80025d4 <ADC_Enable+0x114>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e062      	b.n	80025cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fa31 	bl	8001972 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002518:	d004      	beq.n	8002524 <ADC_Enable+0x64>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2e      	ldr	r2, [pc, #184]	@ (80025d8 <ADC_Enable+0x118>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <ADC_Enable+0x68>
 8002524:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <ADC_Enable+0x11c>)
 8002526:	e000      	b.n	800252a <ADC_Enable+0x6a>
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <ADC_Enable+0x120>)
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f983 	bl	8001836 <LL_ADC_GetCommonPathInternalCh>
 8002530:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002536:	2b00      	cmp	r3, #0
 8002538:	d013      	beq.n	8002562 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253a:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <ADC_Enable+0x124>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	4a29      	ldr	r2, [pc, #164]	@ (80025e8 <ADC_Enable+0x128>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002554:	e002      	b.n	800255c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002562:	f7ff f927 	bl	80017b4 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002568:	e028      	b.n	80025bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fa27 	bl	80019c2 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f9f7 	bl	8001972 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002584:	f7ff f916 	bl	80017b4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d914      	bls.n	80025bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d00d      	beq.n	80025bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e007      	b.n	80025cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d1cf      	bne.n	800256a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	8000003f 	.word	0x8000003f
 80025d8:	50000100 	.word	0x50000100
 80025dc:	50000300 	.word	0x50000300
 80025e0:	50000700 	.word	0x50000700
 80025e4:	20000000 	.word	0x20000000
 80025e8:	053e2d63 	.word	0x053e2d63

080025ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f9f5 	bl	80019e8 <LL_ADC_IsDisableOngoing>
 80025fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f9dc 	bl	80019c2 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d047      	beq.n	80026a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d144      	bne.n	80026a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030d 	and.w	r3, r3, #13
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10c      	bne.n	800263e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f9b6 	bl	800199a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2203      	movs	r2, #3
 8002634:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002636:	f7ff f8bd 	bl	80017b4 <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800263c:	e029      	b.n	8002692 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e023      	b.n	80026a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800265a:	f7ff f8ab 	bl	80017b4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d914      	bls.n	8002692 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1dc      	bne.n	800265a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <LL_ADC_SetCommonPathInternalCh>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_GetCommonPathInternalCh>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_SetOffset>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3360      	adds	r3, #96	@ 0x60
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <LL_ADC_SetOffset+0x44>)
 800270e:	4013      	ands	r3, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	03fff000 	.word	0x03fff000

08002734 <LL_ADC_GetOffsetChannel>:
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3360      	adds	r3, #96	@ 0x60
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_SetOffsetState>:
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3360      	adds	r3, #96	@ 0x60
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_SetOffsetSign>:
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3360      	adds	r3, #96	@ 0x60
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_SetOffsetSaturation>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3360      	adds	r3, #96	@ 0x60
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	615a      	str	r2, [r3, #20]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_INJ_GetTrigAuto>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_SetChannelSamplingTime>:
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3314      	adds	r3, #20
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	0e5b      	lsrs	r3, r3, #25
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	0d1b      	lsrs	r3, r3, #20
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2107      	movs	r1, #7
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0d1b      	lsrs	r3, r3, #20
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <LL_ADC_SetChannelSingleDiff>:
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0318 	and.w	r3, r3, #24
 80028be:	4908      	ldr	r1, [pc, #32]	@ (80028e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028c0:	40d9      	lsrs	r1, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	400b      	ands	r3, r1
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	0007ffff 	.word	0x0007ffff

080028e4 <LL_ADC_GetMultimode>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 031f 	and.w	r3, r3, #31
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_IsEnabled>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <LL_ADC_IsEnabled+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_ADC_IsEnabled+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_StartCalibration>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002938:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002942:	4313      	orrs	r3, r2
 8002944:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_IsCalibrationOnGoing>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800296c:	d101      	bne.n	8002972 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_REG_IsConversionOngoing>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d101      	bne.n	8002998 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_INJ_StartConversion>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ba:	f043 0208 	orr.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_INJ_IsConversionOngoing>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e04d      	b.n	8002aac <HAL_ADCEx_Calibration_Start+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fde7 	bl	80025ec <ADC_Disable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d136      	bne.n	8002a96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff6f 	bl	8002926 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a48:	e014      	b.n	8002a74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d90d      	bls.n	8002a74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	f023 0312 	bic.w	r3, r3, #18
 8002a60:	f043 0210 	orr.w	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e01b      	b.n	8002aac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff6d 	bl	8002958 <LL_ADC_IsCalibrationOnGoing>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e2      	bne.n	8002a4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a94:	e005      	b.n	8002aa2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	0004de01 	.word	0x0004de01

08002ab8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a78      	ldr	r2, [pc, #480]	@ (8002cb0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADCEx_InjectedStart_IT+0x20>
 8002ad4:	4b77      	ldr	r3, [pc, #476]	@ (8002cb4 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADCEx_InjectedStart_IT+0x22>
 8002ad8:	4b77      	ldr	r3, [pc, #476]	@ (8002cb8 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff02 	bl	80028e4 <LL_ADC_GetMultimode>
 8002ae0:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff71 	bl	80029ce <LL_ADC_INJ_IsConversionOngoing>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0d8      	b.n	8002ca8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b00:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b08:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0c0      	b.n	8002ca8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0b9      	b.n	8002ca8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fcbf 	bl	80024c0 <ADC_Enable>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 80a8 	bne.w	8002c9e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5e:	f023 0208 	bic.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b66:	e002      	b.n	8002b6e <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d002      	beq.n	8002b9c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADCEx_InjectedStart_IT+0xec>
 8002b9c:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_ADCEx_InjectedStart_IT+0xec>
 8002ba0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d002      	beq.n	8002bb2 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2260      	movs	r2, #96	@ 0x60
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bea:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d110      	bne.n	8002c16 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0220 	bic.w	r2, r2, #32
 8002c02:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c12:	605a      	str	r2, [r3, #4]
          break;
 8002c14:	e010      	b.n	8002c38 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c24:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	605a      	str	r2, [r3, #4]
          break;
 8002c36:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d002      	beq.n	8002c52 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	e003      	b.n	8002c5a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8002c54:	e001      	b.n	8002c5a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8002c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d008      	beq.n	8002c74 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d002      	beq.n	8002c74 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b07      	cmp	r3, #7
 8002c72:	d10d      	bne.n	8002c90 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fdd5 	bl	8002828 <LL_ADC_INJ_GetTrigAuto>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d110      	bne.n	8002ca6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fe8c 	bl	80029a6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	50000100 	.word	0x50000100
 8002cb4:	50000300 	.word	0x50000300
 8002cb8:	50000700 	.word	0x50000700
 8002cbc:	50000500 	.word	0x50000500
 8002cc0:	50000400 	.word	0x50000400

08002cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b0b6      	sub	sp, #216	@ 0xd8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f000 bcfd 	b.w	800374c <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d130      	bne.n	8002dcc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	d179      	bne.n	8002e66 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	025b      	lsls	r3, r3, #9
 8002d82:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002d8e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d9a:	e007      	b.n	8002dac <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002db2:	4b84      	ldr	r3, [pc, #528]	@ (8002fc4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dc8:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002dca:	e04c      	b.n	8002e66 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002df8:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e04:	e004      	b.n	8002e10 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 021f 	and.w	r2, r3, #31
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e56:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	430b      	orrs	r3, r1
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fdaf 	bl	80029ce <LL_ADC_INJ_IsConversionOngoing>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d124      	bne.n	8002ec0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002e90:	055a      	lsls	r2, r3, #21
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e00c      	b.n	8002ec0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002eb6:	055a      	lsls	r2, r3, #21
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fd5b 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8002eca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd7b 	bl	80029ce <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 822e 	bne.w	8003342 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 8229 	bne.w	8003342 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002f18:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002f1a:	e01f      	b.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002f2a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002f2c:	e016      	b.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d109      	bne.n	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f4a:	e007      	b.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002f5a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d110      	bne.n	8002f88 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0202 	orr.w	r2, r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
 8002f86:	e007      	b.n	8002f98 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0202 	bic.w	r2, r2, #2
 8002f96:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fa0:	d112      	bne.n	8002fc8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	4619      	mov	r1, r3
 8002fae:	f7ff fc49 	bl	8002844 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fc21 	bl	8002802 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fc0:	e011      	b.n	8002fe6 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8002fc2:	bf00      	nop
 8002fc4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f7ff fc35 	bl	8002844 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fc0e 	bl	8002802 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d022      	beq.n	800304e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6919      	ldr	r1, [r3, #16]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003018:	f7ff fb68 	bl	80026ec <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6919      	ldr	r1, [r3, #16]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff fbb4 	bl	8002796 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800303e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003042:	e000      	b.n	8003046 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003044:	2300      	movs	r3, #0
 8003046:	461a      	mov	r2, r3
 8003048:	f7ff fbc0 	bl	80027cc <LL_ADC_SetOffsetSaturation>
 800304c:	e179      	b.n	8003342 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb6d 	bl	8002734 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fb62 	bl	8002734 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	e01e      	b.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fb57 	bl	8002734 <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800309c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e004      	b.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 80030ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	e018      	b.n	8003102 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e004      	b.n	8003102 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80030f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003102:	429a      	cmp	r2, r3
 8003104:	d106      	bne.n	8003114 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fb26 	bl	8002760 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fb0a 	bl	8002734 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff faff 	bl	8002734 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	e01e      	b.n	800317e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff faf4 	bl	8002734 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800315e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e004      	b.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	e018      	b.n	80031c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80031aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80031b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e004      	b.n	80031c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80031be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fac3 	bl	8002760 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff faa7 	bl	8002734 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fa9c 	bl	8002734 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	e01e      	b.n	8003244 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa91 	bl	8002734 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800322c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e004      	b.n	8003242 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	e014      	b.n	8003286 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800326a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e004      	b.n	8003286 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 800327c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003286:	429a      	cmp	r2, r3
 8003288:	d106      	bne.n	8003298 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	2102      	movs	r1, #2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fa64 	bl	8002760 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2103      	movs	r1, #3
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fa48 	bl	8002734 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2103      	movs	r1, #3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa3d 	bl	8002734 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	f003 021f 	and.w	r2, r3, #31
 80032c2:	e017      	b.n	80032f4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2103      	movs	r1, #3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fa32 	bl	8002734 <LL_ADC_GetOffsetChannel>
 80032d0:	4603      	mov	r3, r0
 80032d2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032de:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80032ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	e011      	b.n	8003330 <HAL_ADCEx_InjectedConfigChannel+0x608>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800331a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800331c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800331e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	2103      	movs	r1, #3
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fa0f 	bl	8002760 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fada 	bl	8002900 <LL_ADC_IsEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 813d 	bne.w	80035ce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	461a      	mov	r2, r3
 8003362:	f7ff fa9b 	bl	800289c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4aa2      	ldr	r2, [pc, #648]	@ (80035f4 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	f040 812e 	bne.w	80035ce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	3301      	adds	r3, #1
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2b09      	cmp	r3, #9
 8003390:	bf94      	ite	ls
 8003392:	2301      	movls	r3, #1
 8003394:	2300      	movhi	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e019      	b.n	80033ce <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80033a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80033ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80033b2:	2320      	movs	r3, #32
 80033b4:	e003      	b.n	80033be <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80033b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d079      	beq.n	80034c6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	0e9b      	lsrs	r3, r3, #26
 80033e4:	3301      	adds	r3, #1
 80033e6:	069b      	lsls	r3, r3, #26
 80033e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ec:	e015      	b.n	800341a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e003      	b.n	8003412 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800340a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3301      	adds	r3, #1
 8003414:	069b      	lsls	r3, r3, #26
 8003416:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	3301      	adds	r3, #1
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	e017      	b.n	800346a <HAL_ADCEx_InjectedConfigChannel+0x742>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	ea42 0103 	orr.w	r1, r2, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	3301      	adds	r3, #1
 8003482:	f003 021f 	and.w	r2, r3, #31
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	051b      	lsls	r3, r3, #20
 800348e:	e018      	b.n	80034c2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c2:	430b      	orrs	r3, r1
 80034c4:	e07e      	b.n	80035c4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	3301      	adds	r3, #1
 80034da:	069b      	lsls	r3, r3, #26
 80034dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e0:	e015      	b.n	800350e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e003      	b.n	8003506 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80034fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3301      	adds	r3, #1
 8003508:	069b      	lsls	r3, r3, #26
 800350a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x806>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	0e9b      	lsrs	r3, r3, #26
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	e017      	b.n	800355e <HAL_ADCEx_InjectedConfigChannel+0x836>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	61bb      	str	r3, [r7, #24]
  return result;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	ea42 0103 	orr.w	r1, r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <HAL_ADCEx_InjectedConfigChannel+0x862>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	3301      	adds	r3, #1
 8003576:	f003 021f 	and.w	r2, r3, #31
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	051b      	lsls	r3, r3, #20
 8003584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003588:	e01b      	b.n	80035c2 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	60fb      	str	r3, [r7, #12]
  return result;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80035a2:	2320      	movs	r3, #32
 80035a4:	e003      	b.n	80035ae <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	3b1e      	subs	r3, #30
 80035bc:	051b      	lsls	r3, r3, #20
 80035be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c2:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7ff f93b 	bl	8002844 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80b2 	beq.w	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d004      	beq.n	80035f0 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80035f2:	e008      	b.n	8003606 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80035f4:	407f0000 	.word	0x407f0000
 80035f8:	80080000 	.word	0x80080000
 80035fc:	50000100 	.word	0x50000100
 8003600:	50000300 	.word	0x50000300
 8003604:	4b53      	ldr	r3, [pc, #332]	@ (8003754 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f862 	bl	80026d0 <LL_ADC_GetCommonPathInternalCh>
 800360c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a50      	ldr	r2, [pc, #320]	@ (8003758 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4f      	ldr	r2, [pc, #316]	@ (800375c <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d139      	bne.n	8003698 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d133      	bne.n	8003698 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a48      	ldr	r2, [pc, #288]	@ (8003760 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d17a      	bne.n	800373a <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364c:	d004      	beq.n	8003658 <HAL_ADCEx_InjectedConfigChannel+0x930>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a44      	ldr	r2, [pc, #272]	@ (8003764 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_ADCEx_InjectedConfigChannel+0x934>
 8003658:	4a43      	ldr	r2, [pc, #268]	@ (8003768 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800365a:	e000      	b.n	800365e <HAL_ADCEx_InjectedConfigChannel+0x936>
 800365c:	4a3d      	ldr	r2, [pc, #244]	@ (8003754 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800365e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003662:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7ff f81e 	bl	80026aa <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800366e:	4b3f      	ldr	r3, [pc, #252]	@ (800376c <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	4a3e      	ldr	r2, [pc, #248]	@ (8003770 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	099a      	lsrs	r2, r3, #6
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003686:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003688:	e002      	b.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003696:	e050      	b.n	800373a <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d125      	bne.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11f      	bne.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d104      	bne.n	80036c2 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03d      	beq.n	800373e <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ca:	d004      	beq.n	80036d6 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a24      	ldr	r2, [pc, #144]	@ (8003764 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80036d6:	4a24      	ldr	r2, [pc, #144]	@ (8003768 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80036d8:	e000      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80036dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe ffdf 	bl	80026aa <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ec:	e027      	b.n	800373e <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a22      	ldr	r2, [pc, #136]	@ (800377c <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d123      	bne.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a16      	ldr	r2, [pc, #88]	@ (8003764 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003716:	d004      	beq.n	8003722 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a11      	ldr	r2, [pc, #68]	@ (8003764 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003724:	e000      	b.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8003726:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800372c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe ffb9 	bl	80026aa <LL_ADC_SetCommonPathInternalCh>
 8003738:	e002      	b.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800373e:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003748:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800374c:	4618      	mov	r0, r3
 800374e:	37d8      	adds	r7, #216	@ 0xd8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	50000700 	.word	0x50000700
 8003758:	c3210000 	.word	0xc3210000
 800375c:	90c00010 	.word	0x90c00010
 8003760:	50000600 	.word	0x50000600
 8003764:	50000100 	.word	0x50000100
 8003768:	50000300 	.word	0x50000300
 800376c:	20000000 	.word	0x20000000
 8003770:	053e2d63 	.word	0x053e2d63
 8003774:	c7520000 	.word	0xc7520000
 8003778:	50000500 	.word	0x50000500
 800377c:	cb840000 	.word	0xcb840000

08003780 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b0a1      	sub	sp, #132	@ 0x84
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800379a:	2302      	movs	r3, #2
 800379c:	e0e7      	b.n	800396e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037a6:	2300      	movs	r3, #0
 80037a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037aa:	2300      	movs	r3, #0
 80037ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b6:	d102      	bne.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	e009      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6e      	ldr	r2, [pc, #440]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80037c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e001      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0be      	b.n	800396e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f8c4 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 80037f8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f8be 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 80a0 	bne.w	800394c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800380c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 809c 	bne.w	800394c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800381c:	d004      	beq.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003828:	4b56      	ldr	r3, [pc, #344]	@ (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800382a:	e000      	b.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800382c:	4b56      	ldr	r3, [pc, #344]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800382e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d04b      	beq.n	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800384a:	035b      	lsls	r3, r3, #13
 800384c:	430b      	orrs	r3, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003852:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385c:	d004      	beq.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a45      	ldr	r2, [pc, #276]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10f      	bne.n	8003888 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003868:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800386c:	f7ff f848 	bl	8002900 <LL_ADC_IsEnabled>
 8003870:	4604      	mov	r4, r0
 8003872:	4841      	ldr	r0, [pc, #260]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003874:	f7ff f844 	bl	8002900 <LL_ADC_IsEnabled>
 8003878:	4603      	mov	r3, r0
 800387a:	4323      	orrs	r3, r4
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e012      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003888:	483c      	ldr	r0, [pc, #240]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800388a:	f7ff f839 	bl	8002900 <LL_ADC_IsEnabled>
 800388e:	4604      	mov	r4, r0
 8003890:	483b      	ldr	r0, [pc, #236]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003892:	f7ff f835 	bl	8002900 <LL_ADC_IsEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	431c      	orrs	r4, r3
 800389a:	483c      	ldr	r0, [pc, #240]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800389c:	f7ff f830 	bl	8002900 <LL_ADC_IsEnabled>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4323      	orrs	r3, r4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d056      	beq.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038ba:	f023 030f 	bic.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	6892      	ldr	r2, [r2, #8]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	431a      	orrs	r2, r3
 80038ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038cc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038ce:	e047      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e4:	d004      	beq.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10f      	bne.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80038f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038f4:	f7ff f804 	bl	8002900 <LL_ADC_IsEnabled>
 80038f8:	4604      	mov	r4, r0
 80038fa:	481f      	ldr	r0, [pc, #124]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038fc:	f7ff f800 	bl	8002900 <LL_ADC_IsEnabled>
 8003900:	4603      	mov	r3, r0
 8003902:	4323      	orrs	r3, r4
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e012      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003910:	481a      	ldr	r0, [pc, #104]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003912:	f7fe fff5 	bl	8002900 <LL_ADC_IsEnabled>
 8003916:	4604      	mov	r4, r0
 8003918:	4819      	ldr	r0, [pc, #100]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800391a:	f7fe fff1 	bl	8002900 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	431c      	orrs	r4, r3
 8003922:	481a      	ldr	r0, [pc, #104]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003924:	f7fe ffec 	bl	8002900 <LL_ADC_IsEnabled>
 8003928:	4603      	mov	r3, r0
 800392a:	4323      	orrs	r3, r4
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d012      	beq.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800393a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003948:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800394a:	e009      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800395e:	e000      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003960:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800396a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800396e:	4618      	mov	r0, r3
 8003970:	3784      	adds	r7, #132	@ 0x84
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop
 8003978:	50000100 	.word	0x50000100
 800397c:	50000400 	.word	0x50000400
 8003980:	50000500 	.word	0x50000500
 8003984:	50000300 	.word	0x50000300
 8003988:	50000700 	.word	0x50000700
 800398c:	50000600 	.word	0x50000600

08003990 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e023      	b.n	80039ea <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fbf8 	bl	80011ac <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a26:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	60d3      	str	r3, [r2, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a40:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <__NVIC_GetPriorityGrouping+0x18>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 0307 	and.w	r3, r3, #7
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	db0b      	blt.n	8003a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	f003 021f 	and.w	r2, r3, #31
 8003a70:	4907      	ldr	r1, [pc, #28]	@ (8003a90 <__NVIC_EnableIRQ+0x38>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2001      	movs	r0, #1
 8003a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0a      	blt.n	8003abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	490c      	ldr	r1, [pc, #48]	@ (8003ae0 <__NVIC_SetPriority+0x4c>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003abc:	e00a      	b.n	8003ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4908      	ldr	r1, [pc, #32]	@ (8003ae4 <__NVIC_SetPriority+0x50>)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3b04      	subs	r3, #4
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	761a      	strb	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	@ 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f1c3 0307 	rsb	r3, r3, #7
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	bf28      	it	cs
 8003b06:	2304      	movcs	r3, #4
 8003b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d902      	bls.n	8003b18 <NVIC_EncodePriority+0x30>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b03      	subs	r3, #3
 8003b16:	e000      	b.n	8003b1a <NVIC_EncodePriority+0x32>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	4313      	orrs	r3, r2
         );
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	@ 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b60:	d301      	bcc.n	8003b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b66:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <SysTick_Config+0x40>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6e:	210f      	movs	r1, #15
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	f7ff ff8e 	bl	8003a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b78:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <SysTick_Config+0x40>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7e:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <SysTick_Config+0x40>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	e000e010 	.word	0xe000e010

08003b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff29 	bl	80039f4 <__NVIC_SetPriorityGrouping>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb8:	f7ff ff40 	bl	8003a3c <__NVIC_GetPriorityGrouping>
 8003bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7ff ff90 	bl	8003ae8 <NVIC_EncodePriority>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff5f 	bl	8003a94 <__NVIC_SetPriority>
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff33 	bl	8003a58 <__NVIC_EnableIRQ>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ffa4 	bl	8003b50 <SysTick_Config>
 8003c08:	4603      	mov	r3, r0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08d      	b.n	8003d42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_DMA_Init+0x138>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d80f      	bhi.n	8003c52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <HAL_DMA_Init+0x13c>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a45      	ldr	r2, [pc, #276]	@ (8003d54 <HAL_DMA_Init+0x140>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <HAL_DMA_Init+0x144>)
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c50:	e00e      	b.n	8003c70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b40      	ldr	r3, [pc, #256]	@ (8003d5c <HAL_DMA_Init+0x148>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <HAL_DMA_Init+0x140>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	009a      	lsls	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d60 <HAL_DMA_Init+0x14c>)
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f972 	bl	8003fac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cd0:	d102      	bne.n	8003cd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_DMA_Init+0x104>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d80c      	bhi.n	8003d18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f992 	bl	8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e008      	b.n	8003d2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40020407 	.word	0x40020407
 8003d50:	bffdfff8 	.word	0xbffdfff8
 8003d54:	cccccccd 	.word	0xcccccccd
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	bffdfbf8 	.word	0xbffdfbf8
 8003d60:	40020400 	.word	0x40020400

08003d64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d00d      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e047      	b.n	8003e28 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020e 	bic.w	r2, r2, #14
 8003da6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003de4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
    }
  }
  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2204      	movs	r2, #4
 8003e54:	409a      	lsls	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d026      	beq.n	8003eac <HAL_DMA_IRQHandler+0x7a>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d021      	beq.n	8003eac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0204 	bic.w	r2, r2, #4
 8003e84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2104      	movs	r1, #4
 8003e94:	fa01 f202 	lsl.w	r2, r1, r2
 8003e98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d071      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003eaa:	e06c      	b.n	8003f86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d029      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 020a 	bic.w	r2, r2, #10
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	2102      	movs	r1, #2
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d038      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f1c:	e033      	b.n	8003f86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2208      	movs	r2, #8
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d02a      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d025      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020e 	bic.w	r2, r2, #14
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
}
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f9e:	b2db      	uxtb	r3, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d802      	bhi.n	8003fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fc0:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e001      	b.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003fc6:	4b15      	ldr	r3, [pc, #84]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fc8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3b08      	subs	r3, #8
 8003fd6:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40020407 	.word	0x40020407
 8004018:	40020800 	.word	0x40020800
 800401c:	40020820 	.word	0x40020820
 8004020:	cccccccd 	.word	0xcccccccd
 8004024:	40020880 	.word	0x40020880

08004028 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a08      	ldr	r2, [pc, #32]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800404a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2201      	movs	r2, #1
 8004056:	409a      	lsls	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	1000823f 	.word	0x1000823f
 800406c:	40020940 	.word	0x40020940

08004070 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e147      	b.n	8004312 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd f8a8 	bl	80011ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0210 	bic.w	r2, r2, #16
 80040aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ac:	f7fd fb82 	bl	80017b4 <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040b2:	e012      	b.n	80040da <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040b4:	f7fd fb7e 	bl	80017b4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b0a      	cmp	r3, #10
 80040c0:	d90b      	bls.n	80040da <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e11b      	b.n	8004312 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d0e5      	beq.n	80040b4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040f8:	f7fd fb5c 	bl	80017b4 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80040fe:	e012      	b.n	8004126 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004100:	f7fd fb58 	bl	80017b4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b0a      	cmp	r3, #10
 800410c:	d90b      	bls.n	8004126 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0f5      	b.n	8004312 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0e5      	beq.n	8004100 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0202 	orr.w	r2, r2, #2
 8004142:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a74      	ldr	r2, [pc, #464]	@ (800431c <HAL_FDCAN_Init+0x2ac>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d103      	bne.n	8004156 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800414e:	4a74      	ldr	r2, [pc, #464]	@ (8004320 <HAL_FDCAN_Init+0x2b0>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7c1b      	ldrb	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d108      	bne.n	8004170 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416c:	619a      	str	r2, [r3, #24]
 800416e:	e007      	b.n	8004180 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7c5b      	ldrb	r3, [r3, #17]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d108      	bne.n	800419a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004196:	619a      	str	r2, [r3, #24]
 8004198:	e007      	b.n	80041aa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7c9b      	ldrb	r3, [r3, #18]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041c0:	619a      	str	r2, [r3, #24]
 80041c2:	e007      	b.n	80041d4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041d2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80041f8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0210 	bic.w	r2, r2, #16
 8004208:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d108      	bne.n	8004224 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0204 	orr.w	r2, r2, #4
 8004220:	619a      	str	r2, [r3, #24]
 8004222:	e02c      	b.n	800427e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d028      	beq.n	800427e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d01c      	beq.n	800426e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004242:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0210 	orr.w	r2, r2, #16
 8004252:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d110      	bne.n	800427e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0220 	orr.w	r2, r2, #32
 800426a:	619a      	str	r2, [r3, #24]
 800426c:	e007      	b.n	800427e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0220 	orr.w	r2, r2, #32
 800427c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	3b01      	subs	r3, #1
 8004284:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	3b01      	subs	r3, #1
 800428c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800428e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004296:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	3b01      	subs	r3, #1
 80042a0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042a6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042a8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b2:	d115      	bne.n	80042e0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	3b01      	subs	r3, #1
 80042c0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042c2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	3b01      	subs	r3, #1
 80042ca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042cc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	3b01      	subs	r3, #1
 80042d6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042dc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042de:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fc56 	bl	8004ba8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40006400 	.word	0x40006400
 8004320:	40006500 	.word	0x40006500

08004324 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004334:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d002      	beq.n	8004342 <HAL_FDCAN_ConfigFilter+0x1e>
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d13d      	bne.n	80043be <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004356:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800435e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e01d      	b.n	80043ba <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	075a      	lsls	r2, r3, #29
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	079a      	lsls	r2, r3, #30
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3304      	adds	r3, #4
 80043b2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e006      	b.n	80043cc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d110      	bne.n	800440e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e006      	b.n	800441c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004412:	f043 0204 	orr.w	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d12c      	bne.n	800449a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e023      	b.n	80044a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fc02 	bl	8004c80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800448c:	2201      	movs	r2, #1
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	409a      	lsls	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e006      	b.n	80044a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	f043 0208 	orr.w	r2, r3, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b08b      	sub	sp, #44	@ 0x2c
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044c8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80044ca:	7efb      	ldrb	r3, [r7, #27]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f040 80e8 	bne.w	80046a2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	d137      	bne.n	8004548 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0db      	b.n	80046b0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	0e1b      	lsrs	r3, r3, #24
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10a      	bne.n	8004520 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004512:	0a5b      	lsrs	r3, r3, #9
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800451c:	2301      	movs	r3, #1
 800451e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e036      	b.n	80045b6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0a3      	b.n	80046b0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10a      	bne.n	8004590 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800458c:	2301      	movs	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0c9b      	lsrs	r3, r3, #18
 80045d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e005      	b.n	80045e6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	3304      	adds	r3, #4
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0fda      	lsrs	r2, r3, #31
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	3304      	adds	r3, #4
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	e00a      	b.n	8004672 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	441a      	add	r2, r3
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	440b      	add	r3, r1
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	3301      	adds	r3, #1
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a11      	ldr	r2, [pc, #68]	@ (80046bc <HAL_FDCAN_GetRxMessage+0x20c>)
 8004678:	5cd3      	ldrb	r3, [r2, r3]
 800467a:	461a      	mov	r2, r3
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4293      	cmp	r3, r2
 8004680:	d3ec      	bcc.n	800465c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d105      	bne.n	8004694 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004692:	e004      	b.n	800469e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e006      	b.n	80046b0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a6:	f043 0208 	orr.w	r2, r3, #8
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	372c      	adds	r7, #44	@ 0x2c
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	08008114 	.word	0x08008114

080046c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d003      	beq.n	80046e2 <HAL_FDCAN_ActivateNotification+0x22>
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f040 80c8 	bne.w	8004872 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03b      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d031      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d027      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01d      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d13b      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d131      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d127      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11d      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d113      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0202 	orr.w	r2, r2, #2
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	430a      	orrs	r2, r1
 800483c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	430a      	orrs	r2, r1
 800485a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	430a      	orrs	r2, r1
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e006      	b.n	8004880 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	f043 0202 	orr.w	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	@ 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a8:	4013      	ands	r3, r2
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c0:	4013      	ands	r3, r2
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d8:	4013      	ands	r3, r2
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80048e6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	4013      	ands	r3, r2
 80048f2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80048fe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	4013      	ands	r3, r2
 800490a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004912:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2240      	movs	r2, #64	@ 0x40
 8004936:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f916 	bl	8004b6a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d019      	beq.n	800497c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d014      	beq.n	800497c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800495a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004972:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004974:	6939      	ldr	r1, [r7, #16]
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8d8 	bl	8004b2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004988:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800498a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f8a2 	bl	8004ad6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80049a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fb fd58 	bl	8000458 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80049b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f897 	bl	8004aec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f890 	bl	8004b02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d018      	beq.n	8004a1e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d013      	beq.n	8004a1e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049fe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2280      	movs	r2, #128	@ 0x80
 8004a14:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f87c 	bl	8004b16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00c      	beq.n	8004a42 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f880 	bl	8004b42 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f878 	bl	8004b56 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f876 	bl	8004b92 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f858 	bl	8004b7e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3730      	adds	r7, #48	@ 0x30
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004bb0:	4b30      	ldr	r3, [pc, #192]	@ (8004c74 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004bb2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d103      	bne.n	8004bc6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004bc4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2c      	ldr	r2, [pc, #176]	@ (8004c7c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004bd6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	041a      	lsls	r2, r3, #16
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c0c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	061a      	lsls	r2, r3, #24
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e005      	b.n	8004c5a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3304      	adds	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3f3      	bcc.n	8004c4e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	4000a400 	.word	0x4000a400
 8004c78:	40006800 	.word	0x40006800
 8004c7c:	40006c00 	.word	0x40006c00

08004c80 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004c9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	e00a      	b.n	8004cc2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004cb4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004cba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004cbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cc0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ccc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004cd2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004cd8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e020      	b.n	8004d56 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3303      	adds	r3, #3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3302      	adds	r3, #2
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	440b      	add	r3, r1
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d2c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3301      	adds	r3, #1
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	440b      	add	r3, r1
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d3a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	440a      	add	r2, r1
 8004d42:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004d44:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3304      	adds	r3, #4
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	4a06      	ldr	r2, [pc, #24]	@ (8004d74 <FDCAN_CopyMessageToRAM+0xf4>)
 8004d5c:	5cd3      	ldrb	r3, [r2, r3]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d3d6      	bcc.n	8004d14 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3724      	adds	r7, #36	@ 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	08008114 	.word	0x08008114

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d86:	e15a      	b.n	800503e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 814c 	beq.w	8005038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d005      	beq.n	8004db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d130      	bne.n	8004e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dee:	2201      	movs	r2, #1
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0201 	and.w	r2, r3, #1
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d017      	beq.n	8004e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d123      	bne.n	8004eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	08da      	lsrs	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3208      	adds	r2, #8
 8004e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	08da      	lsrs	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3208      	adds	r2, #8
 8004ea4:	6939      	ldr	r1, [r7, #16]
 8004ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a6 	beq.w	8005038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eec:	4b5b      	ldr	r3, [pc, #364]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ef8:	4b58      	ldr	r3, [pc, #352]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f04:	4a56      	ldr	r2, [pc, #344]	@ (8005060 <HAL_GPIO_Init+0x2e8>)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f2e:	d01f      	beq.n	8004f70 <HAL_GPIO_Init+0x1f8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a4c      	ldr	r2, [pc, #304]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d019      	beq.n	8004f6c <HAL_GPIO_Init+0x1f4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8005068 <HAL_GPIO_Init+0x2f0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a4a      	ldr	r2, [pc, #296]	@ (800506c <HAL_GPIO_Init+0x2f4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00d      	beq.n	8004f64 <HAL_GPIO_Init+0x1ec>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a49      	ldr	r2, [pc, #292]	@ (8005070 <HAL_GPIO_Init+0x2f8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <HAL_GPIO_Init+0x1e8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a48      	ldr	r2, [pc, #288]	@ (8005074 <HAL_GPIO_Init+0x2fc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_GPIO_Init+0x1e4>
 8004f58:	2305      	movs	r3, #5
 8004f5a:	e00a      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f5c:	2306      	movs	r3, #6
 8004f5e:	e008      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f60:	2304      	movs	r3, #4
 8004f62:	e006      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f64:	2303      	movs	r3, #3
 8004f66:	e004      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e002      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f70:	2300      	movs	r3, #0
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	f002 0203 	and.w	r2, r2, #3
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	4093      	lsls	r3, r2
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f82:	4937      	ldr	r1, [pc, #220]	@ (8005060 <HAL_GPIO_Init+0x2e8>)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fb4:	4a30      	ldr	r2, [pc, #192]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fba:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fde:	4a26      	ldr	r2, [pc, #152]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fe4:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005008:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <HAL_GPIO_Init+0x300>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	43db      	mvns	r3, r3
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005032:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3301      	adds	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f ae9d 	bne.w	8004d88 <HAL_GPIO_Init+0x10>
  }
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40021000 	.word	0x40021000
 8005060:	40010000 	.word	0x40010000
 8005064:	48000400 	.word	0x48000400
 8005068:	48000800 	.word	0x48000800
 800506c:	48000c00 	.word	0x48000c00
 8005070:	48001000 	.word	0x48001000
 8005074:	48001400 	.word	0x48001400
 8005078:	40010400 	.word	0x40010400

0800507c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
 8005088:	4613      	mov	r3, r2
 800508a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508c:	787b      	ldrb	r3, [r7, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005098:	e002      	b.n	80050a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800509a:	887a      	ldrh	r2, [r7, #2]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050b6:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c2:	4a05      	ldr	r2, [pc, #20]	@ (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f806 	bl	80050dc <HAL_GPIO_EXTI_Callback>
  }
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40010400 	.word	0x40010400

080050dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e08d      	b.n	8005220 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fc f8d1 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2224      	movs	r2, #36	@ 0x24
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005142:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005152:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d107      	bne.n	800516c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	e006      	b.n	800517a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005178:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d108      	bne.n	8005194 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	e007      	b.n	80051a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69d9      	ldr	r1, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
  }
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00f      	beq.n	800529e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800529c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f043 0208 	orr.w	r2, r3, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00f      	beq.n	80052f2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e0:	f043 0202 	orr.w	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 030b 	and.w	r3, r3, #11
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fbd5 	bl	8005ab4 <I2C_ITError>
  }
}
 800530a:	bf00      	nop
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
 8005346:	4613      	mov	r3, r2
 8005348:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <I2C_Slave_ISR_IT+0x24>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e0e2      	b.n	800557c <I2C_Slave_ISR_IT+0x1ea>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f9b5 	bl	8005744 <I2C_ITSlaveCplt>
 80053da:	e0ca      	b.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d04b      	beq.n	800547e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d046      	beq.n	800547e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d128      	bne.n	800544c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b28      	cmp	r3, #40	@ 0x28
 8005404:	d108      	bne.n	8005418 <I2C_Slave_ISR_IT+0x86>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800540c:	d104      	bne.n	8005418 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fafb 	bl	8005a0c <I2C_ITListenCplt>
 8005416:	e031      	b.n	800547c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b29      	cmp	r3, #41	@ 0x29
 8005422:	d10e      	bne.n	8005442 <I2C_Slave_ISR_IT+0xb0>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800542a:	d00a      	beq.n	8005442 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2210      	movs	r2, #16
 8005432:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fc54 	bl	8005ce2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f926 	bl	800568c <I2C_ITSlaveSeqCplt>
 8005440:	e01c      	b.n	800547c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800544a:	e08f      	b.n	800556c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2210      	movs	r2, #16
 8005452:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <I2C_Slave_ISR_IT+0xdc>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800546c:	d17e      	bne.n	800556c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	4619      	mov	r1, r3
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fb1d 	bl	8005ab4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800547a:	e077      	b.n	800556c <I2C_Slave_ISR_IT+0x1da>
 800547c:	e076      	b.n	800556c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02f      	beq.n	80054e8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02a      	beq.n	80054e8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d018      	beq.n	80054ce <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d14b      	bne.n	8005570 <I2C_Slave_ISR_IT+0x1de>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054de:	d047      	beq.n	8005570 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f8d3 	bl	800568c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054e6:	e043      	b.n	8005570 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054fc:	6939      	ldr	r1, [r7, #16]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f840 	bl	8005584 <I2C_ITAddrCplt>
 8005504:	e035      	b.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d030      	beq.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005516:	2b00      	cmp	r3, #0
 8005518:	d02b      	beq.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d018      	beq.n	8005556 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005554:	e00d      	b.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800555c:	d002      	beq.n	8005564 <I2C_Slave_ISR_IT+0x1d2>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f891 	bl	800568c <I2C_ITSlaveSeqCplt>
 800556a:	e002      	b.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005570:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800559a:	2b28      	cmp	r3, #40	@ 0x28
 800559c:	d16a      	bne.n	8005674 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80055bc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80055d8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d138      	bne.n	8005654 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	89bb      	ldrh	r3, [r7, #12]
 80055ea:	4053      	eors	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11c      	bne.n	8005630 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005608:	2b02      	cmp	r3, #2
 800560a:	d13b      	bne.n	8005684 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2208      	movs	r2, #8
 8005618:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005622:	89ba      	ldrh	r2, [r7, #12]
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fe86 	bl	800533a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800562e:	e029      	b.n	8005684 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005634:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fb94 	bl	8005d66 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005646:	89ba      	ldrh	r2, [r7, #12]
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fe74 	bl	800533a <HAL_I2C_AddrCallback>
}
 8005652:	e017      	b.n	8005684 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb84 	bl	8005d66 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005666:	89ba      	ldrh	r2, [r7, #12]
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff fe64 	bl	800533a <HAL_I2C_AddrCallback>
}
 8005672:	e007      	b.n	8005684 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2208      	movs	r2, #8
 800567a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e00c      	b.n	80056da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b29      	cmp	r3, #41	@ 0x29
 80056e4:	d112      	bne.n	800570c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2228      	movs	r2, #40	@ 0x28
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2221      	movs	r2, #33	@ 0x21
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056f4:	2101      	movs	r1, #1
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb35 	bl	8005d66 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe04 	bl	8005312 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800570a:	e017      	b.n	800573c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b2a      	cmp	r3, #42	@ 0x2a
 8005716:	d111      	bne.n	800573c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2228      	movs	r2, #40	@ 0x28
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2222      	movs	r2, #34	@ 0x22
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005726:	2102      	movs	r1, #2
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fb1c 	bl	8005d66 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdf5 	bl	8005326 <HAL_I2C_SlaveRxCpltCallback>
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005766:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2220      	movs	r2, #32
 800576e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	2b21      	cmp	r3, #33	@ 0x21
 8005774:	d002      	beq.n	800577c <I2C_ITSlaveCplt+0x38>
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b29      	cmp	r3, #41	@ 0x29
 800577a:	d108      	bne.n	800578e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800577c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 faf0 	bl	8005d66 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2221      	movs	r2, #33	@ 0x21
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
 800578c:	e019      	b.n	80057c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	2b22      	cmp	r3, #34	@ 0x22
 8005792:	d002      	beq.n	800579a <I2C_ITSlaveCplt+0x56>
 8005794:	7afb      	ldrb	r3, [r7, #11]
 8005796:	2b2a      	cmp	r3, #42	@ 0x2a
 8005798:	d108      	bne.n	80057ac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800579a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fae1 	bl	8005d66 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2222      	movs	r2, #34	@ 0x22
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80057aa:	e00a      	b.n	80057c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	2b28      	cmp	r3, #40	@ 0x28
 80057b0:	d107      	bne.n	80057c2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80057b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fad5 	bl	8005d66 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057d0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b89      	ldr	r3, [pc, #548]	@ (8005a04 <I2C_ITSlaveCplt+0x2c0>)
 80057de:	400b      	ands	r3, r1
 80057e0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fa7d 	bl	8005ce2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005800:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005818:	e017      	b.n	800584a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005832:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0304 	bic.w	r3, r3, #4
 800585a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d049      	beq.n	800594a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d044      	beq.n	800594a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d128      	bne.n	800591c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b28      	cmp	r3, #40	@ 0x28
 80058d4:	d108      	bne.n	80058e8 <I2C_ITSlaveCplt+0x1a4>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058dc:	d104      	bne.n	80058e8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f893 	bl	8005a0c <I2C_ITListenCplt>
 80058e6:	e030      	b.n	800594a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b29      	cmp	r3, #41	@ 0x29
 80058f2:	d10e      	bne.n	8005912 <I2C_ITSlaveCplt+0x1ce>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058fa:	d00a      	beq.n	8005912 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2210      	movs	r2, #16
 8005902:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9ec 	bl	8005ce2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff febe 	bl	800568c <I2C_ITSlaveSeqCplt>
 8005910:	e01b      	b.n	800594a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	61da      	str	r2, [r3, #28]
 800591a:	e016      	b.n	800594a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2210      	movs	r2, #16
 8005922:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <I2C_ITSlaveCplt+0x1fa>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800593c:	d105      	bne.n	800594a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8b5 	bl	8005ab4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8a4 	bl	8005ab4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b28      	cmp	r3, #40	@ 0x28
 8005976:	d141      	bne.n	80059fc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f846 	bl	8005a0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005980:	e03c      	b.n	80059fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800598a:	d014      	beq.n	80059b6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fe7d 	bl	800568c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <I2C_ITSlaveCplt+0x2c4>)
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fcd1 	bl	8005356 <HAL_I2C_ListenCpltCallback>
}
 80059b4:	e022      	b.n	80059fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b22      	cmp	r3, #34	@ 0x22
 80059c0:	d10e      	bne.n	80059e0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fca4 	bl	8005326 <HAL_I2C_SlaveRxCpltCallback>
}
 80059de:	e00d      	b.n	80059fc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fc8b 	bl	8005312 <HAL_I2C_SlaveTxCpltCallback>
}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	fe00e800 	.word	0xfe00e800
 8005a08:	ffff0000 	.word	0xffff0000

08005a0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a25      	ldr	r2, [pc, #148]	@ (8005ab0 <I2C_ITListenCplt+0xa4>)
 8005a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d022      	beq.n	8005a88 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d012      	beq.n	8005a88 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a80:	f043 0204 	orr.w	r2, r3, #4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f96a 	bl	8005d66 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fc57 	bl	8005356 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	ffff0000 	.word	0xffff0000

08005ab4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c88 <I2C_ITError+0x1d4>)
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b28      	cmp	r3, #40	@ 0x28
 8005aea:	d005      	beq.n	8005af8 <I2C_ITError+0x44>
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b29      	cmp	r3, #41	@ 0x29
 8005af0:	d002      	beq.n	8005af8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af6:	d10b      	bne.n	8005b10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005af8:	2103      	movs	r1, #3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f933 	bl	8005d66 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2228      	movs	r2, #40	@ 0x28
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a60      	ldr	r2, [pc, #384]	@ (8005c8c <I2C_ITError+0x1d8>)
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b0e:	e030      	b.n	8005b72 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b10:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f926 	bl	8005d66 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8e1 	bl	8005ce2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b60      	cmp	r3, #96	@ 0x60
 8005b2a:	d01f      	beq.n	8005b6c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	d114      	bne.n	8005b6c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d109      	bne.n	8005b64 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d039      	beq.n	8005bf4 <I2C_ITError+0x140>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b11      	cmp	r3, #17
 8005b84:	d002      	beq.n	8005b8c <I2C_ITError+0xd8>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b21      	cmp	r3, #33	@ 0x21
 8005b8a:	d133      	bne.n	8005bf4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b9a:	d107      	bne.n	8005bac <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005baa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe f9ed 	bl	8003f90 <HAL_DMA_GetState>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d017      	beq.n	8005bec <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	4a33      	ldr	r2, [pc, #204]	@ (8005c90 <I2C_ITError+0x1dc>)
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe f8c7 	bl	8003d64 <HAL_DMA_Abort_IT>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d04d      	beq.n	8005c78 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005be6:	4610      	mov	r0, r2
 8005be8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bea:	e045      	b.n	8005c78 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f851 	bl	8005c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bf2:	e041      	b.n	8005c78 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d039      	beq.n	8005c70 <I2C_ITError+0x1bc>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b12      	cmp	r3, #18
 8005c00:	d002      	beq.n	8005c08 <I2C_ITError+0x154>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b22      	cmp	r3, #34	@ 0x22
 8005c06:	d133      	bne.n	8005c70 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c16:	d107      	bne.n	8005c28 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9af 	bl	8003f90 <HAL_DMA_GetState>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d017      	beq.n	8005c68 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <I2C_ITError+0x1dc>)
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe f889 	bl	8003d64 <HAL_DMA_Abort_IT>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d011      	beq.n	8005c7c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c62:	4610      	mov	r0, r2
 8005c64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c66:	e009      	b.n	8005c7c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f813 	bl	8005c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c6e:	e005      	b.n	8005c7c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f80f 	bl	8005c94 <I2C_TreatErrorCallback>
  }
}
 8005c76:	e002      	b.n	8005c7e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c7c:	bf00      	nop
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	ffff0000 	.word	0xffff0000
 8005c8c:	08005393 	.word	0x08005393
 8005c90:	08005d2b 	.word	0x08005d2b

08005c94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b60      	cmp	r3, #96	@ 0x60
 8005ca6:	d10e      	bne.n	8005cc6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fb5d 	bl	800537e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cc4:	e009      	b.n	8005cda <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fb48 	bl	800536a <HAL_I2C_ErrorCallback>
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d103      	bne.n	8005d00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d007      	beq.n	8005d1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	619a      	str	r2, [r3, #24]
  }
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	2200      	movs	r2, #0
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	2200      	movs	r2, #0
 8005d56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff ff9b 	bl	8005c94 <I2C_TreatErrorCallback>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d76:	887b      	ldrh	r3, [r7, #2]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005d86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d94:	2b28      	cmp	r3, #40	@ 0x28
 8005d96:	d003      	beq.n	8005da0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005da0:	887b      	ldrh	r3, [r7, #2]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00f      	beq.n	8005dca <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005db0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dbe:	2b28      	cmp	r3, #40	@ 0x28
 8005dc0:	d003      	beq.n	8005dca <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005dc8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005dca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da03      	bge.n	8005dda <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d103      	bne.n	8005de8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d103      	bne.n	8005df6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f043 0320 	orr.w	r3, r3, #32
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	2b40      	cmp	r3, #64	@ 0x40
 8005dfa:	d103      	bne.n	8005e04 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	43da      	mvns	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	400a      	ands	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d138      	bne.n	8005eaa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e032      	b.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2224      	movs	r2, #36	@ 0x24
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d139      	bne.n	8005f42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e033      	b.n	8005f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	@ 0x24
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d141      	bne.n	8005fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d131      	bne.n	8005fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f6c:	4b47      	ldr	r3, [pc, #284]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	4a46      	ldr	r2, [pc, #280]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f84:	4a41      	ldr	r2, [pc, #260]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f8c:	4b40      	ldr	r3, [pc, #256]	@ (8006090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2232      	movs	r2, #50	@ 0x32
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	0c9b      	lsrs	r3, r3, #18
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa2:	e002      	b.n	8005faa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005faa:	4b38      	ldr	r3, [pc, #224]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb6:	d102      	bne.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f2      	bne.n	8005fa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fbe:	4b33      	ldr	r3, [pc, #204]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d158      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e057      	b.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fe0:	e04d      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe8:	d141      	bne.n	800606e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fea:	4b28      	ldr	r3, [pc, #160]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff6:	d131      	bne.n	800605c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ff8:	4b24      	ldr	r3, [pc, #144]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ffe:	4a23      	ldr	r2, [pc, #140]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006008:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2232      	movs	r2, #50	@ 0x32
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	0c9b      	lsrs	r3, r3, #18
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800602e:	e002      	b.n	8006036 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006036:	4b15      	ldr	r3, [pc, #84]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006042:	d102      	bne.n	800604a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f2      	bne.n	8006030 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006056:	d112      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e011      	b.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800605c:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006062:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800606c:	e007      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800606e:	4b07      	ldr	r3, [pc, #28]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006076:	4a05      	ldr	r2, [pc, #20]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006078:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800607c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40007000 	.word	0x40007000
 8006090:	20000000 	.word	0x20000000
 8006094:	431bde83 	.word	0x431bde83

08006098 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060a6:	6093      	str	r3, [r2, #8]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40007000 	.word	0x40007000

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e2fe      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d075      	beq.n	80061c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d6:	4b97      	ldr	r3, [pc, #604]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060e0:	4b94      	ldr	r3, [pc, #592]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d102      	bne.n	80060f6 <HAL_RCC_OscConfig+0x3e>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d002      	beq.n	80060fc <HAL_RCC_OscConfig+0x44>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d10b      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05b      	beq.n	80061c0 <HAL_RCC_OscConfig+0x108>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d157      	bne.n	80061c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e2d9      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x74>
 800611e:	4b85      	ldr	r3, [pc, #532]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a84      	ldr	r2, [pc, #528]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e01d      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b7f      	ldr	r3, [pc, #508]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7e      	ldr	r2, [pc, #504]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b7c      	ldr	r3, [pc, #496]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a7b      	ldr	r2, [pc, #492]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 8006150:	4b78      	ldr	r3, [pc, #480]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a77      	ldr	r2, [pc, #476]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b75      	ldr	r3, [pc, #468]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a74      	ldr	r2, [pc, #464]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fb fb20 	bl	80017b4 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006178:	f7fb fb1c 	bl	80017b4 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	@ 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e29e      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	4b6a      	ldr	r3, [pc, #424]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0xc0>
 8006196:	e014      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fb fb0c 	bl	80017b4 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fb fb08 	bl	80017b4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	@ 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e28a      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b2:	4b60      	ldr	r3, [pc, #384]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0xe8>
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d075      	beq.n	80062ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ce:	4b59      	ldr	r3, [pc, #356]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061d8:	4b56      	ldr	r3, [pc, #344]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d102      	bne.n	80061ee <HAL_RCC_OscConfig+0x136>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d002      	beq.n	80061f4 <HAL_RCC_OscConfig+0x13c>
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d11f      	bne.n	8006234 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_OscConfig+0x154>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e25d      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620c:	4b49      	ldr	r3, [pc, #292]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	4946      	ldr	r1, [pc, #280]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006220:	4b45      	ldr	r3, [pc, #276]	@ (8006338 <HAL_RCC_OscConfig+0x280>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fb fa79 	bl	800171c <HAL_InitTick>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d043      	beq.n	80062b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e249      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d023      	beq.n	8006284 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800623c:	4b3d      	ldr	r3, [pc, #244]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3c      	ldr	r2, [pc, #240]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fb fab4 	bl	80017b4 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006250:	f7fb fab0 	bl	80017b4 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e232      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006262:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	492d      	ldr	r1, [pc, #180]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
 8006282:	e01a      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006284:	4b2b      	ldr	r3, [pc, #172]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2a      	ldr	r2, [pc, #168]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800628a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800628e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fb fa90 	bl	80017b4 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006298:	f7fb fa8c 	bl	80017b4 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e20e      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062aa:	4b22      	ldr	r3, [pc, #136]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x1e0>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d041      	beq.n	800634a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01c      	beq.n	8006308 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062de:	f7fb fa69 	bl	80017b4 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062e6:	f7fb fa65 	bl	80017b4 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e1e7      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <HAL_RCC_OscConfig+0x22e>
 8006306:	e020      	b.n	800634a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006308:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800630a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630e:	4a09      	ldr	r2, [pc, #36]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fb fa4c 	bl	80017b4 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800631e:	e00d      	b.n	800633c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006320:	f7fb fa48 	bl	80017b4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d906      	bls.n	800633c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e1ca      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800633c:	4b8c      	ldr	r3, [pc, #560]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ea      	bne.n	8006320 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80a6 	beq.w	80064a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800635c:	4b84      	ldr	r3, [pc, #528]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_OscConfig+0x2b4>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <HAL_RCC_OscConfig+0x2b6>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	4a7e      	ldr	r2, [pc, #504]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6593      	str	r3, [r2, #88]	@ 0x58
 800637e:	4b7c      	ldr	r3, [pc, #496]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800638a:	2301      	movs	r3, #1
 800638c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d118      	bne.n	80063cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800639a:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 80063a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a6:	f7fb fa05 	bl	80017b4 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fb fa01 	bl	80017b4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e183      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d108      	bne.n	80063e6 <HAL_RCC_OscConfig+0x32e>
 80063d4:	4b66      	ldr	r3, [pc, #408]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	4a65      	ldr	r2, [pc, #404]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063e4:	e024      	b.n	8006430 <HAL_RCC_OscConfig+0x378>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d110      	bne.n	8006410 <HAL_RCC_OscConfig+0x358>
 80063ee:	4b60      	ldr	r3, [pc, #384]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	4a5a      	ldr	r2, [pc, #360]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800640e:	e00f      	b.n	8006430 <HAL_RCC_OscConfig+0x378>
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006416:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006420:	4b53      	ldr	r3, [pc, #332]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	4a52      	ldr	r2, [pc, #328]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb f9bc 	bl	80017b4 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800643e:	e00a      	b.n	8006456 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fb f9b8 	bl	80017b4 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e138      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006456:	4b46      	ldr	r3, [pc, #280]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ed      	beq.n	8006440 <HAL_RCC_OscConfig+0x388>
 8006464:	e015      	b.n	8006492 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006466:	f7fb f9a5 	bl	80017b4 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fb f9a1 	bl	80017b4 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e121      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006484:	4b3a      	ldr	r3, [pc, #232]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1ed      	bne.n	800646e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006492:	7ffb      	ldrb	r3, [r7, #31]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006498:	4b35      	ldr	r3, [pc, #212]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	4a34      	ldr	r2, [pc, #208]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800649e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d03c      	beq.n	800652a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01c      	beq.n	80064f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064be:	4a2c      	ldr	r2, [pc, #176]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fb f974 	bl	80017b4 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064d0:	f7fb f970 	bl	80017b4 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e0f2      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064e2:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0ef      	beq.n	80064d0 <HAL_RCC_OscConfig+0x418>
 80064f0:	e01b      	b.n	800652a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fb f957 	bl	80017b4 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800650a:	f7fb f953 	bl	80017b4 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0d5      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800651c:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800651e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ef      	bne.n	800650a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80c9 	beq.w	80066c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006534:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 030c 	and.w	r3, r3, #12
 800653c:	2b0c      	cmp	r3, #12
 800653e:	f000 8083 	beq.w	8006648 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d15e      	bne.n	8006608 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a08      	ldr	r2, [pc, #32]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fb f92d 	bl	80017b4 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655c:	e00c      	b.n	8006578 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655e:	f7fb f929 	bl	80017b4 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d905      	bls.n	8006578 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0ab      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
 8006570:	40021000 	.word	0x40021000
 8006574:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006578:	4b55      	ldr	r3, [pc, #340]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ec      	bne.n	800655e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006584:	4b52      	ldr	r3, [pc, #328]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	4b52      	ldr	r3, [pc, #328]	@ (80066d4 <HAL_RCC_OscConfig+0x61c>)
 800658a:	4013      	ands	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6a11      	ldr	r1, [r2, #32]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006594:	3a01      	subs	r2, #1
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800659e:	0212      	lsls	r2, r2, #8
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065a6:	0852      	lsrs	r2, r2, #1
 80065a8:	3a01      	subs	r2, #1
 80065aa:	0552      	lsls	r2, r2, #21
 80065ac:	4311      	orrs	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065b2:	0852      	lsrs	r2, r2, #1
 80065b4:	3a01      	subs	r2, #1
 80065b6:	0652      	lsls	r2, r2, #25
 80065b8:	4311      	orrs	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065be:	06d2      	lsls	r2, r2, #27
 80065c0:	430a      	orrs	r2, r1
 80065c2:	4943      	ldr	r1, [pc, #268]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c8:	4b41      	ldr	r3, [pc, #260]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a40      	ldr	r2, [pc, #256]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065d4:	4b3e      	ldr	r3, [pc, #248]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	4a3d      	ldr	r2, [pc, #244]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fb f8e8 	bl	80017b4 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fb f8e4 	bl	80017b4 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e066      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065fa:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x530>
 8006606:	e05e      	b.n	80066c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b31      	ldr	r3, [pc, #196]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fb f8ce 	bl	80017b4 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fb f8ca 	bl	80017b4 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e04c      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800662e:	4b28      	ldr	r3, [pc, #160]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800663a:	4b25      	ldr	r3, [pc, #148]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	4924      	ldr	r1, [pc, #144]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006640:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <HAL_RCC_OscConfig+0x620>)
 8006642:	4013      	ands	r3, r2
 8006644:	60cb      	str	r3, [r1, #12]
 8006646:	e03e      	b.n	80066c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e039      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0203 	and.w	r2, r3, #3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	429a      	cmp	r2, r3
 8006666:	d12c      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	3b01      	subs	r3, #1
 8006674:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d123      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d11b      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d113      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	3b01      	subs	r3, #1
 80066a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d109      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	019f800c 	.word	0x019f800c
 80066d8:	feeefffc 	.word	0xfeeefffc

080066dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e11e      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b91      	ldr	r3, [pc, #580]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d910      	bls.n	8006724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b8e      	ldr	r3, [pc, #568]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 020f 	bic.w	r2, r3, #15
 800670a:	498c      	ldr	r1, [pc, #560]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b8a      	ldr	r3, [pc, #552]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e106      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d073      	beq.n	8006818 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d129      	bne.n	800678c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006738:	4b81      	ldr	r3, [pc, #516]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0f4      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006748:	f000 f966 	bl	8006a18 <RCC_GetSysClockFreqFromPLLSource>
 800674c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4a7c      	ldr	r2, [pc, #496]	@ (8006944 <HAL_RCC_ClockConfig+0x268>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d93f      	bls.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006756:	4b7a      	ldr	r3, [pc, #488]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d033      	beq.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006772:	2b00      	cmp	r3, #0
 8006774:	d12f      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006776:	4b72      	ldr	r3, [pc, #456]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800677e:	4a70      	ldr	r2, [pc, #448]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006784:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e024      	b.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006794:	4b6a      	ldr	r3, [pc, #424]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0c6      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a4:	4b66      	ldr	r3, [pc, #408]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0be      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067b4:	f000 f8ce 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4a61      	ldr	r2, [pc, #388]	@ (8006944 <HAL_RCC_ClockConfig+0x268>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d909      	bls.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ca:	4a5d      	ldr	r2, [pc, #372]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4957      	ldr	r1, [pc, #348]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e8:	f7fa ffe4 	bl	80017b4 <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fa ffe0 	bl	80017b4 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e095      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	4b4e      	ldr	r3, [pc, #312]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 020c 	and.w	r2, r3, #12
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d1eb      	bne.n	80067f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d023      	beq.n	800686c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006830:	4b43      	ldr	r3, [pc, #268]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a42      	ldr	r2, [pc, #264]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800683a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006848:	4b3d      	ldr	r3, [pc, #244]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006850:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006858:	4b39      	ldr	r3, [pc, #228]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4936      	ldr	r1, [pc, #216]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
 800686a:	e008      	b.n	800687e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b80      	cmp	r3, #128	@ 0x80
 8006870:	d105      	bne.n	800687e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006872:	4b33      	ldr	r3, [pc, #204]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4a32      	ldr	r2, [pc, #200]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006878:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800687c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800687e:	4b2f      	ldr	r3, [pc, #188]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d21d      	bcs.n	80068c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688c:	4b2b      	ldr	r3, [pc, #172]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f023 020f 	bic.w	r2, r3, #15
 8006894:	4929      	ldr	r1, [pc, #164]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800689c:	f7fa ff8a 	bl	80017b4 <HAL_GetTick>
 80068a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	e00a      	b.n	80068ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a4:	f7fa ff86 	bl	80017b4 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e03b      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b20      	ldr	r3, [pc, #128]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d1ed      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4917      	ldr	r1, [pc, #92]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f2:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	490f      	ldr	r1, [pc, #60]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006902:	4313      	orrs	r3, r2
 8006904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006906:	f000 f825 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	490c      	ldr	r1, [pc, #48]	@ (8006948 <HAL_RCC_ClockConfig+0x26c>)
 8006918:	5ccb      	ldrb	r3, [r1, r3]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	fa22 f303 	lsr.w	r3, r2, r3
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <HAL_RCC_ClockConfig+0x270>)
 8006924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <HAL_RCC_ClockConfig+0x274>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7fa fef6 	bl	800171c <HAL_InitTick>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40022000 	.word	0x40022000
 8006940:	40021000 	.word	0x40021000
 8006944:	04c4b400 	.word	0x04c4b400
 8006948:	08008104 	.word	0x08008104
 800694c:	20000000 	.word	0x20000000
 8006950:	20000004 	.word	0x20000004

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800695a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b04      	cmp	r3, #4
 8006964:	d102      	bne.n	800696c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006966:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e047      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800696c:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d102      	bne.n	800697e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006978:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	e03e      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b0c      	cmp	r3, #12
 8006988:	d136      	bne.n	80069f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800698a:	4b20      	ldr	r3, [pc, #128]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006994:	4b1d      	ldr	r3, [pc, #116]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	3301      	adds	r3, #1
 80069a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069b2:	68d2      	ldr	r2, [r2, #12]
 80069b4:	0a12      	lsrs	r2, r2, #8
 80069b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069c2:	4a13      	ldr	r2, [pc, #76]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	4a10      	ldr	r2, [pc, #64]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069cc:	68d2      	ldr	r2, [r2, #12]
 80069ce:	0a12      	lsrs	r2, r2, #8
 80069d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
      break;
 80069da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069dc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3301      	adds	r3, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	e001      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069fc:	693b      	ldr	r3, [r7, #16]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	00f42400 	.word	0x00f42400
 8006a14:	016e3600 	.word	0x016e3600

08006a18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d10c      	bne.n	8006a56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a3c:	4a17      	ldr	r2, [pc, #92]	@ (8006a9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	4a14      	ldr	r2, [pc, #80]	@ (8006a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a46:	68d2      	ldr	r2, [r2, #12]
 8006a48:	0a12      	lsrs	r2, r2, #8
 8006a4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	617b      	str	r3, [r7, #20]
    break;
 8006a54:	e00c      	b.n	8006a70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a56:	4a12      	ldr	r2, [pc, #72]	@ (8006aa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a60:	68d2      	ldr	r2, [r2, #12]
 8006a62:	0a12      	lsrs	r2, r2, #8
 8006a64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a68:	fb02 f303 	mul.w	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]
    break;
 8006a6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a70:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	0e5b      	lsrs	r3, r3, #25
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a8a:	687b      	ldr	r3, [r7, #4]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	016e3600 	.word	0x016e3600
 8006aa0:	00f42400 	.word	0x00f42400

08006aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006aac:	2300      	movs	r3, #0
 8006aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8098 	beq.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac6:	4b43      	ldr	r3, [pc, #268]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad2:	4b40      	ldr	r3, [pc, #256]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ade:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	60bb      	str	r3, [r7, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aea:	2301      	movs	r3, #1
 8006aec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aee:	4b3a      	ldr	r3, [pc, #232]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a39      	ldr	r2, [pc, #228]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006afa:	f7fa fe5b 	bl	80017b4 <HAL_GetTick>
 8006afe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b00:	e009      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b02:	f7fa fe57 	bl	80017b4 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d902      	bls.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	74fb      	strb	r3, [r7, #19]
        break;
 8006b14:	e005      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b16:	4b30      	ldr	r3, [pc, #192]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0ef      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b22:	7cfb      	ldrb	r3, [r7, #19]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d159      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b28:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01e      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d019      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b44:	4b23      	ldr	r3, [pc, #140]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b50:	4b20      	ldr	r3, [pc, #128]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b56:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b60:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b66:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b70:	4a18      	ldr	r2, [pc, #96]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d016      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fa fe17 	bl	80017b4 <HAL_GetTick>
 8006b86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b88:	e00b      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8a:	f7fa fe13 	bl	80017b4 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d902      	bls.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	74fb      	strb	r3, [r7, #19]
            break;
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0ec      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006bb0:	7cfb      	ldrb	r3, [r7, #19]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb6:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc4:	4903      	ldr	r1, [pc, #12]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bcc:	e008      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bce:	7cfb      	ldrb	r3, [r7, #19]
 8006bd0:	74bb      	strb	r3, [r7, #18]
 8006bd2:	e005      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006be0:	7c7b      	ldrb	r3, [r7, #17]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d105      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be6:	4ba7      	ldr	r3, [pc, #668]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bea:	4aa6      	ldr	r2, [pc, #664]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c04:	f023 0203 	bic.w	r2, r3, #3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	499d      	ldr	r1, [pc, #628]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c20:	4b98      	ldr	r3, [pc, #608]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c26:	f023 020c 	bic.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	4995      	ldr	r1, [pc, #596]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c42:	4b90      	ldr	r3, [pc, #576]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	498c      	ldr	r1, [pc, #560]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c64:	4b87      	ldr	r3, [pc, #540]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	4984      	ldr	r1, [pc, #528]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c86:	4b7f      	ldr	r3, [pc, #508]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	497b      	ldr	r1, [pc, #492]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ca8:	4b76      	ldr	r3, [pc, #472]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	4973      	ldr	r1, [pc, #460]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cca:	4b6e      	ldr	r3, [pc, #440]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	496a      	ldr	r1, [pc, #424]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cec:	4b65      	ldr	r3, [pc, #404]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	4962      	ldr	r1, [pc, #392]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	4959      	ldr	r1, [pc, #356]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d30:	4b54      	ldr	r3, [pc, #336]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	4951      	ldr	r1, [pc, #324]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d52:	4b4c      	ldr	r3, [pc, #304]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	4948      	ldr	r1, [pc, #288]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d74:	4b43      	ldr	r3, [pc, #268]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	4940      	ldr	r1, [pc, #256]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d92:	d105      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b3b      	ldr	r3, [pc, #236]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a3a      	ldr	r2, [pc, #232]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dac:	4b35      	ldr	r3, [pc, #212]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	4932      	ldr	r1, [pc, #200]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dd6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006de4:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	4924      	ldr	r1, [pc, #144]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e02:	d105      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e04:	4b1f      	ldr	r3, [pc, #124]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a1e      	ldr	r2, [pc, #120]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e1c:	4b19      	ldr	r3, [pc, #100]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2a:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e3c:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4a10      	ldr	r2, [pc, #64]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e54:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	4908      	ldr	r1, [pc, #32]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e74:	4b03      	ldr	r3, [pc, #12]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4a02      	ldr	r2, [pc, #8]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	60d3      	str	r3, [r2, #12]
 8006e80:	e002      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e82:	bf00      	nop
 8006e84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d015      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e94:	4b29      	ldr	r3, [pc, #164]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	4926      	ldr	r1, [pc, #152]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006eb4:	4b21      	ldr	r3, [pc, #132]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	4a20      	ldr	r2, [pc, #128]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ebe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eda:	4918      	ldr	r1, [pc, #96]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d105      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006eec:	4b13      	ldr	r3, [pc, #76]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4a12      	ldr	r2, [pc, #72]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d015      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f04:	4b0d      	ldr	r3, [pc, #52]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f12:	490a      	ldr	r1, [pc, #40]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f22:	d105      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f24:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a04      	ldr	r2, [pc, #16]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f30:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40021000 	.word	0x40021000

08006f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e049      	b.n	8006fe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fa fa8c 	bl	8001484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f000 fa5c 	bl	800743c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_TIM_PWM_Start+0x24>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e03c      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d109      	bne.n	800702e <HAL_TIM_PWM_Start+0x3e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e02f      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d109      	bne.n	8007048 <HAL_TIM_PWM_Start+0x58>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	e022      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b0c      	cmp	r3, #12
 800704c:	d109      	bne.n	8007062 <HAL_TIM_PWM_Start+0x72>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	bf14      	ite	ne
 800705a:	2301      	movne	r3, #1
 800705c:	2300      	moveq	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	e015      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b10      	cmp	r3, #16
 8007066:	d109      	bne.n	800707c <HAL_TIM_PWM_Start+0x8c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e008      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e0a6      	b.n	80071e4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_PWM_Start+0xb6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a4:	e023      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Start+0xc6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070b4:	e01b      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_PWM_Start+0xd6>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070c4:	e013      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_PWM_Start+0xe6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070d4:	e00b      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_PWM_Start+0xf6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070e4:	e003      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2201      	movs	r2, #1
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fd7e 	bl	8007bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a3a      	ldr	r2, [pc, #232]	@ (80071ec <HAL_TIM_PWM_Start+0x1fc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_TIM_PWM_Start+0x148>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a39      	ldr	r2, [pc, #228]	@ (80071f0 <HAL_TIM_PWM_Start+0x200>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_TIM_PWM_Start+0x148>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a37      	ldr	r2, [pc, #220]	@ (80071f4 <HAL_TIM_PWM_Start+0x204>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIM_PWM_Start+0x148>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a36      	ldr	r2, [pc, #216]	@ (80071f8 <HAL_TIM_PWM_Start+0x208>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_TIM_PWM_Start+0x148>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a34      	ldr	r2, [pc, #208]	@ (80071fc <HAL_TIM_PWM_Start+0x20c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIM_PWM_Start+0x148>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a33      	ldr	r2, [pc, #204]	@ (8007200 <HAL_TIM_PWM_Start+0x210>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d101      	bne.n	800713c <HAL_TIM_PWM_Start+0x14c>
 8007138:	2301      	movs	r3, #1
 800713a:	e000      	b.n	800713e <HAL_TIM_PWM_Start+0x14e>
 800713c:	2300      	movs	r3, #0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a25      	ldr	r2, [pc, #148]	@ (80071ec <HAL_TIM_PWM_Start+0x1fc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d022      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d01d      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a26      	ldr	r2, [pc, #152]	@ (8007204 <HAL_TIM_PWM_Start+0x214>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d018      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a24      	ldr	r2, [pc, #144]	@ (8007208 <HAL_TIM_PWM_Start+0x218>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a23      	ldr	r2, [pc, #140]	@ (800720c <HAL_TIM_PWM_Start+0x21c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <HAL_TIM_PWM_Start+0x200>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a18      	ldr	r2, [pc, #96]	@ (80071f4 <HAL_TIM_PWM_Start+0x204>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x1b2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a18      	ldr	r2, [pc, #96]	@ (8007200 <HAL_TIM_PWM_Start+0x210>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d115      	bne.n	80071ce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	4b19      	ldr	r3, [pc, #100]	@ (8007210 <HAL_TIM_PWM_Start+0x220>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b06      	cmp	r3, #6
 80071b2:	d015      	beq.n	80071e0 <HAL_TIM_PWM_Start+0x1f0>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ba:	d011      	beq.n	80071e0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071cc:	e008      	b.n	80071e0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e000      	b.n	80071e2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800
 8007200:	40015000 	.word	0x40015000
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	00010007 	.word	0x00010007

08007214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800722e:	2302      	movs	r3, #2
 8007230:	e0ff      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b14      	cmp	r3, #20
 800723e:	f200 80f0 	bhi.w	8007422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	0800729d 	.word	0x0800729d
 800724c:	08007423 	.word	0x08007423
 8007250:	08007423 	.word	0x08007423
 8007254:	08007423 	.word	0x08007423
 8007258:	080072dd 	.word	0x080072dd
 800725c:	08007423 	.word	0x08007423
 8007260:	08007423 	.word	0x08007423
 8007264:	08007423 	.word	0x08007423
 8007268:	0800731f 	.word	0x0800731f
 800726c:	08007423 	.word	0x08007423
 8007270:	08007423 	.word	0x08007423
 8007274:	08007423 	.word	0x08007423
 8007278:	0800735f 	.word	0x0800735f
 800727c:	08007423 	.word	0x08007423
 8007280:	08007423 	.word	0x08007423
 8007284:	08007423 	.word	0x08007423
 8007288:	080073a1 	.word	0x080073a1
 800728c:	08007423 	.word	0x08007423
 8007290:	08007423 	.word	0x08007423
 8007294:	08007423 	.word	0x08007423
 8007298:	080073e1 	.word	0x080073e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f97e 	bl	80075a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0208 	orr.w	r2, r2, #8
 80072b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0204 	bic.w	r2, r2, #4
 80072c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6999      	ldr	r1, [r3, #24]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	619a      	str	r2, [r3, #24]
      break;
 80072da:	e0a5      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f9f8 	bl	80076d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	021a      	lsls	r2, r3, #8
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	619a      	str	r2, [r3, #24]
      break;
 800731c:	e084      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fa6b 	bl	8007800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0208 	orr.w	r2, r2, #8
 8007338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0204 	bic.w	r2, r2, #4
 8007348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	61da      	str	r2, [r3, #28]
      break;
 800735c:	e064      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fadd 	bl	8007924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69d9      	ldr	r1, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	021a      	lsls	r2, r3, #8
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	61da      	str	r2, [r3, #28]
      break;
 800739e:	e043      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb50 	bl	8007a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0208 	orr.w	r2, r2, #8
 80073ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0204 	bic.w	r2, r2, #4
 80073ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073de:	e023      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fb9a 	bl	8007b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800740a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	021a      	lsls	r2, r3, #8
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007420:	e002      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
      break;
 8007426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a4c      	ldr	r2, [pc, #304]	@ (8007580 <TIM_Base_SetConfig+0x144>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d017      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800745a:	d013      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a49      	ldr	r2, [pc, #292]	@ (8007584 <TIM_Base_SetConfig+0x148>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00f      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a48      	ldr	r2, [pc, #288]	@ (8007588 <TIM_Base_SetConfig+0x14c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00b      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a47      	ldr	r2, [pc, #284]	@ (800758c <TIM_Base_SetConfig+0x150>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d007      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a46      	ldr	r2, [pc, #280]	@ (8007590 <TIM_Base_SetConfig+0x154>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_Base_SetConfig+0x48>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a45      	ldr	r2, [pc, #276]	@ (8007594 <TIM_Base_SetConfig+0x158>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d108      	bne.n	8007496 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a39      	ldr	r2, [pc, #228]	@ (8007580 <TIM_Base_SetConfig+0x144>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d023      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a4:	d01f      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a36      	ldr	r2, [pc, #216]	@ (8007584 <TIM_Base_SetConfig+0x148>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01b      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a35      	ldr	r2, [pc, #212]	@ (8007588 <TIM_Base_SetConfig+0x14c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d017      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a34      	ldr	r2, [pc, #208]	@ (800758c <TIM_Base_SetConfig+0x150>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a33      	ldr	r2, [pc, #204]	@ (8007590 <TIM_Base_SetConfig+0x154>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a33      	ldr	r2, [pc, #204]	@ (8007598 <TIM_Base_SetConfig+0x15c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a32      	ldr	r2, [pc, #200]	@ (800759c <TIM_Base_SetConfig+0x160>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a31      	ldr	r2, [pc, #196]	@ (80075a0 <TIM_Base_SetConfig+0x164>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_Base_SetConfig+0xaa>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007594 <TIM_Base_SetConfig+0x158>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d108      	bne.n	80074f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a18      	ldr	r2, [pc, #96]	@ (8007580 <TIM_Base_SetConfig+0x144>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <TIM_Base_SetConfig+0x110>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a1a      	ldr	r2, [pc, #104]	@ (8007590 <TIM_Base_SetConfig+0x154>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0x110>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1a      	ldr	r2, [pc, #104]	@ (8007598 <TIM_Base_SetConfig+0x15c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0x110>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a19      	ldr	r2, [pc, #100]	@ (800759c <TIM_Base_SetConfig+0x160>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0x110>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a18      	ldr	r2, [pc, #96]	@ (80075a0 <TIM_Base_SetConfig+0x164>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0x110>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a13      	ldr	r2, [pc, #76]	@ (8007594 <TIM_Base_SetConfig+0x158>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d103      	bne.n	8007554 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]
  }
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40013400 	.word	0x40013400
 8007594:	40015000 	.word	0x40015000
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800

080075a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f023 0201 	bic.w	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0302 	bic.w	r3, r3, #2
 80075f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a30      	ldr	r2, [pc, #192]	@ (80076c0 <TIM_OC1_SetConfig+0x11c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <TIM_OC1_SetConfig+0x88>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a2f      	ldr	r2, [pc, #188]	@ (80076c4 <TIM_OC1_SetConfig+0x120>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00f      	beq.n	800762c <TIM_OC1_SetConfig+0x88>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a2e      	ldr	r2, [pc, #184]	@ (80076c8 <TIM_OC1_SetConfig+0x124>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00b      	beq.n	800762c <TIM_OC1_SetConfig+0x88>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a2d      	ldr	r2, [pc, #180]	@ (80076cc <TIM_OC1_SetConfig+0x128>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d007      	beq.n	800762c <TIM_OC1_SetConfig+0x88>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a2c      	ldr	r2, [pc, #176]	@ (80076d0 <TIM_OC1_SetConfig+0x12c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_OC1_SetConfig+0x88>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a2b      	ldr	r2, [pc, #172]	@ (80076d4 <TIM_OC1_SetConfig+0x130>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d10c      	bne.n	8007646 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0308 	bic.w	r3, r3, #8
 8007632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f023 0304 	bic.w	r3, r3, #4
 8007644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1d      	ldr	r2, [pc, #116]	@ (80076c0 <TIM_OC1_SetConfig+0x11c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <TIM_OC1_SetConfig+0xd2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1c      	ldr	r2, [pc, #112]	@ (80076c4 <TIM_OC1_SetConfig+0x120>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00f      	beq.n	8007676 <TIM_OC1_SetConfig+0xd2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1b      	ldr	r2, [pc, #108]	@ (80076c8 <TIM_OC1_SetConfig+0x124>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00b      	beq.n	8007676 <TIM_OC1_SetConfig+0xd2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1a      	ldr	r2, [pc, #104]	@ (80076cc <TIM_OC1_SetConfig+0x128>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <TIM_OC1_SetConfig+0xd2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a19      	ldr	r2, [pc, #100]	@ (80076d0 <TIM_OC1_SetConfig+0x12c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_OC1_SetConfig+0xd2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a18      	ldr	r2, [pc, #96]	@ (80076d4 <TIM_OC1_SetConfig+0x130>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d111      	bne.n	800769a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800767c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	4313      	orrs	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	40015000 	.word	0x40015000

080076d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f023 0210 	bic.w	r2, r3, #16
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0320 	bic.w	r3, r3, #32
 8007726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a2c      	ldr	r2, [pc, #176]	@ (80077e8 <TIM_OC2_SetConfig+0x110>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_OC2_SetConfig+0x74>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a2b      	ldr	r2, [pc, #172]	@ (80077ec <TIM_OC2_SetConfig+0x114>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_OC2_SetConfig+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a2a      	ldr	r2, [pc, #168]	@ (80077f0 <TIM_OC2_SetConfig+0x118>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d10d      	bne.n	8007768 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <TIM_OC2_SetConfig+0x110>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d013      	beq.n	8007798 <TIM_OC2_SetConfig+0xc0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <TIM_OC2_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00f      	beq.n	8007798 <TIM_OC2_SetConfig+0xc0>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a1e      	ldr	r2, [pc, #120]	@ (80077f4 <TIM_OC2_SetConfig+0x11c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00b      	beq.n	8007798 <TIM_OC2_SetConfig+0xc0>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <TIM_OC2_SetConfig+0x120>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d007      	beq.n	8007798 <TIM_OC2_SetConfig+0xc0>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1c      	ldr	r2, [pc, #112]	@ (80077fc <TIM_OC2_SetConfig+0x124>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC2_SetConfig+0xc0>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a17      	ldr	r2, [pc, #92]	@ (80077f0 <TIM_OC2_SetConfig+0x118>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d113      	bne.n	80077c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800779e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40013400 	.word	0x40013400
 80077f0:	40015000 	.word	0x40015000
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800

08007800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800782e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2b      	ldr	r2, [pc, #172]	@ (800790c <TIM_OC3_SetConfig+0x10c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d007      	beq.n	8007872 <TIM_OC3_SetConfig+0x72>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2a      	ldr	r2, [pc, #168]	@ (8007910 <TIM_OC3_SetConfig+0x110>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC3_SetConfig+0x72>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a29      	ldr	r2, [pc, #164]	@ (8007914 <TIM_OC3_SetConfig+0x114>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d10d      	bne.n	800788e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1e      	ldr	r2, [pc, #120]	@ (800790c <TIM_OC3_SetConfig+0x10c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <TIM_OC3_SetConfig+0xbe>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1d      	ldr	r2, [pc, #116]	@ (8007910 <TIM_OC3_SetConfig+0x110>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_OC3_SetConfig+0xbe>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007918 <TIM_OC3_SetConfig+0x118>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_OC3_SetConfig+0xbe>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <TIM_OC3_SetConfig+0x11c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_OC3_SetConfig+0xbe>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007920 <TIM_OC3_SetConfig+0x120>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC3_SetConfig+0xbe>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a16      	ldr	r2, [pc, #88]	@ (8007914 <TIM_OC3_SetConfig+0x114>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d113      	bne.n	80078e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40012c00 	.word	0x40012c00
 8007910:	40013400 	.word	0x40013400
 8007914:	40015000 	.word	0x40015000
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800795e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	031b      	lsls	r3, r3, #12
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a2c      	ldr	r2, [pc, #176]	@ (8007a34 <TIM_OC4_SetConfig+0x110>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_OC4_SetConfig+0x74>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a2b      	ldr	r2, [pc, #172]	@ (8007a38 <TIM_OC4_SetConfig+0x114>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_OC4_SetConfig+0x74>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a2a      	ldr	r2, [pc, #168]	@ (8007a3c <TIM_OC4_SetConfig+0x118>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d10d      	bne.n	80079b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800799e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	031b      	lsls	r3, r3, #12
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a34 <TIM_OC4_SetConfig+0x110>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_OC4_SetConfig+0xc0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1e      	ldr	r2, [pc, #120]	@ (8007a38 <TIM_OC4_SetConfig+0x114>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_OC4_SetConfig+0xc0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a40 <TIM_OC4_SetConfig+0x11c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_OC4_SetConfig+0xc0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007a44 <TIM_OC4_SetConfig+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_OC4_SetConfig+0xc0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a48 <TIM_OC4_SetConfig+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC4_SetConfig+0xc0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a17      	ldr	r2, [pc, #92]	@ (8007a3c <TIM_OC4_SetConfig+0x118>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d113      	bne.n	8007a0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	019b      	lsls	r3, r3, #6
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	019b      	lsls	r3, r3, #6
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40013400 	.word	0x40013400
 8007a3c:	40015000 	.word	0x40015000
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800

08007a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <TIM_OC5_SetConfig+0xbc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <TIM_OC5_SetConfig+0x82>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a18      	ldr	r2, [pc, #96]	@ (8007b0c <TIM_OC5_SetConfig+0xc0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00f      	beq.n	8007ace <TIM_OC5_SetConfig+0x82>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a17      	ldr	r2, [pc, #92]	@ (8007b10 <TIM_OC5_SetConfig+0xc4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00b      	beq.n	8007ace <TIM_OC5_SetConfig+0x82>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a16      	ldr	r2, [pc, #88]	@ (8007b14 <TIM_OC5_SetConfig+0xc8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d007      	beq.n	8007ace <TIM_OC5_SetConfig+0x82>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	@ (8007b18 <TIM_OC5_SetConfig+0xcc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d003      	beq.n	8007ace <TIM_OC5_SetConfig+0x82>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a14      	ldr	r2, [pc, #80]	@ (8007b1c <TIM_OC5_SetConfig+0xd0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d109      	bne.n	8007ae2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40014400 	.word	0x40014400
 8007b18:	40014800 	.word	0x40014800
 8007b1c:	40015000 	.word	0x40015000

08007b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	051b      	lsls	r3, r3, #20
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1a      	ldr	r2, [pc, #104]	@ (8007be0 <TIM_OC6_SetConfig+0xc0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x84>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a19      	ldr	r2, [pc, #100]	@ (8007be4 <TIM_OC6_SetConfig+0xc4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x84>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a18      	ldr	r2, [pc, #96]	@ (8007be8 <TIM_OC6_SetConfig+0xc8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x84>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a17      	ldr	r2, [pc, #92]	@ (8007bec <TIM_OC6_SetConfig+0xcc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x84>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a16      	ldr	r2, [pc, #88]	@ (8007bf0 <TIM_OC6_SetConfig+0xd0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x84>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a15      	ldr	r2, [pc, #84]	@ (8007bf4 <TIM_OC6_SetConfig+0xd4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	029b      	lsls	r3, r3, #10
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800
 8007bf4:	40015000 	.word	0x40015000

08007bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1a      	ldr	r2, [r3, #32]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_TIMEx_PWMN_Start+0x24>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e022      	b.n	8007cae <HAL_TIMEx_PWMN_Start+0x6a>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d109      	bne.n	8007c82 <HAL_TIMEx_PWMN_Start+0x3e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	bf14      	ite	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	e015      	b.n	8007cae <HAL_TIMEx_PWMN_Start+0x6a>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d109      	bne.n	8007c9c <HAL_TIMEx_PWMN_Start+0x58>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e008      	b.n	8007cae <HAL_TIMEx_PWMN_Start+0x6a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e073      	b.n	8007d9e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <HAL_TIMEx_PWMN_Start+0x82>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc4:	e013      	b.n	8007cee <HAL_TIMEx_PWMN_Start+0xaa>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d104      	bne.n	8007cd6 <HAL_TIMEx_PWMN_Start+0x92>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd4:	e00b      	b.n	8007cee <HAL_TIMEx_PWMN_Start+0xaa>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIMEx_PWMN_Start+0xa2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ce4:	e003      	b.n	8007cee <HAL_TIMEx_PWMN_Start+0xaa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f9a3 	bl	8008042 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a25      	ldr	r2, [pc, #148]	@ (8007da8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d022      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1e:	d01d      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a21      	ldr	r2, [pc, #132]	@ (8007dac <HAL_TIMEx_PWMN_Start+0x168>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d018      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a20      	ldr	r2, [pc, #128]	@ (8007db0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1e      	ldr	r2, [pc, #120]	@ (8007db4 <HAL_TIMEx_PWMN_Start+0x170>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d009      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dbc <HAL_TIMEx_PWMN_Start+0x178>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_TIMEx_PWMN_Start+0x118>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1a      	ldr	r2, [pc, #104]	@ (8007dc0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d115      	bne.n	8007d88 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	4b18      	ldr	r3, [pc, #96]	@ (8007dc4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b06      	cmp	r3, #6
 8007d6c:	d015      	beq.n	8007d9a <HAL_TIMEx_PWMN_Start+0x156>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d74:	d011      	beq.n	8007d9a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0201 	orr.w	r2, r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	e008      	b.n	8007d9a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	e000      	b.n	8007d9c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40015000 	.word	0x40015000
 8007dc4:	00010007 	.word	0x00010007

08007dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e074      	b.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a34      	ldr	r2, [pc, #208]	@ (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a33      	ldr	r2, [pc, #204]	@ (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a31      	ldr	r2, [pc, #196]	@ (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d108      	bne.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a21      	ldr	r2, [pc, #132]	@ (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d022      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e60:	d01d      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d018      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00e      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a11      	ldr	r2, [pc, #68]	@ (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40013400 	.word	0x40013400
 8007ee0:	40015000 	.word	0x40015000
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40000800 	.word	0x40000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	40014000 	.word	0x40014000

08007ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e078      	b.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	041b      	lsls	r3, r3, #16
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008010 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d009      	beq.n	8007fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8008014 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d11c      	bne.n	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	051b      	lsls	r3, r3, #20
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40015000 	.word	0x40015000

0800801c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008032:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008042:	b480      	push	{r7}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	2204      	movs	r2, #4
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	43db      	mvns	r3, r3
 8008064:	401a      	ands	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	431a      	orrs	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	621a      	str	r2, [r3, #32]
}
 8008080:	bf00      	nop
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <memset>:
 800808c:	4402      	add	r2, r0
 800808e:	4603      	mov	r3, r0
 8008090:	4293      	cmp	r3, r2
 8008092:	d100      	bne.n	8008096 <memset+0xa>
 8008094:	4770      	bx	lr
 8008096:	f803 1b01 	strb.w	r1, [r3], #1
 800809a:	e7f9      	b.n	8008090 <memset+0x4>

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4d0d      	ldr	r5, [pc, #52]	@ (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	@ (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2600      	movs	r6, #0
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4d0b      	ldr	r5, [pc, #44]	@ (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	@ (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 f818 	bl	80080e4 <_init>
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2600      	movs	r6, #0
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	08008124 	.word	0x08008124
 80080d8:	08008124 	.word	0x08008124
 80080dc:	08008124 	.word	0x08008124
 80080e0:	0800812c 	.word	0x0800812c

080080e4 <_init>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr

080080f0 <_fini>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr
