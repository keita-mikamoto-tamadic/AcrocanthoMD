
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d58c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d764  0800d764  0000e764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d784  0800d784  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d784  0800d784  0000f06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d784  0800d784  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0800d784  0800d784  0000e784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000001c  0800d7a8  0800d7a8  0000e7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800d7c4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  2000006c  0800d830  0000f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800d830  0000f7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bfd6  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000866a  00000000  00000000  0005b072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002690  00000000  00000000  000636e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d66  00000000  00000000  00065d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bb2  00000000  00000000  00067ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a88d  00000000  00000000  00098688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d337  00000000  00000000  000c2f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f024c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae6c  00000000  00000000  001f0290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001fb0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d74c 	.word	0x0800d74c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	0800d74c 	.word	0x0800d74c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <_ZN3Ang7raw2radEt>:

  void elecAngVel();

  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000a8c <_ZN3Ang7raw2radEt+0x38>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000a90 <_ZN3Ang7raw2radEt+0x3c>
 8000a76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a7a:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40c90fdb 	.word	0x40c90fdb
 8000a90:	45800000 	.word	0x45800000
 8000a94:	00000000 	.word	0x00000000

08000a98 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TASK_TIME * static_cast<float>(compTime));
 8000aa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000b20 <_ZN3Ang8raw2radsEs+0x88>
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000b24 <_ZN3Ang8raw2radsEs+0x8c>
 8000abc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ac0:	ee16 0a90 	vmov	r0, s13
 8000ac4:	f7ff fd0c 	bl	80004e0 <__aeabi_f2d>
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460d      	mov	r5, r1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7b9b      	ldrb	r3, [r3, #14]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad8:	ee17 0a90 	vmov	r0, s15
 8000adc:	f7ff fd00 	bl	80004e0 <__aeabi_f2d>
 8000ae0:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b18 <_ZN3Ang8raw2radsEs+0x80>)
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	f7ff fd53 	bl	8000590 <__aeabi_dmul>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4620      	mov	r0, r4
 8000af0:	4629      	mov	r1, r5
 8000af2:	f7ff fe77 	bl	80007e4 <__aeabi_ddiv>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	f7ff ff59 	bl	80009b4 <__aeabi_d2f>
 8000b02:	4603      	mov	r3, r0
 8000b04:	ee07 3a90 	vmov	s15, r3
  }
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	f3af 8000 	nop.w
 8000b18:	be86607f 	.word	0xbe86607f
 8000b1c:	3f1a35b3 	.word	0x3f1a35b3
 8000b20:	40c90fdb 	.word	0x40c90fdb
 8000b24:	45800000 	.word	0x45800000

08000b28 <_ZN6CanCom7getDataEv>:
  void rxFifo0Callback(uint32_t RxFifo0ITs);
  void handleRxData();
  void rxTask();
  void txTask();

  CanData* getData() { return data.get(); }
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fafb 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "can_communication.h"

extern Ang ang;
extern CanCom cancom;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fb23 	bl	800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x6c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	731a      	strb	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	735a      	strb	r2, [r3, #13]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	739a      	strb	r2, [r3, #14]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	82da      	strh	r2, [r3, #22]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	831a      	strh	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	42480000 	.word	0x42480000

08000bb4 <_ZN3Ang4readEv>:

void Ang::read() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b1b      	ldrb	r3, [r3, #12]
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00c      	beq.n	8000be4 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	216c      	movs	r1, #108	@ 0x6c
 8000bda:	f008 fc1f 	bl	800941c <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	731a      	strb	r2, [r3, #12]
  }
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00c      	beq.n	8000c24 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 0214 	add.w	r2, r3, #20
 8000c14:	2302      	movs	r3, #2
 8000c16:	216c      	movs	r1, #108	@ 0x6c
 8000c18:	f008 fd14 	bl	8009644 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  }
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  read();
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffbd 	bl	8000bb4 <_ZN3Ang4readEv>
  receive();
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffd6 	bl	8000bec <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d033      	beq.n	8000cbe <_ZN3Ang8getAngleEv+0x92>
    rawAngPast = rawAng;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8ada      	ldrh	r2, [r3, #22]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	831a      	strh	r2, [r3, #24]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7d1b      	ldrb	r3, [r3, #20]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	7d52      	ldrb	r2, [r2, #21]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	82da      	strh	r2, [r3, #22]
    mechAngPast = data->mechAng;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 faab 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	61da      	str	r2, [r3, #28]
    data->mechAng = raw2rad(rawAng);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	8add      	ldrh	r5, [r3, #22]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 faa1 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4629      	mov	r1, r5
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fede 	bl	8000a54 <_ZN3Ang7raw2radEt>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	edc4 7a02 	vstr	s15, [r4, #8]
    
    readStart = false;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
    i2c_rx_complete = false;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    // 速度時間割りのためのカウンタ保存
    compTime = comp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b5a      	ldrb	r2, [r3, #13]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	739a      	strb	r2, [r3, #14]
    comp = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	735a      	strb	r2, [r3, #13]

  } else ++comp;

}
 8000cbc:	e005      	b.n	8000cca <_ZN3Ang8getAngleEv+0x9e>
  } else ++comp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7b5b      	ldrb	r3, [r3, #13]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	735a      	strb	r2, [r3, #13]
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}

08000cd2 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000cd2:	b5b0      	push	{r4, r5, r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  if (comp) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7b5b      	ldrb	r3, [r3, #13]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d13c      	bne.n	8000d5c <_ZN3Ang6getVelEv+0x8a>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8ada      	ldrh	r2, [r3, #22]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8b1b      	ldrh	r3, [r3, #24]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	841a      	strh	r2, [r3, #32]

    if (diff > ANG_RESL_12BIT / 2) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cfe:	db0a      	blt.n	8000d16 <_ZN3Ang6getVelEv+0x44>
      diff -= ANG_RESL_12BIT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	841a      	strh	r2, [r3, #32]
 8000d14:	e00f      	b.n	8000d36 <_ZN3Ang6getVelEv+0x64>
    } else if (diff < -ANG_RESL_12BIT / 2) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d1c:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000d20:	dc09      	bgt.n	8000d36 <_ZN3Ang6getVelEv+0x64>
      diff += ANG_RESL_12BIT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	841a      	strh	r2, [r3, #32]
    }
    
    data->actVel = raw2rads(diff);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fa46 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d44:	4604      	mov	r4, r0
 8000d46:	4629      	mov	r1, r5
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fea5 	bl	8000a98 <_ZN3Ang8raw2radsEs>
 8000d4e:	eef0 7a40 	vmov.f32	s15, s0
 8000d52:	edc4 7a04 	vstr	s15, [r4, #16]
    mechAngleVelLPF();
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f80e 	bl	8000d78 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fa36 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d6c:	8313      	strh	r3, [r2, #24]
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d78 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d8a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e40 <_ZN3Ang15mechAngleVelLPFEv+0xc8>
 8000d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TASK_TIME * static_cast<float>(compTime)) / timeConst;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7b9b      	ldrb	r3, [r3, #14]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000daa:	ee17 0a90 	vmov	r0, s15
 8000dae:	f7ff fb97 	bl	80004e0 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	@ (adr r3, 8000e38 <_ZN3Ang15mechAngleVelLPFEv+0xc0>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fbea 	bl	8000590 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fb8b 	bl	80004e0 <__aeabi_f2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4620      	mov	r0, r4
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff fd07 	bl	80007e4 <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fde9 	bl	80009b4 <__aeabi_d2f>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60bb      	str	r3, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f9f1 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f9e0 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e16:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9d7 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	ee78 7a88 	vadd.f32	s15, s17, s16
 8000e28:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	ecbd 8b02 	vpop	{d8}
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	be86607f 	.word	0xbe86607f
 8000e3c:	3f1a35b3 	.word	0x3f1a35b3
 8000e40:	40c90fdb 	.word	0x40c90fdb

08000e44 <_ZN3Ang7elecAngEf>:

float Ang::elecAng(float _eofs) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	ed87 0a00 	vstr	s0, [r7]
  // comp = 0のときサンプル値更新あり
  // 次の更新まで2周期を補間するので3で割った値を足す
  if (comp == 0) rawElecComp = rawAng;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7b5b      	ldrb	r3, [r3, #13]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <_ZN3Ang7elecAngEf+0x1e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8ada      	ldrh	r2, [r3, #22]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000e60:	e00f      	b.n	8000e82 <_ZN3Ang7elecAngEf+0x3e>
  else rawElecComp = rawAng + (diff / 3);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	8ada      	ldrh	r2, [r3, #22]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <_ZN3Ang7elecAngEf+0xcc>)
 8000e6e:	fb81 0103 	smull	r0, r1, r1, r3
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1acb      	subs	r3, r1, r3
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	859a      	strh	r2, [r3, #44]	@ 0x2c
  
  // 電気角反転
  static uint16_t elecAngtemp_ = 0;
  if (elecAngDir > 0) {
    elecAngtemp_ = rawElecComp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000e88:	801a      	strh	r2, [r3, #0]

  // CWとCCWを切替
  static float ofs_ = 0.0f;
  if (rotDir > 0) {
    ofs_ = _eofs + user2pi;
  }else ofs_ = _eofs; // 極性反転不要
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6013      	str	r3, [r2, #0]

  static uint16_t offset_ = 0;
  static uint16_t elecAngtemp2_ = 0;
  
  offset_ = static_cast<uint16_t>(ofs_ * static_cast<float>(ANG_RESL_12BIT) / user2pi);
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e9e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eaa:	ee17 3a90 	vmov	r3, s15
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
  elecAngtemp2_ = (elecAngtemp_ * polePairs + offset_) % ANG_RESL_12BIT;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <_ZN3Ang7elecAngEf+0xe4>)
 8000ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	12d9      	asrs	r1, r3, #11
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	1a5b      	subs	r3, r3, r1
 8000ede:	1ad1      	subs	r1, r2, r3
 8000ee0:	b28a      	uxth	r2, r1
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee4:	801a      	strh	r2, [r3, #0]

  return static_cast<float>(elecAngtemp2_) / static_cast<float>(ANG_RESL_12BIT) * user2pi;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	55555556 	.word	0x55555556
 8000f14:	20000088 	.word	0x20000088
 8000f18:	2000008c 	.word	0x2000008c
 8000f1c:	457ff000 	.word	0x457ff000
 8000f20:	40c90fdb 	.word	0x40c90fdb
 8000f24:	20000090 	.word	0x20000090
 8000f28:	80080081 	.word	0x80080081
 8000f2c:	20000092 	.word	0x20000092

08000f30 <_ZN3Ang14elecAngVirtualEf>:

float Ang::elecAngVirtual(float _virFreqRef) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	ed87 0a00 	vstr	s0, [r7]
  // 仮想電気角
  static float _theta = 0.0f;
  // タスク周期で分割して足しこむ
  float _deltatheta = _virFreqRef * TASK_TIME;
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a327      	add	r3, pc, #156	@ (adr r3, 8000fe0 <_ZN3Ang14elecAngVirtualEf+0xb0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd2e 	bl	80009b4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  _theta += _deltatheta;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

  // 0~1の範囲に収める
  if (_theta > 1.0f) _theta -= 1.0f;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd09      	ble.n	8000f98 <_ZN3Ang14elecAngVirtualEf+0x68>
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
  if (_theta < 0.0f) _theta += 1.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <_ZN3Ang14elecAngVirtualEf+0x8c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

  // ラジアンで返却
  return _theta * user2pi;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fdc <_ZN3Ang14elecAngVirtualEf+0xac>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	20000094 	.word	0x20000094
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	be86607f 	.word	0xbe86607f
 8000fe4:	3f1a35b3 	.word	0x3f1a35b3

08000fe8 <_ZN3Ang11elecAngleInEv>:

void Ang::elecAngleIn(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	ed2d 8b02 	vpush	{d8}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8000ff4:	481f      	ldr	r0, [pc, #124]	@ (8001074 <_ZN3Ang11elecAngleInEv+0x8c>)
 8000ff6:	f7ff fd97 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8000ffa:	60f8      	str	r0, [r7, #12]
  
  data->elecAngTest = elecAng(EOFS);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f8e6 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001004:	4604      	mov	r4, r0
 8001006:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff1a 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	edc4 7a07 	vstr	s15, [r4, #28]
  if (candata->virAngFreq > 0.0f) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	edd3 7a03 	vldr	s15, [r3, #12]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	dd11      	ble.n	800104c <_ZN3Ang11elecAngleInEv+0x64>
    data->elecAng = elecAngVirtual(candata->virAngFreq);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	ed93 8a03 	vldr	s16, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8cd 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001036:	4604      	mov	r4, r0
 8001038:	eeb0 0a48 	vmov.f32	s0, s16
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff77 	bl	8000f30 <_ZN3Ang14elecAngVirtualEf>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	edc4 7a00 	vstr	s15, [r4]
  } else {
    data->elecAng = elecAng(EOFS);
  }
}
 800104a:	e00d      	b.n	8001068 <_ZN3Ang11elecAngleInEv+0x80>
    data->elecAng = elecAng(EOFS);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f8be 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001054:	4604      	mov	r4, r0
 8001056:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fef2 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	edc4 7a00 	vstr	s15, [r4]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	ecbd 8b02 	vpop	{d8}
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000570 	.word	0x20000570
 8001078:	40425c14 	.word	0x40425c14

0800107c <_ZNK3Ang14prepareCanDataEPhj>:

int16_t Ang::compAng() {
  return 0;
}

void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  memcpy(buffer, &(data->elecAng), sizeof(data->elecAng));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8a0 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001090:	4603      	mov	r3, r0
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80010e6:	f7ff ffdc 	bl	80010a2 <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200005d8 	.word	0x200005d8

080010f8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001102:	f7ff ffdc 	bl	80010be <_ZN3Ang19i2cMasterRxCallbackEv>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200005d8 	.word	0x200005d8

08001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f862 	bl	80011e8 <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f863 	bl	8001204 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN3Ang7AngDataC1Ev>:
  struct AngData{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	831a      	strh	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80011a4:	2020      	movs	r0, #32
 80011a6:	f00c f91d 	bl	800d3e4 <_Znwj>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461c      	mov	r4, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	2320      	movs	r3, #32
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f00c f9f7 	bl	800d5a8 <memset>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ffc4 	bl	8001148 <_ZN3Ang7AngDataC1Ev>
 80011c0:	4621      	mov	r1, r4
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f83c 	bl	8001240 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	return get();
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff9b 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 80011de:	4603      	mov	r3, r0
      }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f840 	bl	8001278 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011f8:	4603      	mov	r3, r0
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f83f 	bl	8001292 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8001214:	4603      	mov	r3, r0
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f83b 	bl	80012ac <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffe6 	bl	8001220 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f833 	bl	80012d4 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f833 	bl	80012ee <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001288:	4603      	mov	r3, r0
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f832 	bl	8001306 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f830 	bl	800131e <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffcd 	bl	800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f82a 	bl	8001338 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f82a 	bl	8001350 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f82b 	bl	800136a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8001314:	4603      	mov	r3, r0
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f82b 	bl	8001384 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f82f 	bl	80013a4 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f82f 	bl	80013be <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>
 8001360:	4603      	mov	r3, r0
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f82d 	bl	80013d4 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f82c 	bl	80013ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f834 	bl	8001402 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f835 	bl	800141e <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>:
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>:
      _Tuple_impl()
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f81e 	bl	8001434 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>:
      constexpr _Head_base()
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

// グローバルなインスタンスを使用
extern CanCom cancom;
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
    data(std::make_unique<CanData>()) {}
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f9a8 	bl	80017ac <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    data(std::make_unique<CanData>()) {}
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	4613      	mov	r3, r2
 8001498:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	609a      	str	r2, [r3, #8]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <_ZN6CanCom12initTxHeaderEmbb+0x28>
 80014a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014aa:	e000      	b.n	80014ae <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 80014ac:	2200      	movs	r2, #0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	60da      	str	r2, [r3, #12]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2208      	movs	r2, #8
 80014bc:	615a      	str	r2, [r3, #20]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 80014ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014ce:	e000      	b.n	80014d2 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 80014d0:	2200      	movs	r2, #0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	61da      	str	r2, [r3, #28]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 80014dc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014e0:	e000      	b.n	80014e4 <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80014e2:	2200      	movs	r2, #0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	621a      	str	r2, [r3, #32]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  txHeader.MessageMarker = 0;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b08      	cmp	r3, #8
 8001510:	d902      	bls.n	8001518 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 8001512:	f002 f98d 	bl	8003830 <Error_Handler>
 8001516:	e02a      	b.n	800156e <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	e00c      	b.n	8001540 <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	7819      	ldrb	r1, [r3, #0]
 800152e:	f107 0214 	add.w	r2, r7, #20
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3ee      	bcc.n	8001526 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6858      	ldr	r0, [r3, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3308      	adds	r3, #8
 8001550:	f107 0214 	add.w	r2, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f007 f861 	bl	800861c <HAL_FDCAN_AddMessageToTxFifoQ>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 800156a:	f002 f961 	bl	8003830 <Error_Handler>
  }
}
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d028      	beq.n	80015da <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6858      	ldr	r0, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	335c      	adds	r3, #92	@ 0x5c
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	f007 f884 	bl	80086a4 <HAL_FDCAN_GetRxMessage>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 80015ac:	f002 f940 	bl	8003830 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f007 f97b 	bl	80088b4 <HAL_FDCAN_ActivateNotification>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 80015ce:	f002 f92f 	bl	8003830 <Error_Handler>
    }

    canRxInterrupt = true;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  }
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80015e2:	b590      	push	{r4, r7, lr}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d043      	beq.n	8001688 <_ZN6CanCom12handleRxDataEv+0xa6>
    data->genFuncRef = rxData[0];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f8ec 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001610:	7013      	strb	r3, [r2, #0]
    data->drvMdRef = rxData[1];
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f8e3 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001622:	7053      	strb	r3, [r2, #1]
    data->voltDRef = static_cast<float>(rxData[2]);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 405e 	ldrb.w	r4, [r3, #94]	@ 0x5e
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f8d7 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001632:	4603      	mov	r3, r0
 8001634:	ee07 4a90 	vmov	s15, r4
 8001638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163c:	edc3 7a01 	vstr	s15, [r3, #4]
    data->voltQRef = static_cast<float>(rxData[3]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 405f 	ldrb.w	r4, [r3, #95]	@ 0x5f
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8c9 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800164e:	4603      	mov	r3, r0
 8001650:	ee07 4a90 	vmov	s15, r4
 8001654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001658:	edc3 7a02 	vstr	s15, [r3, #8]
    data->virAngFreq = static_cast<float>(rxData[4]);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 4060 	ldrb.w	r4, [r3, #96]	@ 0x60
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f8bb 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800166a:	4603      	mov	r3, r0
 800166c:	ee07 4a90 	vmov	s15, r4
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	edc3 7a03 	vstr	s15, [r3, #12]

    canRxInterrupt = false;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    canTxFlag = true;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}

08001690 <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  handleRxData();
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffa2 	bl	80015e2 <_ZN6CanCom12handleRxDataEv>
  uint8_t currentGenFuncRef = data->genFuncRef;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f89d 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <_ZN6CanCom6rxTaskEv+0x38>
    data->genFuncCheck = false;   
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f890 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	741a      	strb	r2, [r3, #16]
    return;
 80016c6:	e00a      	b.n	80016de <_ZN6CanCom6rxTaskEv+0x4e>
  }
  data->genFuncCheck = true;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f888 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2201      	movs	r2, #1
 80016d4:	741a      	strb	r2, [r3, #16]
  prevGenFuncRef = currentGenFuncRef;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d019      	beq.n	800172c <_ZN6CanCom6txTaskEv+0x48>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f870 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001700:	4603      	mov	r3, r0
 8001702:	3311      	adds	r3, #17
 8001704:	2208      	movs	r2, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480a      	ldr	r0, [pc, #40]	@ (8001734 <_ZN6CanCom6txTaskEv+0x50>)
 800170a:	f7ff fcb7 	bl	800107c <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f865 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001716:	4603      	mov	r3, r0
 8001718:	3311      	adds	r3, #17
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff feee 	bl	8001500 <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200005d8 	.word	0x200005d8

08001738 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8001746:	f7ff ff15 	bl	8001574 <_ZN6CanCom15rxFifo0CallbackEm>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000570 	.word	0x20000570

08001758 <_ZN6CanCom7CanDataC1Ev>:
  struct CanData {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	741a      	strb	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3311      	adds	r3, #17
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3319      	adds	r3, #25
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80017b4:	2024      	movs	r0, #36	@ 0x24
 80017b6:	f00b fe15 	bl	800d3e4 <_Znwj>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461c      	mov	r4, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	2324      	movs	r3, #36	@ 0x24
 80017c2:	461a      	mov	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f00b feef 	bl	800d5a8 <memset>
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff ffc4 	bl	8001758 <_ZN6CanCom7CanDataC1Ev>
 80017d0:	4621      	mov	r1, r4
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f820 	bl	8001818 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	return get();
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fca0 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 80017ee:	4603      	mov	r3, r0
      }
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f821 	bl	8001850 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffe6 	bl	80017f8 <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f819 	bl	8001878 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f818 	bl	8001892 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffe7 	bl	8001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001868:	4602      	mov	r2, r0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f812 	bl	80018ac <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001888:	4603      	mov	r3, r0
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f811 	bl	80018c4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f815 	bl	80018e4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f816 	bl	80018fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f81e 	bl	8001916 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f81f 	bl	8001932 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>:
      _Tuple_impl()
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f81e 	bl	8001948 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>:
      constexpr _Head_base()
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_ZNK3Ang10getAngDataEv>:
  void elecAngleIn();
  void i2cMasterTxCallback();
  void i2cMasterRxCallback();
  void prepareCanData(uint8_t* buffer, size_t bufferSize) const;
  
  AngData* getAngData() const { return data.get(); }
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fbd3 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNK4Util11getUtilDataEv>:
public:
  Util();
  
  void genFuncCtrl();

  UtilData* getUtilData() const { return data.get(); }
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fc71 	bl	800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_ZN12ElecangCalibC1Ev>:
extern Ang ang;
extern UserTask usertask;
extern Util util;
extern CanCom cancom;

ElecangCalib::ElecangCalib()
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ElecangCalibData>()){}
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fc8f 	bl	80022c0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	711a      	strb	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	332c      	adds	r3, #44	@ 0x2c
 80019ee:	22f0      	movs	r2, #240	@ 0xf0
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00b fdd8 	bl	800d5a8 <memset>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80019fe:	22f0      	movs	r2, #240	@ 0xf0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00b fdd0 	bl	800d5a8 <memset>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <_ZN12ElecangCalib10elecCalSeqEv>:

void ElecangCalib::elecCalSeq(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	ed2d 8b02 	vpush	{d8}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8001a20:	48c1      	ldr	r0, [pc, #772]	@ (8001d28 <_ZN12ElecangCalib10elecCalSeqEv+0x314>)
 8001a22:	f7ff ffa9 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8001a26:	60f8      	str	r0, [r7, #12]
  CanCom::CanData* candata = cancom.getData();
 8001a28:	48c0      	ldr	r0, [pc, #768]	@ (8001d2c <_ZN12ElecangCalib10elecCalSeqEv+0x318>)
 8001a2a:	f7ff f87d 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8001a2e:	60b8      	str	r0, [r7, #8]

  static SeqID_t seqID = INIT;
  static SeqID_t seqID_prev = STEP00;
  float elecAngOfsCur = 0.0f;
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  float ecalVoltDRef = STIMUL_VOLTDREF;
 8001a36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a3a:	613b      	str	r3, [r7, #16]
  
  if (candata->voltQRef > STIMUL_VOLTDREF) ecalVoltDRef = candata->voltQRef;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd02      	ble.n	8001a56 <_ZN12ElecangCalib10elecCalSeqEv+0x42>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	613b      	str	r3, [r7, #16]
  
  switch (seqID) {
 8001a56:	4bb6      	ldr	r3, [pc, #728]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	f200 81e4 	bhi.w	8001e28 <_ZN12ElecangCalib10elecCalSeqEv+0x414>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <_ZN12ElecangCalib10elecCalSeqEv+0x54>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001abf 	.word	0x08001abf
 8001a6c:	08001af9 	.word	0x08001af9
 8001a70:	08001b73 	.word	0x08001b73
 8001a74:	08001bb5 	.word	0x08001bb5
 8001a78:	08001c37 	.word	0x08001c37
 8001a7c:	08001e29 	.word	0x08001e29
 8001a80:	08001e29 	.word	0x08001e29
 8001a84:	08001e29 	.word	0x08001e29
 8001a88:	08001e29 	.word	0x08001e29
 8001a8c:	08001e29 	.word	0x08001e29
 8001a90:	08001e29 	.word	0x08001e29
 8001a94:	08001e29 	.word	0x08001e29
 8001a98:	08001e29 	.word	0x08001e29
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001d79 	.word	0x08001d79
 8001aa4:	08001e29 	.word	0x08001e29
 8001aa8:	08001d4d 	.word	0x08001d4d
    case INIT:
      if (utildata->eCalib) {
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 81bd 	beq.w	8001e30 <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
        seqID = STEP00;
 8001ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001abc:	e1b8      	b.n	8001e30 <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
    // 正の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRPに正の回転方向でのオフセット値を記録
    case STEP00:
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsRP, CALIB_ROUGH)){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8001d34 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001acc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f9c1 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 81ab 	beq.w	8001e34 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
        seqID_prev = STEP00;
 8001ade:	4b96      	ldr	r3, [pc, #600]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d101      	bne.n	8001af0 <_ZN12ElecangCalib10elecCalSeqEv+0xdc>
 8001aec:	2210      	movs	r2, #16
 8001aee:	e000      	b.n	8001af2 <_ZN12ElecangCalib10elecCalSeqEv+0xde>
 8001af0:	220e      	movs	r2, #14
 8001af2:	4b8f      	ldr	r3, [pc, #572]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001af4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001af6:	e19d      	b.n	8001e34 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
    // 正の電圧印可 電気角オフセット遷移はelecAngOfsRPからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFPに正の回転方向での詳細オフセット値を記録
    case STEP01:
      elecAngOfsCur = elecAngOfsRP - (FINE_WIDTH / 2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001afe:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001d3c <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b06:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d507      	bpl.n	8001b28 <_ZN12ElecangCalib10elecCalSeqEv+0x114>
 8001b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b1c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsFP, CALIB_FINE)){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001d44 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001b30:	4619      	mov	r1, r3
 8001b32:	edd7 0a05 	vldr	s1, [r7, #20]
 8001b36:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f98c 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8178 	beq.w	8001e38 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
        seqID_prev = STEP01;
 8001b48:	4b7b      	ldr	r3, [pc, #492]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d101      	bne.n	8001b5a <_ZN12ElecangCalib10elecCalSeqEv+0x146>
 8001b56:	2210      	movs	r2, #16
 8001b58:	e000      	b.n	8001b5c <_ZN12ElecangCalib10elecCalSeqEv+0x148>
 8001b5a:	220e      	movs	r2, #14
 8001b5c:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001b5e:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsPlus = elecAngOfsFP;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fbe9 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	6013      	str	r3, [r2, #0]
      }
      break;
 8001b70:	e162      	b.n	8001e38 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
      
    // 負の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRMに負の回転方向でのオフセット値を記録
    case STEP02:
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsRM, CALIB_ROUGH)){
 8001b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b76:	eef1 7a67 	vneg.f32	s15, s15
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8001d34 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001b82:	4619      	mov	r1, r3
 8001b84:	edd7 0a05 	vldr	s1, [r7, #20]
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f963 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8151 	beq.w	8001e3c <_ZN12ElecangCalib10elecCalSeqEv+0x428>
        seqID_prev = STEP02;
 8001b9a:	4b67      	ldr	r3, [pc, #412]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d101      	bne.n	8001bac <_ZN12ElecangCalib10elecCalSeqEv+0x198>
 8001ba8:	2210      	movs	r2, #16
 8001baa:	e000      	b.n	8001bae <_ZN12ElecangCalib10elecCalSeqEv+0x19a>
 8001bac:	220e      	movs	r2, #14
 8001bae:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001bb2:	e143      	b.n	8001e3c <_ZN12ElecangCalib10elecCalSeqEv+0x428>
    // 負の電圧印可 電気角オフセット遷移はelecAngOfsRMからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFMに正の回転方向での詳細オフセット値を記録
    case STEP03:
      elecAngOfsCur = elecAngOfsRM - (FINE_WIDTH / 2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bba:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001d3c <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc2:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001bc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d507      	bpl.n	8001be4 <_ZN12ElecangCalib10elecCalSeqEv+0x1d0>
 8001bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be0:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsFM, CALIB_FINE)){
 8001be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be8:	eef1 7a67 	vneg.f32	s15, s15
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3314      	adds	r3, #20
 8001bf0:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8001d44 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f92a 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 811a 	beq.w	8001e40 <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
        seqID_prev = STEP03;
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	d101      	bne.n	8001c1e <_ZN12ElecangCalib10elecCalSeqEv+0x20a>
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	e000      	b.n	8001c20 <_ZN12ElecangCalib10elecCalSeqEv+0x20c>
 8001c1e:	220e      	movs	r2, #14
 8001c20:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001c22:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsMinus = elecAngOfsFM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fb87 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	6053      	str	r3, [r2, #4]
      }
      break;
 8001c34:	e104      	b.n	8001e40 <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
      
    case STEP04:
      // 最終オフセット値算出
      if (!utildata->eCalib) { seqID = END; break; }
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <_ZN12ElecangCalib10elecCalSeqEv+0x238>
 8001c44:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001c46:	2210      	movs	r2, #16
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e0fa      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
      if (((elecAngOfsFP + userpi) < elecAngOfsFM) || (elecAngOfsFM < (elecAngOfsFP - userpi))) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c52:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d40e      	bmi.n	8001c88 <_ZN12ElecangCalib10elecCalSeqEv+0x274>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c76:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001c7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d517      	bpl.n	8001cb8 <_ZN12ElecangCalib10elecCalSeqEv+0x2a4>
        data->elecAngOfs = ((elecAngOfsFP + elecAngOfsFM) / 2) - userpi;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c9c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fb49 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001cae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001cb2:	edc3 7a04 	vstr	s15, [r3, #16]
 8001cb6:	e012      	b.n	8001cde <_ZN12ElecangCalib10elecCalSeqEv+0x2ca>
      } else {
        data->elecAngOfs = (elecAngOfsFP + elecAngOfsFM) / 2;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cc4:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb35 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001cd6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001cda:	edc3 7a04 	vstr	s15, [r3, #16]
      }
      if (data->elecAngOfs <= 0.0f) data->elecAngOfs += user2pi;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fb2a 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <_ZN12ElecangCalib10elecCalSeqEv+0x306>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fb19 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d16:	edc3 7a04 	vstr	s15, [r3, #16]
      seqID = END;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	701a      	strb	r2, [r3, #0]
      seqID_prev = IDLE;
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001d22:	220e      	movs	r2, #14
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e08c      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
 8001d28:	20000650 	.word	0x20000650
 8001d2c:	20000570 	.word	0x20000570
 8001d30:	20000000 	.word	0x20000000
 8001d34:	3dd67750 	.word	0x3dd67750
 8001d38:	200002a4 	.word	0x200002a4
 8001d3c:	3e99999a 	.word	0x3e99999a
 8001d40:	40c90fdb 	.word	0x40c90fdb
 8001d44:	3c23d70b 	.word	0x3c23d70b
 8001d48:	40490fdb 	.word	0x40490fdb
      
    case END:
      data->drvMd = 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 faf3 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	721a      	strb	r2, [r3, #8]
      data->voltQRef = 0.0f;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 faec 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
      utildata->eCalib = false;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
      seqID = INIT;
 8001d70:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001d72:	220d      	movs	r2, #13
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e064      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    case IDLE:
      if (idleCount++ < 1000) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6191      	str	r1, [r2, #24]
 8001d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bfd4      	ite	le
 8001d8a:	2301      	movle	r3, #1
 8001d8c:	2300      	movgt	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00f      	beq.n	8001db4 <_ZN12ElecangCalib10elecCalSeqEv+0x3a0>
        data->drvMd = 0;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 facf 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	721a      	strb	r2, [r3, #8]
        data->voltQRef = 0.0f;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fac8 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
        break;
 8001db2:	e046      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>

      } else {
        idleCount = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
        switch (seqID_prev)
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <_ZN12ElecangCalib10elecCalSeqEv+0x440>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b0e      	cmp	r3, #14
 8001dc0:	d830      	bhi.n	8001e24 <_ZN12ElecangCalib10elecCalSeqEv+0x410>
 8001dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <_ZN12ElecangCalib10elecCalSeqEv+0x3b4>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e05 	.word	0x08001e05
 8001dcc:	08001e0d 	.word	0x08001e0d
 8001dd0:	08001e15 	.word	0x08001e15
 8001dd4:	08001e1d 	.word	0x08001e1d
 8001dd8:	08001e25 	.word	0x08001e25
 8001ddc:	08001e25 	.word	0x08001e25
 8001de0:	08001e25 	.word	0x08001e25
 8001de4:	08001e25 	.word	0x08001e25
 8001de8:	08001e25 	.word	0x08001e25
 8001dec:	08001e25 	.word	0x08001e25
 8001df0:	08001e25 	.word	0x08001e25
 8001df4:	08001e25 	.word	0x08001e25
 8001df8:	08001e25 	.word	0x08001e25
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	08001e25 	.word	0x08001e25
        {
        case STEP00:
          seqID = STEP01;
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
          break;
 8001e0a:	e00c      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP01:
          seqID = STEP02;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
          break;
 8001e12:	e008      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP02:
          seqID = STEP03;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e16:	2203      	movs	r2, #3
 8001e18:	701a      	strb	r2, [r3, #0]
          break;
 8001e1a:	e004      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP03:
          seqID = STEP04;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	701a      	strb	r2, [r3, #0]
          break;
 8001e22:	e000      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case IDLE:
          break;  

        default:
          break;
 8001e24:	bf00      	nop
        }
      }
      break;
 8001e26:	e00c      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    default:
      seqID = INIT;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e2a:	220d      	movs	r2, #13
 8001e2c:	701a      	strb	r2, [r3, #0]
      break;
 8001e2e:	e008      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e30:	bf00      	nop
 8001e32:	e006      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e34:	bf00      	nop
 8001e36:	e004      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e38:	bf00      	nop
 8001e3a:	e002      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e40:	bf00      	nop
  }

}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	ecbd 8b02 	vpop	{d8}
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200002a4 	.word	0x200002a4

08001e58 <_ZN12ElecangCalib8calibSubEffPff>:

bool ElecangCalib::calibSub(float _voltDRef, float _elecAngOfsCur, float *_elecAngOfsMax, float _calDelta) {
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b08a      	sub	sp, #40	@ 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6178      	str	r0, [r7, #20]
 8001e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	ed87 1a01 	vstr	s2, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 8001e6e:	48aa      	ldr	r0, [pc, #680]	@ (8002118 <_ZN12ElecangCalib8calibSubEffPff+0x2c0>)
 8001e70:	f7ff fd75 	bl	800195e <_ZNK3Ang10getAngDataEv>
 8001e74:	61f8      	str	r0, [r7, #28]
  Util::UtilData* utildata = util.getUtilData();
 8001e76:	48a9      	ldr	r0, [pc, #676]	@ (800211c <_ZN12ElecangCalib8calibSubEffPff+0x2c4>)
 8001e78:	f7ff fd7e 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8001e7c:	61b8      	str	r0, [r7, #24]
  bool returnVal = false;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  // forloop用
  float velOutMax_ = 0.0f;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  
  switch (seqIDSub) {
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	f200 81d4 	bhi.w	800223c <_ZN12ElecangCalib8calibSubEffPff+0x3e4>
 8001e94:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <_ZN12ElecangCalib8calibSubEffPff+0x44>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ee1 	.word	0x08001ee1
 8001ea0:	08001fa9 	.word	0x08001fa9
 8001ea4:	080020e9 	.word	0x080020e9
 8001ea8:	0800223d 	.word	0x0800223d
 8001eac:	0800223d 	.word	0x0800223d
 8001eb0:	0800223d 	.word	0x0800223d
 8001eb4:	0800223d 	.word	0x0800223d
 8001eb8:	0800223d 	.word	0x0800223d
 8001ebc:	0800223d 	.word	0x0800223d
 8001ec0:	0800223d 	.word	0x0800223d
 8001ec4:	0800223d 	.word	0x0800223d
 8001ec8:	0800223d 	.word	0x0800223d
 8001ecc:	0800223d 	.word	0x0800223d
 8001ed0:	0800223d 	.word	0x0800223d
 8001ed4:	0800223d 	.word	0x0800223d
 8001ed8:	08002219 	.word	0x08002219
 8001edc:	080021ef 	.word	0x080021ef
    case STEP00:
      // Standby
      data->drvMd = 1;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fa29 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2201      	movs	r2, #1
 8001eec:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fa22 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	60d3      	str	r3, [r2, #12]
      elecAngOfsVal = _elecAngOfsCur;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
      angdata->elecAng += elecAngOfsVal;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	f083 0301 	eor.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <_ZN12ElecangCalib8calibSubEffPff+0xd6>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	711a      	strb	r2, [r3, #4]
 8001f2c:	e18a      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < STANDBY_COUNT) {
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	61d1      	str	r1, [r2, #28]
 8001f38:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bfd4      	ite	le
 8001f40:	2301      	movle	r3, #1
 8001f42:	2300      	movgt	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d027      	beq.n	8001f9a <_ZN12ElecangCalib8calibSubEffPff+0x142>
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fac6 	bl	80004e0 <__aeabi_f2d>
 8001f54:	a36c      	add	r3, pc, #432	@ (adr r3, 8002108 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb19 	bl	8000590 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fab8 	bl	80004e0 <__aeabi_f2d>
 8001f70:	a367      	add	r3, pc, #412	@ (adr r3, 8002110 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb0b 	bl	8000590 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f94f 	bl	8000224 <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fd11 	bl	80009b4 <__aeabi_d2f>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28
      } else {
        count = 0;
        seqIDSub = STEP01;
      }
      break;
 8001f98:	e154      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        count = 0;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
        seqIDSub = STEP01;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	711a      	strb	r2, [r3, #4]
      break;
 8001fa6:	e14d      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP01:
      // Run
      data->drvMd = 1;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9c5 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f9be 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	60d3      	str	r3, [r2, #12]
      angdata->elecAng += elecAngOfsVal;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <_ZN12ElecangCalib8calibSubEffPff+0x198>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	220f      	movs	r2, #15
 8001fec:	711a      	strb	r2, [r3, #4]
 8001fee:	e129      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < CALIB_COUNT) {
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	1c59      	adds	r1, r3, #1
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	61d1      	str	r1, [r2, #28]
 8001ffa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ffe:	4293      	cmp	r3, r2
 8002000:	bfd4      	ite	le
 8002002:	2301      	movle	r3, #1
 8002004:	2300      	movgt	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03b      	beq.n	8002084 <_ZN12ElecangCalib8calibSubEffPff+0x22c>
        if (user2pi < angdata->elecAng) angdata->elecAng -= user2pi;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002120 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 8002016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd09      	ble.n	8002034 <_ZN12ElecangCalib8calibSubEffPff+0x1dc>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002120 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 800202a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	edc3 7a00 	vstr	s15, [r3]
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa51 	bl	80004e0 <__aeabi_f2d>
 800203e:	a332      	add	r3, pc, #200	@ (adr r3, 8002108 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe faa4 	bl	8000590 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa43 	bl	80004e0 <__aeabi_f2d>
 800205a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002110 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa96 	bl	8000590 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f8da 	bl	8000224 <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fc9c 	bl	80009b4 <__aeabi_d2f>
 800207c:	4602      	mov	r2, r0
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
        } else {
          indexnum = 0;
          seqIDSub = STEP02;
        }
      }
      break;
 8002082:	e0df      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        if (indexnum < CALIB_NUM) {
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	2b3b      	cmp	r3, #59	@ 0x3b
 800208a:	d826      	bhi.n	80020da <_ZN12ElecangCalib8calibSubEffPff+0x282>
          count = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
          velOut[indexnum] = velOutAxLast;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	330a      	adds	r3, #10
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3304      	adds	r3, #4
 80020a4:	601a      	str	r2, [r3, #0]
          elecAngOfs[indexnum] = elecAngOfsVal;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6a12      	ldr	r2, [r2, #32]
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	3346      	adds	r3, #70	@ 0x46
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3304      	adds	r3, #4
 80020b8:	601a      	str	r2, [r3, #0]
          elecAngOfsVal += _calDelta;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80020c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	edc3 7a08 	vstr	s15, [r3, #32]
          indexnum++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80020d8:	e0b4      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
          indexnum = 0;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
          seqIDSub = STEP02;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2202      	movs	r2, #2
 80020e4:	711a      	strb	r2, [r3, #4]
      break;
 80020e6:	e0ad      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP02:
      // Mesuring
      
      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <_ZN12ElecangCalib8calibSubEffPff+0x2a6>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	220f      	movs	r2, #15
 80020fa:	711a      	strb	r2, [r3, #4]
 80020fc:	e0a2      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
 8002104:	e068      	b.n	80021d8 <_ZN12ElecangCalib8calibSubEffPff+0x380>
 8002106:	bf00      	nop
 8002108:	1b24ce90 	.word	0x1b24ce90
 800210c:	3feff5b5 	.word	0x3feff5b5
 8002110:	b662dffe 	.word	0xb662dffe
 8002114:	3f5495c9 	.word	0x3f5495c9
 8002118:	200005d8 	.word	0x200005d8
 800211c:	20000650 	.word	0x20000650
 8002120:	40c90fdb 	.word	0x40c90fdb
        if ((_voltDRef > 0.0f) && (velOut[indexnum] >= velOutMax_)) {
 8002124:	edd7 7a04 	vldr	s15, [r7, #16]
 8002128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dd23      	ble.n	800217a <_ZN12ElecangCalib8calibSubEffPff+0x322>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	330a      	adds	r3, #10
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ed97 7a08 	vldr	s14, [r7, #32]
 8002148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	d813      	bhi.n	800217a <_ZN12ElecangCalib8calibSubEffPff+0x322>
          velOutMax_ = velOut[indexnum];
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	330a      	adds	r3, #10
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	3346      	adds	r3, #70	@ 0x46
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e029      	b.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
        }
        else if ((_voltDRef < 0.0f) && (velOut[indexnum] <= velOutMax_)) {
 800217a:	edd7 7a04 	vldr	s15, [r7, #16]
 800217e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	d522      	bpl.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	330a      	adds	r3, #10
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ed97 7a08 	vldr	s14, [r7, #32]
 800219e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	db12      	blt.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
          velOutMax_ = velOut[indexnum];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	330a      	adds	r3, #10
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	3346      	adds	r3, #70	@ 0x46
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	601a      	str	r2, [r3, #0]
      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80021de:	d9a1      	bls.n	8002124 <_ZN12ElecangCalib8calibSubEffPff+0x2cc>
        }
      }
      indexnum = 0;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
      seqIDSub = END;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2210      	movs	r2, #16
 80021ea:	711a      	strb	r2, [r3, #4]

      break;
 80021ec:	e02a      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
      
    case END:
      // End
      count = 0;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
      returnVal = true;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      seqIDSub = STEP00;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2200      	movs	r2, #0
 8002214:	711a      	strb	r2, [r3, #4]
      break;
 8002216:	e015      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case FAIL:
      // キャンセル処理
      count = 0;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
      returnVal = true;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      
      break;
 800223a:	e003      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    default:
    seqIDSub = STEP00;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	711a      	strb	r2, [r3, #4]
    break;
 8002242:	bf00      	nop
  } 
  return returnVal;
 8002244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	@ 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bdb0      	pop	{r4, r5, r7, pc}

08002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f879 	bl	8002352 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f87a 	bl	800236e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 800227a:	4603      	mov	r3, r0
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>:
#define CALIB_NUM       (60)                           /* 分割数 [-] */

class ElecangCalib
{
public:
  struct ElecangCalibData
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	721a      	strb	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80022c8:	2014      	movs	r0, #20
 80022ca:	f00b f88b 	bl	800d3e4 <_Znwj>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461c      	mov	r4, r3
 80022d2:	4622      	mov	r2, r4
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	6053      	str	r3, [r2, #4]
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	60d3      	str	r3, [r2, #12]
 80022de:	6113      	str	r3, [r2, #16]
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff ffcf 	bl	8002284 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>
 80022e6:	4621      	mov	r1, r4
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f85e 	bl	80023aa <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f861 	bl	80023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002306:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f866 	bl	80023e2 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>
 8002316:	4604      	mov	r4, r0
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f86f 	bl	80023fc <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800231e:	4603      	mov	r3, r0
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	4620      	mov	r0, r4
 8002326:	f000 f874 	bl	8002412 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>
	__ptr = pointer();
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
      }
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return get();
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff84 	bl	8002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8002348:	4603      	mov	r3, r0
      }
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f868 	bl	8002432 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002362:	4603      	mov	r3, r0
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f867 	bl	800244c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800237e:	4603      	mov	r3, r0
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f863 	bl	8002466 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ffe6 	bl	800238a <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f85b 	bl	800248e <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f85b 	bl	80024a8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_+0x18>
 8002422:	2114      	movs	r1, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f00a ffdb 	bl	800d3e0 <_ZdlPvj>
      }
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f840 	bl	80024c2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002442:	4603      	mov	r3, r0
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f83f 	bl	80024da <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800245c:	4603      	mov	r3, r0
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f83d 	bl	80024f2 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ffa5 	bl	80023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f837 	bl	800250c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f836 	bl	8002524 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f836 	bl	800253c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f837 	bl	8002556 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f837 	bl	8002570 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f83b 	bl	8002590 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f83c 	bl	80025aa <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f83b 	bl	80025c2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>
 800254c:	4603      	mov	r3, r0
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f839 	bl	80025d8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>
 8002566:	4603      	mov	r3, r0
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f838 	bl	80025ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f840 	bl	8002606 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f841 	bl	8002622 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f840 	bl	8002638 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>:
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>:
      _Tuple_impl()
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f82a 	bl	8002650 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>:
      constexpr _Head_base()
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f810 	bl	8002666 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN12ElecangCalibD1Ev>:
class ElecangCalib
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe35 	bl	80022f6 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <_Z41__static_initialization_and_destruction_0ii>:
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d102      	bne.n	80026b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
ElecangCalib elecangcalib;
 80026b2:	4809      	ldr	r0, [pc, #36]	@ (80026d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026b4:	f7ff f96d 	bl	8001992 <_ZN12ElecangCalibC1Ev>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d102      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026ca:	f7ff ffd7 	bl	800267c <_ZN12ElecangCalibD1Ev>
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000098 	.word	0x20000098

080026dc <_GLOBAL__sub_I_elecangcalib>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff ffd7 	bl	8002698 <_Z41__static_initialization_and_destruction_0ii>
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_GLOBAL__sub_D_elecangcalib>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ffcf 	bl	8002698 <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	bd80      	pop	{r7, pc}

080026fc <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <LL_CORDIC_Config+0x44>)
 8002710:	4013      	ands	r3, r2
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4311      	orrs	r1, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4311      	orrs	r1, r2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4311      	orrs	r1, r2
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	4311      	orrs	r1, r2
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	4311      	orrs	r1, r2
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	430a      	orrs	r2, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	ff87f800 	.word	0xff87f800

08002744 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af04      	add	r7, sp, #16
 800274a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6493      	str	r3, [r2, #72]	@ 0x48
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8002764:	2300      	movs	r3, #0
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	2300      	movs	r3, #0
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2300      	movs	r3, #0
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2300      	movs	r3, #0
 8002778:	2250      	movs	r2, #80	@ 0x50
 800277a:	2100      	movs	r1, #0
 800277c:	4804      	ldr	r0, [pc, #16]	@ (8002790 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 800277e:	f7ff ffbd 	bl	80026fc <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40020c00 	.word	0x40020c00

08002794 <_ZN10Acrocantho15ClarkeTransformC1Efff>:
  }
};

// 3相→αβ(Clark)変換
struct ClarkeTransform {
  ClarkeTransform(float curU, float curV, float curW)
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	ed87 0a02 	vstr	s0, [r7, #8]
 80027a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80027a4:	ed87 1a00 	vstr	s2, [r7]
    : alpha(absqrt1 * curU),
 80027a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80027ec <_ZN10Acrocantho15ClarkeTransformC1Efff+0x58>
 80027b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	edc3 7a00 	vstr	s15, [r3]
      beta((absqrt2 * curU) + (absqrt3 * curV)) {}
 80027ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80027be:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80027f0 <_ZN10Acrocantho15ClarkeTransformC1Efff+0x5c>
 80027c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ca:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80027f4 <_ZN10Acrocantho15ClarkeTransformC1Efff+0x60>
 80027ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	edc3 7a01 	vstr	s15, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	3f9cc472 	.word	0x3f9cc472
 80027f0:	3f3504f4 	.word	0x3f3504f4
 80027f4:	3fb504f4 	.word	0x3fb504f4

080027f8 <_ZN10Acrocantho13ParkTransformC1ERKNS_6SinCosEff>:
  const float beta;
};

// αβ→dq(Park)変換
struct ParkTransform {
  ParkTransform(const SinCos& sc, float alpha, float beta)
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	ed87 0a01 	vstr	s0, [r7, #4]
 8002806:	edc7 0a00 	vstr	s1, [r7]
    : id(sc.c * alpha + sc.s * beta),
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002810:	edd7 7a01 	vldr	s15, [r7, #4]
 8002814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	edd3 6a00 	vldr	s13, [r3]
 800281e:	edd7 7a00 	vldr	s15, [r7]
 8002822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	edc3 7a00 	vstr	s15, [r3]
      iq(-sc.s * alpha + sc.c * beta) {}
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	eeb1 7a67 	vneg.f32	s14, s15
 800283a:	edd7 7a01 	vldr	s15, [r7, #4]
 800283e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	edd3 6a01 	vldr	s13, [r3, #4]
 8002848:	edd7 7a00 	vldr	s15, [r7]
 800284c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	edc3 7a01 	vstr	s15, [r3, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>:

// 逆変換準備(逆Park変換)
struct TrigonTransform {
  /* f4t_trigon1 : V_d*cos - V_q*sin */
  /* f4t_trigon2 : V_d*sin + V_q*cos */
  TrigonTransform(const SinCos& sc, float vd, float vq)
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	ed87 0a01 	vstr	s0, [r7, #4]
 8002876:	edc7 0a00 	vstr	s1, [r7]
    : _trigon1(sc.c * vd - sc.s * vq),
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002880:	edd7 7a01 	vldr	s15, [r7, #4]
 8002884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	edd3 6a00 	vldr	s13, [r3]
 800288e:	edd7 7a00 	vldr	s15, [r7]
 8002892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	edc3 7a00 	vstr	s15, [r3]
      _trigon2(sc.s * vd + sc.c * vq) {}
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	ed93 7a00 	vldr	s14, [r3]
 80028a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80028b4:	edd7 7a00 	vldr	s15, [r7]
 80028b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_ZN10Acrocantho22InverseClarkeTransformC1Eff>:
  const float _trigon2;
};

// 逆Clarke変換
struct InverseClarkeTransform {
  InverseClarkeTransform(float _tri1, float _tri2)
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80028e0:	edc7 0a01 	vstr	s1, [r7, #4]
      : u_ini(_tri1 * invsqrt1),
 80028e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800294c <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x78>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	edc3 7a00 	vstr	s15, [r3]
        v_ini(-(_tri1 * invsqrt3) + _tri2 * invsqrt2),
 80028f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fa:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002950 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x7c>
 80028fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002902:	edd7 7a02 	vldr	s15, [r7, #8]
 8002906:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002954 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x80>
 800290a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	edc3 7a01 	vstr	s15, [r3, #4]
        w_ini(-(_tri1 * invsqrt3) - _tri2 * invsqrt2) {}
 8002918:	edd7 7a02 	vldr	s15, [r7, #8]
 800291c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002954 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x80>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	eeb1 7a67 	vneg.f32	s14, s15
 8002928:	edd7 7a01 	vldr	s15, [r7, #4]
 800292c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002950 <_ZN10Acrocantho22InverseClarkeTransformC1Eff+0x7c>
 8002930:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	edc3 7a02 	vstr	s15, [r3, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	3f5105eb 	.word	0x3f5105eb
 8002950:	3f3504f3 	.word	0x3f3504f3
 8002954:	3ed105eb 	.word	0x3ed105eb

08002958 <_ZN7SensCur7getDataEv>:
  SensCur();
  
  bool sensCurInit();
  void sensCurIN();

  SensCurData* getData() { return data.get(); }
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f8ad 	bl	8002ac2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 8002968:	4603      	mov	r3, r0
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZN3FocC1Ev>:
extern Ang ang;
extern SensCur senscur;

using namespace Acrocantho;

Foc::Foc()
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
    : data(std::make_unique<FocData>()) {}
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f8cc 	bl	8002b1a <_ZSt11make_uniqueIN3Foc7FocDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE>:

void Foc::forwardCtrl(const SinCos _sc){
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	@ 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	eeb0 7a40 	vmov.f32	s14, s0
 8002998:	eef0 7a60 	vmov.f32	s15, s1
 800299c:	ed87 7a01 	vstr	s14, [r7, #4]
 80029a0:	edc7 7a02 	vstr	s15, [r7, #8]
  SensCur::SensCurData* senscurdata = senscur.getData();
 80029a4:	481e      	ldr	r0, [pc, #120]	@ (8002a20 <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE+0x94>)
 80029a6:	f7ff ffd7 	bl	8002958 <_ZN7SensCur7getDataEv>
 80029aa:	6278      	str	r0, [r7, #36]	@ 0x24
  Cordic cordic;
 80029ac:	f107 0320 	add.w	r3, r7, #32
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fec7 	bl	8002744 <_ZN10Acrocantho6CordicC1Ev>
  
  // Clarke transform
  ClarkeTransform ct(senscurdata->curU, senscurdata->curV, senscurdata->curW);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	ed93 7a01 	vldr	s14, [r3, #4]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	eeb0 1a66 	vmov.f32	s2, s13
 80029d0:	eef0 0a47 	vmov.f32	s1, s14
 80029d4:	eeb0 0a67 	vmov.f32	s0, s15
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fedb 	bl	8002794 <_ZN10Acrocantho15ClarkeTransformC1Efff>
  
  // Park transform
  ParkTransform pt(_sc, ct.alpha, ct.beta);
 80029de:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80029e6:	1d3a      	adds	r2, r7, #4
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	eef0 0a47 	vmov.f32	s1, s14
 80029f0:	eeb0 0a67 	vmov.f32	s0, s15
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fefe 	bl	80027f8 <_ZN10Acrocantho13ParkTransformC1ERKNS_6SinCosEff>
  data->id = pt.id;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f8c8 	bl	8002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6013      	str	r3, [r2, #0]
  data->iq = pt.iq;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f8c1 	bl	8002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	6053      	str	r3, [r2, #4]
  
}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	@ 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000624 	.word	0x20000624

08002a24 <_ZN3Foc11inverseCtrlEN10Acrocantho6SinCosEff>:

void Foc::inverseCtrl(const SinCos _sc, float _vd, float _vq){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	@ 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6178      	str	r0, [r7, #20]
 8002a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a30:	eef0 7a60 	vmov.f32	s15, s1
 8002a34:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a38:	edc7 1a01 	vstr	s3, [r7, #4]
 8002a3c:	ed87 7a03 	vstr	s14, [r7, #12]
 8002a40:	edc7 7a04 	vstr	s15, [r7, #16]
  TrigonTransform tt(_sc, _vd, _vq);
 8002a44:	f107 020c 	add.w	r2, r7, #12
 8002a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a4c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002a50:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff06 	bl	8002868 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>
  
  // Inverse Clarke transform
  InverseClarkeTransform ict(tt._trigon1, tt._trigon2);
 8002a5c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a60:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	eef0 0a47 	vmov.f32	s1, s14
 8002a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff2f 	bl	80028d4 <_ZN10Acrocantho22InverseClarkeTransformC1Eff>
  
  data->vu = ict.u_ini;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f88b 	bl	8002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	6093      	str	r3, [r2, #8]
  data->vv = ict.v_ini;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f884 	bl	8002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	60d3      	str	r3, [r2, #12]
  data->vw = ict.w_ini;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f87d 	bl	8002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	6113      	str	r3, [r2, #16]
}
 8002aa0:	bf00      	nop
 8002aa2:	3730      	adds	r7, #48	@ 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f87a 	bl	8002bac <_ZNKSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f87b 	bl	8002bc8 <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN3Foc7FocDataC1Ev>:
#include "user_math.h"


class Foc {
public:
  struct FocData {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <_ZSt11make_uniqueIN3Foc7FocDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8002b1a:	b590      	push	{r4, r7, lr}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002b22:	2014      	movs	r0, #20
 8002b24:	f00a fc5e 	bl	800d3e4 <_Znwj>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461c      	mov	r4, r3
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	2300      	movs	r3, #0
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	6053      	str	r3, [r2, #4]
 8002b34:	6093      	str	r3, [r2, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
 8002b38:	6113      	str	r3, [r2, #16]
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ffce 	bl	8002adc <_ZN3Foc7FocDataC1Ev>
 8002b40:	4621      	mov	r1, r4
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f85e 	bl	8002c04 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f861 	bl	8002c22 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002b60:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f866 	bl	8002c3c <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE11get_deleterEv>
 8002b70:	4604      	mov	r4, r0
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f86f 	bl	8002c56 <_ZSt4moveIRPN3Foc7FocDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 f874 	bl	8002c6c <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_>
	__ptr = pointer();
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
      }
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	return get();
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff83 	bl	8002aa8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>
 8002ba2:	4603      	mov	r3, r0
      }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZNKSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f868 	bl	8002c8c <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f867 	bl	8002ca6 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt15__uniq_ptr_dataIN3Foc7FocDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f863 	bl	8002cc0 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EEC1EPS1_>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffe6 	bl	8002be4 <_ZNSt15__uniq_ptr_dataIN3Foc7FocDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f85b 	bl	8002ce8 <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f85b 	bl	8002d02 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZSt4moveIRPN3Foc7FocDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <_ZNKSt14default_deleteIN3Foc7FocDataEEclEPS1_+0x18>
 8002c7c:	2114      	movs	r1, #20
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f00a fbae 	bl	800d3e0 <_ZdlPvj>
      }
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f840 	bl	8002d1c <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f83f 	bl	8002d34 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f83d 	bl	8002d4c <_ZNSt5tupleIJPN3Foc7FocDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa5 	bl	8002c22 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZSt3getILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f837 	bl	8002d66 <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZNSt15__uniq_ptr_implIN3Foc7FocDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f836 	bl	8002d7e <_ZSt3getILj1EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f836 	bl	8002d96 <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f837 	bl	8002db0 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZNSt5tupleIJPN3Foc7FocDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f837 	bl	8002dca <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEEC1Ev>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZSt12__get_helperILj0EPN3Foc7FocDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f83b 	bl	8002dea <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_ZSt3getILj1EJPN3Foc7FocDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f83c 	bl	8002e04 <_ZSt12__get_helperILj1ESt14default_deleteIN3Foc7FocDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f83b 	bl	8002e1c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERKS3_>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f839 	bl	8002e32 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f838 	bl	8002e48 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEEC1Ev>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f840 	bl	8002e60 <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EEC1Ev>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZNSt11_Tuple_implILj0EJPN3Foc7FocDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f841 	bl	8002e7c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERS3_>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZSt12__get_helperILj1ESt14default_deleteIN3Foc7FocDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f840 	bl	8002e92 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEE7_M_headERS4_>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>:
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEEC1Ev>:
      _Tuple_impl()
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f82a 	bl	8002eaa <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EEC1Ev>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EEC1Ev>:
      constexpr _Head_base()
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_ZNSt10_Head_baseILj0EPN3Foc7FocDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Foc7FocDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f810 	bl	8002ec0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EE7_M_headERS4_>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Foc7FocDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN3FocD1Ev>:
class Foc {
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe35 	bl	8002b50 <_ZNSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EED1Ev>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_Z41__static_initialization_and_destruction_0ii>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d102      	bne.n	8002f10 <_Z41__static_initialization_and_destruction_0ii+0x20>
Foc foc;
 8002f0a:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002f0c:	f7ff fd31 	bl	8002972 <_ZN3FocC1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002f20:	4803      	ldr	r0, [pc, #12]	@ (8002f30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002f22:	f7ff ffd8 	bl	8002ed6 <_ZN3FocD1Ev>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200002a8 	.word	0x200002a8

08002f34 <_GLOBAL__sub_I_foc>:
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff ffd7 	bl	8002ef0 <_Z41__static_initialization_and_destruction_0ii>
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_GLOBAL__sub_D_foc>:
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff ffcf 	bl	8002ef0 <_Z41__static_initialization_and_destruction_0ii>
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5a:	f002 fc32 	bl	80057c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5e:	f000 f88b 	bl	8003078 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f62:	f000 fbcf 	bl	8003704 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002f66:	f000 fb9b 	bl	80036a0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002f6a:	f000 f8db 	bl	8003124 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8002f6e:	f000 f96f 	bl	8003250 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8002f72:	f000 fa29 	bl	80033c8 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8002f76:	f000 fa73 	bl	8003460 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8002f7a:	f000 fac3 	bl	8003504 <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 8002f7e:	f000 fa0b 	bl	8003398 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002f82:	217f      	movs	r1, #127	@ 0x7f
 8002f84:	4837      	ldr	r0, [pc, #220]	@ (8003064 <main+0x110>)
 8002f86:	f003 fd7f 	bl	8006a88 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002f8a:	217f      	movs	r1, #127	@ 0x7f
 8002f8c:	4836      	ldr	r0, [pc, #216]	@ (8003068 <main+0x114>)
 8002f8e:	f003 fd7b 	bl	8006a88 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8002f92:	4834      	ldr	r0, [pc, #208]	@ (8003064 <main+0x110>)
 8002f94:	f002 ff7c 	bl	8005e90 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8002f98:	4833      	ldr	r0, [pc, #204]	@ (8003068 <main+0x114>)
 8002f9a:	f002 ff79 	bl	8005e90 <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002f9e:	4831      	ldr	r0, [pc, #196]	@ (8003064 <main+0x110>)
 8002fa0:	f003 fdd4 	bl	8006b4c <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4831      	ldr	r0, [pc, #196]	@ (800306c <main+0x118>)
 8002fa8:	f009 f9cc 	bl	800c344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002fac:	2104      	movs	r1, #4
 8002fae:	482f      	ldr	r0, [pc, #188]	@ (800306c <main+0x118>)
 8002fb0:	f009 f9c8 	bl	800c344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002fb4:	2108      	movs	r1, #8
 8002fb6:	482d      	ldr	r0, [pc, #180]	@ (800306c <main+0x118>)
 8002fb8:	f009 f9c4 	bl	800c344 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	482b      	ldr	r0, [pc, #172]	@ (800306c <main+0x118>)
 8002fc0:	f009 ffea 	bl	800cf98 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4829      	ldr	r0, [pc, #164]	@ (800306c <main+0x118>)
 8002fc8:	f009 ffe6 	bl	800cf98 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002fcc:	2108      	movs	r1, #8
 8002fce:	4827      	ldr	r0, [pc, #156]	@ (800306c <main+0x118>)
 8002fd0:	f009 ffe2 	bl	800cf98 <HAL_TIMEx_PWMN_Start>
  
  // ゲートドライバON
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f006 f947 	bl	8009270 <HAL_GPIO_WritePin>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002fea:	2302      	movs	r3, #2
 8002fec:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	4619      	mov	r1, r3
 8003000:	481b      	ldr	r0, [pc, #108]	@ (8003070 <main+0x11c>)
 8003002:	f005 fa89 	bl	8008518 <HAL_FDCAN_ConfigFilter>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <main+0xc6>
    {
        // フィルタ設定エラー
        Error_Handler();
 8003016:	f000 fc0b 	bl	8003830 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 800301a:	4815      	ldr	r0, [pc, #84]	@ (8003070 <main+0x11c>)
 800301c:	f005 fad6 	bl	80085cc <HAL_FDCAN_Start>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <main+0xe0>
	  Error_Handler();
 8003030:	f000 fbfe 	bl	8003830 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	480d      	ldr	r0, [pc, #52]	@ (8003070 <main+0x11c>)
 800303a:	f005 fc3b 	bl	80088b4 <HAL_FDCAN_ActivateNotification>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <main+0xfe>
    /* Notification Error */
    Error_Handler();
 800304e:	f000 fbef 	bl	8003830 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb75 	bl	8002744 <_ZN10Acrocantho6CordicC1Ev>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    usertask.idleTask();
 800305a:	4806      	ldr	r0, [pc, #24]	@ (8003074 <main+0x120>)
 800305c:	f002 f8e6 	bl	800522c <_ZN8UserTask8idleTaskEv>
 8003060:	e7fb      	b.n	800305a <main+0x106>
 8003062:	bf00      	nop
 8003064:	200002ac 	.word	0x200002ac
 8003068:	20000318 	.word	0x20000318
 800306c:	20000524 	.word	0x20000524
 8003070:	200003ac 	.word	0x200003ac
 8003074:	20000640 	.word	0x20000640

08003078 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b094      	sub	sp, #80	@ 0x50
 800307c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307e:	f107 0318 	add.w	r3, r7, #24
 8003082:	2238      	movs	r2, #56	@ 0x38
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f00a fa8e 	bl	800d5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800309a:	2000      	movs	r0, #0
 800309c:	f008 f902 	bl	800b2a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030a0:	2302      	movs	r3, #2
 80030a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030aa:	2340      	movs	r3, #64	@ 0x40
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ae:	2302      	movs	r3, #2
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030b2:	2302      	movs	r3, #2
 80030b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80030b6:	2304      	movs	r3, #4
 80030b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80030ba:	2355      	movs	r3, #85	@ 0x55
 80030bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030be:	2302      	movs	r3, #2
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030c2:	2302      	movs	r3, #2
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030c6:	2302      	movs	r3, #2
 80030c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ca:	f107 0318 	add.w	r3, r7, #24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f008 f99c 	bl	800b40c <HAL_RCC_OscConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80030e4:	f000 fba4 	bl	8003830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e8:	230f      	movs	r3, #15
 80030ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ec:	2303      	movs	r3, #3
 80030ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2104      	movs	r1, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f008 fc95 	bl	800ba30 <HAL_RCC_ClockConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8003116:	f000 fb8b 	bl	8003830 <Error_Handler>
  }
}
 800311a:	bf00      	nop
 800311c:	3750      	adds	r7, #80	@ 0x50
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	@ 0x48
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800312a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003136:	463b      	mov	r3, r7
 8003138:	223c      	movs	r2, #60	@ 0x3c
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f00a fa33 	bl	800d5a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003142:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003144:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003148:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800314c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003152:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800315e:	4b3a      	ldr	r3, [pc, #232]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003164:	4b38      	ldr	r3, [pc, #224]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800316c:	2204      	movs	r2, #4
 800316e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003170:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003172:	2200      	movs	r2, #0
 8003174:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003176:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003178:	2200      	movs	r2, #0
 800317a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800317c:	4b32      	ldr	r3, [pc, #200]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800317e:	2201      	movs	r2, #1
 8003180:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800318a:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003192:	4b2d      	ldr	r3, [pc, #180]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003194:	2200      	movs	r2, #0
 8003196:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031a0:	4829      	ldr	r0, [pc, #164]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 80031a2:	f002 fcb9 	bl	8005b18 <HAL_ADC_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 80031b6:	f000 fb3b 	bl	8003830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 80031ba:	2305      	movs	r3, #5
 80031bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80031be:	2300      	movs	r3, #0
 80031c0:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80031c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031ca:	4619      	mov	r1, r3
 80031cc:	481e      	ldr	r0, [pc, #120]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 80031ce:	f004 fb17 	bl	8007800 <HAL_ADCEx_MultiModeConfigChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80031e2:	f000 fb25 	bl	8003830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80031e6:	4b19      	ldr	r3, [pc, #100]	@ (800324c <_ZL12MX_ADC1_Initv+0x128>)
 80031e8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80031ea:	2309      	movs	r3, #9
 80031ec:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80031f2:	237f      	movs	r3, #127	@ 0x7f
 80031f4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80031f6:	2304      	movs	r3, #4
 80031f8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003222:	463b      	mov	r3, r7
 8003224:	4619      	mov	r1, r3
 8003226:	4808      	ldr	r0, [pc, #32]	@ (8003248 <_ZL12MX_ADC1_Initv+0x124>)
 8003228:	f003 fdbe 	bl	8006da8 <HAL_ADCEx_InjectedConfigChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 800323c:	f000 faf8 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	3748      	adds	r7, #72	@ 0x48
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200002ac 	.word	0x200002ac
 800324c:	04300002 	.word	0x04300002

08003250 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b090      	sub	sp, #64	@ 0x40
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	223c      	movs	r2, #60	@ 0x3c
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f00a f9a3 	bl	800d5a8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003262:	4b48      	ldr	r3, [pc, #288]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003264:	4a48      	ldr	r2, [pc, #288]	@ (8003388 <_ZL12MX_ADC2_Initv+0x138>)
 8003266:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003268:	4b46      	ldr	r3, [pc, #280]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 800326a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800326e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003270:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003276:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800327c:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003282:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003284:	2201      	movs	r2, #1
 8003286:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003288:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 800328a:	2208      	movs	r2, #8
 800328c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003294:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003296:	2200      	movs	r2, #0
 8003298:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800329a:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 800329c:	2201      	movs	r2, #1
 800329e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80032a0:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032b0:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80032b6:	4b33      	ldr	r3, [pc, #204]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80032be:	4831      	ldr	r0, [pc, #196]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 80032c0:	f002 fc2a 	bl	8005b18 <HAL_ADC_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80032d4:	f000 faac 	bl	8003830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80032d8:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <_ZL12MX_ADC2_Initv+0x13c>)
 80032da:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80032dc:	2309      	movs	r3, #9
 80032de:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80032e4:	237f      	movs	r3, #127	@ 0x7f
 80032e6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80032e8:	2304      	movs	r3, #4
 80032ea:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80032f0:	2303      	movs	r3, #3
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4619      	mov	r1, r3
 8003310:	481c      	ldr	r0, [pc, #112]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003312:	f003 fd49 	bl	8006da8 <HAL_ADCEx_InjectedConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8003326:	f000 fa83 	bl	8003830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800332a:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <_ZL12MX_ADC2_Initv+0x140>)
 800332c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800332e:	f240 130f 	movw	r3, #271	@ 0x10f
 8003332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4812      	ldr	r0, [pc, #72]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 800333a:	f003 fd35 	bl	8006da8 <HAL_ADCEx_InjectedConfigChannel>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 800334e:	f000 fa6f 	bl	8003830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <_ZL12MX_ADC2_Initv+0x144>)
 8003354:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8003356:	f240 2315 	movw	r3, #533	@ 0x215
 800335a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4808      	ldr	r0, [pc, #32]	@ (8003384 <_ZL12MX_ADC2_Initv+0x134>)
 8003362:	f003 fd21 	bl	8006da8 <HAL_ADCEx_InjectedConfigChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8003376:	f000 fa5b 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	3740      	adds	r7, #64	@ 0x40
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000318 	.word	0x20000318
 8003388:	50000100 	.word	0x50000100
 800338c:	08600004 	.word	0x08600004
 8003390:	0c900008 	.word	0x0c900008
 8003394:	10c00010 	.word	0x10c00010

08003398 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <_ZL14MX_CORDIC_Initv+0x28>)
 800339e:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <_ZL14MX_CORDIC_Initv+0x2c>)
 80033a0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80033a2:	4807      	ldr	r0, [pc, #28]	@ (80033c0 <_ZL14MX_CORDIC_Initv+0x28>)
 80033a4:	f004 fb34 	bl	8007a10 <HAL_CORDIC_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 80033b8:	f000 fa3a 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000384 	.word	0x20000384
 80033c4:	40020c00 	.word	0x40020c00

080033c8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80033cc:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033ce:	4a23      	ldr	r2, [pc, #140]	@ (800345c <_ZL14MX_FDCAN1_Initv+0x94>)
 80033d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80033d2:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80033d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033f8:	2205      	movs	r2, #5
 80033fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80033fc:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 80033fe:	220b      	movs	r2, #11
 8003400:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003404:	2238      	movs	r2, #56	@ 0x38
 8003406:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 800340a:	220b      	movs	r2, #11
 800340c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003410:	2205      	movs	r2, #5
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003416:	2204      	movs	r2, #4
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800341a:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 800341c:	220c      	movs	r2, #12
 800341e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003422:	2204      	movs	r2, #4
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8003426:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003428:	2201      	movs	r2, #1
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 800342e:	2200      	movs	r2, #0
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003434:	2200      	movs	r2, #0
 8003436:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <_ZL14MX_FDCAN1_Initv+0x90>)
 800343a:	f004 ff13 	bl	8008264 <HAL_FDCAN_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800344e:	f000 f9ef 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200003ac 	.word	0x200003ac
 800345c:	40006400 	.word	0x40006400

08003460 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003464:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003466:	4a25      	ldr	r2, [pc, #148]	@ (80034fc <_ZL12MX_I2C1_Initv+0x9c>)
 8003468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 800346c:	4a24      	ldr	r2, [pc, #144]	@ (8003500 <_ZL12MX_I2C1_Initv+0xa0>)
 800346e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003470:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003478:	2201      	movs	r2, #1
 800347a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800347c:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348e:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003494:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800349a:	4817      	ldr	r0, [pc, #92]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 800349c:	f005 ff23 	bl	80092e6 <HAL_I2C_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80034b0:	f000 f9be 	bl	8003830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034b4:	2100      	movs	r1, #0
 80034b6:	4810      	ldr	r0, [pc, #64]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 80034b8:	f007 fe3c 	bl	800b134 <HAL_I2CEx_ConfigAnalogFilter>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80034cc:	f000 f9b0 	bl	8003830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034d0:	2100      	movs	r1, #0
 80034d2:	4809      	ldr	r0, [pc, #36]	@ (80034f8 <_ZL12MX_I2C1_Initv+0x98>)
 80034d4:	f007 fe79 	bl	800b1ca <HAL_I2CEx_ConfigDigitalFilter>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80034e8:	f000 f9a2 	bl	8003830 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80034ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80034f0:	f007 feb8 	bl	800b264 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000410 	.word	0x20000410
 80034fc:	40005400 	.word	0x40005400
 8003500:	4052060f 	.word	0x4052060f

08003504 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b098      	sub	sp, #96	@ 0x60
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003516:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	615a      	str	r2, [r3, #20]
 8003528:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	2234      	movs	r2, #52	@ 0x34
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f00a f839 	bl	800d5a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003536:	4b58      	ldr	r3, [pc, #352]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003538:	4a58      	ldr	r2, [pc, #352]	@ (800369c <_ZL12MX_TIM1_Initv+0x198>)
 800353a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800353c:	4b56      	ldr	r3, [pc, #344]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003542:	4b55      	ldr	r3, [pc, #340]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003544:	2220      	movs	r2, #32
 8003546:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8003548:	4b53      	ldr	r3, [pc, #332]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 800354a:	f242 1233 	movw	r2, #8499	@ 0x2133
 800354e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003550:	4b51      	ldr	r3, [pc, #324]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8003556:	4b50      	ldr	r3, [pc, #320]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003558:	2201      	movs	r2, #1
 800355a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800355c:	4b4e      	ldr	r3, [pc, #312]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 800355e:	2280      	movs	r2, #128	@ 0x80
 8003560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003562:	484d      	ldr	r0, [pc, #308]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003564:	f008 fe96 	bl	800c294 <HAL_TIM_PWM_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8003578:	f000 f95a 	bl	8003830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800357c:	2320      	movs	r3, #32
 800357e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003580:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003584:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800358a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800358e:	4619      	mov	r1, r3
 8003590:	4841      	ldr	r0, [pc, #260]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003592:	f009 fdc3 	bl	800d11c <HAL_TIMEx_MasterConfigSynchronization>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 80035a6:	f000 f943 	bl	8003830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035aa:	2360      	movs	r3, #96	@ 0x60
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b2:	2300      	movs	r3, #0
 80035b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035b6:	2300      	movs	r3, #0
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035ca:	2200      	movs	r2, #0
 80035cc:	4619      	mov	r1, r3
 80035ce:	4832      	ldr	r0, [pc, #200]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 80035d0:	f008 ffca 	bl	800c568 <HAL_TIM_PWM_ConfigChannel>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 80035e4:	f000 f924 	bl	8003830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035ec:	2204      	movs	r2, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4829      	ldr	r0, [pc, #164]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 80035f2:	f008 ffb9 	bl	800c568 <HAL_TIM_PWM_ConfigChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8003606:	f000 f913 	bl	8003830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800360a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800360e:	2208      	movs	r2, #8
 8003610:	4619      	mov	r1, r3
 8003612:	4821      	ldr	r0, [pc, #132]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003614:	f008 ffa8 	bl	800c568 <HAL_TIM_PWM_ConfigChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8003628:	f000 f902 	bl	8003830 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800362c:	481a      	ldr	r0, [pc, #104]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 800362e:	f009 fe9f 	bl	800d370 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800363e:	2314      	movs	r3, #20
 8003640:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800364a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003658:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003662:	2300      	movs	r3, #0
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	4619      	mov	r1, r3
 800366e:	480a      	ldr	r0, [pc, #40]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 8003670:	f009 fdea 	bl	800d248 <HAL_TIMEx_ConfigBreakDeadTime>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8003684:	f000 f8d4 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003688:	4803      	ldr	r0, [pc, #12]	@ (8003698 <_ZL12MX_TIM1_Initv+0x194>)
 800368a:	f001 faed 	bl	8004c68 <HAL_TIM_MspPostInit>

}
 800368e:	bf00      	nop
 8003690:	3760      	adds	r7, #96	@ 0x60
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000524 	.word	0x20000524
 800369c:	40012c00 	.word	0x40012c00

080036a0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036aa:	4a15      	ldr	r2, [pc, #84]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80036b2:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <_ZL11MX_DMA_Initv+0x60>)
 80036cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	200b      	movs	r0, #11
 80036dc:	f004 faa5 	bl	8007c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036e0:	200b      	movs	r0, #11
 80036e2:	f004 fabc 	bl	8007c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	200c      	movs	r0, #12
 80036ec:	f004 fa9d 	bl	8007c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036f0:	200c      	movs	r0, #12
 80036f2:	f004 fab4 	bl	8007c5e <HAL_NVIC_EnableIRQ>

}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000

08003704 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	@ 0x28
 8003708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371a:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a42      	ldr	r2, [pc, #264]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003726:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003732:	4b3d      	ldr	r3, [pc, #244]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4a3c      	ldr	r2, [pc, #240]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373e:	4b3a      	ldr	r3, [pc, #232]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b37      	ldr	r3, [pc, #220]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a36      	ldr	r2, [pc, #216]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003756:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	4b31      	ldr	r3, [pc, #196]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376e:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <_ZL12MX_GPIO_Initv+0x124>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800377a:	2200      	movs	r2, #0
 800377c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8003780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003784:	f005 fd74 	bl	8009270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800378e:	4827      	ldr	r0, [pc, #156]	@ (800382c <_ZL12MX_GPIO_Initv+0x128>)
 8003790:	f005 fd6e 	bl	8009270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800379a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800379e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4619      	mov	r1, r3
 80037aa:	4820      	ldr	r0, [pc, #128]	@ (800382c <_ZL12MX_GPIO_Initv+0x128>)
 80037ac:	f005 fbde 	bl	8008f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80037b0:	230c      	movs	r3, #12
 80037b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80037c0:	230c      	movs	r3, #12
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4619      	mov	r1, r3
 80037ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ce:	f005 fbcd 	bl	8008f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80037d2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80037d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d8:	2301      	movs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ee:	f005 fbbd 	bl	8008f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	4808      	ldr	r0, [pc, #32]	@ (800382c <_ZL12MX_GPIO_Initv+0x128>)
 800380c:	f005 fbae 	bl	8008f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	2028      	movs	r0, #40	@ 0x28
 8003816:	f004 fa08 	bl	8007c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800381a:	2028      	movs	r0, #40	@ 0x28
 800381c:	f004 fa1f 	bl	8007c5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003820:	bf00      	nop
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	48000800 	.word	0x48000800

08003830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003834:	b672      	cpsid	i
}
 8003836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <Error_Handler+0x8>

0800383c <_ZN3AngD1Ev>:
class Ang {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f842 	bl	80038d0 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <_ZN6CanComD1Ev>:
class CanCom {
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f857 	bl	8003914 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10c      	bne.n	800389a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003886:	4293      	cmp	r3, r2
 8003888:	d107      	bne.n	800389a <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom cancom(hfdcan1);
 800388a:	490d      	ldr	r1, [pc, #52]	@ (80038c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800388c:	480d      	ldr	r0, [pc, #52]	@ (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800388e:	f7fd fddc 	bl	800144a <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 8003892:	490d      	ldr	r1, [pc, #52]	@ (80038c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003894:	480d      	ldr	r0, [pc, #52]	@ (80038cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003896:	f7fd f955 	bl	8000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d105      	bne.n	80038b6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80038aa:	4808      	ldr	r0, [pc, #32]	@ (80038cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80038ac:	f7ff ffc6 	bl	800383c <_ZN3AngD1Ev>
CanCom cancom(hfdcan1);
 80038b0:	4804      	ldr	r0, [pc, #16]	@ (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80038b2:	f7ff ffd0 	bl	8003856 <_ZN6CanComD1Ev>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200003ac 	.word	0x200003ac
 80038c4:	20000570 	.word	0x20000570
 80038c8:	20000410 	.word	0x20000410
 80038cc:	200005d8 	.word	0x200005d8

080038d0 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fcbf 	bl	800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80038e0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f834 	bl	8003958 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>
 80038f0:	4604      	mov	r4, r0
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f83d 	bl	8003972 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80038f8:	4603      	mov	r3, r0
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f842 	bl	8003988 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>
	__ptr = pointer();
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
      }
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd ff89 	bl	8001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003924:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f83a 	bl	80039a8 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>
 8003934:	4604      	mov	r4, r0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f843 	bl	80039c2 <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800393c:	4603      	mov	r3, r0
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f848 	bl	80039d8 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>
	__ptr = pointer();
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
      }
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f848 	bl	80039f8 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>
 8003968:	4603      	mov	r3, r0
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_+0x18>
 8003998:	2120      	movs	r1, #32
 800399a:	4618      	mov	r0, r3
 800399c:	f009 fd20 	bl	800d3e0 <_ZdlPvj>
      }
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f82d 	bl	8003a12 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_+0x18>
 80039e8:	2124      	movs	r1, #36	@ 0x24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f009 fcf8 	bl	800d3e0 <_ZdlPvj>
      }
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f812 	bl	8003a2c <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>:
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f811 	bl	8003a44 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f811 	bl	8003a5c <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f811 	bl	8003a74 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f811 	bl	8003a8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f811 	bl	8003aa4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f811 	bl	8003abc <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>:
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f810 	bl	8003ad2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>:
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_GLOBAL__sub_I_hadc1>:
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7ff febd 	bl	8003870 <_Z41__static_initialization_and_destruction_0ii>
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_GLOBAL__sub_D_hadc1>:
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7ff feb5 	bl	8003870 <_Z41__static_initialization_and_destruction_0ii>
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZNK12ElecangCalib7getDataEv>:
public:
  ElecangCalib();
  
  void elecCalSeq();

  ElecangCalibData* getData() const { return data.get(); }
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fb9c 	bl	8002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_ZN11ModeControlC1Ev>:
extern UserTask usertask;
extern CanCom cancom;
extern Util util;
extern ElecangCalib elecangcalib;

ModeControl::ModeControl()
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ModeControlData>()){}
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f8c5 	bl	8003cbc <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	711a      	strb	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	751a      	strb	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN11ModeControl8modeCtrlEv>:


void ModeControl::modeCtrl(){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  float voltQRef_ = 0.0f;
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  float voltDRef_ = 0.0f;
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
  
  refCtrl();
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f837 	bl	8003be8 <_ZN11ModeControl7refCtrlEv>
  
  switch (s_drvMdRef) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d81a      	bhi.n	8003bb8 <_ZN11ModeControl8modeCtrlEv+0x58>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <_ZN11ModeControl8modeCtrlEv+0x28>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003bab 	.word	0x08003bab
 8003b90:	08003bc1 	.word	0x08003bc1
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bc1 	.word	0x08003bc1
    case CTRLMODE_NONE:
      voltQRef_ = 0.0f;
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
      voltDRef_ = 0.0f;
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
      break;
 8003ba8:	e00b      	b.n	8003bc2 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VOLT:
      voltDRef_ = s_voltDRef;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	60bb      	str	r3, [r7, #8]
      voltQRef_ = s_voltQRef;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60fb      	str	r3, [r7, #12]
      break;
 8003bb6:	e004      	b.n	8003bc2 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VEL:
      break;
    case CTRLMODE_POS:
      break;
    default:
      mode = CTRLMODE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	751a      	strb	r2, [r3, #20]
      break;
 8003bbe:	e000      	b.n	8003bc2 <_ZN11ModeControl8modeCtrlEv+0x62>
      break;
 8003bc0:	bf00      	nop
  }
  
  data->voltDRef = voltDRef_;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f8b5 	bl	8003d34 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6053      	str	r3, [r2, #4]
  data->voltQRef = voltQRef_;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f8ae 	bl	8003d34 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6093      	str	r3, [r2, #8]
  
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop

08003be8 <_ZN11ModeControl7refCtrlEv>:

void ModeControl::refCtrl(){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8003bf0:	4819      	ldr	r0, [pc, #100]	@ (8003c58 <_ZN11ModeControl7refCtrlEv+0x70>)
 8003bf2:	f7fd fec1 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8003bf6:	6178      	str	r0, [r7, #20]
  CanCom::CanData* candata = cancom.getData();
 8003bf8:	4818      	ldr	r0, [pc, #96]	@ (8003c5c <_ZN11ModeControl7refCtrlEv+0x74>)
 8003bfa:	f7fc ff95 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8003bfe:	6138      	str	r0, [r7, #16]
  ElecangCalib::ElecangCalibData* elecangcalibdata = elecangcalib.getData();
 8003c00:	4817      	ldr	r0, [pc, #92]	@ (8003c60 <_ZN11ModeControl7refCtrlEv+0x78>)
 8003c02:	f7ff ff81 	bl	8003b08 <_ZNK12ElecangCalib7getDataEv>
 8003c06:	60f8      	str	r0, [r7, #12]

  if (usertask.servoCheck()) {
 8003c08:	4816      	ldr	r0, [pc, #88]	@ (8003c64 <_ZN11ModeControl7refCtrlEv+0x7c>)
 8003c0a:	f001 fb9b 	bl	8005344 <_ZN8UserTask10servoCheckEv>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01c      	beq.n	8003c4e <_ZN11ModeControl7refCtrlEv+0x66>
    // 電気角キャリブ
    if (utildata->eCalib) {
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <_ZN11ModeControl7refCtrlEv+0x4e>
      s_drvMdRef = elecangcalibdata->drvMd;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	7a1a      	ldrb	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	711a      	strb	r2, [r3, #4]
      s_voltQRef = elecangcalibdata->voltQRef;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
      s_voltDRef = 0.0f;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	60da      	str	r2, [r3, #12]
      s_drvMdRef = candata->drvMdRef;
      s_voltDRef = candata->voltDRef;
      s_voltQRef = candata->voltQRef;
    }
  }
 8003c34:	e00b      	b.n	8003c4e <_ZN11ModeControl7refCtrlEv+0x66>
      s_drvMdRef = candata->drvMdRef;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	785a      	ldrb	r2, [r3, #1]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	711a      	strb	r2, [r3, #4]
      s_voltDRef = candata->voltDRef;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60da      	str	r2, [r3, #12]
      s_voltQRef = candata->voltQRef;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000650 	.word	0x20000650
 8003c5c:	20000570 	.word	0x20000570
 8003c60:	20000098 	.word	0x20000098
 8003c64:	20000640 	.word	0x20000640

08003c68 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f86a 	bl	8003d4c <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_ZN11ModeControl15ModeControlDataC1Ev>:
  CTRLMODE_POS
} st_mode;

class ModeControl {
public:
  struct ModeControlData {
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	705a      	strb	r2, [r3, #1]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003cc4:	2010      	movs	r0, #16
 8003cc6:	f009 fb8d 	bl	800d3e4 <_Znwj>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461c      	mov	r4, r3
 8003cce:	4622      	mov	r2, r4
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	6053      	str	r3, [r2, #4]
 8003cd6:	6093      	str	r3, [r2, #8]
 8003cd8:	60d3      	str	r3, [r2, #12]
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff ffd1 	bl	8003c82 <_ZN11ModeControl15ModeControlDataC1Ev>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f850 	bl	8003d88 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f853 	bl	8003da6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003d00:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f858 	bl	8003dc0 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>
 8003d10:	4604      	mov	r4, r0
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f861 	bl	8003dda <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f866 	bl	8003df0 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>
	__ptr = pointer();
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
      }
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}

08003d34 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	return get();
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff93 	bl	8003c68 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 8003d42:	4603      	mov	r3, r0
      }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f85a 	bl	8003e10 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f856 	bl	8003e2a <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ffe6 	bl	8003d68 <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f84e 	bl	8003e52 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f84e 	bl	8003e6c <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_+0x18>
 8003e00:	2110      	movs	r1, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f009 faec 	bl	800d3e0 <_ZdlPvj>
      }
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f833 	bl	8003e86 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f831 	bl	8003e9e <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffb2 	bl	8003da6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003e42:	4602      	mov	r2, r0
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f82b 	bl	8003eb8 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f82a 	bl	8003ed0 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f82a 	bl	8003ee8 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f82a 	bl	8003f02 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f82e 	bl	8003f22 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f82f 	bl	8003f3c <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f82e 	bl	8003f54 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f82d 	bl	8003f6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f835 	bl	8003f82 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f836 	bl	8003f9e <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f835 	bl	8003fb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>:
      _Tuple_impl()
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f82a 	bl	8003fcc <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>:
      constexpr _Head_base()
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f810 	bl	8003fe2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_ZN11ModeControlD1Ev>:
class ModeControl {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fe74 	bl	8003cf0 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <_Z41__static_initialization_and_destruction_0ii>:
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800402a:	4293      	cmp	r3, r2
 800402c:	d102      	bne.n	8004034 <_Z41__static_initialization_and_destruction_0ii+0x20>
ModeControl modecontrol;
 800402e:	4809      	ldr	r0, [pc, #36]	@ (8004054 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004030:	f7ff fd77 	bl	8003b22 <_ZN11ModeControlC1Ev>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004040:	4293      	cmp	r3, r2
 8004042:	d102      	bne.n	800404a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004044:	4803      	ldr	r0, [pc, #12]	@ (8004054 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004046:	f7ff ffd7 	bl	8003ff8 <_ZN11ModeControlD1Ev>
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000608 	.word	0x20000608

08004058 <_GLOBAL__sub_I_modecontrol>:
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
 800405c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004060:	2001      	movs	r0, #1
 8004062:	f7ff ffd7 	bl	8004014 <_Z41__static_initialization_and_destruction_0ii>
 8004066:	bd80      	pop	{r7, pc}

08004068 <_GLOBAL__sub_D_modecontrol>:
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
 800406c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004070:	2000      	movs	r0, #0
 8004072:	f7ff ffcf 	bl	8004014 <_Z41__static_initialization_and_destruction_0ii>
 8004076:	bd80      	pop	{r7, pc}

08004078 <_ZN6OutPwmC1Ev>:
#include "user_math.h"
#include "param.h"

OutPwm outpwm;

OutPwm::OutPwm(){}
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_ZN6OutPwm3PonEv>:

void OutPwm::Pon(){
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  setReg(DUTY_BASE, DUTY_BASE, DUTY_BASE);
 8004096:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800409a:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800409e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f81a 	bl	80040dc <_ZN6OutPwm6setRegEfff>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN6OutPwm4PoffEv>:

void OutPwm::Poff(){
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  TIM1->CCR1 = 0; 
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <_ZN6OutPwm4PoffEv+0x28>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0; 
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <_ZN6OutPwm4PoffEv+0x28>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0; 
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <_ZN6OutPwm4PoffEv+0x28>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40012c00 	.word	0x40012c00

080040dc <_ZN6OutPwm6setRegEfff>:

void OutPwm::setReg(float u, float v, float w){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80040e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80040ec:	ed87 1a00 	vstr	s2, [r7]

  TIM1->CCR1 = (uint16_t)((1.0f - dutyGuard(u)) * (float)CCR_MAX);
 80040f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f845 	bl	8004184 <_ZN6OutPwm9dutyGuardEf>
 80040fa:	eef0 7a40 	vmov.f32	s15, s0
 80040fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004106:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800417c <_ZN6OutPwm6setRegEfff+0xa0>
 800410a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	b29a      	uxth	r2, r3
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <_ZN6OutPwm6setRegEfff+0xa4>)
 800411a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = (uint16_t)((1.0f - dutyGuard(v)) * (float)CCR_MAX);
 800411c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f82f 	bl	8004184 <_ZN6OutPwm9dutyGuardEf>
 8004126:	eef0 7a40 	vmov.f32	s15, s0
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800412e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004132:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800417c <_ZN6OutPwm6setRegEfff+0xa0>
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 3a90 	vmov	r3, s15
 8004142:	b29a      	uxth	r2, r3
 8004144:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <_ZN6OutPwm6setRegEfff+0xa4>)
 8004146:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = (uint16_t)((1.0f - dutyGuard(w)) * (float)CCR_MAX);
 8004148:	ed97 0a00 	vldr	s0, [r7]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f819 	bl	8004184 <_ZN6OutPwm9dutyGuardEf>
 8004152:	eef0 7a40 	vmov.f32	s15, s0
 8004156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800415a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800417c <_ZN6OutPwm6setRegEfff+0xa0>
 8004162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416a:	ee17 3a90 	vmov	r3, s15
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b03      	ldr	r3, [pc, #12]	@ (8004180 <_ZN6OutPwm6setRegEfff+0xa4>)
 8004172:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	4604cc00 	.word	0x4604cc00
 8004180:	40012c00 	.word	0x40012c00

08004184 <_ZN6OutPwm9dutyGuardEf>:


float OutPwm::dutyGuard(float _rawDuty){
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	ed87 0a00 	vstr	s0, [r7]
    float result = 0.0f;
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
    float sum = 0.0f;
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
    static float limp = 0.95f;
    static float limm = 0.01f;
    
    sum = (_rawDuty / VOLT_PBM) + DUTY_BASE;
 800419c:	ed97 7a00 	vldr	s14, [r7]
 80041a0:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80041a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041b0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (sum > limp){
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <_ZN6OutPwm9dutyGuardEf+0x80>)
 80041b6:	edd3 7a00 	vldr	s15, [r3]
 80041ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80041be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c6:	dd03      	ble.n	80041d0 <_ZN6OutPwm9dutyGuardEf+0x4c>
        result = limp;
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <_ZN6OutPwm9dutyGuardEf+0x80>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e00f      	b.n	80041f0 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else if(sum < limm){
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <_ZN6OutPwm9dutyGuardEf+0x84>)
 80041d2:	edd3 7a00 	vldr	s15, [r3]
 80041d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80041da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d503      	bpl.n	80041ec <_ZN6OutPwm9dutyGuardEf+0x68>
        result = limm;
 80041e4:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <_ZN6OutPwm9dutyGuardEf+0x84>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e001      	b.n	80041f0 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else{
        result = sum;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	60fb      	str	r3, [r7, #12]
    }
    return result;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	ee07 3a90 	vmov	s15, r3
}
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20000004 	.word	0x20000004
 8004208:	20000008 	.word	0x20000008

0800420c <_Z41__static_initialization_and_destruction_0ii>:
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004222:	4293      	cmp	r3, r2
 8004224:	d102      	bne.n	800422c <_Z41__static_initialization_and_destruction_0ii+0x20>
OutPwm outpwm;
 8004226:	4803      	ldr	r0, [pc, #12]	@ (8004234 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004228:	f7ff ff26 	bl	8004078 <_ZN6OutPwmC1Ev>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000620 	.word	0x20000620

08004238 <_GLOBAL__sub_I_outpwm>:
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
 800423c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004240:	2001      	movs	r0, #1
 8004242:	f7ff ffe3 	bl	800420c <_Z41__static_initialization_and_destruction_0ii>
 8004246:	bd80      	pop	{r7, pc}

08004248 <_ZN7SensCurC1Ev>:
#define ADC_TO_CUR(U2_V, U2_OFFS) (((float)((int16_t)U2_V - (int16_t)U2_OFFS)) * ADGAIN) /* アンプからモータへの電流流し込みでプラス */

SensCur senscur;
extern OutPwm outpwm;

SensCur::SensCur()
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<SensCurData>()) {}
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f8f9 	bl	800444a <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	819a      	strh	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	81da      	strh	r2, [r3, #14]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <_ZN7SensCur9getRawCurEv>:
  
void SensCur::getRawCur() {
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  rawCurU = ADC1 -> JDR1;
 8004284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	819a      	strh	r2, [r3, #12]
  rawCurW = ADC2 -> JDR1;
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <_ZN7SensCur9getRawCurEv+0x30>)
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	81da      	strh	r2, [r3, #14]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	50000100 	.word	0x50000100

080042b0 <_ZN7SensCur9sensCurINEv>:

void SensCur::sensCurIN() {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	ed2d 8b02 	vpush	{d8}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  getRawCur();
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffdd 	bl	800427c <_ZN7SensCur9getRawCurEv>
  
  data->curU = ADC_TO_CUR(rawCurU, curOffsU);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	899b      	ldrh	r3, [r3, #12]
 80042c6:	b21b      	sxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f8f3 	bl	80044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 80042e2:	4603      	mov	r3, r0
 80042e4:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800435c <_ZN7SensCur9sensCurINEv+0xac>
 80042e8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80042ec:	edc3 7a00 	vstr	s15, [r3]
  data->curW = ADC_TO_CUR(rawCurW, curOffsW);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	89db      	ldrh	r3, [r3, #14]
 80042f4:	b21b      	sxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8dc 	bl	80044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004310:	4603      	mov	r3, r0
 8004312:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800435c <_ZN7SensCur9sensCurINEv+0xac>
 8004316:	ee68 7a27 	vmul.f32	s15, s16, s15
 800431a:	edc3 7a02 	vstr	s15, [r3, #8]
  

  // V相電流はIu + Iv + Iw = 0より計算
  data->curV = -data->curU - data->curW;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f8d1 	bl	80044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004326:	4603      	mov	r3, r0
 8004328:	edd3 7a00 	vldr	s15, [r3]
 800432c:	eef1 8a67 	vneg.f32	s17, s15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f8c8 	bl	80044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004338:	4603      	mov	r3, r0
 800433a:	ed93 8a02 	vldr	s16, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f8c1 	bl	80044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8004346:	4603      	mov	r3, r0
 8004348:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800434c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	ecbd 8b02 	vpop	{d8}
 800435a:	bd80      	pop	{r7, pc}
 800435c:	3b840842 	.word	0x3b840842

08004360 <_ZN7SensCur11sensCurInitEv>:

bool SensCur::sensCurInit() {
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = STEP00;
  static bool _getReady = false;
  static uint16_t _calcount = 0;
  
  switch (seqID) {
 8004368:	4b28      	ldr	r3, [pc, #160]	@ (800440c <_ZN7SensCur11sensCurInitEv+0xac>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d03d      	beq.n	80043ec <_ZN7SensCur11sensCurInitEv+0x8c>
 8004370:	2b02      	cmp	r3, #2
 8004372:	dc41      	bgt.n	80043f8 <_ZN7SensCur11sensCurInitEv+0x98>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <_ZN7SensCur11sensCurInitEv+0x1e>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d007      	beq.n	800438c <_ZN7SensCur11sensCurInitEv+0x2c>
 800437c:	e03c      	b.n	80043f8 <_ZN7SensCur11sensCurInitEv+0x98>
    case STEP00:
      // ServoON
      outpwm.Pon();
 800437e:	4824      	ldr	r0, [pc, #144]	@ (8004410 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8004380:	f7ff fe85 	bl	800408e <_ZN6OutPwm3PonEv>
      seqID = STEP01;
 8004384:	4b21      	ldr	r3, [pc, #132]	@ (800440c <_ZN7SensCur11sensCurInitEv+0xac>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
      break;
 800438a:	e039      	b.n	8004400 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP01:
      // キャリブレーション
      if (_calcount < CALCOUNT) {
 800438c:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <_ZN7SensCur11sensCurInitEv+0xb4>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2b63      	cmp	r3, #99	@ 0x63
 8004392:	d817      	bhi.n	80043c4 <_ZN7SensCur11sensCurInitEv+0x64>
        getRawCur();
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff71 	bl	800427c <_ZN7SensCur9getRawCurEv>
        curOffsU += rawCurU;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	8992      	ldrh	r2, [r2, #12]
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]
        curOffsW += rawCurW;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	89d2      	ldrh	r2, [r2, #14]
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
        _calcount++;
 80043b6:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <_ZN7SensCur11sensCurInitEv+0xb4>)
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <_ZN7SensCur11sensCurInitEv+0xb4>)
 80043c0:	801a      	strh	r2, [r3, #0]
      } else {
        curOffsU /= _calcount;
        curOffsW /= _calcount;
        seqID = STEP02;
      }
      break;
 80043c2:	e01d      	b.n	8004400 <_ZN7SensCur11sensCurInitEv+0xa0>
        curOffsU /= _calcount;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a12      	ldr	r2, [pc, #72]	@ (8004414 <_ZN7SensCur11sensCurInitEv+0xb4>)
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]
        curOffsW /= _calcount;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <_ZN7SensCur11sensCurInitEv+0xb4>)
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	609a      	str	r2, [r3, #8]
        seqID = STEP02;
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <_ZN7SensCur11sensCurInitEv+0xac>)
 80043e6:	2202      	movs	r2, #2
 80043e8:	701a      	strb	r2, [r3, #0]
      break;
 80043ea:	e009      	b.n	8004400 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP02:
      // キャリブ完了
      outpwm.Poff();
 80043ec:	4808      	ldr	r0, [pc, #32]	@ (8004410 <_ZN7SensCur11sensCurInitEv+0xb0>)
 80043ee:	f7ff fe5f 	bl	80040b0 <_ZN6OutPwm4PoffEv>
      _getReady = true;
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <_ZN7SensCur11sensCurInitEv+0xb8>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
    default:
      seqID = STEP00;
 80043f8:	4b04      	ldr	r3, [pc, #16]	@ (800440c <_ZN7SensCur11sensCurInitEv+0xac>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
      break;
 80043fe:	bf00      	nop
  }
  return _getReady;
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <_ZN7SensCur11sensCurInitEv+0xb8>)
 8004402:	781b      	ldrb	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000634 	.word	0x20000634
 8004410:	20000620 	.word	0x20000620
 8004414:	20000636 	.word	0x20000636
 8004418:	20000635 	.word	0x20000635

0800441c <_ZN7SensCur11SensCurDataC1Ev>:
  struct SensCurData {
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800444a:	b590      	push	{r4, r7, lr}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8004452:	200c      	movs	r0, #12
 8004454:	f008 ffc6 	bl	800d3e4 <_Znwj>
 8004458:	4603      	mov	r3, r0
 800445a:	461c      	mov	r4, r3
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	4620      	mov	r0, r4
 8004470:	f7ff ffd4 	bl	800441c <_ZN7SensCur11SensCurDataC1Ev>
 8004474:	4621      	mov	r1, r4
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f842 	bl	8004500 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}

08004484 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f845 	bl	800451e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8004494:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f84a 	bl	8004538 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>
 80044a4:	4604      	mov	r4, r0
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f853 	bl	8004552 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80044ac:	4603      	mov	r3, r0
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4619      	mov	r1, r3
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f858 	bl	8004568 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>
	__ptr = pointer();
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
      }
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}

080044c8 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	return get();
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fe faf6 	bl	8002ac2 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 80044d6:	4603      	mov	r3, r0
      }
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f849 	bl	8004588 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ffe6 	bl	80044e0 <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f841 	bl	80045b0 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800452e:	4603      	mov	r3, r0
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f841 	bl	80045ca <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>
 8004548:	4603      	mov	r3, r0
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_+0x18>
 8004578:	210c      	movs	r1, #12
 800457a:	4618      	mov	r0, r3
 800457c:	f008 ff30 	bl	800d3e0 <_ZdlPvj>
      }
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f825 	bl	80045e4 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ffbf 	bl	800451e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 80045a0:	4602      	mov	r2, r0
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f81f 	bl	80045fe <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f81e 	bl	8004616 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80045da:	4603      	mov	r3, r0
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f81d 	bl	800462e <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f821 	bl	800464e <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>
 800460c:	4603      	mov	r3, r0
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f822 	bl	8004668 <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004624:	4603      	mov	r3, r0
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f822 	bl	8004680 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f82a 	bl	8004698 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f82b 	bl	80046b4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>
 800465e:	4603      	mov	r3, r0
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f82a 	bl	80046ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>:
      _Tuple_impl()
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f82a 	bl	80046e2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>:
      constexpr _Head_base()
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f810 	bl	80046f8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>
 80046d8:	4603      	mov	r3, r0
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <_ZN7SensCurD1Ev>:
class SensCur {
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff feb3 	bl	8004484 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_Z41__static_initialization_and_destruction_0ii>:

bool SensCur::adjustCur() {
  
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800473e:	4293      	cmp	r3, r2
 8004740:	d102      	bne.n	8004748 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensCur senscur;
 8004742:	4809      	ldr	r0, [pc, #36]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004744:	f7ff fd80 	bl	8004248 <_ZN7SensCurC1Ev>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004754:	4293      	cmp	r3, r2
 8004756:	d102      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004758:	4803      	ldr	r0, [pc, #12]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800475a:	f7ff ffd8 	bl	800470e <_ZN7SensCurD1Ev>
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000624 	.word	0x20000624

0800476c <_GLOBAL__sub_I_senscur>:
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
 8004770:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004774:	2001      	movs	r0, #1
 8004776:	f7ff ffd7 	bl	8004728 <_Z41__static_initialization_and_destruction_0ii>
 800477a:	bd80      	pop	{r7, pc}

0800477c <_GLOBAL__sub_D_senscur>:
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
 8004780:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004784:	2000      	movs	r0, #0
 8004786:	f7ff ffcf 	bl	8004728 <_Z41__static_initialization_and_destruction_0ii>
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004792:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_MspInit+0x44>)
 8004794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004796:	4a0e      	ldr	r2, [pc, #56]	@ (80047d0 <HAL_MspInit+0x44>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6613      	str	r3, [r2, #96]	@ 0x60
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_MspInit+0x44>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_MspInit+0x44>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	4a08      	ldr	r2, [pc, #32]	@ (80047d0 <HAL_MspInit+0x44>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_MspInit+0x44>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80047c2:	f006 fe13 	bl	800b3ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000

080047d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b0a0      	sub	sp, #128	@ 0x80
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047ec:	f107 0318 	add.w	r3, r7, #24
 80047f0:	2254      	movs	r2, #84	@ 0x54
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f008 fed7 	bl	800d5a8 <memset>
  if(hadc->Instance==ADC1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004802:	d146      	bne.n	8004892 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004808:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800480a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800480e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004810:	f107 0318 	add.w	r3, r7, #24
 8004814:	4618      	mov	r0, r3
 8004816:	f007 faef 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004820:	f7ff f806 	bl	8003830 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004824:	4b42      	ldr	r3, [pc, #264]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	4a41      	ldr	r2, [pc, #260]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 800482c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800482e:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10b      	bne.n	800484e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004836:	4b3f      	ldr	r3, [pc, #252]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 8004838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483a:	4a3e      	ldr	r2, [pc, #248]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 800483c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004842:	4b3c      	ldr	r3, [pc, #240]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 8004844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484e:	4b39      	ldr	r3, [pc, #228]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	4a38      	ldr	r2, [pc, #224]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800485a:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004866:	2301      	movs	r3, #1
 8004868:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800486a:	2303      	movs	r3, #3
 800486c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004876:	4619      	mov	r1, r3
 8004878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800487c:	f004 fb76 	bl	8008f6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004880:	2200      	movs	r2, #0
 8004882:	2100      	movs	r1, #0
 8004884:	2012      	movs	r0, #18
 8004886:	f003 f9d0 	bl	8007c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800488a:	2012      	movs	r0, #18
 800488c:	f003 f9e7 	bl	8007c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004890:	e04a      	b.n	8004928 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a28      	ldr	r2, [pc, #160]	@ (8004938 <HAL_ADC_MspInit+0x164>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d145      	bne.n	8004928 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800489c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80048a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80048a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a8:	f107 0318 	add.w	r3, r7, #24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f007 faa3 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80048b8:	f7fe ffba 	bl	8003830 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80048bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 80048c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_ADC_MspInit+0x15c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10b      	bne.n	80048e6 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80048ce:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048da:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	4a12      	ldr	r2, [pc, #72]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_ADC_MspInit+0x160>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80048fe:	23c2      	movs	r3, #194	@ 0xc2
 8004900:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004902:	2303      	movs	r3, #3
 8004904:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800490e:	4619      	mov	r1, r3
 8004910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004914:	f004 fb2a 	bl	8008f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004918:	2200      	movs	r2, #0
 800491a:	2100      	movs	r1, #0
 800491c:	2012      	movs	r0, #18
 800491e:	f003 f984 	bl	8007c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004922:	2012      	movs	r0, #18
 8004924:	f003 f99b 	bl	8007c5e <HAL_NVIC_EnableIRQ>
}
 8004928:	bf00      	nop
 800492a:	3780      	adds	r7, #128	@ 0x80
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000638 	.word	0x20000638
 8004934:	40021000 	.word	0x40021000
 8004938:	50000100 	.word	0x50000100

0800493c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <HAL_CORDIC_MspInit+0x38>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10b      	bne.n	8004966 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800494e:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <HAL_CORDIC_MspInit+0x3c>)
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <HAL_CORDIC_MspInit+0x3c>)
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	6493      	str	r3, [r2, #72]	@ 0x48
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <HAL_CORDIC_MspInit+0x3c>)
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40020c00 	.word	0x40020c00
 8004978:	40021000 	.word	0x40021000

0800497c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b09e      	sub	sp, #120	@ 0x78
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	2254      	movs	r2, #84	@ 0x54
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f008 fe03 	bl	800d5a8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a5c <HAL_FDCAN_MspInit+0xe0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d153      	bne.n	8004a54 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80049ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80049b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f007 fa1b 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80049c8:	f7fe ff32 	bl	8003830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80049cc:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	4a23      	ldr	r2, [pc, #140]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80049d8:	4b21      	ldr	r3, [pc, #132]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <HAL_FDCAN_MspInit+0xe4>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a02:	2302      	movs	r3, #2
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a06:	2301      	movs	r3, #1
 8004a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a0e:	2309      	movs	r3, #9
 8004a10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a16:	4619      	mov	r1, r3
 8004a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a1c:	f004 faa6 	bl	8008f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a26:	2302      	movs	r3, #2
 8004a28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a32:	2309      	movs	r3, #9
 8004a34:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a40:	f004 fa94 	bl	8008f6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004a44:	2200      	movs	r2, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	2015      	movs	r0, #21
 8004a4a:	f003 f8ee 	bl	8007c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004a4e:	2015      	movs	r0, #21
 8004a50:	f003 f905 	bl	8007c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004a54:	bf00      	nop
 8004a56:	3778      	adds	r7, #120	@ 0x78
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40006400 	.word	0x40006400
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b0a0      	sub	sp, #128	@ 0x80
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a7c:	f107 0318 	add.w	r3, r7, #24
 8004a80:	2254      	movs	r2, #84	@ 0x54
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f008 fd8f 	bl	800d5a8 <memset>
  if(hi2c->Instance==I2C1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8004c0c <HAL_I2C_MspInit+0x1a8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	f040 80b6 	bne.w	8004c02 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a96:	2340      	movs	r3, #64	@ 0x40
 8004a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a9e:	f107 0318 	add.w	r3, r7, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f007 f9a8 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004aae:	f7fe febf 	bl	8003830 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	4b57      	ldr	r3, [pc, #348]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	4a56      	ldr	r2, [pc, #344]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004abe:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae8:	2312      	movs	r3, #18
 8004aea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af4:	2304      	movs	r3, #4
 8004af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b02:	f004 fa33 	bl	8008f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b0a:	2312      	movs	r3, #18
 8004b0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b12:	2300      	movs	r3, #0
 8004b14:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b16:	2304      	movs	r3, #4
 8004b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b1a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004b1e:	4619      	mov	r1, r3
 8004b20:	483c      	ldr	r0, [pc, #240]	@ (8004c14 <HAL_I2C_MspInit+0x1b0>)
 8004b22:	f004 fa23 	bl	8008f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b26:	4b3a      	ldr	r3, [pc, #232]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	4a39      	ldr	r2, [pc, #228]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004b2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_I2C_MspInit+0x1ac>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8004b3e:	4b36      	ldr	r3, [pc, #216]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b40:	4a36      	ldr	r2, [pc, #216]	@ (8004c1c <HAL_I2C_MspInit+0x1b8>)
 8004b42:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004b44:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b46:	2210      	movs	r2, #16
 8004b48:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b4a:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b50:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b56:	4b30      	ldr	r3, [pc, #192]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b58:	2280      	movs	r2, #128	@ 0x80
 8004b5a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b62:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004b68:	4b2b      	ldr	r3, [pc, #172]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004b74:	4828      	ldr	r0, [pc, #160]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b76:	f003 f88d 	bl	8007c94 <HAL_DMA_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8004b80:	f7fe fe56 	bl	8003830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b88:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b8a:	4a23      	ldr	r2, [pc, #140]	@ (8004c18 <HAL_I2C_MspInit+0x1b4>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004b90:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004b92:	4a24      	ldr	r2, [pc, #144]	@ (8004c24 <HAL_I2C_MspInit+0x1c0>)
 8004b94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004b96:	4b22      	ldr	r3, [pc, #136]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004b98:	2211      	movs	r2, #17
 8004b9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b9c:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004bba:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bc0:	4b17      	ldr	r3, [pc, #92]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004bc6:	4816      	ldr	r0, [pc, #88]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bc8:	f003 f864 	bl	8007c94 <HAL_DMA_Init>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8004bd2:	f7fe fe2d 	bl	8003830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a11      	ldr	r2, [pc, #68]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bdc:	4a10      	ldr	r2, [pc, #64]	@ (8004c20 <HAL_I2C_MspInit+0x1bc>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	201f      	movs	r0, #31
 8004be8:	f003 f81f 	bl	8007c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004bec:	201f      	movs	r0, #31
 8004bee:	f003 f836 	bl	8007c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2020      	movs	r0, #32
 8004bf8:	f003 f817 	bl	8007c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004bfc:	2020      	movs	r0, #32
 8004bfe:	f003 f82e 	bl	8007c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004c02:	bf00      	nop
 8004c04:	3780      	adds	r7, #128	@ 0x80
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40005400 	.word	0x40005400
 8004c10:	40021000 	.word	0x40021000
 8004c14:	48000400 	.word	0x48000400
 8004c18:	20000464 	.word	0x20000464
 8004c1c:	40020008 	.word	0x40020008
 8004c20:	200004c4 	.word	0x200004c4
 8004c24:	4002001c 	.word	0x4002001c

08004c28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x38>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10b      	bne.n	8004c52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3e:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <HAL_TIM_MspPostInit+0x9c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d138      	bne.n	8004cfc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c96:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca2:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cae:	4b16      	ldr	r3, [pc, #88]	@ (8004d08 <HAL_TIM_MspPostInit+0xa0>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004cba:	2307      	movs	r3, #7
 8004cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cce:	f107 0314 	add.w	r3, r7, #20
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	480d      	ldr	r0, [pc, #52]	@ (8004d0c <HAL_TIM_MspPostInit+0xa4>)
 8004cd6:	f004 f949 	bl	8008f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8004cda:	f242 0303 	movw	r3, #8195	@ 0x2003
 8004cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004cec:	2306      	movs	r3, #6
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4806      	ldr	r0, [pc, #24]	@ (8004d10 <HAL_TIM_MspPostInit+0xa8>)
 8004cf8:	f004 f938 	bl	8008f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004cfc:	bf00      	nop
 8004cfe:	3728      	adds	r7, #40	@ 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	48000400 	.word	0x48000400

08004d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <NMI_Handler+0x4>

08004d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <HardFault_Handler+0x4>

08004d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <MemManage_Handler+0x4>

08004d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <BusFault_Handler+0x4>

08004d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <UsageFault_Handler+0x4>

08004d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d6a:	f000 fd7d 	bl	8005868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004d78:	4802      	ldr	r0, [pc, #8]	@ (8004d84 <DMA1_Channel1_IRQHandler+0x10>)
 8004d7a:	f003 f915 	bl	8007fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000464 	.word	0x20000464

08004d88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004d8c:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <DMA1_Channel2_IRQHandler+0x10>)
 8004d8e:	f003 f90b 	bl	8007fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200004c4 	.word	0x200004c4

08004d9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004da0:	4803      	ldr	r0, [pc, #12]	@ (8004db0 <ADC1_2_IRQHandler+0x14>)
 8004da2:	f001 f959 	bl	8006058 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004da6:	4803      	ldr	r0, [pc, #12]	@ (8004db4 <ADC1_2_IRQHandler+0x18>)
 8004da8:	f001 f956 	bl	8006058 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200002ac 	.word	0x200002ac
 8004db4:	20000318 	.word	0x20000318

08004db8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004dbc:	4802      	ldr	r0, [pc, #8]	@ (8004dc8 <FDCAN1_IT0_IRQHandler+0x10>)
 8004dbe:	f003 fe5f 	bl	8008a80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200003ac 	.word	0x200003ac

08004dcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004dd0:	4802      	ldr	r0, [pc, #8]	@ (8004ddc <I2C1_EV_IRQHandler+0x10>)
 8004dd2:	f004 fd27 	bl	8009824 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000410 	.word	0x20000410

08004de0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004de4:	4802      	ldr	r0, [pc, #8]	@ (8004df0 <I2C1_ER_IRQHandler+0x10>)
 8004de6:	f004 fd37 	bl	8009858 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000410 	.word	0x20000410

08004df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004df8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004dfc:	f004 fa50 	bl	80092a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return 1;
 8004e08:	2301      	movs	r3, #1
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_kill>:

int _kill(int pid, int sig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e1e:	f008 fc1f 	bl	800d660 <__errno>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2216      	movs	r2, #22
 8004e26:	601a      	str	r2, [r3, #0]
  return -1;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <_exit>:

void _exit (int status)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ffe7 	bl	8004e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <_exit+0x12>
	...

08004e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <_sbrk+0x5c>)
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <_sbrk+0x60>)
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <_sbrk+0x64>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <_sbrk+0x64>)
 8004e6a:	4a12      	ldr	r2, [pc, #72]	@ (8004eb4 <_sbrk+0x68>)
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <_sbrk+0x64>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e7c:	f008 fbf0 	bl	800d660 <__errno>
 8004e80:	4603      	mov	r3, r0
 8004e82:	220c      	movs	r2, #12
 8004e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	e009      	b.n	8004ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <_sbrk+0x64>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	4a05      	ldr	r2, [pc, #20]	@ (8004eb0 <_sbrk+0x64>)
 8004e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20020000 	.word	0x20020000
 8004eac:	00000400 	.word	0x00000400
 8004eb0:	2000063c 	.word	0x2000063c
 8004eb4:	200007a8 	.word	0x200007a8

08004eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ebc:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <SystemInit+0x20>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	4a05      	ldr	r2, [pc, #20]	@ (8004ed8 <SystemInit+0x20>)
 8004ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	605a      	str	r2, [r3, #4]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZNK10Acrocantho6CordicclEl>:
  SinCos operator()(int32_t theta_q31) const {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4817      	ldr	r0, [pc, #92]	@ (8004f7c <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f20:	f7ff ffdc 	bl	8004edc <LL_CORDIC_WriteData>
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004f24:	4815      	ldr	r0, [pc, #84]	@ (8004f7c <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f26:	f7ff ffe7 	bl	8004ef8 <LL_CORDIC_ReadData>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f88f 	bl	8005050 <_ZN10Acrocantho6Cordic8from_q31Em>
 8004f32:	eef0 7a40 	vmov.f32	s15, s0
 8004f36:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004f3a:	4810      	ldr	r0, [pc, #64]	@ (8004f7c <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004f3c:	f7ff ffdc 	bl	8004ef8 <LL_CORDIC_ReadData>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f884 	bl	8005050 <_ZN10Acrocantho6Cordic8from_q31Em>
 8004f48:	eef0 7a40 	vmov.f32	s15, s0
 8004f4c:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8004f50:	f107 0318 	add.w	r3, r7, #24
 8004f54:	f107 0210 	add.w	r2, r7, #16
 8004f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	ee07 2a10 	vmov	s14, r2
 8004f68:	ee07 3a90 	vmov	s15, r3
  };
 8004f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8004f70:	eef0 0a67 	vmov.f32	s1, s15
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40020c00 	.word	0x40020c00

08004f80 <_ZNK10Acrocantho6Cordic7radiansEf>:
  SinCos radians(float theta) const {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 8004f90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004f94:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8005048 <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 8004f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f9c:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 8004fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa8:	ee17 3a90 	vmov	r3, s15
 8004fac:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8004fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc0:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 8004fc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd0:	d507      	bpl.n	8004fe2 <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 8004fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fde:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 8004fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fe6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff2:	dd06      	ble.n	8005002 <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8004ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005000:	e001      	b.n	8005006 <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8005002:	edd7 7a06 	vldr	s15, [r7, #24]
 8005006:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800504c <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 800500a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800500e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8005012:	ee17 1a90 	vmov	r1, s15
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ff7a 	bl	8004f10 <_ZNK10Acrocantho6CordicclEl>
 800501c:	eeb0 7a40 	vmov.f32	s14, s0
 8005020:	eef0 7a60 	vmov.f32	s15, s1
 8005024:	ed87 7a04 	vstr	s14, [r7, #16]
 8005028:	edc7 7a05 	vstr	s15, [r7, #20]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	ee07 2a10 	vmov	s14, r2
 8005034:	ee07 3a90 	vmov	s15, r3
  }
 8005038:	eeb0 0a47 	vmov.f32	s0, s14
 800503c:	eef0 0a67 	vmov.f32	s1, s15
 8005040:	3728      	adds	r7, #40	@ 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40c90fdb 	.word	0x40c90fdb
 800504c:	4f800000 	.word	0x4f800000

08005050 <_ZN10Acrocantho6Cordic8from_q31Em>:
  static float from_q31(uint32_t val) {
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005062:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005078 <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 8005066:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 800506a:	eeb0 0a67 	vmov.f32	s0, s15
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	30000000 	.word	0x30000000

0800507c <_ZN11ModeControl7getDataEv>:
public:
  ModeControl();
  void modeCtrl();
  void modeCtrlReset();
  
  ModeControlData* getData() { return data.get(); }
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fdee 	bl	8003c68 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 800508c:	4603      	mov	r3, r0
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <_ZNK3Foc7getDataEv>:

public:
  Foc();
  void forwardCtrl(const Acrocantho::SinCos _sc);
  void inverseCtrl(const Acrocantho::SinCos _sc, float _vd, float _vq);
  FocData* getData() const { return data.get(); }
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fd fd01 	bl	8002aa8 <_ZNKSt10unique_ptrIN3Foc7FocDataESt14default_deleteIS1_EE3getEv>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_ZN8UserTaskC1Ev>:
extern ModeControl modecontrol;
extern Util util;
extern ElecangCalib elecangcalib;
extern Foc foc;

UserTask::UserTask()
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  : count(0){}
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	731a      	strb	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	735a      	strb	r2, [r3, #13]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	739a      	strb	r2, [r3, #14]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <_ZN8UserTask10cyclicTaskEv>:


void UserTask::cyclicTask() {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 80050f8:	4847      	ldr	r0, [pc, #284]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 80050fa:	f7fc fc30 	bl	800195e <_ZNK3Ang10getAngDataEv>
 80050fe:	60f8      	str	r0, [r7, #12]
  ElecangCalib::ElecangCalibData* ecaldata = elecangcalib.getData();
 8005100:	4846      	ldr	r0, [pc, #280]	@ (800521c <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8005102:	f7fe fd01 	bl	8003b08 <_ZNK12ElecangCalib7getDataEv>
 8005106:	60b8      	str	r0, [r7, #8]
  static SeqID_t seqID = INIT;
  static bool curcal = false;

   switch (seqID) {
 8005108:	4b45      	ldr	r3, [pc, #276]	@ (8005220 <_ZN8UserTask10cyclicTaskEv+0x130>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b0d      	cmp	r3, #13
 800510e:	d032      	beq.n	8005176 <_ZN8UserTask10cyclicTaskEv+0x86>
 8005110:	2b0d      	cmp	r3, #13
 8005112:	dc77      	bgt.n	8005204 <_ZN8UserTask10cyclicTaskEv+0x114>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d052      	beq.n	80051be <_ZN8UserTask10cyclicTaskEv+0xce>
 8005118:	2b0b      	cmp	r3, #11
 800511a:	d173      	bne.n	8005204 <_ZN8UserTask10cyclicTaskEv+0x114>
    case LOOP:

      // 強制停止
      if (!servoCheck()) {
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f911 	bl	8005344 <_ZN8UserTask10servoCheckEv>
 8005122:	4603      	mov	r3, r0
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <_ZN8UserTask10cyclicTaskEv+0x4c>
        outpwm.Poff();
 800512e:	483d      	ldr	r0, [pc, #244]	@ (8005224 <_ZN8UserTask10cyclicTaskEv+0x134>)
 8005130:	f7fe ffbe 	bl	80040b0 <_ZN6OutPwm4PoffEv>
        seqID = STEP00;
 8005134:	4b3a      	ldr	r3, [pc, #232]	@ (8005220 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
        break;
 800513a:	e068      	b.n	800520e <_ZN8UserTask10cyclicTaskEv+0x11e>
      }

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800513c:	2201      	movs	r2, #1
 800513e:	2120      	movs	r1, #32
 8005140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005144:	f004 f894 	bl	8009270 <HAL_GPIO_WritePin>
      senscur.sensCurIN();
 8005148:	4837      	ldr	r0, [pc, #220]	@ (8005228 <_ZN8UserTask10cyclicTaskEv+0x138>)
 800514a:	f7ff f8b1 	bl	80042b0 <_ZN7SensCur9sensCurINEv>
      ang.getAngle();
 800514e:	4832      	ldr	r0, [pc, #200]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005150:	f7fb fd6c 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 8005154:	4830      	ldr	r0, [pc, #192]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005156:	f7fb fdbc 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 800515a:	482f      	ldr	r0, [pc, #188]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 800515c:	f7fb ff44 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      
      elecangcalib.elecCalSeq();
 8005160:	482e      	ldr	r0, [pc, #184]	@ (800521c <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8005162:	f7fc fc57 	bl	8001a14 <_ZN12ElecangCalib10elecCalSeqEv>
      test = ecaldata->elecAngOfs;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
      motorControl();
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f878 	bl	8005264 <_ZN8UserTask12motorControlEv>

      break;
 8005174:	e04b      	b.n	800520e <_ZN8UserTask10cyclicTaskEv+0x11e>
    case INIT:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7b1b      	ldrb	r3, [r3, #12]
 800517a:	2b09      	cmp	r3, #9
 800517c:	d809      	bhi.n	8005192 <_ZN8UserTask10cyclicTaskEv+0xa2>
        ang.getAngle();
 800517e:	4826      	ldr	r0, [pc, #152]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005180:	f7fb fd54 	bl	8000c2c <_ZN3Ang8getAngleEv>
        count++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7b1b      	ldrb	r3, [r3, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	731a      	strb	r2, [r3, #12]
          seqID = STEP00;
          count = 0;
        }
        
      }
      break;
 8005190:	e03c      	b.n	800520c <_ZN8UserTask10cyclicTaskEv+0x11c>
        ang.getAngle();
 8005192:	4821      	ldr	r0, [pc, #132]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 8005194:	f7fb fd4a 	bl	8000c2c <_ZN3Ang8getAngleEv>
        ang.getVel();
 8005198:	481f      	ldr	r0, [pc, #124]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 800519a:	f7fb fd9a 	bl	8000cd2 <_ZN3Ang6getVelEv>
        if (senscur.sensCurInit()) {
 800519e:	4822      	ldr	r0, [pc, #136]	@ (8005228 <_ZN8UserTask10cyclicTaskEv+0x138>)
 80051a0:	f7ff f8de 	bl	8004360 <_ZN7SensCur11sensCurInitEv>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d030      	beq.n	800520c <_ZN8UserTask10cyclicTaskEv+0x11c>
          senscur.sensCurIN();
 80051aa:	481f      	ldr	r0, [pc, #124]	@ (8005228 <_ZN8UserTask10cyclicTaskEv+0x138>)
 80051ac:	f7ff f880 	bl	80042b0 <_ZN7SensCur9sensCurINEv>
          seqID = STEP00;
 80051b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005220 <_ZN8UserTask10cyclicTaskEv+0x130>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
          count = 0;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	731a      	strb	r2, [r3, #12]
      break;
 80051bc:	e026      	b.n	800520c <_ZN8UserTask10cyclicTaskEv+0x11c>
    case STEP00:
      senscur.sensCurIN();
 80051be:	481a      	ldr	r0, [pc, #104]	@ (8005228 <_ZN8UserTask10cyclicTaskEv+0x138>)
 80051c0:	f7ff f876 	bl	80042b0 <_ZN7SensCur9sensCurINEv>
      ang.getAngle();
 80051c4:	4814      	ldr	r0, [pc, #80]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051c6:	f7fb fd31 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 80051ca:	4813      	ldr	r0, [pc, #76]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051cc:	f7fb fd81 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 80051d0:	4811      	ldr	r0, [pc, #68]	@ (8005218 <_ZN8UserTask10cyclicTaskEv+0x128>)
 80051d2:	f7fb ff09 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      if (servoCheck()){
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8b4 	bl	8005344 <_ZN8UserTask10servoCheckEv>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <_ZN8UserTask10cyclicTaskEv+0x100>
        outpwm.Pon();
 80051e2:	4810      	ldr	r0, [pc, #64]	@ (8005224 <_ZN8UserTask10cyclicTaskEv+0x134>)
 80051e4:	f7fe ff53 	bl	800408e <_ZN6OutPwm3PonEv>
        seqID = LOOP;
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <_ZN8UserTask10cyclicTaskEv+0x130>)
 80051ea:	220b      	movs	r2, #11
 80051ec:	701a      	strb	r2, [r3, #0]
        break;
 80051ee:	e00e      	b.n	800520e <_ZN8UserTask10cyclicTaskEv+0x11e>
      }
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80051f0:	2200      	movs	r2, #0
 80051f2:	2120      	movs	r1, #32
 80051f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051f8:	f004 f83a 	bl	8009270 <HAL_GPIO_WritePin>
      outpwm.Poff();
 80051fc:	4809      	ldr	r0, [pc, #36]	@ (8005224 <_ZN8UserTask10cyclicTaskEv+0x134>)
 80051fe:	f7fe ff57 	bl	80040b0 <_ZN6OutPwm4PoffEv>
      break;
 8005202:	e004      	b.n	800520e <_ZN8UserTask10cyclicTaskEv+0x11e>

    default:
      seqID = INIT;
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8005206:	220d      	movs	r2, #13
 8005208:	701a      	strb	r2, [r3, #0]
      break;
 800520a:	e000      	b.n	800520e <_ZN8UserTask10cyclicTaskEv+0x11e>
      break;
 800520c:	bf00      	nop
    }
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200005d8 	.word	0x200005d8
 800521c:	20000098 	.word	0x20000098
 8005220:	20000010 	.word	0x20000010
 8005224:	20000620 	.word	0x20000620
 8005228:	20000624 	.word	0x20000624

0800522c <_ZN8UserTask8idleTaskEv>:

void UserTask::idleTask() {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  cancom.rxTask();
 8005234:	4809      	ldr	r0, [pc, #36]	@ (800525c <_ZN8UserTask8idleTaskEv+0x30>)
 8005236:	f7fc fa2b 	bl	8001690 <_ZN6CanCom6rxTaskEv>
  util.genFuncCtrl();
 800523a:	4809      	ldr	r0, [pc, #36]	@ (8005260 <_ZN8UserTask8idleTaskEv+0x34>)
 800523c:	f000 f8d0 	bl	80053e0 <_ZN4Util11genFuncCtrlEv>

  cancom.initTxHeader(0x01, false, false);
 8005240:	2300      	movs	r3, #0
 8005242:	2200      	movs	r2, #0
 8005244:	2101      	movs	r1, #1
 8005246:	4805      	ldr	r0, [pc, #20]	@ (800525c <_ZN8UserTask8idleTaskEv+0x30>)
 8005248:	f7fc f91c 	bl	8001484 <_ZN6CanCom12initTxHeaderEmbb>
  cancom.txTask();
 800524c:	4803      	ldr	r0, [pc, #12]	@ (800525c <_ZN8UserTask8idleTaskEv+0x30>)
 800524e:	f7fc fa49 	bl	80016e4 <_ZN6CanCom6txTaskEv>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000570 	.word	0x20000570
 8005260:	20000650 	.word	0x20000650

08005264 <_ZN8UserTask12motorControlEv>:

// PON後のモータ制御
void UserTask::motorControl() {
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  using namespace Acrocantho;
  ModeControl::ModeControlData* mdctrldata = modecontrol.getData();
 800526c:	4831      	ldr	r0, [pc, #196]	@ (8005334 <_ZN8UserTask12motorControlEv+0xd0>)
 800526e:	f7ff ff05 	bl	800507c <_ZN11ModeControl7getDataEv>
 8005272:	61f8      	str	r0, [r7, #28]
  Ang::AngData* angdata = ang.getAngData();
 8005274:	4830      	ldr	r0, [pc, #192]	@ (8005338 <_ZN8UserTask12motorControlEv+0xd4>)
 8005276:	f7fc fb72 	bl	800195e <_ZNK3Ang10getAngDataEv>
 800527a:	61b8      	str	r0, [r7, #24]
  Foc::FocData* focdata = foc.getData();
 800527c:	482f      	ldr	r0, [pc, #188]	@ (800533c <_ZN8UserTask12motorControlEv+0xd8>)
 800527e:	f7ff ff0a 	bl	8005096 <_ZNK3Foc7getDataEv>
 8005282:	6178      	str	r0, [r7, #20]
  Cordic cordic;
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	4618      	mov	r0, r3
 800528a:	f7fd fa5b 	bl	8002744 <_ZN10Acrocantho6CordicC1Ev>

  // SinCos演算
  SinCos result = cordic.radians(angdata->elecAng);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	eeb0 0a67 	vmov.f32	s0, s15
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fe6f 	bl	8004f80 <_ZNK10Acrocantho6Cordic7radiansEf>
 80052a2:	eeb0 7a40 	vmov.f32	s14, s0
 80052a6:	eef0 7a60 	vmov.f32	s15, s1
 80052aa:	ed87 7a02 	vstr	s14, [r7, #8]
 80052ae:	edc7 7a03 	vstr	s15, [r7, #12]

  // dq変換
  foc.forwardCtrl(result);
 80052b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80052b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80052ba:	eeb0 0a47 	vmov.f32	s0, s14
 80052be:	eef0 0a67 	vmov.f32	s1, s15
 80052c2:	481e      	ldr	r0, [pc, #120]	@ (800533c <_ZN8UserTask12motorControlEv+0xd8>)
 80052c4:	f7fd fb62 	bl	800298c <_ZN3Foc11forwardCtrlEN10Acrocantho6SinCosE>
  
  testid = focdata->id;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	605a      	str	r2, [r3, #4]
  testiq = focdata->iq;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
  
  // drvMdとgenfuncによる指令値切替
  modecontrol.modeCtrl();
 80052d8:	4816      	ldr	r0, [pc, #88]	@ (8005334 <_ZN8UserTask12motorControlEv+0xd0>)
 80052da:	f7fe fc41 	bl	8003b60 <_ZN11ModeControl8modeCtrlEv>

  // dq逆変換
  foc.inverseCtrl(result, mdctrldata->voltDRef, mdctrldata->voltQRef);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	ed93 6a02 	vldr	s12, [r3, #8]
 80052ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80052ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80052f2:	eef0 1a46 	vmov.f32	s3, s12
 80052f6:	eeb0 1a66 	vmov.f32	s2, s13
 80052fa:	eeb0 0a47 	vmov.f32	s0, s14
 80052fe:	eef0 0a67 	vmov.f32	s1, s15
 8005302:	480e      	ldr	r0, [pc, #56]	@ (800533c <_ZN8UserTask12motorControlEv+0xd8>)
 8005304:	f7fd fb8e 	bl	8002a24 <_ZN3Foc11inverseCtrlEN10Acrocantho6SinCosEff>
  // PWM出力
  outpwm.setReg(focdata->vu, focdata->vv, focdata->vw);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	edd3 7a02 	vldr	s15, [r3, #8]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	ed93 7a03 	vldr	s14, [r3, #12]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	edd3 6a04 	vldr	s13, [r3, #16]
 800531a:	eeb0 1a66 	vmov.f32	s2, s13
 800531e:	eef0 0a47 	vmov.f32	s1, s14
 8005322:	eeb0 0a67 	vmov.f32	s0, s15
 8005326:	4806      	ldr	r0, [pc, #24]	@ (8005340 <_ZN8UserTask12motorControlEv+0xdc>)
 8005328:	f7fe fed8 	bl	80040dc <_ZN6OutPwm6setRegEfff>
}
 800532c:	bf00      	nop
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000608 	.word	0x20000608
 8005338:	200005d8 	.word	0x200005d8
 800533c:	200002a8 	.word	0x200002a8
 8005340:	20000620 	.word	0x20000620

08005344 <_ZN8UserTask10servoCheckEv>:

bool UserTask::servoCheck() {
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 800534c:	4806      	ldr	r0, [pc, #24]	@ (8005368 <_ZN8UserTask10servoCheckEv+0x24>)
 800534e:	f7fb fbeb 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8005352:	60f8      	str	r0, [r7, #12]
  return (candata->genFuncRef & 0x01) != 0 ? true : false;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	b2db      	uxtb	r3, r3
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000570 	.word	0x20000570

0800536c <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  usertask.cyclicTask();
 8005374:	4803      	ldr	r0, [pc, #12]	@ (8005384 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 8005376:	f7ff febb 	bl	80050f0 <_ZN8UserTask10cyclicTaskEv>
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000640 	.word	0x20000640

08005388 <_Z41__static_initialization_and_destruction_0ii>:
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d107      	bne.n	80053a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800539e:	4293      	cmp	r3, r2
 80053a0:	d102      	bne.n	80053a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
UserTask usertask;
 80053a2:	4803      	ldr	r0, [pc, #12]	@ (80053b0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80053a4:	f7ff fe84 	bl	80050b0 <_ZN8UserTaskC1Ev>
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000640 	.word	0x20000640

080053b4 <_GLOBAL__sub_I_usertask>:
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80053bc:	2001      	movs	r0, #1
 80053be:	f7ff ffe3 	bl	8005388 <_Z41__static_initialization_and_destruction_0ii>
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <_ZN4UtilC1Ev>:
#include "can_communication.h"

Util util;
extern CanCom cancom;

Util::Util()
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<UtilData>()) {}
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f834 	bl	800543c <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <_ZN4Util11genFuncCtrlEv>:

// PON以外の機能制御
void Util::genFuncCtrl() {
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 80053e8:	480c      	ldr	r0, [pc, #48]	@ (800541c <_ZN4Util11genFuncCtrlEv+0x3c>)
 80053ea:	f7fb fb9d 	bl	8000b28 <_ZN6CanCom7getDataEv>
 80053ee:	60f8      	str	r0, [r7, #12]

  if (candata->genFuncCheck){
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	7c1b      	ldrb	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <_ZN4Util11genFuncCtrlEv+0x32>
    // genfuncRef 0b00010000
    data->eCalib = (candata->genFuncRef & 0x10) != 0 ? true : false;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	111c      	asrs	r4, r3, #4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f853 	bl	80054ac <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>
 8005406:	4603      	mov	r3, r0
 8005408:	4622      	mov	r2, r4
 800540a:	f002 0201 	and.w	r2, r2, #1
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
  }
  
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}
 800541a:	bf00      	nop
 800541c:	20000570 	.word	0x20000570

08005420 <_ZN4Util8UtilDataC1Ev>:
  struct UtilData {
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8005444:	2001      	movs	r0, #1
 8005446:	f007 ffcd 	bl	800d3e4 <_Znwj>
 800544a:	4603      	mov	r3, r0
 800544c:	461c      	mov	r4, r3
 800544e:	2300      	movs	r3, #0
 8005450:	7023      	strb	r3, [r4, #0]
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff ffe4 	bl	8005420 <_ZN4Util8UtilDataC1Ev>
 8005458:	4621      	mov	r1, r4
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f842 	bl	80054e4 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f845 	bl	8005502 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 8005478:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f84a 	bl	800551c <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>
 8005488:	4604      	mov	r4, r0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f853 	bl	8005536 <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8005490:	4603      	mov	r3, r0
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f858 	bl	800554c <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>
	__ptr = pointer();
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
      }
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}

080054ac <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	return get();
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fc fed8 	bl	800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 80054ba:	4603      	mov	r3, r0
      }
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f849 	bl	800556c <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ffe6 	bl	80054c4 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f841 	bl	8005594 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8005512:	4603      	mov	r3, r0
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f841 	bl	80055ae <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>
 800552c:	4603      	mov	r3, r0
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_+0x18>
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f007 ff3e 	bl	800d3e0 <_ZdlPvj>
      }
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f825 	bl	80055c8 <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ffbf 	bl	8005502 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 8005584:	4602      	mov	r2, r0
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f81f 	bl	80055e2 <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f81e 	bl	80055fa <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80055be:	4603      	mov	r3, r0
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f81d 	bl	8005612 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f821 	bl	8005632 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80055f0:	4603      	mov	r3, r0
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f822 	bl	800564c <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005608:	4603      	mov	r3, r0
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f822 	bl	8005664 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f82a 	bl	800567c <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f82b 	bl	8005698 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>
 8005642:	4603      	mov	r3, r0
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f82a 	bl	80056ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>
 800565a:	4603      	mov	r3, r0
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>:
      _Tuple_impl()
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f82a 	bl	80056c6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>:
      constexpr _Head_base()
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f810 	bl	80056dc <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>
 80056bc:	4603      	mov	r3, r0
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_ZN4UtilD1Ev>:
class Util {
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff feb3 	bl	8005468 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <_Z41__static_initialization_and_destruction_0ii>:
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005722:	4293      	cmp	r3, r2
 8005724:	d102      	bne.n	800572c <_Z41__static_initialization_and_destruction_0ii+0x20>
Util util;
 8005726:	4809      	ldr	r0, [pc, #36]	@ (800574c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005728:	f7ff fe4c 	bl	80053c4 <_ZN4UtilC1Ev>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005738:	4293      	cmp	r3, r2
 800573a:	d102      	bne.n	8005742 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800573c:	4803      	ldr	r0, [pc, #12]	@ (800574c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800573e:	f7ff ffd8 	bl	80056f2 <_ZN4UtilD1Ev>
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000650 	.word	0x20000650

08005750 <_GLOBAL__sub_I_util>:
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
 8005754:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005758:	2001      	movs	r0, #1
 800575a:	f7ff ffd7 	bl	800570c <_Z41__static_initialization_and_destruction_0ii>
 800575e:	bd80      	pop	{r7, pc}

08005760 <_GLOBAL__sub_D_util>:
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
 8005764:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005768:	2000      	movs	r0, #0
 800576a:	f7ff ffcf 	bl	800570c <_Z41__static_initialization_and_destruction_0ii>
 800576e:	bd80      	pop	{r7, pc}

08005770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005770:	480d      	ldr	r0, [pc, #52]	@ (80057a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005772:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005774:	f7ff fba0 	bl	8004eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005778:	480c      	ldr	r0, [pc, #48]	@ (80057ac <LoopForever+0x6>)
  ldr r1, =_edata
 800577a:	490d      	ldr	r1, [pc, #52]	@ (80057b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800577c:	4a0d      	ldr	r2, [pc, #52]	@ (80057b4 <LoopForever+0xe>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005780:	e002      	b.n	8005788 <LoopCopyDataInit>

08005782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005786:	3304      	adds	r3, #4

08005788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800578a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800578c:	d3f9      	bcc.n	8005782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005790:	4c0a      	ldr	r4, [pc, #40]	@ (80057bc <LoopForever+0x16>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005794:	e001      	b.n	800579a <LoopFillZerobss>

08005796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005798:	3204      	adds	r2, #4

0800579a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800579a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800579c:	d3fb      	bcc.n	8005796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800579e:	f007 ff65 	bl	800d66c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057a2:	f7fd fbd7 	bl	8002f54 <main>

080057a6 <LoopForever>:

LoopForever:
    b LoopForever
 80057a6:	e7fe      	b.n	80057a6 <LoopForever>
  ldr   r0, =_estack
 80057a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80057b4:	0800d7c4 	.word	0x0800d7c4
  ldr r2, =_sbss
 80057b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80057bc:	200007a4 	.word	0x200007a4

080057c0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057c0:	e7fe      	b.n	80057c0 <ADC3_IRQHandler>

080057c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057cc:	2003      	movs	r0, #3
 80057ce:	f002 fa21 	bl	8007c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057d2:	2000      	movs	r0, #0
 80057d4:	f000 f80e 	bl	80057f4 <HAL_InitTick>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	71fb      	strb	r3, [r7, #7]
 80057e2:	e001      	b.n	80057e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057e4:	f7fe ffd2 	bl	800478c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057e8:	79fb      	ldrb	r3, [r7, #7]

}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005800:	4b16      	ldr	r3, [pc, #88]	@ (800585c <HAL_InitTick+0x68>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d022      	beq.n	800584e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005808:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <HAL_InitTick+0x6c>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b13      	ldr	r3, [pc, #76]	@ (800585c <HAL_InitTick+0x68>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005814:	fbb1 f3f3 	udiv	r3, r1, r3
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	4618      	mov	r0, r3
 800581e:	f002 fa2c 	bl	8007c7a <HAL_SYSTICK_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	d809      	bhi.n	8005842 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800582e:	2200      	movs	r2, #0
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	f002 f9f8 	bl	8007c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800583a:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <HAL_InitTick+0x70>)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	e007      	b.n	8005852 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	e004      	b.n	8005852 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e001      	b.n	8005852 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000018 	.word	0x20000018
 8005860:	2000000c 	.word	0x2000000c
 8005864:	20000014 	.word	0x20000014

08005868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_IncTick+0x1c>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_IncTick+0x20>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4413      	add	r3, r2
 8005876:	4a03      	ldr	r2, [pc, #12]	@ (8005884 <HAL_IncTick+0x1c>)
 8005878:	6013      	str	r3, [r2, #0]
}
 800587a:	bf00      	nop
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000654 	.word	0x20000654
 8005888:	20000018 	.word	0x20000018

0800588c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return uwTick;
 8005890:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <HAL_GetTick+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000654 	.word	0x20000654

080058a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005918:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 031f 	and.w	r3, r3, #31
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800597a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6093      	str	r3, [r2, #8]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800599e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a2:	d101      	bne.n	80059a8 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80059c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f2:	d101      	bne.n	80059f8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a42:	f043 0202 	orr.w	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <LL_ADC_IsEnabled+0x18>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <LL_ADC_IsEnabled+0x1a>
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d101      	bne.n	8005a94 <LL_ADC_IsDisableOngoing+0x18>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <LL_ADC_IsDisableOngoing+0x1a>
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ab6:	f043 0204 	orr.w	r2, r3, #4
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d101      	bne.n	8005ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d101      	bne.n	8005b08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b089      	sub	sp, #36	@ 0x24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e1a9      	b.n	8005e86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fe fe47 	bl	80047d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff18 	bl	800598e <LL_ADC_IsDeepPowerDownEnabled>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fefe 	bl	800596a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ff33 	bl	80059de <LL_ADC_IsInternalRegulatorEnabled>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d115      	bne.n	8005baa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff ff17 	bl	80059b6 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b88:	4b9c      	ldr	r3, [pc, #624]	@ (8005dfc <HAL_ADC_Init+0x2e4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	4a9c      	ldr	r2, [pc, #624]	@ (8005e00 <HAL_ADC_Init+0x2e8>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	3301      	adds	r3, #1
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b9c:	e002      	b.n	8005ba4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f9      	bne.n	8005b9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff15 	bl	80059de <LL_ADC_IsInternalRegulatorEnabled>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10d      	bne.n	8005bd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bbe:	f043 0210 	orr.w	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff75 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 8142 	bne.w	8005e74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 813e 	bne.w	8005e74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c00:	f043 0202 	orr.w	r2, r3, #2
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff22 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d141      	bne.n	8005c9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c20:	d004      	beq.n	8005c2c <HAL_ADC_Init+0x114>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a77      	ldr	r2, [pc, #476]	@ (8005e04 <HAL_ADC_Init+0x2ec>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10f      	bne.n	8005c4c <HAL_ADC_Init+0x134>
 8005c2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c30:	f7ff ff11 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c34:	4604      	mov	r4, r0
 8005c36:	4873      	ldr	r0, [pc, #460]	@ (8005e04 <HAL_ADC_Init+0x2ec>)
 8005c38:	f7ff ff0d 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4323      	orrs	r3, r4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	e012      	b.n	8005c72 <HAL_ADC_Init+0x15a>
 8005c4c:	486e      	ldr	r0, [pc, #440]	@ (8005e08 <HAL_ADC_Init+0x2f0>)
 8005c4e:	f7ff ff02 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c52:	4604      	mov	r4, r0
 8005c54:	486d      	ldr	r0, [pc, #436]	@ (8005e0c <HAL_ADC_Init+0x2f4>)
 8005c56:	f7ff fefe 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	431c      	orrs	r4, r3
 8005c5e:	486c      	ldr	r0, [pc, #432]	@ (8005e10 <HAL_ADC_Init+0x2f8>)
 8005c60:	f7ff fef9 	bl	8005a56 <LL_ADC_IsEnabled>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4323      	orrs	r3, r4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c7e:	d004      	beq.n	8005c8a <HAL_ADC_Init+0x172>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a5f      	ldr	r2, [pc, #380]	@ (8005e04 <HAL_ADC_Init+0x2ec>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_ADC_Init+0x176>
 8005c8a:	4a62      	ldr	r2, [pc, #392]	@ (8005e14 <HAL_ADC_Init+0x2fc>)
 8005c8c:	e000      	b.n	8005c90 <HAL_ADC_Init+0x178>
 8005c8e:	4a62      	ldr	r2, [pc, #392]	@ (8005e18 <HAL_ADC_Init+0x300>)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7ff fe04 	bl	80058a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7f5b      	ldrb	r3, [r3, #29]
 8005ca0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ca6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005cac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005cb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d106      	bne.n	8005cd8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	045b      	lsls	r3, r3, #17
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	4b48      	ldr	r3, [pc, #288]	@ (8005e1c <HAL_ADC_Init+0x304>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fee4 	bl	8005af0 <LL_ADC_INJ_IsConversionOngoing>
 8005d28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d17f      	bne.n	8005e30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d17c      	bne.n	8005e30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d52:	f023 0302 	bic.w	r3, r3, #2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6911      	ldr	r1, [r2, #16]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	430b      	orrs	r3, r1
 8005d92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005d96:	e013      	b.n	8005dc0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005da6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005db8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d12a      	bne.n	8005e20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005de6:	4311      	orrs	r1, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005dec:	430a      	orrs	r2, r1
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e019      	b.n	8005e30 <HAL_ADC_Init+0x318>
 8005dfc:	2000000c 	.word	0x2000000c
 8005e00:	053e2d63 	.word	0x053e2d63
 8005e04:	50000100 	.word	0x50000100
 8005e08:	50000400 	.word	0x50000400
 8005e0c:	50000500 	.word	0x50000500
 8005e10:	50000600 	.word	0x50000600
 8005e14:	50000300 	.word	0x50000300
 8005e18:	50000700 	.word	0x50000700
 8005e1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10c      	bne.n	8005e52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3e:	f023 010f 	bic.w	r1, r3, #15
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e50:	e007      	b.n	8005e62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 020f 	bic.w	r2, r2, #15
 8005e60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e72:	e007      	b.n	8005e84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3724      	adds	r7, #36	@ 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd90      	pop	{r4, r7, pc}
 8005e8e:	bf00      	nop

08005e90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea0:	d004      	beq.n	8005eac <HAL_ADC_Start+0x1c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a67      	ldr	r2, [pc, #412]	@ (8006044 <HAL_ADC_Start+0x1b4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_ADC_Start+0x20>
 8005eac:	4b66      	ldr	r3, [pc, #408]	@ (8006048 <HAL_ADC_Start+0x1b8>)
 8005eae:	e000      	b.n	8005eb2 <HAL_ADC_Start+0x22>
 8005eb0:	4b66      	ldr	r3, [pc, #408]	@ (800604c <HAL_ADC_Start+0x1bc>)
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fd3d 	bl	8005932 <LL_ADC_GetMultimode>
 8005eb8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fe03 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 80b4 	bne.w	8006034 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_ADC_Start+0x4a>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0af      	b.n	800603a <HAL_ADC_Start+0x1aa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb36 	bl	8006554 <ADC_Enable>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 809b 	bne.w	800602a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8006044 <HAL_ADC_Start+0x1b4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_ADC_Start+0x96>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a4e      	ldr	r2, [pc, #312]	@ (8006050 <HAL_ADC_Start+0x1c0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d002      	beq.n	8005f22 <HAL_ADC_Start+0x92>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	e003      	b.n	8005f2a <HAL_ADC_Start+0x9a>
 8005f22:	4b4c      	ldr	r3, [pc, #304]	@ (8006054 <HAL_ADC_Start+0x1c4>)
 8005f24:	e001      	b.n	8005f2a <HAL_ADC_Start+0x9a>
 8005f26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d002      	beq.n	8005f38 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f50:	d106      	bne.n	8005f60 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f56:	f023 0206 	bic.w	r2, r3, #6
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f5e:	e002      	b.n	8005f66 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	221c      	movs	r2, #28
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <HAL_ADC_Start+0x1b4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_ADC_Start+0x104>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a32      	ldr	r2, [pc, #200]	@ (8006050 <HAL_ADC_Start+0x1c0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d002      	beq.n	8005f90 <HAL_ADC_Start+0x100>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <HAL_ADC_Start+0x108>
 8005f90:	4b30      	ldr	r3, [pc, #192]	@ (8006054 <HAL_ADC_Start+0x1c4>)
 8005f92:	e001      	b.n	8005f98 <HAL_ADC_Start+0x108>
 8005f94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d008      	beq.n	8005fb2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d002      	beq.n	8005fb2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d114      	bne.n	8005fdc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005fc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fd64 	bl	8005aa2 <LL_ADC_REG_StartConversion>
 8005fda:	e02d      	b.n	8006038 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a15      	ldr	r2, [pc, #84]	@ (8006044 <HAL_ADC_Start+0x1b4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_ADC_Start+0x176>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	@ (8006050 <HAL_ADC_Start+0x1c0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d002      	beq.n	8006002 <HAL_ADC_Start+0x172>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	e003      	b.n	800600a <HAL_ADC_Start+0x17a>
 8006002:	4b14      	ldr	r3, [pc, #80]	@ (8006054 <HAL_ADC_Start+0x1c4>)
 8006004:	e001      	b.n	800600a <HAL_ADC_Start+0x17a>
 8006006:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800600a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00f      	beq.n	8006038 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006020:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006028:	e006      	b.n	8006038 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006032:	e001      	b.n	8006038 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006034:	2302      	movs	r3, #2
 8006036:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	50000100 	.word	0x50000100
 8006048:	50000300 	.word	0x50000300
 800604c:	50000700 	.word	0x50000700
 8006050:	50000500 	.word	0x50000500
 8006054:	50000400 	.word	0x50000400

08006058 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607c:	d004      	beq.n	8006088 <HAL_ADC_IRQHandler+0x30>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a8e      	ldr	r2, [pc, #568]	@ (80062bc <HAL_ADC_IRQHandler+0x264>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <HAL_ADC_IRQHandler+0x34>
 8006088:	4b8d      	ldr	r3, [pc, #564]	@ (80062c0 <HAL_ADC_IRQHandler+0x268>)
 800608a:	e000      	b.n	800608e <HAL_ADC_IRQHandler+0x36>
 800608c:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <HAL_ADC_IRQHandler+0x26c>)
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fc4f 	bl	8005932 <LL_ADC_GetMultimode>
 8006094:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x78>
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fe66 	bl	8006d94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2202      	movs	r2, #2
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <HAL_ADC_IRQHandler+0x8c>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8094 	beq.w	8006218 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 808e 	beq.w	8006218 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fbe4 	bl	80058e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d072      	beq.n	800620a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a64      	ldr	r2, [pc, #400]	@ (80062bc <HAL_ADC_IRQHandler+0x264>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_ADC_IRQHandler+0xea>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a65      	ldr	r2, [pc, #404]	@ (80062c8 <HAL_ADC_IRQHandler+0x270>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d002      	beq.n	800613e <HAL_ADC_IRQHandler+0xe6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	e003      	b.n	8006146 <HAL_ADC_IRQHandler+0xee>
 800613e:	4b63      	ldr	r3, [pc, #396]	@ (80062cc <HAL_ADC_IRQHandler+0x274>)
 8006140:	e001      	b.n	8006146 <HAL_ADC_IRQHandler+0xee>
 8006142:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	4293      	cmp	r3, r2
 800614c:	d008      	beq.n	8006160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b05      	cmp	r3, #5
 8006158:	d002      	beq.n	8006160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b09      	cmp	r3, #9
 800615e:	d104      	bne.n	800616a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	e014      	b.n	8006194 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a53      	ldr	r2, [pc, #332]	@ (80062bc <HAL_ADC_IRQHandler+0x264>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_ADC_IRQHandler+0x130>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a53      	ldr	r2, [pc, #332]	@ (80062c8 <HAL_ADC_IRQHandler+0x270>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d002      	beq.n	8006184 <HAL_ADC_IRQHandler+0x12c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	e003      	b.n	800618c <HAL_ADC_IRQHandler+0x134>
 8006184:	4b51      	ldr	r3, [pc, #324]	@ (80062cc <HAL_ADC_IRQHandler+0x274>)
 8006186:	e001      	b.n	800618c <HAL_ADC_IRQHandler+0x134>
 8006188:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800618c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d135      	bne.n	800620a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d12e      	bne.n	800620a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fc8a 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d11a      	bne.n	80061f2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 020c 	bic.w	r2, r2, #12
 80061ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f043 0201 	orr.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061f0:	e00b      	b.n	800620a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f6:	f043 0210 	orr.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f984 	bl	8006518 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	220c      	movs	r2, #12
 8006216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <HAL_ADC_IRQHandler+0x1d4>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80b3 	beq.w	800639e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80ad 	beq.w	800639e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006254:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fb53 	bl	800590c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006266:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fb3a 	bl	80058e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006272:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a10      	ldr	r2, [pc, #64]	@ (80062bc <HAL_ADC_IRQHandler+0x264>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_ADC_IRQHandler+0x23a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <HAL_ADC_IRQHandler+0x270>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d002      	beq.n	800628e <HAL_ADC_IRQHandler+0x236>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	e003      	b.n	8006296 <HAL_ADC_IRQHandler+0x23e>
 800628e:	4b0f      	ldr	r3, [pc, #60]	@ (80062cc <HAL_ADC_IRQHandler+0x274>)
 8006290:	e001      	b.n	8006296 <HAL_ADC_IRQHandler+0x23e>
 8006292:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	4293      	cmp	r3, r2
 800629c:	d008      	beq.n	80062b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d002      	beq.n	80062b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b07      	cmp	r3, #7
 80062ae:	d10f      	bne.n	80062d0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	e01f      	b.n	80062fa <HAL_ADC_IRQHandler+0x2a2>
 80062ba:	bf00      	nop
 80062bc:	50000100 	.word	0x50000100
 80062c0:	50000300 	.word	0x50000300
 80062c4:	50000700 	.word	0x50000700
 80062c8:	50000500 	.word	0x50000500
 80062cc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a8b      	ldr	r2, [pc, #556]	@ (8006504 <HAL_ADC_IRQHandler+0x4ac>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_ADC_IRQHandler+0x296>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a8a      	ldr	r2, [pc, #552]	@ (8006508 <HAL_ADC_IRQHandler+0x4b0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d002      	beq.n	80062ea <HAL_ADC_IRQHandler+0x292>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	e003      	b.n	80062f2 <HAL_ADC_IRQHandler+0x29a>
 80062ea:	4b88      	ldr	r3, [pc, #544]	@ (800650c <HAL_ADC_IRQHandler+0x4b4>)
 80062ec:	e001      	b.n	80062f2 <HAL_ADC_IRQHandler+0x29a>
 80062ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d047      	beq.n	8006390 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_ADC_IRQHandler+0x2c2>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d03f      	beq.n	8006390 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006316:	2b00      	cmp	r3, #0
 8006318:	d13a      	bne.n	8006390 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006324:	2b40      	cmp	r3, #64	@ 0x40
 8006326:	d133      	bne.n	8006390 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d12e      	bne.n	8006390 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fbda 	bl	8005af0 <LL_ADC_INJ_IsConversionOngoing>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11a      	bne.n	8006378 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006350:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006356:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d112      	bne.n	8006390 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006376:	e00b      	b.n	8006390 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	f043 0210 	orr.w	r2, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006388:	f043 0201 	orr.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fe ffeb 	bl	800536c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2260      	movs	r2, #96	@ 0x60
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d011      	beq.n	80063cc <HAL_ADC_IRQHandler+0x374>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8b4 	bl	800652c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2280      	movs	r2, #128	@ 0x80
 80063ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d012      	beq.n	80063fc <HAL_ADC_IRQHandler+0x3a4>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fcbd 	bl	8006d6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006402:	2b00      	cmp	r3, #0
 8006404:	d012      	beq.n	800642c <HAL_ADC_IRQHandler+0x3d4>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006414:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fcaf 	bl	8006d80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800642a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d043      	beq.n	80064be <HAL_ADC_IRQHandler+0x466>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b00      	cmp	r3, #0
 800643e:	d03e      	beq.n	80064be <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006448:	2301      	movs	r3, #1
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
 800644c:	e021      	b.n	8006492 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d015      	beq.n	8006480 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800645c:	d004      	beq.n	8006468 <HAL_ADC_IRQHandler+0x410>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a28      	ldr	r2, [pc, #160]	@ (8006504 <HAL_ADC_IRQHandler+0x4ac>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d101      	bne.n	800646c <HAL_ADC_IRQHandler+0x414>
 8006468:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <HAL_ADC_IRQHandler+0x4b8>)
 800646a:	e000      	b.n	800646e <HAL_ADC_IRQHandler+0x416>
 800646c:	4b29      	ldr	r3, [pc, #164]	@ (8006514 <HAL_ADC_IRQHandler+0x4bc>)
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fa6d 	bl	800594e <LL_ADC_GetMultiDMATransfer>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800647a:	2301      	movs	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
 800647e:	e008      	b.n	8006492 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800648e:	2301      	movs	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10e      	bne.n	80064b6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a8:	f043 0202 	orr.w	r2, r3, #2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f845 	bl	8006540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2210      	movs	r2, #16
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d018      	beq.n	80064fa <HAL_ADC_IRQHandler+0x4a2>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d013      	beq.n	80064fa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e2:	f043 0208 	orr.w	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fc2f 	bl	8006d58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80064fa:	bf00      	nop
 80064fc:	3728      	adds	r7, #40	@ 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	50000100 	.word	0x50000100
 8006508:	50000500 	.word	0x50000500
 800650c:	50000400 	.word	0x50000400
 8006510:	50000300 	.word	0x50000300
 8006514:	50000700 	.word	0x50000700

08006518 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800655c:	2300      	movs	r3, #0
 800655e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fa76 	bl	8005a56 <LL_ADC_IsEnabled>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d176      	bne.n	800665e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	4b3c      	ldr	r3, [pc, #240]	@ (8006668 <ADC_Enable+0x114>)
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00d      	beq.n	800659a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006582:	f043 0210 	orr.w	r2, r3, #16
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e062      	b.n	8006660 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fa31 	bl	8005a06 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ac:	d004      	beq.n	80065b8 <ADC_Enable+0x64>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2e      	ldr	r2, [pc, #184]	@ (800666c <ADC_Enable+0x118>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <ADC_Enable+0x68>
 80065b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006670 <ADC_Enable+0x11c>)
 80065ba:	e000      	b.n	80065be <ADC_Enable+0x6a>
 80065bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006674 <ADC_Enable+0x120>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f983 	bl	80058ca <LL_ADC_GetCommonPathInternalCh>
 80065c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80065c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006678 <ADC_Enable+0x124>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	4a29      	ldr	r2, [pc, #164]	@ (800667c <ADC_Enable+0x128>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065e8:	e002      	b.n	80065f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f9      	bne.n	80065ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065f6:	f7ff f949 	bl	800588c <HAL_GetTick>
 80065fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065fc:	e028      	b.n	8006650 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fa27 	bl	8005a56 <LL_ADC_IsEnabled>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f9f7 	bl	8005a06 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006618:	f7ff f938 	bl	800588c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d914      	bls.n	8006650 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d00d      	beq.n	8006650 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	f043 0210 	orr.w	r2, r3, #16
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006644:	f043 0201 	orr.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e007      	b.n	8006660 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b01      	cmp	r3, #1
 800665c:	d1cf      	bne.n	80065fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	8000003f 	.word	0x8000003f
 800666c:	50000100 	.word	0x50000100
 8006670:	50000300 	.word	0x50000300
 8006674:	50000700 	.word	0x50000700
 8006678:	2000000c 	.word	0x2000000c
 800667c:	053e2d63 	.word	0x053e2d63

08006680 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff f9f5 	bl	8005a7c <LL_ADC_IsDisableOngoing>
 8006692:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff f9dc 	bl	8005a56 <LL_ADC_IsEnabled>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d047      	beq.n	8006734 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d144      	bne.n	8006734 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 030d 	and.w	r3, r3, #13
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d10c      	bne.n	80066d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff f9b6 	bl	8005a2e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2203      	movs	r2, #3
 80066c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80066ca:	f7ff f8df 	bl	800588c <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066d0:	e029      	b.n	8006726 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d6:	f043 0210 	orr.w	r2, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	f043 0201 	orr.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e023      	b.n	8006736 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80066ee:	f7ff f8cd 	bl	800588c <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d914      	bls.n	8006726 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670e:	f043 0210 	orr.w	r2, r3, #16
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671a:	f043 0201 	orr.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e007      	b.n	8006736 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1dc      	bne.n	80066ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <LL_ADC_SetCommonPathInternalCh>:
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <LL_ADC_GetCommonPathInternalCh>:
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <LL_ADC_SetOffset>:
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3360      	adds	r3, #96	@ 0x60
 8006792:	461a      	mov	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4b08      	ldr	r3, [pc, #32]	@ (80067c4 <LL_ADC_SetOffset+0x44>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	03fff000 	.word	0x03fff000

080067c8 <LL_ADC_GetOffsetChannel>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3360      	adds	r3, #96	@ 0x60
 80067d6:	461a      	mov	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <LL_ADC_SetOffsetState>:
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3360      	adds	r3, #96	@ 0x60
 8006804:	461a      	mov	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	431a      	orrs	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <LL_ADC_SetOffsetSign>:
{
 800682a:	b480      	push	{r7}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3360      	adds	r3, #96	@ 0x60
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	431a      	orrs	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <LL_ADC_SetOffsetSaturation>:
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3360      	adds	r3, #96	@ 0x60
 8006870:	461a      	mov	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	431a      	orrs	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	615a      	str	r2, [r3, #20]
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <LL_ADC_INJ_GetTrigAuto>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <LL_ADC_SetChannelSamplingTime>:
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3314      	adds	r3, #20
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	0e5b      	lsrs	r3, r3, #25
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	4413      	add	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	0d1b      	lsrs	r3, r3, #20
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	2107      	movs	r1, #7
 8006906:	fa01 f303 	lsl.w	r3, r1, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	401a      	ands	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0d1b      	lsrs	r3, r3, #20
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	431a      	orrs	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <LL_ADC_SetChannelSingleDiff>:
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006948:	43db      	mvns	r3, r3
 800694a:	401a      	ands	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f003 0318 	and.w	r3, r3, #24
 8006952:	4908      	ldr	r1, [pc, #32]	@ (8006974 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006954:	40d9      	lsrs	r1, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	400b      	ands	r3, r1
 800695a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695e:	431a      	orrs	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	0007ffff 	.word	0x0007ffff

08006978 <LL_ADC_GetMultimode>:
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 031f 	and.w	r3, r3, #31
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <LL_ADC_IsEnabled>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <LL_ADC_IsEnabled+0x18>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <LL_ADC_IsEnabled+0x1a>
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_ADC_StartCalibration>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80069cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_ADC_IsCalibrationOnGoing>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a00:	d101      	bne.n	8006a06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d101      	bne.n	8006a2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_ADC_INJ_StartConversion>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <LL_ADC_INJ_IsConversionOngoing>:
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d101      	bne.n	8006a7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_ADCEx_Calibration_Start+0x1c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e04d      	b.n	8006b40 <HAL_ADCEx_Calibration_Start+0xb8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fde7 	bl	8006680 <ADC_Disable>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d136      	bne.n	8006b2a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006ac4:	f023 0302 	bic.w	r3, r3, #2
 8006ac8:	f043 0202 	orr.w	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff ff6f 	bl	80069ba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006adc:	e014      	b.n	8006b08 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d90d      	bls.n	8006b08 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af0:	f023 0312 	bic.w	r3, r3, #18
 8006af4:	f043 0210 	orr.w	r2, r3, #16
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e01b      	b.n	8006b40 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff ff6d 	bl	80069ec <LL_ADC_IsCalibrationOnGoing>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e2      	bne.n	8006ade <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	f023 0303 	bic.w	r3, r3, #3
 8006b20:	f043 0201 	orr.w	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b28:	e005      	b.n	8006b36 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2e:	f043 0210 	orr.w	r2, r3, #16
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	0004de01 	.word	0x0004de01

08006b4c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b5c:	d004      	beq.n	8006b68 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a78      	ldr	r2, [pc, #480]	@ (8006d44 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d101      	bne.n	8006b6c <HAL_ADCEx_InjectedStart_IT+0x20>
 8006b68:	4b77      	ldr	r3, [pc, #476]	@ (8006d48 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8006b6a:	e000      	b.n	8006b6e <HAL_ADCEx_InjectedStart_IT+0x22>
 8006b6c:	4b77      	ldr	r3, [pc, #476]	@ (8006d4c <HAL_ADCEx_InjectedStart_IT+0x200>)
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ff02 	bl	8006978 <LL_ADC_GetMultimode>
 8006b74:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff ff71 	bl	8006a62 <LL_ADC_INJ_IsConversionOngoing>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0d8      	b.n	8006d3c <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b94:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d107      	bne.n	8006bba <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bae:	f043 0220 	orr.w	r2, r3, #32
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e0c0      	b.n	8006d3c <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0b9      	b.n	8006d3c <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fcbf 	bl	8006554 <ADC_Enable>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 80a8 	bne.w	8006d32 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d006      	beq.n	8006bfc <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf2:	f023 0208 	bic.w	r2, r3, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60
 8006bfa:	e002      	b.n	8006c02 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006d44 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a4a      	ldr	r2, [pc, #296]	@ (8006d50 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d002      	beq.n	8006c30 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	e003      	b.n	8006c38 <HAL_ADCEx_InjectedStart_IT+0xec>
 8006c30:	4b48      	ldr	r3, [pc, #288]	@ (8006d54 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8006c32:	e001      	b.n	8006c38 <HAL_ADCEx_InjectedStart_IT+0xec>
 8006c34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d002      	beq.n	8006c46 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2260      	movs	r2, #96	@ 0x60
 8006c58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c7e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d110      	bne.n	8006caa <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0220 	bic.w	r2, r2, #32
 8006c96:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca6:	605a      	str	r2, [r3, #4]
          break;
 8006ca8:	e010      	b.n	8006ccc <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0220 	orr.w	r2, r2, #32
 8006cc8:	605a      	str	r2, [r3, #4]
          break;
 8006cca:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_ADCEx_InjectedStart_IT+0x19e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d002      	beq.n	8006ce6 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	e003      	b.n	8006cee <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8006ce8:	e001      	b.n	8006cee <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8006cea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d008      	beq.n	8006d08 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d002      	beq.n	8006d08 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b07      	cmp	r3, #7
 8006d06:	d10d      	bne.n	8006d24 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fdd5 	bl	80068bc <LL_ADC_INJ_GetTrigAuto>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d110      	bne.n	8006d3a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fe8c 	bl	8006a3a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8006d22:	e00a      	b.n	8006d3a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d30:	e003      	b.n	8006d3a <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	50000100 	.word	0x50000100
 8006d48:	50000300 	.word	0x50000300
 8006d4c:	50000700 	.word	0x50000700
 8006d50:	50000500 	.word	0x50000500
 8006d54:	50000400 	.word	0x50000400

08006d58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b0b6      	sub	sp, #216	@ 0xd8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d102      	bne.n	8006dd2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f000 bcfd 	b.w	80077cc <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d130      	bne.n	8006e4c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b09      	cmp	r3, #9
 8006df0:	d179      	bne.n	8006ee6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d010      	beq.n	8006e1c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	0e9b      	lsrs	r3, r3, #26
 8006e00:	025b      	lsls	r3, r3, #9
 8006e02:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006e0e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e1a:	e007      	b.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	0e9b      	lsrs	r3, r3, #26
 8006e22:	025b      	lsls	r3, r3, #9
 8006e24:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e32:	4b84      	ldr	r3, [pc, #528]	@ (8007044 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e48:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006e4a:	e04c      	b.n	8006ee6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11d      	bne.n	8006e90 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006e78:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e84:	e004      	b.n	8006e90 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	0e9b      	lsrs	r3, r3, #26
 8006e96:	f003 021f 	and.w	r2, r3, #31
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ebe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8007044 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fdb9 	bl	8006a62 <LL_ADC_INJ_IsConversionOngoing>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d124      	bne.n	8006f40 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d112      	bne.n	8006f26 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006f10:	055a      	lsls	r2, r3, #21
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f18:	051b      	lsls	r3, r3, #20
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	60da      	str	r2, [r3, #12]
 8006f24:	e00c      	b.n	8006f40 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006f36:	055a      	lsls	r2, r3, #21
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fd65 	bl	8006a14 <LL_ADC_REG_IsConversionOngoing>
 8006f4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fd85 	bl	8006a62 <LL_ADC_INJ_IsConversionOngoing>
 8006f58:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 822e 	bne.w	80073c2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8229 	bne.w	80073c2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d116      	bne.n	8006fae <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d108      	bne.n	8006f9c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006f98:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006f9a:	e01f      	b.n	8006fdc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006faa:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006fac:	e016      	b.n	8006fdc <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d109      	bne.n	8006fcc <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbc:	f043 0220 	orr.w	r2, r3, #32
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006fca:	e007      	b.n	8006fdc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006fda:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d110      	bne.n	8007008 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0202 	orr.w	r2, r2, #2
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	e007      	b.n	8007018 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0202 	bic.w	r2, r2, #2
 8007016:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007020:	d112      	bne.n	8007048 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	4619      	mov	r1, r3
 800702e:	f7ff fc53 	bl	80068d8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fc2b 	bl	8006896 <LL_ADC_SetSamplingTimeCommonConfig>
 8007040:	e011      	b.n	8007066 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8007042:	bf00      	nop
 8007044:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007054:	461a      	mov	r2, r3
 8007056:	f7ff fc3f 	bl	80068d8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fc18 	bl	8006896 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d022      	beq.n	80070ce <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6919      	ldr	r1, [r3, #16]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007098:	f7ff fb72 	bl	8006780 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6919      	ldr	r1, [r3, #16]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	461a      	mov	r2, r3
 80070aa:	f7ff fbbe 	bl	800682a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80070be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070c2:	e000      	b.n	80070c6 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80070c4:	2300      	movs	r3, #0
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7ff fbca 	bl	8006860 <LL_ADC_SetOffsetSaturation>
 80070cc:	e179      	b.n	80073c2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fb77 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 80070da:	4603      	mov	r3, r0
 80070dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <HAL_ADCEx_InjectedConfigChannel+0x352>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fb6c 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 80070f0:	4603      	mov	r3, r0
 80070f2:	0e9b      	lsrs	r3, r3, #26
 80070f4:	f003 021f 	and.w	r2, r3, #31
 80070f8:	e01e      	b.n	8007138 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fb61 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 8007106:	4603      	mov	r3, r0
 8007108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007110:	fa93 f3a3 	rbit	r3, r3
 8007114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800711c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8007128:	2320      	movs	r3, #32
 800712a:	e004      	b.n	8007136 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 800712c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007130:	fab3 f383 	clz	r3, r3
 8007134:	b2db      	uxtb	r3, r3
 8007136:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	0e9b      	lsrs	r3, r3, #26
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	e018      	b.n	8007182 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715c:	fa93 f3a3 	rbit	r3, r3
 8007160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8007164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800716c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8007174:	2320      	movs	r3, #32
 8007176:	e004      	b.n	8007182 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8007178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800717c:	fab3 f383 	clz	r3, r3
 8007180:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007182:	429a      	cmp	r2, r3
 8007184:	d106      	bne.n	8007194 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff fb30 	bl	80067f4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2101      	movs	r1, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fb14 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fb09 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 80071b6:	4603      	mov	r3, r0
 80071b8:	0e9b      	lsrs	r3, r3, #26
 80071ba:	f003 021f 	and.w	r2, r3, #31
 80071be:	e01e      	b.n	80071fe <HAL_ADCEx_InjectedConfigChannel+0x456>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2101      	movs	r1, #1
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fafe 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071d6:	fa93 f3a3 	rbit	r3, r3
 80071da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80071de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80071e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80071ee:	2320      	movs	r3, #32
 80071f0:	e004      	b.n	80071fc <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80071f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	0e9b      	lsrs	r3, r3, #26
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	e018      	b.n	8007248 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800722a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800722e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800723a:	2320      	movs	r3, #32
 800723c:	e004      	b.n	8007248 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800723e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007242:	fab3 f383 	clz	r3, r3
 8007246:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007248:	429a      	cmp	r2, r3
 800724a:	d106      	bne.n	800725a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2200      	movs	r2, #0
 8007252:	2101      	movs	r1, #1
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff facd 	bl	80067f4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2102      	movs	r1, #2
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fab1 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 8007266:	4603      	mov	r3, r0
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2102      	movs	r1, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff faa6 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 800727c:	4603      	mov	r3, r0
 800727e:	0e9b      	lsrs	r3, r3, #26
 8007280:	f003 021f 	and.w	r2, r3, #31
 8007284:	e01e      	b.n	80072c4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff fa9b 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 8007292:	4603      	mov	r3, r0
 8007294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800729c:	fa93 f3a3 	rbit	r3, r3
 80072a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80072a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80072ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80072b4:	2320      	movs	r3, #32
 80072b6:	e004      	b.n	80072c2 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80072b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072bc:	fab3 f383 	clz	r3, r3
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_ADCEx_InjectedConfigChannel+0x534>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	0e9b      	lsrs	r3, r3, #26
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	e014      	b.n	8007306 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072e4:	fa93 f3a3 	rbit	r3, r3
 80072e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80072ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80072f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80072f8:	2320      	movs	r3, #32
 80072fa:	e004      	b.n	8007306 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80072fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007300:	fab3 f383 	clz	r3, r3
 8007304:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007306:	429a      	cmp	r2, r3
 8007308:	d106      	bne.n	8007318 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	2102      	movs	r1, #2
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fa6e 	bl	80067f4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2103      	movs	r1, #3
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fa52 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 8007324:	4603      	mov	r3, r0
 8007326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2103      	movs	r1, #3
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fa47 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 800733a:	4603      	mov	r3, r0
 800733c:	0e9b      	lsrs	r3, r3, #26
 800733e:	f003 021f 	and.w	r2, r3, #31
 8007342:	e017      	b.n	8007374 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2103      	movs	r1, #3
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff fa3c 	bl	80067c8 <LL_ADC_GetOffsetChannel>
 8007350:	4603      	mov	r3, r0
 8007352:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007356:	fa93 f3a3 	rbit	r3, r3
 800735a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800735c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800735e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8007366:	2320      	movs	r3, #32
 8007368:	e003      	b.n	8007372 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800736a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800736c:	fab3 f383 	clz	r3, r3
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	0e9b      	lsrs	r3, r3, #26
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	e011      	b.n	80073b0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007394:	fa93 f3a3 	rbit	r3, r3
 8007398:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800739a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800739c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800739e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80073a4:	2320      	movs	r3, #32
 80073a6:	e003      	b.n	80073b0 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80073a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d106      	bne.n	80073c2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2103      	movs	r1, #3
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fa19 	bl	80067f4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fae4 	bl	8006994 <LL_ADC_IsEnabled>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 813d 	bne.w	800764e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	461a      	mov	r2, r3
 80073e2:	f7ff faa5 	bl	8006930 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	4aa2      	ldr	r2, [pc, #648]	@ (8007674 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	f040 812e 	bne.w	800764e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	0e9b      	lsrs	r3, r3, #26
 8007408:	3301      	adds	r3, #1
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b09      	cmp	r3, #9
 8007410:	bf94      	ite	ls
 8007412:	2301      	movls	r3, #1
 8007414:	2300      	movhi	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	e019      	b.n	800744e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800742c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8007432:	2320      	movs	r3, #32
 8007434:	e003      	b.n	800743e <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8007436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007438:	fab3 f383 	clz	r3, r3
 800743c:	b2db      	uxtb	r3, r3
 800743e:	3301      	adds	r3, #1
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2b09      	cmp	r3, #9
 8007446:	bf94      	ite	ls
 8007448:	2301      	movls	r3, #1
 800744a:	2300      	movhi	r3, #0
 800744c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800744e:	2b00      	cmp	r3, #0
 8007450:	d079      	beq.n	8007546 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	0e9b      	lsrs	r3, r3, #26
 8007464:	3301      	adds	r3, #1
 8007466:	069b      	lsls	r3, r3, #26
 8007468:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800746c:	e015      	b.n	800749a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007476:	fa93 f3a3 	rbit	r3, r3
 800747a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800747c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8007486:	2320      	movs	r3, #32
 8007488:	e003      	b.n	8007492 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800748a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748c:	fab3 f383 	clz	r3, r3
 8007490:	b2db      	uxtb	r3, r3
 8007492:	3301      	adds	r3, #1
 8007494:	069b      	lsls	r3, r3, #26
 8007496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_ADCEx_InjectedConfigChannel+0x712>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	0e9b      	lsrs	r3, r3, #26
 80074ac:	3301      	adds	r3, #1
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2101      	movs	r1, #1
 80074b4:	fa01 f303 	lsl.w	r3, r1, r3
 80074b8:	e017      	b.n	80074ea <HAL_ADCEx_InjectedConfigChannel+0x742>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c2:	fa93 f3a3 	rbit	r3, r3
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80074c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80074cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80074d2:	2320      	movs	r3, #32
 80074d4:	e003      	b.n	80074de <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80074d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d8:	fab3 f383 	clz	r3, r3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	3301      	adds	r3, #1
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2101      	movs	r1, #1
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	ea42 0103 	orr.w	r1, r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0e9b      	lsrs	r3, r3, #26
 8007500:	3301      	adds	r3, #1
 8007502:	f003 021f 	and.w	r2, r3, #31
 8007506:	4613      	mov	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	e018      	b.n	8007542 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	fa93 f3a3 	rbit	r3, r3
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8007528:	2320      	movs	r3, #32
 800752a:	e003      	b.n	8007534 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	fab3 f383 	clz	r3, r3
 8007532:	b2db      	uxtb	r3, r3
 8007534:	3301      	adds	r3, #1
 8007536:	f003 021f 	and.w	r2, r3, #31
 800753a:	4613      	mov	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4413      	add	r3, r2
 8007540:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007542:	430b      	orrs	r3, r1
 8007544:	e07e      	b.n	8007644 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800754e:	2b00      	cmp	r3, #0
 8007550:	d107      	bne.n	8007562 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	0e9b      	lsrs	r3, r3, #26
 8007558:	3301      	adds	r3, #1
 800755a:	069b      	lsls	r3, r3, #26
 800755c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007560:	e015      	b.n	800758e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	fa93 f3a3 	rbit	r3, r3
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800757a:	2320      	movs	r3, #32
 800757c:	e003      	b.n	8007586 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	fab3 f383 	clz	r3, r3
 8007584:	b2db      	uxtb	r3, r3
 8007586:	3301      	adds	r3, #1
 8007588:	069b      	lsls	r3, r3, #26
 800758a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <HAL_ADCEx_InjectedConfigChannel+0x806>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	0e9b      	lsrs	r3, r3, #26
 80075a0:	3301      	adds	r3, #1
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2101      	movs	r1, #1
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	e017      	b.n	80075de <HAL_ADCEx_InjectedConfigChannel+0x836>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	fa93 f3a3 	rbit	r3, r3
 80075ba:	61bb      	str	r3, [r7, #24]
  return result;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80075c6:	2320      	movs	r3, #32
 80075c8:	e003      	b.n	80075d2 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	fab3 f383 	clz	r3, r3
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	3301      	adds	r3, #1
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f303 	lsl.w	r3, r1, r3
 80075de:	ea42 0103 	orr.w	r1, r2, r3
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10d      	bne.n	800760a <HAL_ADCEx_InjectedConfigChannel+0x862>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	0e9b      	lsrs	r3, r3, #26
 80075f4:	3301      	adds	r3, #1
 80075f6:	f003 021f 	and.w	r2, r3, #31
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	3b1e      	subs	r3, #30
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007608:	e01b      	b.n	8007642 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	fa93 f3a3 	rbit	r3, r3
 8007616:	60fb      	str	r3, [r7, #12]
  return result;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8007622:	2320      	movs	r3, #32
 8007624:	e003      	b.n	800762e <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	fab3 f383 	clz	r3, r3
 800762c:	b2db      	uxtb	r3, r3
 800762e:	3301      	adds	r3, #1
 8007630:	f003 021f 	and.w	r2, r3, #31
 8007634:	4613      	mov	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	3b1e      	subs	r3, #30
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007642:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007648:	4619      	mov	r1, r3
 800764a:	f7ff f945 	bl	80068d8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b09      	ldr	r3, [pc, #36]	@ (8007678 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80b2 	beq.w	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007664:	d004      	beq.n	8007670 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a04      	ldr	r2, [pc, #16]	@ (800767c <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8007670:	4b03      	ldr	r3, [pc, #12]	@ (8007680 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8007672:	e008      	b.n	8007686 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8007674:	407f0000 	.word	0x407f0000
 8007678:	80080000 	.word	0x80080000
 800767c:	50000100 	.word	0x50000100
 8007680:	50000300 	.word	0x50000300
 8007684:	4b53      	ldr	r3, [pc, #332]	@ (80077d4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f86c 	bl	8006764 <LL_ADC_GetCommonPathInternalCh>
 800768c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a50      	ldr	r2, [pc, #320]	@ (80077d8 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4f      	ldr	r2, [pc, #316]	@ (80077dc <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d139      	bne.n	8007718 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80076a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d133      	bne.n	8007718 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076b8:	d004      	beq.n	80076c4 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a48      	ldr	r2, [pc, #288]	@ (80077e0 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d17a      	bne.n	80077ba <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076cc:	d004      	beq.n	80076d8 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a44      	ldr	r2, [pc, #272]	@ (80077e4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <HAL_ADCEx_InjectedConfigChannel+0x934>
 80076d8:	4a43      	ldr	r2, [pc, #268]	@ (80077e8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80076da:	e000      	b.n	80076de <HAL_ADCEx_InjectedConfigChannel+0x936>
 80076dc:	4a3d      	ldr	r2, [pc, #244]	@ (80077d4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80076de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7ff f828 	bl	800673e <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80076ee:	4b3f      	ldr	r3, [pc, #252]	@ (80077ec <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	4a3e      	ldr	r2, [pc, #248]	@ (80077f0 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	099a      	lsrs	r2, r3, #6
 80076fc:	4613      	mov	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8007706:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8007708:	e002      	b.n	8007710 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3b01      	subs	r3, #1
 800770e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f9      	bne.n	800770a <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007716:	e050      	b.n	80077ba <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a35      	ldr	r2, [pc, #212]	@ (80077f4 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d125      	bne.n	800776e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11f      	bne.n	800776e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a2c      	ldr	r2, [pc, #176]	@ (80077e4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d104      	bne.n	8007742 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a2e      	ldr	r2, [pc, #184]	@ (80077f8 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d03d      	beq.n	80077be <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800774a:	d004      	beq.n	8007756 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a24      	ldr	r2, [pc, #144]	@ (80077e4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d101      	bne.n	800775a <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8007756:	4a24      	ldr	r2, [pc, #144]	@ (80077e8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8007758:	e000      	b.n	800775c <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800775a:	4a1e      	ldr	r2, [pc, #120]	@ (80077d4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800775c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe ffe9 	bl	800673e <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800776c:	e027      	b.n	80077be <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a22      	ldr	r2, [pc, #136]	@ (80077fc <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d123      	bne.n	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800777c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11d      	bne.n	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a16      	ldr	r2, [pc, #88]	@ (80077e4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d018      	beq.n	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007796:	d004      	beq.n	80077a2 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80077a2:	4a11      	ldr	r2, [pc, #68]	@ (80077e8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80077a4:	e000      	b.n	80077a8 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80077a6:	4a0b      	ldr	r2, [pc, #44]	@ (80077d4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80077a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fe ffc3 	bl	800673e <LL_ADC_SetCommonPathInternalCh>
 80077b8:	e002      	b.n	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077be:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80077c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	37d8      	adds	r7, #216	@ 0xd8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	50000700 	.word	0x50000700
 80077d8:	c3210000 	.word	0xc3210000
 80077dc:	90c00010 	.word	0x90c00010
 80077e0:	50000600 	.word	0x50000600
 80077e4:	50000100 	.word	0x50000100
 80077e8:	50000300 	.word	0x50000300
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	053e2d63 	.word	0x053e2d63
 80077f4:	c7520000 	.word	0xc7520000
 80077f8:	50000500 	.word	0x50000500
 80077fc:	cb840000 	.word	0xcb840000

08007800 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b0a1      	sub	sp, #132	@ 0x84
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800781a:	2302      	movs	r3, #2
 800781c:	e0e7      	b.n	80079ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007826:	2300      	movs	r3, #0
 8007828:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800782a:	2300      	movs	r3, #0
 800782c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007836:	d102      	bne.n	800783e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007838:	4b6f      	ldr	r3, [pc, #444]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	e009      	b.n	8007852 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a6e      	ldr	r2, [pc, #440]	@ (80079fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d102      	bne.n	800784e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007848:	4b6d      	ldr	r3, [pc, #436]	@ (8007a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	e001      	b.n	8007852 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10b      	bne.n	8007870 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0be      	b.n	80079ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff f8ce 	bl	8006a14 <LL_ADC_REG_IsConversionOngoing>
 8007878:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff f8c8 	bl	8006a14 <LL_ADC_REG_IsConversionOngoing>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 80a0 	bne.w	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800788c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 809c 	bne.w	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800789c:	d004      	beq.n	80078a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a55      	ldr	r2, [pc, #340]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d101      	bne.n	80078ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80078a8:	4b56      	ldr	r3, [pc, #344]	@ (8007a04 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80078aa:	e000      	b.n	80078ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80078ac:	4b56      	ldr	r3, [pc, #344]	@ (8007a08 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80078ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d04b      	beq.n	8007950 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80078b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6859      	ldr	r1, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078ca:	035b      	lsls	r3, r3, #13
 80078cc:	430b      	orrs	r3, r1
 80078ce:	431a      	orrs	r2, r3
 80078d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078dc:	d004      	beq.n	80078e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a45      	ldr	r2, [pc, #276]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10f      	bne.n	8007908 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80078e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80078ec:	f7ff f852 	bl	8006994 <LL_ADC_IsEnabled>
 80078f0:	4604      	mov	r4, r0
 80078f2:	4841      	ldr	r0, [pc, #260]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078f4:	f7ff f84e 	bl	8006994 <LL_ADC_IsEnabled>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4323      	orrs	r3, r4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e012      	b.n	800792e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007908:	483c      	ldr	r0, [pc, #240]	@ (80079fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800790a:	f7ff f843 	bl	8006994 <LL_ADC_IsEnabled>
 800790e:	4604      	mov	r4, r0
 8007910:	483b      	ldr	r0, [pc, #236]	@ (8007a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007912:	f7ff f83f 	bl	8006994 <LL_ADC_IsEnabled>
 8007916:	4603      	mov	r3, r0
 8007918:	431c      	orrs	r4, r3
 800791a:	483c      	ldr	r0, [pc, #240]	@ (8007a0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800791c:	f7ff f83a 	bl	8006994 <LL_ADC_IsEnabled>
 8007920:	4603      	mov	r3, r0
 8007922:	4323      	orrs	r3, r4
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d056      	beq.n	80079e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800793a:	f023 030f 	bic.w	r3, r3, #15
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	6811      	ldr	r1, [r2, #0]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	6892      	ldr	r2, [r2, #8]
 8007946:	430a      	orrs	r2, r1
 8007948:	431a      	orrs	r2, r3
 800794a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800794c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800794e:	e047      	b.n	80079e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800795a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007964:	d004      	beq.n	8007970 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a23      	ldr	r2, [pc, #140]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10f      	bne.n	8007990 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007970:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007974:	f7ff f80e 	bl	8006994 <LL_ADC_IsEnabled>
 8007978:	4604      	mov	r4, r0
 800797a:	481f      	ldr	r0, [pc, #124]	@ (80079f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800797c:	f7ff f80a 	bl	8006994 <LL_ADC_IsEnabled>
 8007980:	4603      	mov	r3, r0
 8007982:	4323      	orrs	r3, r4
 8007984:	2b00      	cmp	r3, #0
 8007986:	bf0c      	ite	eq
 8007988:	2301      	moveq	r3, #1
 800798a:	2300      	movne	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e012      	b.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007990:	481a      	ldr	r0, [pc, #104]	@ (80079fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007992:	f7fe ffff 	bl	8006994 <LL_ADC_IsEnabled>
 8007996:	4604      	mov	r4, r0
 8007998:	4819      	ldr	r0, [pc, #100]	@ (8007a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800799a:	f7fe fffb 	bl	8006994 <LL_ADC_IsEnabled>
 800799e:	4603      	mov	r3, r0
 80079a0:	431c      	orrs	r4, r3
 80079a2:	481a      	ldr	r0, [pc, #104]	@ (8007a0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80079a4:	f7fe fff6 	bl	8006994 <LL_ADC_IsEnabled>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4323      	orrs	r3, r4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d012      	beq.n	80079e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80079ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80079c2:	f023 030f 	bic.w	r3, r3, #15
 80079c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80079c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079ca:	e009      	b.n	80079e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d0:	f043 0220 	orr.w	r2, r3, #32
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80079de:	e000      	b.n	80079e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80079ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3784      	adds	r7, #132	@ 0x84
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd90      	pop	{r4, r7, pc}
 80079f6:	bf00      	nop
 80079f8:	50000100 	.word	0x50000100
 80079fc:	50000400 	.word	0x50000400
 8007a00:	50000500 	.word	0x50000500
 8007a04:	50000300 	.word	0x50000300
 8007a08:	50000700 	.word	0x50000700
 8007a0c:	50000600 	.word	0x50000600

08007a10 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e023      	b.n	8007a6a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fc ff80 	bl	800493c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007a90:	4013      	ands	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aa6:	4a04      	ldr	r2, [pc, #16]	@ (8007ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	60d3      	str	r3, [r2, #12]
}
 8007aac:	bf00      	nop
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	e000ed00 	.word	0xe000ed00

08007abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ac0:	4b04      	ldr	r3, [pc, #16]	@ (8007ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	0a1b      	lsrs	r3, r3, #8
 8007ac6:	f003 0307 	and.w	r3, r3, #7
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	db0b      	blt.n	8007b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	f003 021f 	and.w	r2, r3, #31
 8007af0:	4907      	ldr	r1, [pc, #28]	@ (8007b10 <__NVIC_EnableIRQ+0x38>)
 8007af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	2001      	movs	r0, #1
 8007afa:	fa00 f202 	lsl.w	r2, r0, r2
 8007afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000e100 	.word	0xe000e100

08007b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	db0a      	blt.n	8007b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	490c      	ldr	r1, [pc, #48]	@ (8007b60 <__NVIC_SetPriority+0x4c>)
 8007b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b32:	0112      	lsls	r2, r2, #4
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	440b      	add	r3, r1
 8007b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b3c:	e00a      	b.n	8007b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4908      	ldr	r1, [pc, #32]	@ (8007b64 <__NVIC_SetPriority+0x50>)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	0112      	lsls	r2, r2, #4
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	440b      	add	r3, r1
 8007b52:	761a      	strb	r2, [r3, #24]
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	e000e100 	.word	0xe000e100
 8007b64:	e000ed00 	.word	0xe000ed00

08007b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b089      	sub	sp, #36	@ 0x24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f1c3 0307 	rsb	r3, r3, #7
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	bf28      	it	cs
 8007b86:	2304      	movcs	r3, #4
 8007b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	2b06      	cmp	r3, #6
 8007b90:	d902      	bls.n	8007b98 <NVIC_EncodePriority+0x30>
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	3b03      	subs	r3, #3
 8007b96:	e000      	b.n	8007b9a <NVIC_EncodePriority+0x32>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	401a      	ands	r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bba:	43d9      	mvns	r1, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc0:	4313      	orrs	r3, r2
         );
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3724      	adds	r7, #36	@ 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007be0:	d301      	bcc.n	8007be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007be2:	2301      	movs	r3, #1
 8007be4:	e00f      	b.n	8007c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007be6:	4a0a      	ldr	r2, [pc, #40]	@ (8007c10 <SysTick_Config+0x40>)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bee:	210f      	movs	r1, #15
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	f7ff ff8e 	bl	8007b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <SysTick_Config+0x40>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bfe:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <SysTick_Config+0x40>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010

08007c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff29 	bl	8007a74 <__NVIC_SetPriorityGrouping>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c38:	f7ff ff40 	bl	8007abc <__NVIC_GetPriorityGrouping>
 8007c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	6978      	ldr	r0, [r7, #20]
 8007c44:	f7ff ff90 	bl	8007b68 <NVIC_EncodePriority>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff ff5f 	bl	8007b14 <__NVIC_SetPriority>
}
 8007c56:	bf00      	nop
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	4603      	mov	r3, r0
 8007c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff ff33 	bl	8007ad8 <__NVIC_EnableIRQ>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff ffa4 	bl	8007bd0 <SysTick_Config>
 8007c88:	4603      	mov	r3, r0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e08d      	b.n	8007dc2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	4b47      	ldr	r3, [pc, #284]	@ (8007dcc <HAL_DMA_Init+0x138>)
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d80f      	bhi.n	8007cd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b45      	ldr	r3, [pc, #276]	@ (8007dd0 <HAL_DMA_Init+0x13c>)
 8007cba:	4413      	add	r3, r2
 8007cbc:	4a45      	ldr	r2, [pc, #276]	@ (8007dd4 <HAL_DMA_Init+0x140>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	009a      	lsls	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a42      	ldr	r2, [pc, #264]	@ (8007dd8 <HAL_DMA_Init+0x144>)
 8007cce:	641a      	str	r2, [r3, #64]	@ 0x40
 8007cd0:	e00e      	b.n	8007cf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4b40      	ldr	r3, [pc, #256]	@ (8007ddc <HAL_DMA_Init+0x148>)
 8007cda:	4413      	add	r3, r2
 8007cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8007dd4 <HAL_DMA_Init+0x140>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	091b      	lsrs	r3, r3, #4
 8007ce4:	009a      	lsls	r2, r3, #2
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a3c      	ldr	r2, [pc, #240]	@ (8007de0 <HAL_DMA_Init+0x14c>)
 8007cee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa2c 	bl	80081a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d50:	d102      	bne.n	8007d58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d6c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d010      	beq.n	8007d98 <HAL_DMA_Init+0x104>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d80c      	bhi.n	8007d98 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa4c 	bl	800821c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	e008      	b.n	8007daa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40020407 	.word	0x40020407
 8007dd0:	bffdfff8 	.word	0xbffdfff8
 8007dd4:	cccccccd 	.word	0xcccccccd
 8007dd8:	40020000 	.word	0x40020000
 8007ddc:	bffdfbf8 	.word	0xbffdfbf8
 8007de0:	40020400 	.word	0x40020400

08007de4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_DMA_Start_IT+0x20>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e066      	b.n	8007ed2 <HAL_DMA_Start_IT+0xee>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d155      	bne.n	8007ec4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f970 	bl	8008122 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 020e 	orr.w	r2, r2, #14
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e00f      	b.n	8007e7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0204 	bic.w	r2, r2, #4
 8007e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 020a 	orr.w	r2, r2, #10
 8007e7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e005      	b.n	8007ed0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d00d      	beq.n	8007f0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
 8007f0c:	e047      	b.n	8007f9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 020e 	bic.w	r2, r2, #14
 8007f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f42:	f003 021f 	and.w	r2, r3, #31
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00c      	beq.n	8007f7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
    }
  }
  return status;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	2204      	movs	r2, #4
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d026      	beq.n	8008022 <HAL_DMA_IRQHandler+0x7a>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d021      	beq.n	8008022 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d107      	bne.n	8007ffc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0204 	bic.w	r2, r2, #4
 8007ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008000:	f003 021f 	and.w	r2, r3, #31
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	2104      	movs	r1, #4
 800800a:	fa01 f202 	lsl.w	r2, r1, r2
 800800e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	2b00      	cmp	r3, #0
 8008016:	d071      	beq.n	80080fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008020:	e06c      	b.n	80080fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2202      	movs	r2, #2
 800802c:	409a      	lsls	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02e      	beq.n	8008094 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d029      	beq.n	8008094 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10b      	bne.n	8008066 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 020a 	bic.w	r2, r2, #10
 800805c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806a:	f003 021f 	and.w	r2, r3, #31
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	2102      	movs	r1, #2
 8008074:	fa01 f202 	lsl.w	r2, r1, r2
 8008078:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d038      	beq.n	80080fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008092:	e033      	b.n	80080fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2208      	movs	r2, #8
 800809e:	409a      	lsls	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d02a      	beq.n	80080fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d025      	beq.n	80080fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 020e 	bic.w	r2, r2, #14
 80080c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c6:	f003 021f 	and.w	r2, r3, #31
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ce:	2101      	movs	r1, #1
 80080d0:	fa01 f202 	lsl.w	r2, r1, r2
 80080d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
}
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008114:	b2db      	uxtb	r3, r3
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008138:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800814a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	f003 021f 	and.w	r2, r3, #31
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008158:	2101      	movs	r1, #1
 800815a:	fa01 f202 	lsl.w	r2, r1, r2
 800815e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	2b10      	cmp	r3, #16
 800816e:	d108      	bne.n	8008182 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008180:	e007      	b.n	8008192 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	60da      	str	r2, [r3, #12]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	4b16      	ldr	r3, [pc, #88]	@ (8008208 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d802      	bhi.n	80081ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80081b4:	4b15      	ldr	r3, [pc, #84]	@ (800820c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e001      	b.n	80081be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80081ba:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80081bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	3b08      	subs	r3, #8
 80081ca:	4a12      	ldr	r2, [pc, #72]	@ (8008214 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80081cc:	fba2 2303 	umull	r2, r3, r2, r3
 80081d0:	091b      	lsrs	r3, r3, #4
 80081d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d8:	089b      	lsrs	r3, r3, #2
 80081da:	009a      	lsls	r2, r3, #2
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a0b      	ldr	r2, [pc, #44]	@ (8008218 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80081ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	2201      	movs	r2, #1
 80081f4:	409a      	lsls	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40020407 	.word	0x40020407
 800820c:	40020800 	.word	0x40020800
 8008210:	40020820 	.word	0x40020820
 8008214:	cccccccd 	.word	0xcccccccd
 8008218:	40020880 	.word	0x40020880

0800821c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a08      	ldr	r2, [pc, #32]	@ (8008260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800823e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	f003 031f 	and.w	r3, r3, #31
 8008248:	2201      	movs	r2, #1
 800824a:	409a      	lsls	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	1000823f 	.word	0x1000823f
 8008260:	40020940 	.word	0x40020940

08008264 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e147      	b.n	8008506 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fc fb76 	bl	800497c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0210 	bic.w	r2, r2, #16
 800829e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082a0:	f7fd faf4 	bl	800588c <HAL_GetTick>
 80082a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80082a6:	e012      	b.n	80082ce <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80082a8:	f7fd faf0 	bl	800588c <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b0a      	cmp	r3, #10
 80082b4:	d90b      	bls.n	80082ce <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ba:	f043 0201 	orr.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2203      	movs	r2, #3
 80082c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e11b      	b.n	8008506 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d0e5      	beq.n	80082a8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082ec:	f7fd face 	bl	800588c <HAL_GetTick>
 80082f0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80082f2:	e012      	b.n	800831a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80082f4:	f7fd faca 	bl	800588c <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b0a      	cmp	r3, #10
 8008300:	d90b      	bls.n	800831a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008306:	f043 0201 	orr.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2203      	movs	r2, #3
 8008312:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e0f5      	b.n	8008506 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0e5      	beq.n	80082f4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0202 	orr.w	r2, r2, #2
 8008336:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a74      	ldr	r2, [pc, #464]	@ (8008510 <HAL_FDCAN_Init+0x2ac>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d103      	bne.n	800834a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008342:	4a74      	ldr	r2, [pc, #464]	@ (8008514 <HAL_FDCAN_Init+0x2b0>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7c1b      	ldrb	r3, [r3, #16]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d108      	bne.n	8008364 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008360:	619a      	str	r2, [r3, #24]
 8008362:	e007      	b.n	8008374 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008372:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7c5b      	ldrb	r3, [r3, #17]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d108      	bne.n	800838e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800838a:	619a      	str	r2, [r3, #24]
 800838c:	e007      	b.n	800839e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800839c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7c9b      	ldrb	r3, [r3, #18]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d108      	bne.n	80083b8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083b4:	619a      	str	r2, [r3, #24]
 80083b6:	e007      	b.n	80083c8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083c6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80083ec:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0210 	bic.w	r2, r2, #16
 80083fc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d108      	bne.n	8008418 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0204 	orr.w	r2, r2, #4
 8008414:	619a      	str	r2, [r3, #24]
 8008416:	e02c      	b.n	8008472 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d028      	beq.n	8008472 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d01c      	beq.n	8008462 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008436:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0210 	orr.w	r2, r2, #16
 8008446:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d110      	bne.n	8008472 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0220 	orr.w	r2, r2, #32
 800845e:	619a      	str	r2, [r3, #24]
 8008460:	e007      	b.n	8008472 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0220 	orr.w	r2, r2, #32
 8008470:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	3b01      	subs	r3, #1
 8008478:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	3b01      	subs	r3, #1
 8008480:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008482:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800848a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	3b01      	subs	r3, #1
 8008494:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800849a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800849c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084a6:	d115      	bne.n	80084d4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	3b01      	subs	r3, #1
 80084b4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084b6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	3b01      	subs	r3, #1
 80084be:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80084c0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c8:	3b01      	subs	r3, #1
 80084ca:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80084d0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80084d2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fc56 	bl	8008d9c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40006400 	.word	0x40006400
 8008514:	40006500 	.word	0x40006500

08008518 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008528:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d002      	beq.n	8008536 <HAL_FDCAN_ConfigFilter+0x1e>
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d13d      	bne.n	80085b2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d119      	bne.n	8008572 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800854a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008552:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e01d      	b.n	80085ae <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	075a      	lsls	r2, r3, #29
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	079a      	lsls	r2, r3, #30
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	3304      	adds	r3, #4
 80085a6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e006      	b.n	80085c0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b6:	f043 0202 	orr.w	r2, r3, #2
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d110      	bne.n	8008602 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0201 	bic.w	r2, r2, #1
 80085f6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	e006      	b.n	8008610 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008606:	f043 0204 	orr.w	r2, r3, #4
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
  }
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d12c      	bne.n	800868e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800863c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008648:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e023      	b.n	800869c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fc02 	bl	8008e74 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2101      	movs	r1, #1
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	fa01 f202 	lsl.w	r2, r1, r2
 800867c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008680:	2201      	movs	r2, #1
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	409a      	lsls	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e006      	b.n	800869c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008692:	f043 0208 	orr.w	r2, r3, #8
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
  }
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b08b      	sub	sp, #44	@ 0x2c
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80086bc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80086be:	7efb      	ldrb	r3, [r7, #27]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	f040 80e8 	bne.w	8008896 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b40      	cmp	r3, #64	@ 0x40
 80086ca:	d137      	bne.n	800873c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d107      	bne.n	80086ec <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e0db      	b.n	80088a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10a      	bne.n	8008714 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	0a5b      	lsrs	r3, r3, #9
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008710:	2301      	movs	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4413      	add	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	440b      	add	r3, r1
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
 800873a:	e036      	b.n	80087aa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2b00      	cmp	r3, #0
 800874a:	d107      	bne.n	800875c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008750:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e0a3      	b.n	80088a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008764:	0e1b      	lsrs	r3, r3, #24
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b01      	cmp	r3, #1
 800876c:	d10a      	bne.n	8008784 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008780:	2301      	movs	r3, #1
 8008782:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	4613      	mov	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4413      	add	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	440b      	add	r3, r1
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	0c9b      	lsrs	r3, r3, #18
 80087c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e005      	b.n	80087da <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	3304      	adds	r3, #4
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	f003 020f 	and.w	r2, r3, #15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	0fda      	lsrs	r2, r3, #31
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	3304      	adds	r3, #4
 8008844:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800884a:	2300      	movs	r3, #0
 800884c:	623b      	str	r3, [r7, #32]
 800884e:	e00a      	b.n	8008866 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	441a      	add	r2, r3
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	440b      	add	r3, r1
 800885c:	7812      	ldrb	r2, [r2, #0]
 800885e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	3301      	adds	r3, #1
 8008864:	623b      	str	r3, [r7, #32]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4a11      	ldr	r2, [pc, #68]	@ (80088b0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800886c:	5cd3      	ldrb	r3, [r2, r3]
 800886e:	461a      	mov	r2, r3
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	4293      	cmp	r3, r2
 8008874:	d3ec      	bcc.n	8008850 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d105      	bne.n	8008888 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8008886:	e004      	b.n	8008892 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e006      	b.n	80088a4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800889a:	f043 0208 	orr.w	r2, r3, #8
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
  }
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	372c      	adds	r7, #44	@ 0x2c
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	0800d774 	.word	0x0800d774

080088b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088c6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d003      	beq.n	80088d6 <HAL_FDCAN_ActivateNotification+0x22>
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	f040 80c8 	bne.w	8008a66 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088dc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d03b      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d031      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	d027      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d01d      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	d013      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00c      	beq.n	800897a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d107      	bne.n	800897a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0201 	orr.w	r2, r2, #1
 8008978:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d13b      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d131      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d127      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11d      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d113      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00c      	beq.n	8008a16 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f042 0202 	orr.w	r2, r2, #2
 8008a14:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e006      	b.n	8008a74 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6a:	f043 0202 	orr.w	r2, r3, #2
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
  }
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08c      	sub	sp, #48	@ 0x30
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8008a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008acc:	4013      	ands	r3, r2
 8008ace:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8008ada:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008af2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	4013      	ands	r3, r2
 8008afe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b06:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2240      	movs	r2, #64	@ 0x40
 8008b2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f916 	bl	8008d5e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d019      	beq.n	8008b70 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d014      	beq.n	8008b70 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b4e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008b68:	6939      	ldr	r1, [r7, #16]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f8d8 	bl	8008d20 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b7c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f8a2 	bl	8008cca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f8 fdce 	bl	8001738 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f897 	bl	8008ce0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00c      	beq.n	8008bd6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d007      	beq.n	8008bd6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f890 	bl	8008cf6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d018      	beq.n	8008c12 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d013      	beq.n	8008c12 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008bf2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2280      	movs	r2, #128	@ 0x80
 8008c08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f87c 	bl	8008d0a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f880 	bl	8008d36 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00c      	beq.n	8008c5a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008c52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f878 	bl	8008d4a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00f      	beq.n	8008c84 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008c76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f876 	bl	8008d86 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d009      	beq.n	8008cb4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6a3a      	ldr	r2, [r7, #32]
 8008ca6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f858 	bl	8008d72 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	3730      	adds	r7, #48	@ 0x30
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008d2a:	bf00      	nop
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008da4:	4b30      	ldr	r3, [pc, #192]	@ (8008e68 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008da6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2f      	ldr	r2, [pc, #188]	@ (8008e6c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d103      	bne.n	8008dba <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008db8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008e70 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d103      	bne.n	8008dcc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8008dca:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dda:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de2:	041a      	lsls	r2, r3, #16
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e00:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e08:	061a      	lsls	r2, r3, #24
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e005      	b.n	8008e4e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3f3      	bcc.n	8008e42 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	4000a400 	.word	0x4000a400
 8008e6c:	40006800 	.word	0x40006800
 8008e70:	40006c00 	.word	0x40006c00

08008e74 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b089      	sub	sp, #36	@ 0x24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008e92:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	e00a      	b.n	8008eb6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008ea8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008eae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eb4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008ec0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008ec6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008ecc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	4413      	add	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	440b      	add	r3, r1
 8008ee8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	3304      	adds	r3, #4
 8008f00:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e020      	b.n	8008f4a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	3303      	adds	r3, #3
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	3302      	adds	r3, #2
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f20:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	3301      	adds	r3, #1
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	440b      	add	r3, r1
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008f2e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	440a      	add	r2, r1
 8008f36:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008f38:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	3304      	adds	r3, #4
 8008f42:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	3304      	adds	r3, #4
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	4a06      	ldr	r2, [pc, #24]	@ (8008f68 <FDCAN_CopyMessageToRAM+0xf4>)
 8008f50:	5cd3      	ldrb	r3, [r2, r3]
 8008f52:	461a      	mov	r2, r3
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d3d6      	bcc.n	8008f08 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	3724      	adds	r7, #36	@ 0x24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	0800d774 	.word	0x0800d774

08008f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008f7a:	e15a      	b.n	8009232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	2101      	movs	r1, #1
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	fa01 f303 	lsl.w	r3, r1, r3
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 814c 	beq.w	800922c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d005      	beq.n	8008fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d130      	bne.n	800900e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	43db      	mvns	r3, r3
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	091b      	lsrs	r3, r3, #4
 8008ff8:	f003 0201 	and.w	r2, r3, #1
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	2b03      	cmp	r3, #3
 8009018:	d017      	beq.n	800904a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	2203      	movs	r2, #3
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43db      	mvns	r3, r3
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4013      	ands	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d123      	bne.n	800909e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	08da      	lsrs	r2, r3, #3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3208      	adds	r2, #8
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	220f      	movs	r2, #15
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	43db      	mvns	r3, r3
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4013      	ands	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	fa02 f303 	lsl.w	r3, r2, r3
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4313      	orrs	r3, r2
 800908e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	08da      	lsrs	r2, r3, #3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3208      	adds	r2, #8
 8009098:	6939      	ldr	r1, [r7, #16]
 800909a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	2203      	movs	r2, #3
 80090aa:	fa02 f303 	lsl.w	r3, r2, r3
 80090ae:	43db      	mvns	r3, r3
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4013      	ands	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f003 0203 	and.w	r2, r3, #3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80a6 	beq.w	800922c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090e0:	4b5b      	ldr	r3, [pc, #364]	@ (8009250 <HAL_GPIO_Init+0x2e4>)
 80090e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e4:	4a5a      	ldr	r2, [pc, #360]	@ (8009250 <HAL_GPIO_Init+0x2e4>)
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80090ec:	4b58      	ldr	r3, [pc, #352]	@ (8009250 <HAL_GPIO_Init+0x2e4>)
 80090ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	60bb      	str	r3, [r7, #8]
 80090f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090f8:	4a56      	ldr	r2, [pc, #344]	@ (8009254 <HAL_GPIO_Init+0x2e8>)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	089b      	lsrs	r3, r3, #2
 80090fe:	3302      	adds	r3, #2
 8009100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	220f      	movs	r2, #15
 8009110:	fa02 f303 	lsl.w	r3, r2, r3
 8009114:	43db      	mvns	r3, r3
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4013      	ands	r3, r2
 800911a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009122:	d01f      	beq.n	8009164 <HAL_GPIO_Init+0x1f8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a4c      	ldr	r2, [pc, #304]	@ (8009258 <HAL_GPIO_Init+0x2ec>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d019      	beq.n	8009160 <HAL_GPIO_Init+0x1f4>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a4b      	ldr	r2, [pc, #300]	@ (800925c <HAL_GPIO_Init+0x2f0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <HAL_GPIO_Init+0x1f0>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a4a      	ldr	r2, [pc, #296]	@ (8009260 <HAL_GPIO_Init+0x2f4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00d      	beq.n	8009158 <HAL_GPIO_Init+0x1ec>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a49      	ldr	r2, [pc, #292]	@ (8009264 <HAL_GPIO_Init+0x2f8>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d007      	beq.n	8009154 <HAL_GPIO_Init+0x1e8>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a48      	ldr	r2, [pc, #288]	@ (8009268 <HAL_GPIO_Init+0x2fc>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d101      	bne.n	8009150 <HAL_GPIO_Init+0x1e4>
 800914c:	2305      	movs	r3, #5
 800914e:	e00a      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 8009150:	2306      	movs	r3, #6
 8009152:	e008      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 8009154:	2304      	movs	r3, #4
 8009156:	e006      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 8009158:	2303      	movs	r3, #3
 800915a:	e004      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 800915c:	2302      	movs	r3, #2
 800915e:	e002      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <HAL_GPIO_Init+0x1fa>
 8009164:	2300      	movs	r3, #0
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	f002 0203 	and.w	r2, r2, #3
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	4093      	lsls	r3, r2
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009176:	4937      	ldr	r1, [pc, #220]	@ (8009254 <HAL_GPIO_Init+0x2e8>)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	3302      	adds	r3, #2
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009184:	4b39      	ldr	r3, [pc, #228]	@ (800926c <HAL_GPIO_Init+0x300>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	43db      	mvns	r3, r3
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4013      	ands	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80091a8:	4a30      	ldr	r2, [pc, #192]	@ (800926c <HAL_GPIO_Init+0x300>)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80091ae:	4b2f      	ldr	r3, [pc, #188]	@ (800926c <HAL_GPIO_Init+0x300>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	43db      	mvns	r3, r3
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4013      	ands	r3, r2
 80091bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80091d2:	4a26      	ldr	r2, [pc, #152]	@ (800926c <HAL_GPIO_Init+0x300>)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80091d8:	4b24      	ldr	r3, [pc, #144]	@ (800926c <HAL_GPIO_Init+0x300>)
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	43db      	mvns	r3, r3
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4013      	ands	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <HAL_GPIO_Init+0x300>)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009202:	4b1a      	ldr	r3, [pc, #104]	@ (800926c <HAL_GPIO_Init+0x300>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	43db      	mvns	r3, r3
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4013      	ands	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009226:	4a11      	ldr	r2, [pc, #68]	@ (800926c <HAL_GPIO_Init+0x300>)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	3301      	adds	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	f47f ae9d 	bne.w	8008f7c <HAL_GPIO_Init+0x10>
  }
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	40021000 	.word	0x40021000
 8009254:	40010000 	.word	0x40010000
 8009258:	48000400 	.word	0x48000400
 800925c:	48000800 	.word	0x48000800
 8009260:	48000c00 	.word	0x48000c00
 8009264:	48001000 	.word	0x48001000
 8009268:	48001400 	.word	0x48001400
 800926c:	40010400 	.word	0x40010400

08009270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
 800927c:	4613      	mov	r3, r2
 800927e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009280:	787b      	ldrb	r3, [r7, #1]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009286:	887a      	ldrh	r2, [r7, #2]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800928c:	e002      	b.n	8009294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800928e:	887a      	ldrh	r2, [r7, #2]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80092aa:	4b08      	ldr	r3, [pc, #32]	@ (80092cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	4013      	ands	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092b6:	4a05      	ldr	r2, [pc, #20]	@ (80092cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f806 	bl	80092d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40010400 	.word	0x40010400

080092d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e08d      	b.n	8009414 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7fb fba9 	bl	8004a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2224      	movs	r2, #36	@ 0x24
 8009316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0201 	bic.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009336:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009346:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d107      	bne.n	8009360 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800935c:	609a      	str	r2, [r3, #8]
 800935e:	e006      	b.n	800936e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800936c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d108      	bne.n	8009388 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009384:	605a      	str	r2, [r3, #4]
 8009386:	e007      	b.n	8009398 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009396:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69d9      	ldr	r1, [r3, #28]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1a      	ldr	r2, [r3, #32]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0201 	orr.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	461a      	mov	r2, r3
 8009428:	460b      	mov	r3, r1
 800942a:	817b      	strh	r3, [r7, #10]
 800942c:	4613      	mov	r3, r2
 800942e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b20      	cmp	r3, #32
 800943e:	f040 80ef 	bne.w	8009620 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800944c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009450:	d101      	bne.n	8009456 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8009452:	2302      	movs	r3, #2
 8009454:	e0e5      	b.n	8009622 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_I2C_Master_Transmit_DMA+0x48>
 8009460:	2302      	movs	r3, #2
 8009462:	e0de      	b.n	8009622 <HAL_I2C_Master_Transmit_DMA+0x206>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2221      	movs	r2, #33	@ 0x21
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2210      	movs	r2, #16
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	893a      	ldrh	r2, [r7, #8]
 800948c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4a66      	ldr	r2, [pc, #408]	@ (800962c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8009492:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a66      	ldr	r2, [pc, #408]	@ (8009630 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8009498:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2bff      	cmp	r3, #255	@ 0xff
 80094a2:	d906      	bls.n	80094b2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	22ff      	movs	r2, #255	@ 0xff
 80094a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80094aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e007      	b.n	80094c2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094c0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01a      	beq.n	8009500 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	3b01      	subs	r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d074      	beq.n	80095f2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	2b00      	cmp	r3, #0
 800950e:	d022      	beq.n	8009556 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	4a47      	ldr	r2, [pc, #284]	@ (8009634 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8009516:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	4a46      	ldr	r2, [pc, #280]	@ (8009638 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800951e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	2200      	movs	r2, #0
 8009526:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952c:	2200      	movs	r2, #0
 800952e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009538:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009540:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009546:	f7fe fc4d 	bl	8007de4 <HAL_DMA_Start_IT>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d13a      	bne.n	80095ca <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8009554:	e013      	b.n	800957e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800956a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e051      	b.n	8009622 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009582:	b2db      	uxtb	r3, r3
 8009584:	3301      	adds	r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	8979      	ldrh	r1, [r7, #10]
 800958a:	4b2c      	ldr	r3, [pc, #176]	@ (800963c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f001 fcbb 	bl	800af0c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80095b0:	2110      	movs	r1, #16
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 fcdc 	bl	800af70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e028      	b.n	800961c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095de:	f043 0210 	orr.w	r2, r3, #16
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e017      	b.n	8009622 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4a12      	ldr	r2, [pc, #72]	@ (8009640 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80095f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	8979      	ldrh	r1, [r7, #10]
 80095fe:	4b0f      	ldr	r3, [pc, #60]	@ (800963c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f001 fc80 	bl	800af0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009614:	2101      	movs	r1, #1
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f001 fcaa 	bl	800af70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	e000      	b.n	8009622 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009620:	2302      	movs	r3, #2
  }
}
 8009622:	4618      	mov	r0, r3
 8009624:	3720      	adds	r7, #32
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	ffff0000 	.word	0xffff0000
 8009630:	08009df7 	.word	0x08009df7
 8009634:	0800ad77 	.word	0x0800ad77
 8009638:	0800aea3 	.word	0x0800aea3
 800963c:	80002000 	.word	0x80002000
 8009640:	080099b7 	.word	0x080099b7

08009644 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	461a      	mov	r2, r3
 8009650:	460b      	mov	r3, r1
 8009652:	817b      	strh	r3, [r7, #10]
 8009654:	4613      	mov	r3, r2
 8009656:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b20      	cmp	r3, #32
 8009662:	f040 80cd 	bne.w	8009800 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009674:	d101      	bne.n	800967a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8009676:	2302      	movs	r3, #2
 8009678:	e0c3      	b.n	8009802 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_I2C_Master_Receive_DMA+0x44>
 8009684:	2302      	movs	r3, #2
 8009686:	e0bc      	b.n	8009802 <HAL_I2C_Master_Receive_DMA+0x1be>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2222      	movs	r2, #34	@ 0x22
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2210      	movs	r2, #16
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	893a      	ldrh	r2, [r7, #8]
 80096b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a55      	ldr	r2, [pc, #340]	@ (800980c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80096b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4a55      	ldr	r2, [pc, #340]	@ (8009810 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80096bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2bff      	cmp	r3, #255	@ 0xff
 80096c6:	d906      	bls.n	80096d6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	22ff      	movs	r2, #255	@ 0xff
 80096cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80096ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e007      	b.n	80096e6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80096e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80096e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d070      	beq.n	80097d0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d020      	beq.n	8009738 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fa:	4a46      	ldr	r2, [pc, #280]	@ (8009814 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80096fc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009702:	4a45      	ldr	r2, [pc, #276]	@ (8009818 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8009704:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970a:	2200      	movs	r2, #0
 800970c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	2200      	movs	r2, #0
 8009714:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3324      	adds	r3, #36	@ 0x24
 8009720:	4619      	mov	r1, r3
 8009722:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009728:	f7fe fb5c 	bl	8007de4 <HAL_DMA_Start_IT>
 800972c:	4603      	mov	r3, r0
 800972e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009730:	7cfb      	ldrb	r3, [r7, #19]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d138      	bne.n	80097a8 <HAL_I2C_Master_Receive_DMA+0x164>
 8009736:	e013      	b.n	8009760 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e050      	b.n	8009802 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009764:	b2da      	uxtb	r2, r3
 8009766:	8979      	ldrh	r1, [r7, #10]
 8009768:	4b2c      	ldr	r3, [pc, #176]	@ (800981c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f001 fbcc 	bl	800af0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800978e:	2110      	movs	r1, #16
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f001 fbed 	bl	800af70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e029      	b.n	80097fc <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097bc:	f043 0210 	orr.w	r2, r3, #16
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e018      	b.n	8009802 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80097d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	8979      	ldrh	r1, [r7, #10]
 80097de:	4b0f      	ldr	r3, [pc, #60]	@ (800981c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f001 fb90 	bl	800af0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097f4:	2102      	movs	r1, #2
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f001 fbba 	bl	800af70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e000      	b.n	8009802 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8009800:	2302      	movs	r3, #2
  }
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	ffff0000 	.word	0xffff0000
 8009810:	08009df7 	.word	0x08009df7
 8009814:	0800ae0d 	.word	0x0800ae0d
 8009818:	0800aea3 	.word	0x0800aea3
 800981c:	80002400 	.word	0x80002400
 8009820:	080099b7 	.word	0x080099b7

08009824 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	68f9      	ldr	r1, [r7, #12]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
  }
}
 8009850:	bf00      	nop
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009888:	f043 0201 	orr.w	r2, r3, #1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009898:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00f      	beq.n	80098c4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098b2:	f043 0208 	orr.w	r2, r3, #8
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098dc:	f043 0202 	orr.w	r2, r3, #2
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f003 030b 	and.w	r3, r3, #11
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 f8fd 	bl	800ab00 <I2C_ITError>
  }
}
 8009906:	bf00      	nop
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
 8009942:	4613      	mov	r3, r2
 8009944:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b088      	sub	sp, #32
 80099ba:	af02      	add	r7, sp, #8
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <I2C_Master_ISR_IT+0x1e>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e113      	b.n	8009bfc <I2C_Master_ISR_IT+0x246>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d012      	beq.n	8009a0c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00d      	beq.n	8009a0c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2210      	movs	r2, #16
 80099f6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fc:	f043 0204 	orr.w	r2, r3, #4
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f001 f992 	bl	800ad2e <I2C_Flush_TXDR>
 8009a0a:	e0e4      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d022      	beq.n	8009a5c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01d      	beq.n	8009a5c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 0304 	bic.w	r3, r3, #4
 8009a26:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009a5a:	e0bc      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d128      	bne.n	8009ab8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d023      	beq.n	8009ab8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01e      	beq.n	8009ab8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a8 	beq.w	8009bd6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8009ab6:	e08e      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05c      	beq.n	8009b7c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d057      	beq.n	8009b7c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d040      	beq.n	8009b58 <I2C_Master_ISR_IT+0x1a2>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d13c      	bne.n	8009b58 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aea:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2bff      	cmp	r3, #255	@ 0xff
 8009af4:	d90e      	bls.n	8009b14 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	22ff      	movs	r2, #255	@ 0xff
 8009afa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	8a79      	ldrh	r1, [r7, #18]
 8009b04:	2300      	movs	r3, #0
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f001 f9fd 	bl	800af0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b12:	e032      	b.n	8009b7a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b26:	d00b      	beq.n	8009b40 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b2c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b32:	8a79      	ldrh	r1, [r7, #18]
 8009b34:	2000      	movs	r0, #0
 8009b36:	9000      	str	r0, [sp, #0]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f001 f9e7 	bl	800af0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b3e:	e01c      	b.n	8009b7a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	8a79      	ldrh	r1, [r7, #18]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 f9db 	bl	800af0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b56:	e010      	b.n	8009b7a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b66:	d003      	beq.n	8009b70 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fcb0 	bl	800a4ce <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b6e:	e032      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b70:	2140      	movs	r1, #64	@ 0x40
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 ffc4 	bl	800ab00 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b78:	e02d      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
 8009b7a:	e02c      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d027      	beq.n	8009bd6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d022      	beq.n	8009bd6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d119      	bne.n	8009bce <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ba8:	d015      	beq.n	8009bd6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009bb2:	d108      	bne.n	8009bc6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bc2:	605a      	str	r2, [r3, #4]
 8009bc4:	e007      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fc81 	bl	800a4ce <I2C_ITMasterSeqCplt>
 8009bcc:	e003      	b.n	8009bd6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009bce:	2140      	movs	r1, #64	@ 0x40
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 ff95 	bl	800ab00 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d008      	beq.n	8009bf2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009bea:	6979      	ldr	r1, [r7, #20]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 fd07 	bl	800a600 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c14:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d101      	bne.n	8009c28 <I2C_Slave_ISR_IT+0x24>
 8009c24:	2302      	movs	r3, #2
 8009c26:	e0e2      	b.n	8009dee <I2C_Slave_ISR_IT+0x1ea>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d009      	beq.n	8009c4e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009c44:	6939      	ldr	r1, [r7, #16]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fda2 	bl	800a790 <I2C_ITSlaveCplt>
 8009c4c:	e0ca      	b.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d04b      	beq.n	8009cf0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d046      	beq.n	8009cf0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d128      	bne.n	8009cbe <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b28      	cmp	r3, #40	@ 0x28
 8009c76:	d108      	bne.n	8009c8a <I2C_Slave_ISR_IT+0x86>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c7e:	d104      	bne.n	8009c8a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c80:	6939      	ldr	r1, [r7, #16]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fee8 	bl	800aa58 <I2C_ITListenCplt>
 8009c88:	e031      	b.n	8009cee <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b29      	cmp	r3, #41	@ 0x29
 8009c94:	d10e      	bne.n	8009cb4 <I2C_Slave_ISR_IT+0xb0>
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c9c:	d00a      	beq.n	8009cb4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f001 f841 	bl	800ad2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fc4b 	bl	800a548 <I2C_ITSlaveSeqCplt>
 8009cb2:	e01c      	b.n	8009cee <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2210      	movs	r2, #16
 8009cba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009cbc:	e08f      	b.n	8009dde <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cca:	f043 0204 	orr.w	r2, r3, #4
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <I2C_Slave_ISR_IT+0xdc>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cde:	d17e      	bne.n	8009dde <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 ff0a 	bl	800ab00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009cec:	e077      	b.n	8009dde <I2C_Slave_ISR_IT+0x1da>
 8009cee:	e076      	b.n	8009dde <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d02f      	beq.n	8009d5a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d02a      	beq.n	8009d5a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d018      	beq.n	8009d40 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d14b      	bne.n	8009de2 <I2C_Slave_ISR_IT+0x1de>
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d50:	d047      	beq.n	8009de2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fbf8 	bl	800a548 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009d58:	e043      	b.n	8009de2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d009      	beq.n	8009d78 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009d6e:	6939      	ldr	r1, [r7, #16]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 fb28 	bl	800a3c6 <I2C_ITAddrCplt>
 8009d76:	e035      	b.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d030      	beq.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d02b      	beq.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d018      	beq.n	8009dc8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009dc6:	e00d      	b.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dce:	d002      	beq.n	8009dd6 <I2C_Slave_ISR_IT+0x1d2>
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fbb6 	bl	800a548 <I2C_ITSlaveSeqCplt>
 8009ddc:	e002      	b.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009de2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af02      	add	r7, sp, #8
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <I2C_Master_ISR_DMA+0x1a>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e0d9      	b.n	8009fc4 <I2C_Master_ISR_DMA+0x1ce>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f003 0310 	and.w	r3, r3, #16
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d016      	beq.n	8009e50 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d011      	beq.n	8009e50 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2210      	movs	r2, #16
 8009e32:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e38:	f043 0204 	orr.w	r2, r3, #4
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009e40:	2120      	movs	r1, #32
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f001 f894 	bl	800af70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 ff70 	bl	800ad2e <I2C_Flush_TXDR>
 8009e4e:	e0b4      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d071      	beq.n	8009f3e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d06c      	beq.n	8009f3e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e72:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d04e      	beq.n	8009f1c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e8a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2bff      	cmp	r3, #255	@ 0xff
 8009e94:	d906      	bls.n	8009ea4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	22ff      	movs	r2, #255	@ 0xff
 8009e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009e9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e010      	b.n	8009ec6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009eb6:	d003      	beq.n	8009ec0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e002      	b.n	8009ec6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ec4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	8a79      	ldrh	r1, [r7, #18]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f001 f819 	bl	800af0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b22      	cmp	r3, #34	@ 0x22
 8009ef6:	d108      	bne.n	8009f0a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009f08:	e057      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009f1a:	e04e      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f2a:	d003      	beq.n	8009f34 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 face 	bl	800a4ce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009f32:	e042      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009f34:	2140      	movs	r1, #64	@ 0x40
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fde2 	bl	800ab00 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009f3c:	e03d      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d028      	beq.n	8009f9a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d023      	beq.n	8009f9a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d119      	bne.n	8009f90 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f6a:	d025      	beq.n	8009fb8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f74:	d108      	bne.n	8009f88 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f84:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009f86:	e017      	b.n	8009fb8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 faa0 	bl	800a4ce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009f8e:	e013      	b.n	8009fb8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009f90:	2140      	movs	r1, #64	@ 0x40
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 fdb4 	bl	800ab00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009f98:	e00e      	b.n	8009fb8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 fb25 	bl	800a600 <I2C_ITMasterCplt>
 8009fb6:	e000      	b.n	8009fba <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8009fb8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009fd8:	4b8d      	ldr	r3, [pc, #564]	@ (800a210 <I2C_Mem_ISR_DMA+0x244>)
 8009fda:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <I2C_Mem_ISR_DMA+0x1e>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e10e      	b.n	800a208 <I2C_Mem_ISR_DMA+0x23c>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d016      	beq.n	800a02a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a002:	2b00      	cmp	r3, #0
 800a004:	d011      	beq.n	800a02a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2210      	movs	r2, #16
 800a00c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a012:	f043 0204 	orr.w	r2, r3, #4
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a01a:	2120      	movs	r1, #32
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 ffa7 	bl	800af70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fe83 	bl	800ad2e <I2C_Flush_TXDR>
 800a028:	e0e9      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a046:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a050:	e0d5      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05f      	beq.n	800a11c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a062:	2b00      	cmp	r3, #0
 800a064:	d05a      	beq.n	800a11c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a066:	2101      	movs	r1, #1
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 f805 	bl	800b078 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a06e:	2110      	movs	r1, #16
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 ff7d 	bl	800af70 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d048      	beq.n	800a112 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a084:	b29b      	uxth	r3, r3
 800a086:	2bff      	cmp	r3, #255	@ 0xff
 800a088:	d910      	bls.n	800a0ac <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	22ff      	movs	r2, #255	@ 0xff
 800a08e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a094:	b299      	uxth	r1, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	2300      	movs	r3, #0
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 ff31 	bl	800af0c <I2C_TransferConfig>
 800a0aa:	e011      	b.n	800a0d0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ba:	b299      	uxth	r1, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 ff1e 	bl	800af0c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b22      	cmp	r3, #34	@ 0x22
 800a0ec:	d108      	bne.n	800a100 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a0fe:	e07e      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a10e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a110:	e075      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a112:	2140      	movs	r1, #64	@ 0x40
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fcf3 	bl	800ab00 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a11a:	e070      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	d05d      	beq.n	800a1e2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d058      	beq.n	800a1e2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a130:	2101      	movs	r1, #1
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 ffa0 	bl	800b078 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a138:	2110      	movs	r1, #16
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 ff18 	bl	800af70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b22      	cmp	r3, #34	@ 0x22
 800a14a:	d101      	bne.n	800a150 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800a14c:	4b31      	ldr	r3, [pc, #196]	@ (800a214 <I2C_Mem_ISR_DMA+0x248>)
 800a14e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a154:	b29b      	uxth	r3, r3
 800a156:	2bff      	cmp	r3, #255	@ 0xff
 800a158:	d910      	bls.n	800a17c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	22ff      	movs	r2, #255	@ 0xff
 800a15e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a164:	b299      	uxth	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fec9 	bl	800af0c <I2C_TransferConfig>
 800a17a:	e011      	b.n	800a1a0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a180:	b29a      	uxth	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a18a:	b299      	uxth	r1, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a190:	b2da      	uxtb	r2, r3
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 feb6 	bl	800af0c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b22      	cmp	r3, #34	@ 0x22
 800a1bc:	d108      	bne.n	800a1d0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1cc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a1ce:	e016      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1de:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a1e0:	e00d      	b.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f003 0320 	and.w	r3, r3, #32
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fa01 	bl	800a600 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	80002000 	.word	0x80002000
 800a214:	80002400 	.word	0x80002400

0800a218 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <I2C_Slave_ISR_DMA+0x24>
 800a238:	2302      	movs	r3, #2
 800a23a:	e0c0      	b.n	800a3be <I2C_Slave_ISR_DMA+0x1a6>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a254:	2b00      	cmp	r3, #0
 800a256:	d004      	beq.n	800a262 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 fa98 	bl	800a790 <I2C_ITSlaveCplt>
 800a260:	e0a8      	b.n	800a3b4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f003 0310 	and.w	r3, r3, #16
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 8095 	beq.w	800a398 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 808f 	beq.w	800a398 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d104      	bne.n	800a28e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d07d      	beq.n	800a38a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00c      	beq.n	800a2b0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00c      	beq.n	800a2d2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d128      	bne.n	800a32a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b28      	cmp	r3, #40	@ 0x28
 800a2e2:	d108      	bne.n	800a2f6 <I2C_Slave_ISR_DMA+0xde>
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ea:	d104      	bne.n	800a2f6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fbb2 	bl	800aa58 <I2C_ITListenCplt>
 800a2f4:	e048      	b.n	800a388 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b29      	cmp	r3, #41	@ 0x29
 800a300:	d10e      	bne.n	800a320 <I2C_Slave_ISR_DMA+0x108>
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a308:	d00a      	beq.n	800a320 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2210      	movs	r2, #16
 800a310:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fd0b 	bl	800ad2e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f915 	bl	800a548 <I2C_ITSlaveSeqCplt>
 800a31e:	e033      	b.n	800a388 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2210      	movs	r2, #16
 800a326:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a328:	e034      	b.n	800a394 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2210      	movs	r2, #16
 800a330:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a336:	f043 0204 	orr.w	r2, r3, #4
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a344:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <I2C_Slave_ISR_DMA+0x13c>
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a352:	d11f      	bne.n	800a394 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b21      	cmp	r3, #33	@ 0x21
 800a358:	d002      	beq.n	800a360 <I2C_Slave_ISR_DMA+0x148>
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b29      	cmp	r3, #41	@ 0x29
 800a35e:	d103      	bne.n	800a368 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2221      	movs	r2, #33	@ 0x21
 800a364:	631a      	str	r2, [r3, #48]	@ 0x30
 800a366:	e008      	b.n	800a37a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b22      	cmp	r3, #34	@ 0x22
 800a36c:	d002      	beq.n	800a374 <I2C_Slave_ISR_DMA+0x15c>
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	2b2a      	cmp	r3, #42	@ 0x2a
 800a372:	d102      	bne.n	800a37a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2222      	movs	r2, #34	@ 0x22
 800a378:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a37e:	4619      	mov	r1, r3
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fbbd 	bl	800ab00 <I2C_ITError>
      if (treatdmanack == 1U)
 800a386:	e005      	b.n	800a394 <I2C_Slave_ISR_DMA+0x17c>
 800a388:	e004      	b.n	800a394 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2210      	movs	r2, #16
 800a390:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a392:	e00f      	b.n	800a3b4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800a394:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a396:	e00d      	b.n	800a3b4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f003 0308 	and.w	r3, r3, #8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d008      	beq.n	800a3b4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f809 	bl	800a3c6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a3dc:	2b28      	cmp	r3, #40	@ 0x28
 800a3de:	d16a      	bne.n	800a4b6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a3fe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	b29b      	uxth	r3, r3
 800a408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a40c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	b29b      	uxth	r3, r3
 800a416:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a41a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d138      	bne.n	800a496 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a424:	897b      	ldrh	r3, [r7, #10]
 800a426:	09db      	lsrs	r3, r3, #7
 800a428:	b29a      	uxth	r2, r3
 800a42a:	89bb      	ldrh	r3, [r7, #12]
 800a42c:	4053      	eors	r3, r2
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f003 0306 	and.w	r3, r3, #6
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11c      	bne.n	800a472 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a438:	897b      	ldrh	r3, [r7, #10]
 800a43a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d13b      	bne.n	800a4c6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2208      	movs	r2, #8
 800a45a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a464:	89ba      	ldrh	r2, [r7, #12]
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fa63 	bl	8009936 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a470:	e029      	b.n	800a4c6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a472:	893b      	ldrh	r3, [r7, #8]
 800a474:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a476:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fdfc 	bl	800b078 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a488:	89ba      	ldrh	r2, [r7, #12]
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fa51 	bl	8009936 <HAL_I2C_AddrCallback>
}
 800a494:	e017      	b.n	800a4c6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fdec 	bl	800b078 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4a8:	89ba      	ldrh	r2, [r7, #12]
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff fa41 	bl	8009936 <HAL_I2C_AddrCallback>
}
 800a4b4:	e007      	b.n	800a4c6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a4c6:	bf00      	nop
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b21      	cmp	r3, #33	@ 0x21
 800a4e8:	d115      	bne.n	800a516 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2211      	movs	r2, #17
 800a4f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a4fe:	2101      	movs	r1, #1
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fdb9 	bl	800b078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7f6 fde4 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a514:	e014      	b.n	800a540 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2212      	movs	r2, #18
 800a522:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a52a:	2102      	movs	r1, #2
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fda3 	bl	800b078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f6 fddc 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e00c      	b.n	800a596 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a594:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b29      	cmp	r3, #41	@ 0x29
 800a5a0:	d112      	bne.n	800a5c8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2228      	movs	r2, #40	@ 0x28
 800a5a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2221      	movs	r2, #33	@ 0x21
 800a5ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fd60 	bl	800b078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff f9a4 	bl	800990e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a5c6:	e017      	b.n	800a5f8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5d2:	d111      	bne.n	800a5f8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2228      	movs	r2, #40	@ 0x28
 800a5d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2222      	movs	r2, #34	@ 0x22
 800a5e0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a5e2:	2102      	movs	r1, #2
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fd47 	bl	800b078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff f995 	bl	8009922 <HAL_I2C_SlaveRxCpltCallback>
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2220      	movs	r2, #32
 800a614:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b21      	cmp	r3, #33	@ 0x21
 800a620:	d107      	bne.n	800a632 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a622:	2101      	movs	r1, #1
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fd27 	bl	800b078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2211      	movs	r2, #17
 800a62e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a630:	e00c      	b.n	800a64c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b22      	cmp	r3, #34	@ 0x22
 800a63c:	d106      	bne.n	800a64c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a63e:	2102      	movs	r1, #2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fd19 	bl	800b078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2212      	movs	r2, #18
 800a64a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6859      	ldr	r1, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	4b4c      	ldr	r3, [pc, #304]	@ (800a788 <I2C_ITMasterCplt+0x188>)
 800a658:	400b      	ands	r3, r1
 800a65a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a49      	ldr	r2, [pc, #292]	@ (800a78c <I2C_ITMasterCplt+0x18c>)
 800a666:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2210      	movs	r2, #16
 800a678:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a67e:	f043 0204 	orr.w	r2, r3, #4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b60      	cmp	r3, #96	@ 0x60
 800a690:	d10a      	bne.n	800a6a8 <I2C_ITMasterCplt+0xa8>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fb40 	bl	800ad2e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b60      	cmp	r3, #96	@ 0x60
 800a6be:	d002      	beq.n	800a6c6 <I2C_ITMasterCplt+0xc6>
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d006      	beq.n	800a6d4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fa17 	bl	800ab00 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a6d2:	e054      	b.n	800a77e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b21      	cmp	r3, #33	@ 0x21
 800a6de:	d124      	bne.n	800a72a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b40      	cmp	r3, #64	@ 0x40
 800a6f8:	d10b      	bne.n	800a712 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff f92b 	bl	8009966 <HAL_I2C_MemTxCpltCallback>
}
 800a710:	e035      	b.n	800a77e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7f6 fcda 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
}
 800a728:	e029      	b.n	800a77e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b22      	cmp	r3, #34	@ 0x22
 800a734:	d123      	bne.n	800a77e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2220      	movs	r2, #32
 800a73a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b40      	cmp	r3, #64	@ 0x40
 800a74e:	d10b      	bne.n	800a768 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff f90a 	bl	800997a <HAL_I2C_MemRxCpltCallback>
}
 800a766:	e00a      	b.n	800a77e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7f6 fcbd 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	fe00e800 	.word	0xfe00e800
 800a78c:	ffff0000 	.word	0xffff0000

0800a790 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7aa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7b2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	2b21      	cmp	r3, #33	@ 0x21
 800a7c0:	d002      	beq.n	800a7c8 <I2C_ITSlaveCplt+0x38>
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	2b29      	cmp	r3, #41	@ 0x29
 800a7c6:	d108      	bne.n	800a7da <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a7c8:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc53 	bl	800b078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2221      	movs	r2, #33	@ 0x21
 800a7d6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7d8:	e019      	b.n	800a80e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a7da:	7afb      	ldrb	r3, [r7, #11]
 800a7dc:	2b22      	cmp	r3, #34	@ 0x22
 800a7de:	d002      	beq.n	800a7e6 <I2C_ITSlaveCplt+0x56>
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
 800a7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e4:	d108      	bne.n	800a7f8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a7e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fc44 	bl	800b078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2222      	movs	r2, #34	@ 0x22
 800a7f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7f6:	e00a      	b.n	800a80e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	2b28      	cmp	r3, #40	@ 0x28
 800a7fc:	d107      	bne.n	800a80e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a7fe:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fc38 	bl	800b078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a81c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6859      	ldr	r1, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	4b89      	ldr	r3, [pc, #548]	@ (800aa50 <I2C_ITSlaveCplt+0x2c0>)
 800a82a:	400b      	ands	r3, r1
 800a82c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa7d 	bl	800ad2e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d013      	beq.n	800a866 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a84c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a852:	2b00      	cmp	r3, #0
 800a854:	d01f      	beq.n	800a896 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b29a      	uxth	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a864:	e017      	b.n	800a896 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d012      	beq.n	800a896 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a87e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d006      	beq.n	800a896 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d020      	beq.n	800a8e2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f023 0304 	bic.w	r3, r3, #4
 800a8a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8f0:	f043 0204 	orr.w	r2, r3, #4
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f003 0310 	and.w	r3, r3, #16
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d049      	beq.n	800a996 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d044      	beq.n	800a996 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a910:	b29b      	uxth	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d128      	bne.n	800a968 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b28      	cmp	r3, #40	@ 0x28
 800a920:	d108      	bne.n	800a934 <I2C_ITSlaveCplt+0x1a4>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a928:	d104      	bne.n	800a934 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a92a:	6979      	ldr	r1, [r7, #20]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f893 	bl	800aa58 <I2C_ITListenCplt>
 800a932:	e030      	b.n	800a996 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b29      	cmp	r3, #41	@ 0x29
 800a93e:	d10e      	bne.n	800a95e <I2C_ITSlaveCplt+0x1ce>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a946:	d00a      	beq.n	800a95e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2210      	movs	r2, #16
 800a94e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f9ec 	bl	800ad2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fdf6 	bl	800a548 <I2C_ITSlaveSeqCplt>
 800a95c:	e01b      	b.n	800a996 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2210      	movs	r2, #16
 800a964:	61da      	str	r2, [r3, #28]
 800a966:	e016      	b.n	800a996 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2210      	movs	r2, #16
 800a96e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a974:	f043 0204 	orr.w	r2, r3, #4
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <I2C_ITSlaveCplt+0x1fa>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a988:	d105      	bne.n	800a996 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f8b5 	bl	800ab00 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d010      	beq.n	800a9ce <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f8a4 	bl	800ab00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b28      	cmp	r3, #40	@ 0x28
 800a9c2:	d141      	bne.n	800aa48 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f846 	bl	800aa58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a9cc:	e03c      	b.n	800aa48 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a9d6:	d014      	beq.n	800aa02 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff fdb5 	bl	800a548 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a1c      	ldr	r2, [pc, #112]	@ (800aa54 <I2C_ITSlaveCplt+0x2c4>)
 800a9e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fe ffa9 	bl	8009952 <HAL_I2C_ListenCpltCallback>
}
 800aa00:	e022      	b.n	800aa48 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b22      	cmp	r3, #34	@ 0x22
 800aa0c:	d10e      	bne.n	800aa2c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7fe ff7c 	bl	8009922 <HAL_I2C_SlaveRxCpltCallback>
}
 800aa2a:	e00d      	b.n	800aa48 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7fe ff63 	bl	800990e <HAL_I2C_SlaveTxCpltCallback>
}
 800aa48:	bf00      	nop
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	fe00e800 	.word	0xfe00e800
 800aa54:	ffff0000 	.word	0xffff0000

0800aa58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a25      	ldr	r2, [pc, #148]	@ (800aafc <I2C_ITListenCplt+0xa4>)
 800aa66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2220      	movs	r2, #32
 800aa72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	f003 0304 	and.w	r3, r3, #4
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d022      	beq.n	800aad4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d012      	beq.n	800aad4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aacc:	f043 0204 	orr.w	r2, r3, #4
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800aad4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 facd 	bl	800b078 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2210      	movs	r2, #16
 800aae4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fe ff2f 	bl	8009952 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	ffff0000 	.word	0xffff0000

0800ab00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab10:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a6d      	ldr	r2, [pc, #436]	@ (800acd4 <I2C_ITError+0x1d4>)
 800ab1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	2b28      	cmp	r3, #40	@ 0x28
 800ab36:	d005      	beq.n	800ab44 <I2C_ITError+0x44>
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	2b29      	cmp	r3, #41	@ 0x29
 800ab3c:	d002      	beq.n	800ab44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab42:	d10b      	bne.n	800ab5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ab44:	2103      	movs	r1, #3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa96 	bl	800b078 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2228      	movs	r2, #40	@ 0x28
 800ab50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a60      	ldr	r2, [pc, #384]	@ (800acd8 <I2C_ITError+0x1d8>)
 800ab58:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab5a:	e030      	b.n	800abbe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ab5c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fa89 	bl	800b078 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f8e1 	bl	800ad2e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b60      	cmp	r3, #96	@ 0x60
 800ab76:	d01f      	beq.n	800abb8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2220      	movs	r2, #32
 800ab7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f003 0320 	and.w	r3, r3, #32
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d114      	bne.n	800abb8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	f003 0310 	and.w	r3, r3, #16
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d109      	bne.n	800abb0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2210      	movs	r2, #16
 800aba2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba8:	f043 0204 	orr.w	r2, r3, #4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2220      	movs	r2, #32
 800abb6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d039      	beq.n	800ac40 <I2C_ITError+0x140>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b11      	cmp	r3, #17
 800abd0:	d002      	beq.n	800abd8 <I2C_ITError+0xd8>
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b21      	cmp	r3, #33	@ 0x21
 800abd6:	d133      	bne.n	800ac40 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abe6:	d107      	bne.n	800abf8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800abf6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fd fa82 	bl	8008106 <HAL_DMA_GetState>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d017      	beq.n	800ac38 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	4a33      	ldr	r2, [pc, #204]	@ (800acdc <I2C_ITError+0x1dc>)
 800ac0e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fd f95c 	bl	8007eda <HAL_DMA_Abort_IT>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d04d      	beq.n	800acc4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ac32:	4610      	mov	r0, r2
 800ac34:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac36:	e045      	b.n	800acc4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f851 	bl	800ace0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac3e:	e041      	b.n	800acc4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d039      	beq.n	800acbc <I2C_ITError+0x1bc>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b12      	cmp	r3, #18
 800ac4c:	d002      	beq.n	800ac54 <I2C_ITError+0x154>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b22      	cmp	r3, #34	@ 0x22
 800ac52:	d133      	bne.n	800acbc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac62:	d107      	bne.n	800ac74 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac72:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fd fa44 	bl	8008106 <HAL_DMA_GetState>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d017      	beq.n	800acb4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac88:	4a14      	ldr	r2, [pc, #80]	@ (800acdc <I2C_ITError+0x1dc>)
 800ac8a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fd f91e 	bl	8007eda <HAL_DMA_Abort_IT>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d011      	beq.n	800acc8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800acae:	4610      	mov	r0, r2
 800acb0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800acb2:	e009      	b.n	800acc8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f813 	bl	800ace0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800acba:	e005      	b.n	800acc8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f80f 	bl	800ace0 <I2C_TreatErrorCallback>
  }
}
 800acc2:	e002      	b.n	800acca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800acc4:	bf00      	nop
 800acc6:	e000      	b.n	800acca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800acc8:	bf00      	nop
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	ffff0000 	.word	0xffff0000
 800acd8:	08009c05 	.word	0x08009c05
 800acdc:	0800aed1 	.word	0x0800aed1

0800ace0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b60      	cmp	r3, #96	@ 0x60
 800acf2:	d10e      	bne.n	800ad12 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7fe fe49 	bl	80099a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ad10:	e009      	b.n	800ad26 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7fe fe34 	bl	800998e <HAL_I2C_ErrorCallback>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	f003 0302 	and.w	r3, r3, #2
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d103      	bne.n	800ad4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d007      	beq.n	800ad6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f042 0201 	orr.w	r2, r2, #1
 800ad68:	619a      	str	r2, [r3, #24]
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ad92:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ad9e:	2120      	movs	r1, #32
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f8e5 	bl	800af70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ada6:	e02d      	b.n	800ae04 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800adb0:	441a      	add	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2bff      	cmp	r3, #255	@ 0xff
 800adbe:	d903      	bls.n	800adc8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	22ff      	movs	r2, #255	@ 0xff
 800adc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800adc6:	e004      	b.n	800add2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	4619      	mov	r1, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3328      	adds	r3, #40	@ 0x28
 800ade2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ade8:	f7fc fffc 	bl	8007de4 <HAL_DMA_Start_IT>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800adf2:	2110      	movs	r1, #16
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fe83 	bl	800ab00 <I2C_ITError>
}
 800adfa:	e003      	b.n	800ae04 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800adfc:	2140      	movs	r1, #64	@ 0x40
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f8b6 	bl	800af70 <I2C_Enable_IRQ>
}
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae18:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae28:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d104      	bne.n	800ae3e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ae34:	2120      	movs	r1, #32
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f89a 	bl	800af70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ae3c:	e02d      	b.n	800ae9a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ae46:	441a      	add	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2bff      	cmp	r3, #255	@ 0xff
 800ae54:	d903      	bls.n	800ae5e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	22ff      	movs	r2, #255	@ 0xff
 800ae5a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ae5c:	e004      	b.n	800ae68 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3324      	adds	r3, #36	@ 0x24
 800ae72:	4619      	mov	r1, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae78:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ae7e:	f7fc ffb1 	bl	8007de4 <HAL_DMA_Start_IT>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d004      	beq.n	800ae92 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae88:	2110      	movs	r1, #16
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7ff fe38 	bl	800ab00 <I2C_ITError>
}
 800ae90:	e003      	b.n	800ae9a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ae92:	2140      	movs	r1, #64	@ 0x40
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f86b 	bl	800af70 <I2C_Enable_IRQ>
}
 800ae9a:	bf00      	nop
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aebe:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800aec0:	2110      	movs	r1, #16
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7ff fe1c 	bl	800ab00 <I2C_ITError>
}
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeea:	2200      	movs	r2, #0
 800aeec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefa:	2200      	movs	r2, #0
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f7ff feee 	bl	800ace0 <I2C_TreatErrorCallback>
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	817b      	strh	r3, [r7, #10]
 800af1a:	4613      	mov	r3, r2
 800af1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af1e:	897b      	ldrh	r3, [r7, #10]
 800af20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af24:	7a7b      	ldrb	r3, [r7, #9]
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	4313      	orrs	r3, r2
 800af36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	0d5b      	lsrs	r3, r3, #21
 800af46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800af4a:	4b08      	ldr	r3, [pc, #32]	@ (800af6c <I2C_TransferConfig+0x60>)
 800af4c:	430b      	orrs	r3, r1
 800af4e:	43db      	mvns	r3, r3
 800af50:	ea02 0103 	and.w	r1, r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	03ff63ff 	.word	0x03ff63ff

0800af70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af84:	4a39      	ldr	r2, [pc, #228]	@ (800b06c <I2C_Enable_IRQ+0xfc>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d032      	beq.n	800aff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800af8e:	4a38      	ldr	r2, [pc, #224]	@ (800b070 <I2C_Enable_IRQ+0x100>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d02d      	beq.n	800aff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800af98:	4a36      	ldr	r2, [pc, #216]	@ (800b074 <I2C_Enable_IRQ+0x104>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d028      	beq.n	800aff0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800af9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	da03      	bge.n	800afae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800afac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800afbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800afc0:	887b      	ldrh	r3, [r7, #2]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800afd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d103      	bne.n	800afe0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800afde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800afe0:	887b      	ldrh	r3, [r7, #2]
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	d133      	bne.n	800b04e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f043 0320 	orr.w	r3, r3, #32
 800afec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800afee:	e02e      	b.n	800b04e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da03      	bge.n	800b000 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800affe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b000:	887b      	ldrh	r3, [r7, #2]
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800b010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b012:	887b      	ldrh	r3, [r7, #2]
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800b022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b024:	887b      	ldrh	r3, [r7, #2]
 800b026:	2b10      	cmp	r3, #16
 800b028:	d103      	bne.n	800b032 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b030:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b032:	887b      	ldrh	r3, [r7, #2]
 800b034:	2b20      	cmp	r3, #32
 800b036:	d103      	bne.n	800b040 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b03e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b040:	887b      	ldrh	r3, [r7, #2]
 800b042:	2b40      	cmp	r3, #64	@ 0x40
 800b044:	d103      	bne.n	800b04e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b04c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6819      	ldr	r1, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	601a      	str	r2, [r3, #0]
}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	08009df7 	.word	0x08009df7
 800b070:	0800a219 	.word	0x0800a219
 800b074:	08009fcd 	.word	0x08009fcd

0800b078 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b088:	887b      	ldrh	r3, [r7, #2]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00f      	beq.n	800b0b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b098:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b0a6:	2b28      	cmp	r3, #40	@ 0x28
 800b0a8:	d003      	beq.n	800b0b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b0b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b0b2:	887b      	ldrh	r3, [r7, #2]
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00f      	beq.n	800b0dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b0c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b0d0:	2b28      	cmp	r3, #40	@ 0x28
 800b0d2:	d003      	beq.n	800b0dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b0da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b0dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	da03      	bge.n	800b0ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b0ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b0ec:	887b      	ldrh	r3, [r7, #2]
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d103      	bne.n	800b0fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b0f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b0fa:	887b      	ldrh	r3, [r7, #2]
 800b0fc:	2b20      	cmp	r3, #32
 800b0fe:	d103      	bne.n	800b108 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f043 0320 	orr.w	r3, r3, #32
 800b106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b108:	887b      	ldrh	r3, [r7, #2]
 800b10a:	2b40      	cmp	r3, #64	@ 0x40
 800b10c:	d103      	bne.n	800b116 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b114:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	43da      	mvns	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	400a      	ands	r2, r1
 800b126:	601a      	str	r2, [r3, #0]
}
 800b128:	bf00      	nop
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b20      	cmp	r3, #32
 800b148:	d138      	bne.n	800b1bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b150:	2b01      	cmp	r3, #1
 800b152:	d101      	bne.n	800b158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b154:	2302      	movs	r3, #2
 800b156:	e032      	b.n	800b1be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2224      	movs	r2, #36	@ 0x24
 800b164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0201 	bic.w	r2, r2, #1
 800b176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6819      	ldr	r1, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	430a      	orrs	r2, r1
 800b196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f042 0201 	orr.w	r2, r2, #1
 800b1a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e000      	b.n	800b1be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
  }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d139      	bne.n	800b254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d101      	bne.n	800b1ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e033      	b.n	800b256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2224      	movs	r2, #36	@ 0x24
 800b1fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f022 0201 	bic.w	r2, r2, #1
 800b20c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b21c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	021b      	lsls	r3, r3, #8
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2220      	movs	r2, #32
 800b244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	e000      	b.n	800b256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b254:	2302      	movs	r3, #2
  }
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b26c:	4b0b      	ldr	r3, [pc, #44]	@ (800b29c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b26e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b270:	4a0a      	ldr	r2, [pc, #40]	@ (800b29c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	6613      	str	r3, [r2, #96]	@ 0x60
 800b278:	4b08      	ldr	r3, [pc, #32]	@ (800b29c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800b284:	4b06      	ldr	r3, [pc, #24]	@ (800b2a0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	4905      	ldr	r1, [pc, #20]	@ (800b2a0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	604b      	str	r3, [r1, #4]
}
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	40021000 	.word	0x40021000
 800b2a0:	40010000 	.word	0x40010000

0800b2a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d141      	bne.n	800b336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2be:	d131      	bne.n	800b324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b2c0:	4b47      	ldr	r3, [pc, #284]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c6:	4a46      	ldr	r2, [pc, #280]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2d0:	4b43      	ldr	r3, [pc, #268]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b2d8:	4a41      	ldr	r2, [pc, #260]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b2de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2e0:	4b40      	ldr	r3, [pc, #256]	@ (800b3e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2232      	movs	r2, #50	@ 0x32
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	4a3f      	ldr	r2, [pc, #252]	@ (800b3e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f0:	0c9b      	lsrs	r3, r3, #18
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2f6:	e002      	b.n	800b2fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2fe:	4b38      	ldr	r3, [pc, #224]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30a:	d102      	bne.n	800b312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1f2      	bne.n	800b2f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b312:	4b33      	ldr	r3, [pc, #204]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b31a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31e:	d158      	bne.n	800b3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e057      	b.n	800b3d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b324:	4b2e      	ldr	r3, [pc, #184]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32a:	4a2d      	ldr	r2, [pc, #180]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b32c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b334:	e04d      	b.n	800b3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b33c:	d141      	bne.n	800b3c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b33e:	4b28      	ldr	r3, [pc, #160]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b34a:	d131      	bne.n	800b3b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b34c:	4b24      	ldr	r3, [pc, #144]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b352:	4a23      	ldr	r2, [pc, #140]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b35c:	4b20      	ldr	r3, [pc, #128]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b364:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b36a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b36c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2232      	movs	r2, #50	@ 0x32
 800b372:	fb02 f303 	mul.w	r3, r2, r3
 800b376:	4a1c      	ldr	r2, [pc, #112]	@ (800b3e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b378:	fba2 2303 	umull	r2, r3, r2, r3
 800b37c:	0c9b      	lsrs	r3, r3, #18
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b382:	e002      	b.n	800b38a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3b01      	subs	r3, #1
 800b388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b38a:	4b15      	ldr	r3, [pc, #84]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b396:	d102      	bne.n	800b39e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1f2      	bne.n	800b384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b39e:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3aa:	d112      	bne.n	800b3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e011      	b.n	800b3d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b3c0:	e007      	b.n	800b3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b3c2:	4b07      	ldr	r3, [pc, #28]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b3ca:	4a05      	ldr	r2, [pc, #20]	@ (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	40007000 	.word	0x40007000
 800b3e4:	2000000c 	.word	0x2000000c
 800b3e8:	431bde83 	.word	0x431bde83

0800b3ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b3f0:	4b05      	ldr	r3, [pc, #20]	@ (800b408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	4a04      	ldr	r2, [pc, #16]	@ (800b408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b3f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b3fa:	6093      	str	r3, [r2, #8]
}
 800b3fc:	bf00      	nop
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40007000 	.word	0x40007000

0800b40c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e2fe      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d075      	beq.n	800b516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b42a:	4b97      	ldr	r3, [pc, #604]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f003 030c 	and.w	r3, r3, #12
 800b432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b434:	4b94      	ldr	r3, [pc, #592]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0303 	and.w	r3, r3, #3
 800b43c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b0c      	cmp	r3, #12
 800b442:	d102      	bne.n	800b44a <HAL_RCC_OscConfig+0x3e>
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b03      	cmp	r3, #3
 800b448:	d002      	beq.n	800b450 <HAL_RCC_OscConfig+0x44>
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d10b      	bne.n	800b468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b450:	4b8d      	ldr	r3, [pc, #564]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d05b      	beq.n	800b514 <HAL_RCC_OscConfig+0x108>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d157      	bne.n	800b514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e2d9      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b470:	d106      	bne.n	800b480 <HAL_RCC_OscConfig+0x74>
 800b472:	4b85      	ldr	r3, [pc, #532]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a84      	ldr	r2, [pc, #528]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	e01d      	b.n	800b4bc <HAL_RCC_OscConfig+0xb0>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b488:	d10c      	bne.n	800b4a4 <HAL_RCC_OscConfig+0x98>
 800b48a:	4b7f      	ldr	r3, [pc, #508]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a7e      	ldr	r2, [pc, #504]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	4b7c      	ldr	r3, [pc, #496]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a7b      	ldr	r2, [pc, #492]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b49c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	e00b      	b.n	800b4bc <HAL_RCC_OscConfig+0xb0>
 800b4a4:	4b78      	ldr	r3, [pc, #480]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a77      	ldr	r2, [pc, #476]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b4aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	4b75      	ldr	r3, [pc, #468]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a74      	ldr	r2, [pc, #464]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b4b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d013      	beq.n	800b4ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c4:	f7fa f9e2 	bl	800588c <HAL_GetTick>
 800b4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4ca:	e008      	b.n	800b4de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4cc:	f7fa f9de 	bl	800588c <HAL_GetTick>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	2b64      	cmp	r3, #100	@ 0x64
 800b4d8:	d901      	bls.n	800b4de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e29e      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4de:	4b6a      	ldr	r3, [pc, #424]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0f0      	beq.n	800b4cc <HAL_RCC_OscConfig+0xc0>
 800b4ea:	e014      	b.n	800b516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ec:	f7fa f9ce 	bl	800588c <HAL_GetTick>
 800b4f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b4f2:	e008      	b.n	800b506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4f4:	f7fa f9ca 	bl	800588c <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	2b64      	cmp	r3, #100	@ 0x64
 800b500:	d901      	bls.n	800b506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e28a      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b506:	4b60      	ldr	r3, [pc, #384]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1f0      	bne.n	800b4f4 <HAL_RCC_OscConfig+0xe8>
 800b512:	e000      	b.n	800b516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d075      	beq.n	800b60e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b522:	4b59      	ldr	r3, [pc, #356]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 030c 	and.w	r3, r3, #12
 800b52a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b52c:	4b56      	ldr	r3, [pc, #344]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f003 0303 	and.w	r3, r3, #3
 800b534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	2b0c      	cmp	r3, #12
 800b53a:	d102      	bne.n	800b542 <HAL_RCC_OscConfig+0x136>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d002      	beq.n	800b548 <HAL_RCC_OscConfig+0x13c>
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b04      	cmp	r3, #4
 800b546:	d11f      	bne.n	800b588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b548:	4b4f      	ldr	r3, [pc, #316]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <HAL_RCC_OscConfig+0x154>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e25d      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b560:	4b49      	ldr	r3, [pc, #292]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	061b      	lsls	r3, r3, #24
 800b56e:	4946      	ldr	r1, [pc, #280]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b570:	4313      	orrs	r3, r2
 800b572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b574:	4b45      	ldr	r3, [pc, #276]	@ (800b68c <HAL_RCC_OscConfig+0x280>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fa f93b 	bl	80057f4 <HAL_InitTick>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d043      	beq.n	800b60c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e249      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d023      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b590:	4b3d      	ldr	r3, [pc, #244]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a3c      	ldr	r2, [pc, #240]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b59a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b59c:	f7fa f976 	bl	800588c <HAL_GetTick>
 800b5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5a2:	e008      	b.n	800b5b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5a4:	f7fa f972 	bl	800588c <HAL_GetTick>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d901      	bls.n	800b5b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e232      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5b6:	4b34      	ldr	r3, [pc, #208]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0f0      	beq.n	800b5a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5c2:	4b31      	ldr	r3, [pc, #196]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	061b      	lsls	r3, r3, #24
 800b5d0:	492d      	ldr	r1, [pc, #180]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	604b      	str	r3, [r1, #4]
 800b5d6:	e01a      	b.n	800b60e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b5de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e4:	f7fa f952 	bl	800588c <HAL_GetTick>
 800b5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b5ea:	e008      	b.n	800b5fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5ec:	f7fa f94e 	bl	800588c <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d901      	bls.n	800b5fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e20e      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b5fe:	4b22      	ldr	r3, [pc, #136]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f0      	bne.n	800b5ec <HAL_RCC_OscConfig+0x1e0>
 800b60a:	e000      	b.n	800b60e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b60c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0308 	and.w	r3, r3, #8
 800b616:	2b00      	cmp	r3, #0
 800b618:	d041      	beq.n	800b69e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d01c      	beq.n	800b65c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b622:	4b19      	ldr	r3, [pc, #100]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b628:	4a17      	ldr	r2, [pc, #92]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b62a:	f043 0301 	orr.w	r3, r3, #1
 800b62e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b632:	f7fa f92b 	bl	800588c <HAL_GetTick>
 800b636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b638:	e008      	b.n	800b64c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b63a:	f7fa f927 	bl	800588c <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e1e7      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b64c:	4b0e      	ldr	r3, [pc, #56]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b652:	f003 0302 	and.w	r3, r3, #2
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0ef      	beq.n	800b63a <HAL_RCC_OscConfig+0x22e>
 800b65a:	e020      	b.n	800b69e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b65c:	4b0a      	ldr	r3, [pc, #40]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b662:	4a09      	ldr	r2, [pc, #36]	@ (800b688 <HAL_RCC_OscConfig+0x27c>)
 800b664:	f023 0301 	bic.w	r3, r3, #1
 800b668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b66c:	f7fa f90e 	bl	800588c <HAL_GetTick>
 800b670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b672:	e00d      	b.n	800b690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b674:	f7fa f90a 	bl	800588c <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d906      	bls.n	800b690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e1ca      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
 800b686:	bf00      	nop
 800b688:	40021000 	.word	0x40021000
 800b68c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b690:	4b8c      	ldr	r3, [pc, #560]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b696:	f003 0302 	and.w	r3, r3, #2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1ea      	bne.n	800b674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 80a6 	beq.w	800b7f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6b0:	4b84      	ldr	r3, [pc, #528]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b6b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x2b4>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e000      	b.n	800b6c2 <HAL_RCC_OscConfig+0x2b6>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00d      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6c6:	4b7f      	ldr	r3, [pc, #508]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b6c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ca:	4a7e      	ldr	r2, [pc, #504]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b6cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b6d2:	4b7c      	ldr	r3, [pc, #496]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b6d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6e2:	4b79      	ldr	r3, [pc, #484]	@ (800b8c8 <HAL_RCC_OscConfig+0x4bc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d118      	bne.n	800b720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6ee:	4b76      	ldr	r3, [pc, #472]	@ (800b8c8 <HAL_RCC_OscConfig+0x4bc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a75      	ldr	r2, [pc, #468]	@ (800b8c8 <HAL_RCC_OscConfig+0x4bc>)
 800b6f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6fa:	f7fa f8c7 	bl	800588c <HAL_GetTick>
 800b6fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b700:	e008      	b.n	800b714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b702:	f7fa f8c3 	bl	800588c <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d901      	bls.n	800b714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e183      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b714:	4b6c      	ldr	r3, [pc, #432]	@ (800b8c8 <HAL_RCC_OscConfig+0x4bc>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0f0      	beq.n	800b702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d108      	bne.n	800b73a <HAL_RCC_OscConfig+0x32e>
 800b728:	4b66      	ldr	r3, [pc, #408]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b72e:	4a65      	ldr	r2, [pc, #404]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b730:	f043 0301 	orr.w	r3, r3, #1
 800b734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b738:	e024      	b.n	800b784 <HAL_RCC_OscConfig+0x378>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	2b05      	cmp	r3, #5
 800b740:	d110      	bne.n	800b764 <HAL_RCC_OscConfig+0x358>
 800b742:	4b60      	ldr	r3, [pc, #384]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b748:	4a5e      	ldr	r2, [pc, #376]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b74a:	f043 0304 	orr.w	r3, r3, #4
 800b74e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b752:	4b5c      	ldr	r3, [pc, #368]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b758:	4a5a      	ldr	r2, [pc, #360]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b75a:	f043 0301 	orr.w	r3, r3, #1
 800b75e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b762:	e00f      	b.n	800b784 <HAL_RCC_OscConfig+0x378>
 800b764:	4b57      	ldr	r3, [pc, #348]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b76a:	4a56      	ldr	r2, [pc, #344]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b76c:	f023 0301 	bic.w	r3, r3, #1
 800b770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b774:	4b53      	ldr	r3, [pc, #332]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77a:	4a52      	ldr	r2, [pc, #328]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b77c:	f023 0304 	bic.w	r3, r3, #4
 800b780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d016      	beq.n	800b7ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b78c:	f7fa f87e 	bl	800588c <HAL_GetTick>
 800b790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b792:	e00a      	b.n	800b7aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b794:	f7fa f87a 	bl	800588c <HAL_GetTick>
 800b798:	4602      	mov	r2, r0
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e138      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7aa:	4b46      	ldr	r3, [pc, #280]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0ed      	beq.n	800b794 <HAL_RCC_OscConfig+0x388>
 800b7b8:	e015      	b.n	800b7e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ba:	f7fa f867 	bl	800588c <HAL_GetTick>
 800b7be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b7c0:	e00a      	b.n	800b7d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7c2:	f7fa f863 	bl	800588c <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e121      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b7d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7de:	f003 0302 	and.w	r3, r3, #2
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1ed      	bne.n	800b7c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b7e6:	7ffb      	ldrb	r3, [r7, #31]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d105      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7ec:	4b35      	ldr	r3, [pc, #212]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b7ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f0:	4a34      	ldr	r2, [pc, #208]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b7f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0320 	and.w	r3, r3, #32
 800b800:	2b00      	cmp	r3, #0
 800b802:	d03c      	beq.n	800b87e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d01c      	beq.n	800b846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b80c:	4b2d      	ldr	r3, [pc, #180]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b80e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b812:	4a2c      	ldr	r2, [pc, #176]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b814:	f043 0301 	orr.w	r3, r3, #1
 800b818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b81c:	f7fa f836 	bl	800588c <HAL_GetTick>
 800b820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b824:	f7fa f832 	bl	800588c <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e0f2      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b836:	4b23      	ldr	r3, [pc, #140]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d0ef      	beq.n	800b824 <HAL_RCC_OscConfig+0x418>
 800b844:	e01b      	b.n	800b87e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b846:	4b1f      	ldr	r3, [pc, #124]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b84c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b84e:	f023 0301 	bic.w	r3, r3, #1
 800b852:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b856:	f7fa f819 	bl	800588c <HAL_GetTick>
 800b85a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b85c:	e008      	b.n	800b870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b85e:	f7fa f815 	bl	800588c <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d901      	bls.n	800b870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e0d5      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b870:	4b14      	ldr	r3, [pc, #80]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1ef      	bne.n	800b85e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	69db      	ldr	r3, [r3, #28]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80c9 	beq.w	800ba1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b888:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f003 030c 	and.w	r3, r3, #12
 800b890:	2b0c      	cmp	r3, #12
 800b892:	f000 8083 	beq.w	800b99c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d15e      	bne.n	800b95c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b89e:	4b09      	ldr	r3, [pc, #36]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a08      	ldr	r2, [pc, #32]	@ (800b8c4 <HAL_RCC_OscConfig+0x4b8>)
 800b8a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8aa:	f7f9 ffef 	bl	800588c <HAL_GetTick>
 800b8ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8b0:	e00c      	b.n	800b8cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8b2:	f7f9 ffeb 	bl	800588c <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d905      	bls.n	800b8cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e0ab      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
 800b8c4:	40021000 	.word	0x40021000
 800b8c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8cc:	4b55      	ldr	r3, [pc, #340]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1ec      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8d8:	4b52      	ldr	r3, [pc, #328]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	4b52      	ldr	r3, [pc, #328]	@ (800ba28 <HAL_RCC_OscConfig+0x61c>)
 800b8de:	4013      	ands	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6a11      	ldr	r1, [r2, #32]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b8e8:	3a01      	subs	r2, #1
 800b8ea:	0112      	lsls	r2, r2, #4
 800b8ec:	4311      	orrs	r1, r2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b8f2:	0212      	lsls	r2, r2, #8
 800b8f4:	4311      	orrs	r1, r2
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b8fa:	0852      	lsrs	r2, r2, #1
 800b8fc:	3a01      	subs	r2, #1
 800b8fe:	0552      	lsls	r2, r2, #21
 800b900:	4311      	orrs	r1, r2
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b906:	0852      	lsrs	r2, r2, #1
 800b908:	3a01      	subs	r2, #1
 800b90a:	0652      	lsls	r2, r2, #25
 800b90c:	4311      	orrs	r1, r2
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b912:	06d2      	lsls	r2, r2, #27
 800b914:	430a      	orrs	r2, r1
 800b916:	4943      	ldr	r1, [pc, #268]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b91c:	4b41      	ldr	r3, [pc, #260]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a40      	ldr	r2, [pc, #256]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b928:	4b3e      	ldr	r3, [pc, #248]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	4a3d      	ldr	r2, [pc, #244]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b92e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b934:	f7f9 ffaa 	bl	800588c <HAL_GetTick>
 800b938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b93c:	f7f9 ffa6 	bl	800588c <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b02      	cmp	r3, #2
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e066      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b94e:	4b35      	ldr	r3, [pc, #212]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0f0      	beq.n	800b93c <HAL_RCC_OscConfig+0x530>
 800b95a:	e05e      	b.n	800ba1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b95c:	4b31      	ldr	r3, [pc, #196]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a30      	ldr	r2, [pc, #192]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b968:	f7f9 ff90 	bl	800588c <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b970:	f7f9 ff8c 	bl	800588c <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e04c      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b982:	4b28      	ldr	r3, [pc, #160]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f0      	bne.n	800b970 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b98e:	4b25      	ldr	r3, [pc, #148]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b990:	68da      	ldr	r2, [r3, #12]
 800b992:	4924      	ldr	r1, [pc, #144]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b994:	4b25      	ldr	r3, [pc, #148]	@ (800ba2c <HAL_RCC_OscConfig+0x620>)
 800b996:	4013      	ands	r3, r2
 800b998:	60cb      	str	r3, [r1, #12]
 800b99a:	e03e      	b.n	800ba1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d101      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e039      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba24 <HAL_RCC_OscConfig+0x618>)
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f003 0203 	and.w	r2, r3, #3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d12c      	bne.n	800ba16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d123      	bne.n	800ba16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d11b      	bne.n	800ba16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d113      	bne.n	800ba16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f8:	085b      	lsrs	r3, r3, #1
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d109      	bne.n	800ba16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0c:	085b      	lsrs	r3, r3, #1
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d001      	beq.n	800ba1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3720      	adds	r7, #32
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	40021000 	.word	0x40021000
 800ba28:	019f800c 	.word	0x019f800c
 800ba2c:	feeefffc 	.word	0xfeeefffc

0800ba30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e11e      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba48:	4b91      	ldr	r3, [pc, #580]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d910      	bls.n	800ba78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba56:	4b8e      	ldr	r3, [pc, #568]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f023 020f 	bic.w	r2, r3, #15
 800ba5e:	498c      	ldr	r1, [pc, #560]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba66:	4b8a      	ldr	r3, [pc, #552]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d001      	beq.n	800ba78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e106      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d073      	beq.n	800bb6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d129      	bne.n	800bae0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba8c:	4b81      	ldr	r3, [pc, #516]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e0f4      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ba9c:	f000 f966 	bl	800bd6c <RCC_GetSysClockFreqFromPLLSource>
 800baa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	4a7c      	ldr	r2, [pc, #496]	@ (800bc98 <HAL_RCC_ClockConfig+0x268>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d93f      	bls.n	800bb2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800baaa:	4b7a      	ldr	r3, [pc, #488]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d009      	beq.n	800baca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d033      	beq.n	800bb2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d12f      	bne.n	800bb2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800baca:	4b72      	ldr	r3, [pc, #456]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bad2:	4a70      	ldr	r2, [pc, #448]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bada:	2380      	movs	r3, #128	@ 0x80
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e024      	b.n	800bb2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d107      	bne.n	800baf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bae8:	4b6a      	ldr	r3, [pc, #424]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e0c6      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800baf8:	4b66      	ldr	r3, [pc, #408]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e0be      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bb08:	f000 f8ce 	bl	800bca8 <HAL_RCC_GetSysClockFreq>
 800bb0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	4a61      	ldr	r2, [pc, #388]	@ (800bc98 <HAL_RCC_ClockConfig+0x268>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d909      	bls.n	800bb2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb16:	4b5f      	ldr	r3, [pc, #380]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb1e:	4a5d      	ldr	r2, [pc, #372]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bb26:	2380      	movs	r3, #128	@ 0x80
 800bb28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb2a:	4b5a      	ldr	r3, [pc, #360]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f023 0203 	bic.w	r2, r3, #3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	4957      	ldr	r1, [pc, #348]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3c:	f7f9 fea6 	bl	800588c <HAL_GetTick>
 800bb40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb42:	e00a      	b.n	800bb5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb44:	f7f9 fea2 	bl	800588c <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d901      	bls.n	800bb5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e095      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb5a:	4b4e      	ldr	r3, [pc, #312]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f003 020c 	and.w	r2, r3, #12
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d1eb      	bne.n	800bb44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0302 	and.w	r3, r3, #2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d023      	beq.n	800bbc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0304 	and.w	r3, r3, #4
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb84:	4b43      	ldr	r3, [pc, #268]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	4a42      	ldr	r2, [pc, #264]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bb8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bb9c:	4b3d      	ldr	r3, [pc, #244]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bba4:	4a3b      	ldr	r2, [pc, #236]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bba6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbac:	4b39      	ldr	r3, [pc, #228]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	4936      	ldr	r1, [pc, #216]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	608b      	str	r3, [r1, #8]
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b80      	cmp	r3, #128	@ 0x80
 800bbc4:	d105      	bne.n	800bbd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bbc6:	4b33      	ldr	r3, [pc, #204]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	4a32      	ldr	r2, [pc, #200]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bbcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bbd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbd2:	4b2f      	ldr	r3, [pc, #188]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 030f 	and.w	r3, r3, #15
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d21d      	bcs.n	800bc1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbe0:	4b2b      	ldr	r3, [pc, #172]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f023 020f 	bic.w	r2, r3, #15
 800bbe8:	4929      	ldr	r1, [pc, #164]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bbf0:	f7f9 fe4c 	bl	800588c <HAL_GetTick>
 800bbf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbf6:	e00a      	b.n	800bc0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbf8:	f7f9 fe48 	bl	800588c <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d901      	bls.n	800bc0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e03b      	b.n	800bc86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc0e:	4b20      	ldr	r3, [pc, #128]	@ (800bc90 <HAL_RCC_ClockConfig+0x260>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 030f 	and.w	r3, r3, #15
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d1ed      	bne.n	800bbf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d008      	beq.n	800bc3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc28:	4b1a      	ldr	r3, [pc, #104]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	4917      	ldr	r1, [pc, #92]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0308 	and.w	r3, r3, #8
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc46:	4b13      	ldr	r3, [pc, #76]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	490f      	ldr	r1, [pc, #60]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc5a:	f000 f825 	bl	800bca8 <HAL_RCC_GetSysClockFreq>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	4b0c      	ldr	r3, [pc, #48]	@ (800bc94 <HAL_RCC_ClockConfig+0x264>)
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	091b      	lsrs	r3, r3, #4
 800bc66:	f003 030f 	and.w	r3, r3, #15
 800bc6a:	490c      	ldr	r1, [pc, #48]	@ (800bc9c <HAL_RCC_ClockConfig+0x26c>)
 800bc6c:	5ccb      	ldrb	r3, [r1, r3]
 800bc6e:	f003 031f 	and.w	r3, r3, #31
 800bc72:	fa22 f303 	lsr.w	r3, r2, r3
 800bc76:	4a0a      	ldr	r2, [pc, #40]	@ (800bca0 <HAL_RCC_ClockConfig+0x270>)
 800bc78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bc7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bca4 <HAL_RCC_ClockConfig+0x274>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f9 fdb8 	bl	80057f4 <HAL_InitTick>
 800bc84:	4603      	mov	r3, r0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	40022000 	.word	0x40022000
 800bc94:	40021000 	.word	0x40021000
 800bc98:	04c4b400 	.word	0x04c4b400
 800bc9c:	0800d764 	.word	0x0800d764
 800bca0:	2000000c 	.word	0x2000000c
 800bca4:	20000014 	.word	0x20000014

0800bca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bcae:	4b2c      	ldr	r3, [pc, #176]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f003 030c 	and.w	r3, r3, #12
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d102      	bne.n	800bcc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bcba:	4b2a      	ldr	r3, [pc, #168]	@ (800bd64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bcbc:	613b      	str	r3, [r7, #16]
 800bcbe:	e047      	b.n	800bd50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bcc0:	4b27      	ldr	r3, [pc, #156]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	f003 030c 	and.w	r3, r3, #12
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d102      	bne.n	800bcd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bccc:	4b26      	ldr	r3, [pc, #152]	@ (800bd68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	e03e      	b.n	800bd50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bcd2:	4b23      	ldr	r3, [pc, #140]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	f003 030c 	and.w	r3, r3, #12
 800bcda:	2b0c      	cmp	r3, #12
 800bcdc:	d136      	bne.n	800bd4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bcde:	4b20      	ldr	r3, [pc, #128]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bce8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	091b      	lsrs	r3, r3, #4
 800bcee:	f003 030f 	and.w	r3, r3, #15
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d10c      	bne.n	800bd16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bcfc:	4a1a      	ldr	r2, [pc, #104]	@ (800bd68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd04:	4a16      	ldr	r2, [pc, #88]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd06:	68d2      	ldr	r2, [r2, #12]
 800bd08:	0a12      	lsrs	r2, r2, #8
 800bd0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd0e:	fb02 f303 	mul.w	r3, r2, r3
 800bd12:	617b      	str	r3, [r7, #20]
      break;
 800bd14:	e00c      	b.n	800bd30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd16:	4a13      	ldr	r2, [pc, #76]	@ (800bd64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	4a10      	ldr	r2, [pc, #64]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd20:	68d2      	ldr	r2, [r2, #12]
 800bd22:	0a12      	lsrs	r2, r2, #8
 800bd24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd28:	fb02 f303 	mul.w	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]
      break;
 800bd2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd30:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	0e5b      	lsrs	r3, r3, #25
 800bd36:	f003 0303 	and.w	r3, r3, #3
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd48:	613b      	str	r3, [r7, #16]
 800bd4a:	e001      	b.n	800bd50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd50:	693b      	ldr	r3, [r7, #16]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	40021000 	.word	0x40021000
 800bd64:	00f42400 	.word	0x00f42400
 800bd68:	016e3600 	.word	0x016e3600

0800bd6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bd72:	4b1e      	ldr	r3, [pc, #120]	@ (800bdec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f003 0303 	and.w	r3, r3, #3
 800bd7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd7c:	4b1b      	ldr	r3, [pc, #108]	@ (800bdec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	091b      	lsrs	r3, r3, #4
 800bd82:	f003 030f 	and.w	r3, r3, #15
 800bd86:	3301      	adds	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d10c      	bne.n	800bdaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd90:	4a17      	ldr	r2, [pc, #92]	@ (800bdf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd98:	4a14      	ldr	r2, [pc, #80]	@ (800bdec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd9a:	68d2      	ldr	r2, [r2, #12]
 800bd9c:	0a12      	lsrs	r2, r2, #8
 800bd9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bda2:	fb02 f303 	mul.w	r3, r2, r3
 800bda6:	617b      	str	r3, [r7, #20]
    break;
 800bda8:	e00c      	b.n	800bdc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bdaa:	4a12      	ldr	r2, [pc, #72]	@ (800bdf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb2:	4a0e      	ldr	r2, [pc, #56]	@ (800bdec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdb4:	68d2      	ldr	r2, [r2, #12]
 800bdb6:	0a12      	lsrs	r2, r2, #8
 800bdb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bdbc:	fb02 f303 	mul.w	r3, r2, r3
 800bdc0:	617b      	str	r3, [r7, #20]
    break;
 800bdc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bdc4:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	0e5b      	lsrs	r3, r3, #25
 800bdca:	f003 0303 	and.w	r3, r3, #3
 800bdce:	3301      	adds	r3, #1
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bddc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bdde:	687b      	ldr	r3, [r7, #4]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	371c      	adds	r7, #28
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	40021000 	.word	0x40021000
 800bdf0:	016e3600 	.word	0x016e3600
 800bdf4:	00f42400 	.word	0x00f42400

0800bdf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be00:	2300      	movs	r3, #0
 800be02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be04:	2300      	movs	r3, #0
 800be06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 8098 	beq.w	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be16:	2300      	movs	r3, #0
 800be18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be1a:	4b43      	ldr	r3, [pc, #268]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10d      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be26:	4b40      	ldr	r3, [pc, #256]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be2a:	4a3f      	ldr	r2, [pc, #252]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be30:	6593      	str	r3, [r2, #88]	@ 0x58
 800be32:	4b3d      	ldr	r3, [pc, #244]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be3a:	60bb      	str	r3, [r7, #8]
 800be3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be3e:	2301      	movs	r3, #1
 800be40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be42:	4b3a      	ldr	r3, [pc, #232]	@ (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a39      	ldr	r2, [pc, #228]	@ (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be4e:	f7f9 fd1d 	bl	800588c <HAL_GetTick>
 800be52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be54:	e009      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be56:	f7f9 fd19 	bl	800588c <HAL_GetTick>
 800be5a:	4602      	mov	r2, r0
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	2b02      	cmp	r3, #2
 800be62:	d902      	bls.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	74fb      	strb	r3, [r7, #19]
        break;
 800be68:	e005      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be6a:	4b30      	ldr	r3, [pc, #192]	@ (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0ef      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800be76:	7cfb      	ldrb	r3, [r7, #19]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d159      	bne.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800be7c:	4b2a      	ldr	r3, [pc, #168]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d01e      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	429a      	cmp	r2, r3
 800be96:	d019      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be98:	4b23      	ldr	r3, [pc, #140]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bea4:	4b20      	ldr	r3, [pc, #128]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beaa:	4a1f      	ldr	r2, [pc, #124]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800beac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800beb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800beb4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800beb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beba:	4a1b      	ldr	r2, [pc, #108]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bec4:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d016      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bed6:	f7f9 fcd9 	bl	800588c <HAL_GetTick>
 800beda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bedc:	e00b      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bede:	f7f9 fcd5 	bl	800588c <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beec:	4293      	cmp	r3, r2
 800beee:	d902      	bls.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	74fb      	strb	r3, [r7, #19]
            break;
 800bef4:	e006      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bef6:	4b0c      	ldr	r3, [pc, #48]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0ec      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bf04:	7cfb      	ldrb	r3, [r7, #19]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf0a:	4b07      	ldr	r3, [pc, #28]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf18:	4903      	ldr	r1, [pc, #12]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bf20:	e008      	b.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf22:	7cfb      	ldrb	r3, [r7, #19]
 800bf24:	74bb      	strb	r3, [r7, #18]
 800bf26:	e005      	b.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bf28:	40021000 	.word	0x40021000
 800bf2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf30:	7cfb      	ldrb	r3, [r7, #19]
 800bf32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf34:	7c7b      	ldrb	r3, [r7, #17]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d105      	bne.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf3a:	4ba7      	ldr	r3, [pc, #668]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf3e:	4aa6      	ldr	r2, [pc, #664]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf52:	4ba1      	ldr	r3, [pc, #644]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf58:	f023 0203 	bic.w	r2, r3, #3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	499d      	ldr	r1, [pc, #628]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00a      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf74:	4b98      	ldr	r3, [pc, #608]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf7a:	f023 020c 	bic.w	r2, r3, #12
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	4995      	ldr	r1, [pc, #596]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 0304 	and.w	r3, r3, #4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bf96:	4b90      	ldr	r3, [pc, #576]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	498c      	ldr	r1, [pc, #560]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bfb8:	4b87      	ldr	r3, [pc, #540]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	4984      	ldr	r1, [pc, #528]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0310 	and.w	r3, r3, #16
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00a      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bfda:	4b7f      	ldr	r3, [pc, #508]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	497b      	ldr	r1, [pc, #492]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfea:	4313      	orrs	r3, r2
 800bfec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00a      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bffc:	4b76      	ldr	r3, [pc, #472]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c002:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	4973      	ldr	r1, [pc, #460]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c01e:	4b6e      	ldr	r3, [pc, #440]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c024:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	496a      	ldr	r1, [pc, #424]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c02e:	4313      	orrs	r3, r2
 800c030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00a      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c040:	4b65      	ldr	r3, [pc, #404]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c046:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	4962      	ldr	r1, [pc, #392]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c050:	4313      	orrs	r3, r2
 800c052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00a      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c062:	4b5d      	ldr	r3, [pc, #372]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c068:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c070:	4959      	ldr	r1, [pc, #356]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c072:	4313      	orrs	r3, r2
 800c074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00a      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c084:	4b54      	ldr	r3, [pc, #336]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c086:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c08a:	f023 0203 	bic.w	r2, r3, #3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c092:	4951      	ldr	r1, [pc, #324]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c094:	4313      	orrs	r3, r2
 800c096:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0a6:	4b4c      	ldr	r3, [pc, #304]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b4:	4948      	ldr	r1, [pc, #288]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d015      	beq.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c0c8:	4b43      	ldr	r3, [pc, #268]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d6:	4940      	ldr	r1, [pc, #256]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0e6:	d105      	bne.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	4a3a      	ldr	r2, [pc, #232]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d015      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c100:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c106:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c10e:	4932      	ldr	r1, [pc, #200]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c110:	4313      	orrs	r3, r2
 800c112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c11a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c11e:	d105      	bne.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c120:	4b2d      	ldr	r3, [pc, #180]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	4a2c      	ldr	r2, [pc, #176]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c12a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d015      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c138:	4b27      	ldr	r3, [pc, #156]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c13e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c146:	4924      	ldr	r1, [pc, #144]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c148:	4313      	orrs	r3, r2
 800c14a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c156:	d105      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c158:	4b1f      	ldr	r3, [pc, #124]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	4a1e      	ldr	r2, [pc, #120]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c162:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d015      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c170:	4b19      	ldr	r3, [pc, #100]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c176:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c17e:	4916      	ldr	r1, [pc, #88]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c180:	4313      	orrs	r3, r2
 800c182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c18e:	d105      	bne.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c190:	4b11      	ldr	r3, [pc, #68]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	4a10      	ldr	r2, [pc, #64]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c19a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d019      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b6:	4908      	ldr	r1, [pc, #32]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1c6:	d109      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1c8:	4b03      	ldr	r3, [pc, #12]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	4a02      	ldr	r2, [pc, #8]	@ (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1d2:	60d3      	str	r3, [r2, #12]
 800c1d4:	e002      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c1d6:	bf00      	nop
 800c1d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d015      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c1e8:	4b29      	ldr	r3, [pc, #164]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1f6:	4926      	ldr	r1, [pc, #152]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c206:	d105      	bne.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c208:	4b21      	ldr	r3, [pc, #132]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	4a20      	ldr	r2, [pc, #128]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c20e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c212:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d015      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c220:	4b1b      	ldr	r3, [pc, #108]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c226:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c22e:	4918      	ldr	r1, [pc, #96]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c230:	4313      	orrs	r3, r2
 800c232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c23e:	d105      	bne.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c240:	4b13      	ldr	r3, [pc, #76]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4a12      	ldr	r2, [pc, #72]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c24a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d015      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c258:	4b0d      	ldr	r3, [pc, #52]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c25a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c25e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c266:	490a      	ldr	r1, [pc, #40]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c276:	d105      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c278:	4b05      	ldr	r3, [pc, #20]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	4a04      	ldr	r2, [pc, #16]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c284:	7cbb      	ldrb	r3, [r7, #18]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	40021000 	.word	0x40021000

0800c294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e049      	b.n	800c33a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f8 fcb4 	bl	8004c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2202      	movs	r2, #2
 800c2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4610      	mov	r0, r2
 800c2d4:	f000 fa5c 	bl	800c790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
	...

0800c344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d109      	bne.n	800c368 <HAL_TIM_PWM_Start+0x24>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	bf14      	ite	ne
 800c360:	2301      	movne	r3, #1
 800c362:	2300      	moveq	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	e03c      	b.n	800c3e2 <HAL_TIM_PWM_Start+0x9e>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d109      	bne.n	800c382 <HAL_TIM_PWM_Start+0x3e>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b01      	cmp	r3, #1
 800c378:	bf14      	ite	ne
 800c37a:	2301      	movne	r3, #1
 800c37c:	2300      	moveq	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	e02f      	b.n	800c3e2 <HAL_TIM_PWM_Start+0x9e>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b08      	cmp	r3, #8
 800c386:	d109      	bne.n	800c39c <HAL_TIM_PWM_Start+0x58>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b01      	cmp	r3, #1
 800c392:	bf14      	ite	ne
 800c394:	2301      	movne	r3, #1
 800c396:	2300      	moveq	r3, #0
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	e022      	b.n	800c3e2 <HAL_TIM_PWM_Start+0x9e>
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b0c      	cmp	r3, #12
 800c3a0:	d109      	bne.n	800c3b6 <HAL_TIM_PWM_Start+0x72>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	bf14      	ite	ne
 800c3ae:	2301      	movne	r3, #1
 800c3b0:	2300      	moveq	r3, #0
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	e015      	b.n	800c3e2 <HAL_TIM_PWM_Start+0x9e>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b10      	cmp	r3, #16
 800c3ba:	d109      	bne.n	800c3d0 <HAL_TIM_PWM_Start+0x8c>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	bf14      	ite	ne
 800c3c8:	2301      	movne	r3, #1
 800c3ca:	2300      	moveq	r3, #0
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	e008      	b.n	800c3e2 <HAL_TIM_PWM_Start+0x9e>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e0a6      	b.n	800c538 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <HAL_TIM_PWM_Start+0xb6>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3f8:	e023      	b.n	800c442 <HAL_TIM_PWM_Start+0xfe>
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b04      	cmp	r3, #4
 800c3fe:	d104      	bne.n	800c40a <HAL_TIM_PWM_Start+0xc6>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2202      	movs	r2, #2
 800c404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c408:	e01b      	b.n	800c442 <HAL_TIM_PWM_Start+0xfe>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	d104      	bne.n	800c41a <HAL_TIM_PWM_Start+0xd6>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c418:	e013      	b.n	800c442 <HAL_TIM_PWM_Start+0xfe>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b0c      	cmp	r3, #12
 800c41e:	d104      	bne.n	800c42a <HAL_TIM_PWM_Start+0xe6>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2202      	movs	r2, #2
 800c424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c428:	e00b      	b.n	800c442 <HAL_TIM_PWM_Start+0xfe>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b10      	cmp	r3, #16
 800c42e:	d104      	bne.n	800c43a <HAL_TIM_PWM_Start+0xf6>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2202      	movs	r2, #2
 800c434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c438:	e003      	b.n	800c442 <HAL_TIM_PWM_Start+0xfe>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2202      	movs	r2, #2
 800c43e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2201      	movs	r2, #1
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 fd7e 	bl	800cf4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a3a      	ldr	r2, [pc, #232]	@ (800c540 <HAL_TIM_PWM_Start+0x1fc>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d018      	beq.n	800c48c <HAL_TIM_PWM_Start+0x148>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a39      	ldr	r2, [pc, #228]	@ (800c544 <HAL_TIM_PWM_Start+0x200>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d013      	beq.n	800c48c <HAL_TIM_PWM_Start+0x148>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a37      	ldr	r2, [pc, #220]	@ (800c548 <HAL_TIM_PWM_Start+0x204>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d00e      	beq.n	800c48c <HAL_TIM_PWM_Start+0x148>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a36      	ldr	r2, [pc, #216]	@ (800c54c <HAL_TIM_PWM_Start+0x208>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d009      	beq.n	800c48c <HAL_TIM_PWM_Start+0x148>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a34      	ldr	r2, [pc, #208]	@ (800c550 <HAL_TIM_PWM_Start+0x20c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d004      	beq.n	800c48c <HAL_TIM_PWM_Start+0x148>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a33      	ldr	r2, [pc, #204]	@ (800c554 <HAL_TIM_PWM_Start+0x210>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d101      	bne.n	800c490 <HAL_TIM_PWM_Start+0x14c>
 800c48c:	2301      	movs	r3, #1
 800c48e:	e000      	b.n	800c492 <HAL_TIM_PWM_Start+0x14e>
 800c490:	2300      	movs	r3, #0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d007      	beq.n	800c4a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a25      	ldr	r2, [pc, #148]	@ (800c540 <HAL_TIM_PWM_Start+0x1fc>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d022      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b8:	d01d      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a26      	ldr	r2, [pc, #152]	@ (800c558 <HAL_TIM_PWM_Start+0x214>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d018      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a24      	ldr	r2, [pc, #144]	@ (800c55c <HAL_TIM_PWM_Start+0x218>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d013      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a23      	ldr	r2, [pc, #140]	@ (800c560 <HAL_TIM_PWM_Start+0x21c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00e      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a19      	ldr	r2, [pc, #100]	@ (800c544 <HAL_TIM_PWM_Start+0x200>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d009      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a18      	ldr	r2, [pc, #96]	@ (800c548 <HAL_TIM_PWM_Start+0x204>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d004      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x1b2>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a18      	ldr	r2, [pc, #96]	@ (800c554 <HAL_TIM_PWM_Start+0x210>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d115      	bne.n	800c522 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	4b19      	ldr	r3, [pc, #100]	@ (800c564 <HAL_TIM_PWM_Start+0x220>)
 800c4fe:	4013      	ands	r3, r2
 800c500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b06      	cmp	r3, #6
 800c506:	d015      	beq.n	800c534 <HAL_TIM_PWM_Start+0x1f0>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c50e:	d011      	beq.n	800c534 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f042 0201 	orr.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c520:	e008      	b.n	800c534 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f042 0201 	orr.w	r2, r2, #1
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	e000      	b.n	800c536 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	40012c00 	.word	0x40012c00
 800c544:	40013400 	.word	0x40013400
 800c548:	40014000 	.word	0x40014000
 800c54c:	40014400 	.word	0x40014400
 800c550:	40014800 	.word	0x40014800
 800c554:	40015000 	.word	0x40015000
 800c558:	40000400 	.word	0x40000400
 800c55c:	40000800 	.word	0x40000800
 800c560:	40000c00 	.word	0x40000c00
 800c564:	00010007 	.word	0x00010007

0800c568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c582:	2302      	movs	r3, #2
 800c584:	e0ff      	b.n	800c786 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b14      	cmp	r3, #20
 800c592:	f200 80f0 	bhi.w	800c776 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c596:	a201      	add	r2, pc, #4	@ (adr r2, 800c59c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59c:	0800c5f1 	.word	0x0800c5f1
 800c5a0:	0800c777 	.word	0x0800c777
 800c5a4:	0800c777 	.word	0x0800c777
 800c5a8:	0800c777 	.word	0x0800c777
 800c5ac:	0800c631 	.word	0x0800c631
 800c5b0:	0800c777 	.word	0x0800c777
 800c5b4:	0800c777 	.word	0x0800c777
 800c5b8:	0800c777 	.word	0x0800c777
 800c5bc:	0800c673 	.word	0x0800c673
 800c5c0:	0800c777 	.word	0x0800c777
 800c5c4:	0800c777 	.word	0x0800c777
 800c5c8:	0800c777 	.word	0x0800c777
 800c5cc:	0800c6b3 	.word	0x0800c6b3
 800c5d0:	0800c777 	.word	0x0800c777
 800c5d4:	0800c777 	.word	0x0800c777
 800c5d8:	0800c777 	.word	0x0800c777
 800c5dc:	0800c6f5 	.word	0x0800c6f5
 800c5e0:	0800c777 	.word	0x0800c777
 800c5e4:	0800c777 	.word	0x0800c777
 800c5e8:	0800c777 	.word	0x0800c777
 800c5ec:	0800c735 	.word	0x0800c735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 f97e 	bl	800c8f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	699a      	ldr	r2, [r3, #24]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f042 0208 	orr.w	r2, r2, #8
 800c60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	699a      	ldr	r2, [r3, #24]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f022 0204 	bic.w	r2, r2, #4
 800c61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6999      	ldr	r1, [r3, #24]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	691a      	ldr	r2, [r3, #16]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	430a      	orrs	r2, r1
 800c62c:	619a      	str	r2, [r3, #24]
      break;
 800c62e:	e0a5      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	4618      	mov	r0, r3
 800c638:	f000 f9f8 	bl	800ca2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	699a      	ldr	r2, [r3, #24]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c64a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	699a      	ldr	r2, [r3, #24]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c65a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6999      	ldr	r1, [r3, #24]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	021a      	lsls	r2, r3, #8
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	619a      	str	r2, [r3, #24]
      break;
 800c670:	e084      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fa6b 	bl	800cb54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	69da      	ldr	r2, [r3, #28]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f042 0208 	orr.w	r2, r2, #8
 800c68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69da      	ldr	r2, [r3, #28]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f022 0204 	bic.w	r2, r2, #4
 800c69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69d9      	ldr	r1, [r3, #28]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	691a      	ldr	r2, [r3, #16]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	430a      	orrs	r2, r1
 800c6ae:	61da      	str	r2, [r3, #28]
      break;
 800c6b0:	e064      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68b9      	ldr	r1, [r7, #8]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fadd 	bl	800cc78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	69da      	ldr	r2, [r3, #28]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69da      	ldr	r2, [r3, #28]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	69d9      	ldr	r1, [r3, #28]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	021a      	lsls	r2, r3, #8
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	61da      	str	r2, [r3, #28]
      break;
 800c6f2:	e043      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fb50 	bl	800cda0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f042 0208 	orr.w	r2, r2, #8
 800c70e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f022 0204 	bic.w	r2, r2, #4
 800c71e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	691a      	ldr	r2, [r3, #16]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	430a      	orrs	r2, r1
 800c730:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c732:	e023      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68b9      	ldr	r1, [r7, #8]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fb9a 	bl	800ce74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c74e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c75e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	021a      	lsls	r2, r3, #8
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	430a      	orrs	r2, r1
 800c772:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c774:	e002      	b.n	800c77c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	75fb      	strb	r3, [r7, #23]
      break;
 800c77a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c784:	7dfb      	ldrb	r3, [r7, #23]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop

0800c790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a4c      	ldr	r2, [pc, #304]	@ (800c8d4 <TIM_Base_SetConfig+0x144>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d017      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7ae:	d013      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a49      	ldr	r2, [pc, #292]	@ (800c8d8 <TIM_Base_SetConfig+0x148>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d00f      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a48      	ldr	r2, [pc, #288]	@ (800c8dc <TIM_Base_SetConfig+0x14c>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d00b      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a47      	ldr	r2, [pc, #284]	@ (800c8e0 <TIM_Base_SetConfig+0x150>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d007      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a46      	ldr	r2, [pc, #280]	@ (800c8e4 <TIM_Base_SetConfig+0x154>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d003      	beq.n	800c7d8 <TIM_Base_SetConfig+0x48>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a45      	ldr	r2, [pc, #276]	@ (800c8e8 <TIM_Base_SetConfig+0x158>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d108      	bne.n	800c7ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a39      	ldr	r2, [pc, #228]	@ (800c8d4 <TIM_Base_SetConfig+0x144>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d023      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7f8:	d01f      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a36      	ldr	r2, [pc, #216]	@ (800c8d8 <TIM_Base_SetConfig+0x148>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d01b      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a35      	ldr	r2, [pc, #212]	@ (800c8dc <TIM_Base_SetConfig+0x14c>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d017      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a34      	ldr	r2, [pc, #208]	@ (800c8e0 <TIM_Base_SetConfig+0x150>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d013      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a33      	ldr	r2, [pc, #204]	@ (800c8e4 <TIM_Base_SetConfig+0x154>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00f      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a33      	ldr	r2, [pc, #204]	@ (800c8ec <TIM_Base_SetConfig+0x15c>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d00b      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a32      	ldr	r2, [pc, #200]	@ (800c8f0 <TIM_Base_SetConfig+0x160>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d007      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a31      	ldr	r2, [pc, #196]	@ (800c8f4 <TIM_Base_SetConfig+0x164>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_Base_SetConfig+0xaa>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a2c      	ldr	r2, [pc, #176]	@ (800c8e8 <TIM_Base_SetConfig+0x158>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d108      	bne.n	800c84c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	4313      	orrs	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	4313      	orrs	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	689a      	ldr	r2, [r3, #8]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a18      	ldr	r2, [pc, #96]	@ (800c8d4 <TIM_Base_SetConfig+0x144>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d013      	beq.n	800c8a0 <TIM_Base_SetConfig+0x110>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8e4 <TIM_Base_SetConfig+0x154>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d00f      	beq.n	800c8a0 <TIM_Base_SetConfig+0x110>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a1a      	ldr	r2, [pc, #104]	@ (800c8ec <TIM_Base_SetConfig+0x15c>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00b      	beq.n	800c8a0 <TIM_Base_SetConfig+0x110>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a19      	ldr	r2, [pc, #100]	@ (800c8f0 <TIM_Base_SetConfig+0x160>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d007      	beq.n	800c8a0 <TIM_Base_SetConfig+0x110>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a18      	ldr	r2, [pc, #96]	@ (800c8f4 <TIM_Base_SetConfig+0x164>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d003      	beq.n	800c8a0 <TIM_Base_SetConfig+0x110>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a13      	ldr	r2, [pc, #76]	@ (800c8e8 <TIM_Base_SetConfig+0x158>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d103      	bne.n	800c8a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	691a      	ldr	r2, [r3, #16]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d105      	bne.n	800c8c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	f023 0201 	bic.w	r2, r3, #1
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	611a      	str	r2, [r3, #16]
  }
}
 800c8c6:	bf00      	nop
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	40012c00 	.word	0x40012c00
 800c8d8:	40000400 	.word	0x40000400
 800c8dc:	40000800 	.word	0x40000800
 800c8e0:	40000c00 	.word	0x40000c00
 800c8e4:	40013400 	.word	0x40013400
 800c8e8:	40015000 	.word	0x40015000
 800c8ec:	40014000 	.word	0x40014000
 800c8f0:	40014400 	.word	0x40014400
 800c8f4:	40014800 	.word	0x40014800

0800c8f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	f023 0201 	bic.w	r2, r3, #1
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	f023 0302 	bic.w	r3, r3, #2
 800c944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a30      	ldr	r2, [pc, #192]	@ (800ca14 <TIM_OC1_SetConfig+0x11c>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d013      	beq.n	800c980 <TIM_OC1_SetConfig+0x88>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a2f      	ldr	r2, [pc, #188]	@ (800ca18 <TIM_OC1_SetConfig+0x120>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00f      	beq.n	800c980 <TIM_OC1_SetConfig+0x88>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a2e      	ldr	r2, [pc, #184]	@ (800ca1c <TIM_OC1_SetConfig+0x124>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d00b      	beq.n	800c980 <TIM_OC1_SetConfig+0x88>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a2d      	ldr	r2, [pc, #180]	@ (800ca20 <TIM_OC1_SetConfig+0x128>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d007      	beq.n	800c980 <TIM_OC1_SetConfig+0x88>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a2c      	ldr	r2, [pc, #176]	@ (800ca24 <TIM_OC1_SetConfig+0x12c>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d003      	beq.n	800c980 <TIM_OC1_SetConfig+0x88>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a2b      	ldr	r2, [pc, #172]	@ (800ca28 <TIM_OC1_SetConfig+0x130>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d10c      	bne.n	800c99a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f023 0308 	bic.w	r3, r3, #8
 800c986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	697a      	ldr	r2, [r7, #20]
 800c98e:	4313      	orrs	r3, r2
 800c990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f023 0304 	bic.w	r3, r3, #4
 800c998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a1d      	ldr	r2, [pc, #116]	@ (800ca14 <TIM_OC1_SetConfig+0x11c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d013      	beq.n	800c9ca <TIM_OC1_SetConfig+0xd2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca18 <TIM_OC1_SetConfig+0x120>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d00f      	beq.n	800c9ca <TIM_OC1_SetConfig+0xd2>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a1b      	ldr	r2, [pc, #108]	@ (800ca1c <TIM_OC1_SetConfig+0x124>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d00b      	beq.n	800c9ca <TIM_OC1_SetConfig+0xd2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a1a      	ldr	r2, [pc, #104]	@ (800ca20 <TIM_OC1_SetConfig+0x128>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d007      	beq.n	800c9ca <TIM_OC1_SetConfig+0xd2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a19      	ldr	r2, [pc, #100]	@ (800ca24 <TIM_OC1_SetConfig+0x12c>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d003      	beq.n	800c9ca <TIM_OC1_SetConfig+0xd2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a18      	ldr	r2, [pc, #96]	@ (800ca28 <TIM_OC1_SetConfig+0x130>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d111      	bne.n	800c9ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	621a      	str	r2, [r3, #32]
}
 800ca08:	bf00      	nop
 800ca0a:	371c      	adds	r7, #28
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	40012c00 	.word	0x40012c00
 800ca18:	40013400 	.word	0x40013400
 800ca1c:	40014000 	.word	0x40014000
 800ca20:	40014400 	.word	0x40014400
 800ca24:	40014800 	.word	0x40014800
 800ca28:	40015000 	.word	0x40015000

0800ca2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	f023 0210 	bic.w	r2, r3, #16
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f023 0320 	bic.w	r3, r3, #32
 800ca7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	4313      	orrs	r3, r2
 800ca86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a2c      	ldr	r2, [pc, #176]	@ (800cb3c <TIM_OC2_SetConfig+0x110>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d007      	beq.n	800caa0 <TIM_OC2_SetConfig+0x74>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a2b      	ldr	r2, [pc, #172]	@ (800cb40 <TIM_OC2_SetConfig+0x114>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d003      	beq.n	800caa0 <TIM_OC2_SetConfig+0x74>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a2a      	ldr	r2, [pc, #168]	@ (800cb44 <TIM_OC2_SetConfig+0x118>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d10d      	bne.n	800cabc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	011b      	lsls	r3, r3, #4
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a1f      	ldr	r2, [pc, #124]	@ (800cb3c <TIM_OC2_SetConfig+0x110>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d013      	beq.n	800caec <TIM_OC2_SetConfig+0xc0>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a1e      	ldr	r2, [pc, #120]	@ (800cb40 <TIM_OC2_SetConfig+0x114>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d00f      	beq.n	800caec <TIM_OC2_SetConfig+0xc0>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a1e      	ldr	r2, [pc, #120]	@ (800cb48 <TIM_OC2_SetConfig+0x11c>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d00b      	beq.n	800caec <TIM_OC2_SetConfig+0xc0>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a1d      	ldr	r2, [pc, #116]	@ (800cb4c <TIM_OC2_SetConfig+0x120>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d007      	beq.n	800caec <TIM_OC2_SetConfig+0xc0>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a1c      	ldr	r2, [pc, #112]	@ (800cb50 <TIM_OC2_SetConfig+0x124>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d003      	beq.n	800caec <TIM_OC2_SetConfig+0xc0>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a17      	ldr	r2, [pc, #92]	@ (800cb44 <TIM_OC2_SetConfig+0x118>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d113      	bne.n	800cb14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800caf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cafa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	621a      	str	r2, [r3, #32]
}
 800cb2e:	bf00      	nop
 800cb30:	371c      	adds	r7, #28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	40012c00 	.word	0x40012c00
 800cb40:	40013400 	.word	0x40013400
 800cb44:	40015000 	.word	0x40015000
 800cb48:	40014000 	.word	0x40014000
 800cb4c:	40014400 	.word	0x40014400
 800cb50:	40014800 	.word	0x40014800

0800cb54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	021b      	lsls	r3, r3, #8
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a2b      	ldr	r2, [pc, #172]	@ (800cc60 <TIM_OC3_SetConfig+0x10c>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d007      	beq.n	800cbc6 <TIM_OC3_SetConfig+0x72>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a2a      	ldr	r2, [pc, #168]	@ (800cc64 <TIM_OC3_SetConfig+0x110>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d003      	beq.n	800cbc6 <TIM_OC3_SetConfig+0x72>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a29      	ldr	r2, [pc, #164]	@ (800cc68 <TIM_OC3_SetConfig+0x114>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d10d      	bne.n	800cbe2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cbcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	021b      	lsls	r3, r3, #8
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cbe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a1e      	ldr	r2, [pc, #120]	@ (800cc60 <TIM_OC3_SetConfig+0x10c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d013      	beq.n	800cc12 <TIM_OC3_SetConfig+0xbe>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a1d      	ldr	r2, [pc, #116]	@ (800cc64 <TIM_OC3_SetConfig+0x110>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d00f      	beq.n	800cc12 <TIM_OC3_SetConfig+0xbe>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a1d      	ldr	r2, [pc, #116]	@ (800cc6c <TIM_OC3_SetConfig+0x118>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d00b      	beq.n	800cc12 <TIM_OC3_SetConfig+0xbe>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a1c      	ldr	r2, [pc, #112]	@ (800cc70 <TIM_OC3_SetConfig+0x11c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d007      	beq.n	800cc12 <TIM_OC3_SetConfig+0xbe>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a1b      	ldr	r2, [pc, #108]	@ (800cc74 <TIM_OC3_SetConfig+0x120>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d003      	beq.n	800cc12 <TIM_OC3_SetConfig+0xbe>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a16      	ldr	r2, [pc, #88]	@ (800cc68 <TIM_OC3_SetConfig+0x114>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d113      	bne.n	800cc3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	011b      	lsls	r3, r3, #4
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	011b      	lsls	r3, r3, #4
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	621a      	str	r2, [r3, #32]
}
 800cc54:	bf00      	nop
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	40012c00 	.word	0x40012c00
 800cc64:	40013400 	.word	0x40013400
 800cc68:	40015000 	.word	0x40015000
 800cc6c:	40014000 	.word	0x40014000
 800cc70:	40014400 	.word	0x40014400
 800cc74:	40014800 	.word	0x40014800

0800cc78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	69db      	ldr	r3, [r3, #28]
 800cc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	021b      	lsls	r3, r3, #8
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ccc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	031b      	lsls	r3, r3, #12
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a2c      	ldr	r2, [pc, #176]	@ (800cd88 <TIM_OC4_SetConfig+0x110>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d007      	beq.n	800ccec <TIM_OC4_SetConfig+0x74>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a2b      	ldr	r2, [pc, #172]	@ (800cd8c <TIM_OC4_SetConfig+0x114>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d003      	beq.n	800ccec <TIM_OC4_SetConfig+0x74>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd90 <TIM_OC4_SetConfig+0x118>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d10d      	bne.n	800cd08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ccf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	031b      	lsls	r3, r3, #12
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cd88 <TIM_OC4_SetConfig+0x110>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d013      	beq.n	800cd38 <TIM_OC4_SetConfig+0xc0>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a1e      	ldr	r2, [pc, #120]	@ (800cd8c <TIM_OC4_SetConfig+0x114>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d00f      	beq.n	800cd38 <TIM_OC4_SetConfig+0xc0>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a1e      	ldr	r2, [pc, #120]	@ (800cd94 <TIM_OC4_SetConfig+0x11c>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00b      	beq.n	800cd38 <TIM_OC4_SetConfig+0xc0>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a1d      	ldr	r2, [pc, #116]	@ (800cd98 <TIM_OC4_SetConfig+0x120>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d007      	beq.n	800cd38 <TIM_OC4_SetConfig+0xc0>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800cd9c <TIM_OC4_SetConfig+0x124>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d003      	beq.n	800cd38 <TIM_OC4_SetConfig+0xc0>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a17      	ldr	r2, [pc, #92]	@ (800cd90 <TIM_OC4_SetConfig+0x118>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d113      	bne.n	800cd60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	019b      	lsls	r3, r3, #6
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	019b      	lsls	r3, r3, #6
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	621a      	str	r2, [r3, #32]
}
 800cd7a:	bf00      	nop
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	40012c00 	.word	0x40012c00
 800cd8c:	40013400 	.word	0x40013400
 800cd90:	40015000 	.word	0x40015000
 800cd94:	40014000 	.word	0x40014000
 800cd98:	40014400 	.word	0x40014400
 800cd9c:	40014800 	.word	0x40014800

0800cda0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cde4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	041b      	lsls	r3, r3, #16
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a19      	ldr	r2, [pc, #100]	@ (800ce5c <TIM_OC5_SetConfig+0xbc>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <TIM_OC5_SetConfig+0x82>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a18      	ldr	r2, [pc, #96]	@ (800ce60 <TIM_OC5_SetConfig+0xc0>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00f      	beq.n	800ce22 <TIM_OC5_SetConfig+0x82>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a17      	ldr	r2, [pc, #92]	@ (800ce64 <TIM_OC5_SetConfig+0xc4>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00b      	beq.n	800ce22 <TIM_OC5_SetConfig+0x82>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a16      	ldr	r2, [pc, #88]	@ (800ce68 <TIM_OC5_SetConfig+0xc8>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d007      	beq.n	800ce22 <TIM_OC5_SetConfig+0x82>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a15      	ldr	r2, [pc, #84]	@ (800ce6c <TIM_OC5_SetConfig+0xcc>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_OC5_SetConfig+0x82>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	@ (800ce70 <TIM_OC5_SetConfig+0xd0>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d109      	bne.n	800ce36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	021b      	lsls	r3, r3, #8
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	621a      	str	r2, [r3, #32]
}
 800ce50:	bf00      	nop
 800ce52:	371c      	adds	r7, #28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	40012c00 	.word	0x40012c00
 800ce60:	40013400 	.word	0x40013400
 800ce64:	40014000 	.word	0x40014000
 800ce68:	40014400 	.word	0x40014400
 800ce6c:	40014800 	.word	0x40014800
 800ce70:	40015000 	.word	0x40015000

0800ce74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ceba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	051b      	lsls	r3, r3, #20
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a1a      	ldr	r2, [pc, #104]	@ (800cf34 <TIM_OC6_SetConfig+0xc0>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d013      	beq.n	800cef8 <TIM_OC6_SetConfig+0x84>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a19      	ldr	r2, [pc, #100]	@ (800cf38 <TIM_OC6_SetConfig+0xc4>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d00f      	beq.n	800cef8 <TIM_OC6_SetConfig+0x84>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a18      	ldr	r2, [pc, #96]	@ (800cf3c <TIM_OC6_SetConfig+0xc8>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d00b      	beq.n	800cef8 <TIM_OC6_SetConfig+0x84>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a17      	ldr	r2, [pc, #92]	@ (800cf40 <TIM_OC6_SetConfig+0xcc>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d007      	beq.n	800cef8 <TIM_OC6_SetConfig+0x84>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a16      	ldr	r2, [pc, #88]	@ (800cf44 <TIM_OC6_SetConfig+0xd0>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d003      	beq.n	800cef8 <TIM_OC6_SetConfig+0x84>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a15      	ldr	r2, [pc, #84]	@ (800cf48 <TIM_OC6_SetConfig+0xd4>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d109      	bne.n	800cf0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cefe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	029b      	lsls	r3, r3, #10
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	621a      	str	r2, [r3, #32]
}
 800cf26:	bf00      	nop
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	40012c00 	.word	0x40012c00
 800cf38:	40013400 	.word	0x40013400
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	40014400 	.word	0x40014400
 800cf44:	40014800 	.word	0x40014800
 800cf48:	40015000 	.word	0x40015000

0800cf4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b087      	sub	sp, #28
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	f003 031f 	and.w	r3, r3, #31
 800cf5e:	2201      	movs	r2, #1
 800cf60:	fa02 f303 	lsl.w	r3, r2, r3
 800cf64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6a1a      	ldr	r2, [r3, #32]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	43db      	mvns	r3, r3
 800cf6e:	401a      	ands	r2, r3
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6a1a      	ldr	r2, [r3, #32]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f003 031f 	and.w	r3, r3, #31
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	fa01 f303 	lsl.w	r3, r1, r3
 800cf84:	431a      	orrs	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	621a      	str	r2, [r3, #32]
}
 800cf8a:	bf00      	nop
 800cf8c:	371c      	adds	r7, #28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
	...

0800cf98 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d109      	bne.n	800cfbc <HAL_TIMEx_PWMN_Start+0x24>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	bf14      	ite	ne
 800cfb4:	2301      	movne	r3, #1
 800cfb6:	2300      	moveq	r3, #0
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	e022      	b.n	800d002 <HAL_TIMEx_PWMN_Start+0x6a>
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	2b04      	cmp	r3, #4
 800cfc0:	d109      	bne.n	800cfd6 <HAL_TIMEx_PWMN_Start+0x3e>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	bf14      	ite	ne
 800cfce:	2301      	movne	r3, #1
 800cfd0:	2300      	moveq	r3, #0
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	e015      	b.n	800d002 <HAL_TIMEx_PWMN_Start+0x6a>
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b08      	cmp	r3, #8
 800cfda:	d109      	bne.n	800cff0 <HAL_TIMEx_PWMN_Start+0x58>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	bf14      	ite	ne
 800cfe8:	2301      	movne	r3, #1
 800cfea:	2300      	moveq	r3, #0
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	e008      	b.n	800d002 <HAL_TIMEx_PWMN_Start+0x6a>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	bf14      	ite	ne
 800cffc:	2301      	movne	r3, #1
 800cffe:	2300      	moveq	r3, #0
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e073      	b.n	800d0f2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d104      	bne.n	800d01a <HAL_TIMEx_PWMN_Start+0x82>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2202      	movs	r2, #2
 800d014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d018:	e013      	b.n	800d042 <HAL_TIMEx_PWMN_Start+0xaa>
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d104      	bne.n	800d02a <HAL_TIMEx_PWMN_Start+0x92>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d028:	e00b      	b.n	800d042 <HAL_TIMEx_PWMN_Start+0xaa>
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d104      	bne.n	800d03a <HAL_TIMEx_PWMN_Start+0xa2>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d038:	e003      	b.n	800d042 <HAL_TIMEx_PWMN_Start+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2204      	movs	r2, #4
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 f9a3 	bl	800d396 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d05e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a25      	ldr	r2, [pc, #148]	@ (800d0fc <HAL_TIMEx_PWMN_Start+0x164>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d022      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d072:	d01d      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a21      	ldr	r2, [pc, #132]	@ (800d100 <HAL_TIMEx_PWMN_Start+0x168>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d018      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a20      	ldr	r2, [pc, #128]	@ (800d104 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d013      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a1e      	ldr	r2, [pc, #120]	@ (800d108 <HAL_TIMEx_PWMN_Start+0x170>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00e      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a1d      	ldr	r2, [pc, #116]	@ (800d10c <HAL_TIMEx_PWMN_Start+0x174>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d009      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800d110 <HAL_TIMEx_PWMN_Start+0x178>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d004      	beq.n	800d0b0 <HAL_TIMEx_PWMN_Start+0x118>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d114 <HAL_TIMEx_PWMN_Start+0x17c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d115      	bne.n	800d0dc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	689a      	ldr	r2, [r3, #8]
 800d0b6:	4b18      	ldr	r3, [pc, #96]	@ (800d118 <HAL_TIMEx_PWMN_Start+0x180>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2b06      	cmp	r3, #6
 800d0c0:	d015      	beq.n	800d0ee <HAL_TIMEx_PWMN_Start+0x156>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c8:	d011      	beq.n	800d0ee <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f042 0201 	orr.w	r2, r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0da:	e008      	b.n	800d0ee <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f042 0201 	orr.w	r2, r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	e000      	b.n	800d0f0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	40012c00 	.word	0x40012c00
 800d100:	40000400 	.word	0x40000400
 800d104:	40000800 	.word	0x40000800
 800d108:	40000c00 	.word	0x40000c00
 800d10c:	40013400 	.word	0x40013400
 800d110:	40014000 	.word	0x40014000
 800d114:	40015000 	.word	0x40015000
 800d118:	00010007 	.word	0x00010007

0800d11c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d130:	2302      	movs	r3, #2
 800d132:	e074      	b.n	800d21e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a34      	ldr	r2, [pc, #208]	@ (800d22c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d009      	beq.n	800d172 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a33      	ldr	r2, [pc, #204]	@ (800d230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d004      	beq.n	800d172 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a31      	ldr	r2, [pc, #196]	@ (800d234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d108      	bne.n	800d184 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	4313      	orrs	r3, r2
 800d182:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d18e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4313      	orrs	r3, r2
 800d198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a21      	ldr	r2, [pc, #132]	@ (800d22c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d022      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1b4:	d01d      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a1f      	ldr	r2, [pc, #124]	@ (800d238 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d018      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a1d      	ldr	r2, [pc, #116]	@ (800d23c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d013      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d240 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d00e      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a15      	ldr	r2, [pc, #84]	@ (800d230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d009      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a18      	ldr	r2, [pc, #96]	@ (800d244 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d004      	beq.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a11      	ldr	r2, [pc, #68]	@ (800d234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d10c      	bne.n	800d20c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	4313      	orrs	r3, r2
 800d202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	40012c00 	.word	0x40012c00
 800d230:	40013400 	.word	0x40013400
 800d234:	40015000 	.word	0x40015000
 800d238:	40000400 	.word	0x40000400
 800d23c:	40000800 	.word	0x40000800
 800d240:	40000c00 	.word	0x40000c00
 800d244:	40014000 	.word	0x40014000

0800d248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d101      	bne.n	800d264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d260:	2302      	movs	r3, #2
 800d262:	e078      	b.n	800d356 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	4313      	orrs	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	041b      	lsls	r3, r3, #16
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800d364 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d009      	beq.n	800d30a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d368 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d004      	beq.n	800d30a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a19      	ldr	r2, [pc, #100]	@ (800d36c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d11c      	bne.n	800d344 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d314:	051b      	lsls	r3, r3, #20
 800d316:	4313      	orrs	r3, r2
 800d318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	6a1b      	ldr	r3, [r3, #32]
 800d324:	4313      	orrs	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d332:	4313      	orrs	r3, r2
 800d334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d340:	4313      	orrs	r3, r2
 800d342:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	40012c00 	.word	0x40012c00
 800d368:	40013400 	.word	0x40013400
 800d36c:	40015000 	.word	0x40015000

0800d370 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d386:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d396:	b480      	push	{r7}
 800d398:	b087      	sub	sp, #28
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	60b9      	str	r1, [r7, #8]
 800d3a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f003 030f 	and.w	r3, r3, #15
 800d3a8:	2204      	movs	r2, #4
 800d3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6a1a      	ldr	r2, [r3, #32]
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	43db      	mvns	r3, r3
 800d3b8:	401a      	ands	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6a1a      	ldr	r2, [r3, #32]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	f003 030f 	and.w	r3, r3, #15
 800d3c8:	6879      	ldr	r1, [r7, #4]
 800d3ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	621a      	str	r2, [r3, #32]
}
 800d3d4:	bf00      	nop
 800d3d6:	371c      	adds	r7, #28
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <_ZdlPvj>:
 800d3e0:	f000 b811 	b.w	800d406 <_ZdlPv>

0800d3e4 <_Znwj>:
 800d3e4:	2801      	cmp	r0, #1
 800d3e6:	bf38      	it	cc
 800d3e8:	2001      	movcc	r0, #1
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f000 f81c 	bl	800d42c <malloc>
 800d3f4:	b100      	cbz	r0, 800d3f8 <_Znwj+0x14>
 800d3f6:	bd10      	pop	{r4, pc}
 800d3f8:	f000 f808 	bl	800d40c <_ZSt15get_new_handlerv>
 800d3fc:	b908      	cbnz	r0, 800d402 <_Znwj+0x1e>
 800d3fe:	f000 f80d 	bl	800d41c <abort>
 800d402:	4780      	blx	r0
 800d404:	e7f3      	b.n	800d3ee <_Znwj+0xa>

0800d406 <_ZdlPv>:
 800d406:	f000 b819 	b.w	800d43c <free>
	...

0800d40c <_ZSt15get_new_handlerv>:
 800d40c:	4b02      	ldr	r3, [pc, #8]	@ (800d418 <_ZSt15get_new_handlerv+0xc>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	f3bf 8f5b 	dmb	ish
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	20000658 	.word	0x20000658

0800d41c <abort>:
 800d41c:	b508      	push	{r3, lr}
 800d41e:	2006      	movs	r0, #6
 800d420:	f000 f8f2 	bl	800d608 <raise>
 800d424:	2001      	movs	r0, #1
 800d426:	f7f7 fd05 	bl	8004e34 <_exit>
	...

0800d42c <malloc>:
 800d42c:	4b02      	ldr	r3, [pc, #8]	@ (800d438 <malloc+0xc>)
 800d42e:	4601      	mov	r1, r0
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	f000 b82d 	b.w	800d490 <_malloc_r>
 800d436:	bf00      	nop
 800d438:	2000001c 	.word	0x2000001c

0800d43c <free>:
 800d43c:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <free+0xc>)
 800d43e:	4601      	mov	r1, r0
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	f000 b939 	b.w	800d6b8 <_free_r>
 800d446:	bf00      	nop
 800d448:	2000001c 	.word	0x2000001c

0800d44c <sbrk_aligned>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	4e0f      	ldr	r6, [pc, #60]	@ (800d48c <sbrk_aligned+0x40>)
 800d450:	460c      	mov	r4, r1
 800d452:	6831      	ldr	r1, [r6, #0]
 800d454:	4605      	mov	r5, r0
 800d456:	b911      	cbnz	r1, 800d45e <sbrk_aligned+0x12>
 800d458:	f000 f8f2 	bl	800d640 <_sbrk_r>
 800d45c:	6030      	str	r0, [r6, #0]
 800d45e:	4621      	mov	r1, r4
 800d460:	4628      	mov	r0, r5
 800d462:	f000 f8ed 	bl	800d640 <_sbrk_r>
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	d103      	bne.n	800d472 <sbrk_aligned+0x26>
 800d46a:	f04f 34ff 	mov.w	r4, #4294967295
 800d46e:	4620      	mov	r0, r4
 800d470:	bd70      	pop	{r4, r5, r6, pc}
 800d472:	1cc4      	adds	r4, r0, #3
 800d474:	f024 0403 	bic.w	r4, r4, #3
 800d478:	42a0      	cmp	r0, r4
 800d47a:	d0f8      	beq.n	800d46e <sbrk_aligned+0x22>
 800d47c:	1a21      	subs	r1, r4, r0
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f8de 	bl	800d640 <_sbrk_r>
 800d484:	3001      	adds	r0, #1
 800d486:	d1f2      	bne.n	800d46e <sbrk_aligned+0x22>
 800d488:	e7ef      	b.n	800d46a <sbrk_aligned+0x1e>
 800d48a:	bf00      	nop
 800d48c:	2000065c 	.word	0x2000065c

0800d490 <_malloc_r>:
 800d490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d494:	1ccd      	adds	r5, r1, #3
 800d496:	f025 0503 	bic.w	r5, r5, #3
 800d49a:	3508      	adds	r5, #8
 800d49c:	2d0c      	cmp	r5, #12
 800d49e:	bf38      	it	cc
 800d4a0:	250c      	movcc	r5, #12
 800d4a2:	2d00      	cmp	r5, #0
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	db01      	blt.n	800d4ac <_malloc_r+0x1c>
 800d4a8:	42a9      	cmp	r1, r5
 800d4aa:	d904      	bls.n	800d4b6 <_malloc_r+0x26>
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	6033      	str	r3, [r6, #0]
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d58c <_malloc_r+0xfc>
 800d4ba:	f000 f869 	bl	800d590 <__malloc_lock>
 800d4be:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c2:	461c      	mov	r4, r3
 800d4c4:	bb44      	cbnz	r4, 800d518 <_malloc_r+0x88>
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7ff ffbf 	bl	800d44c <sbrk_aligned>
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	d158      	bne.n	800d586 <_malloc_r+0xf6>
 800d4d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d4d8:	4627      	mov	r7, r4
 800d4da:	2f00      	cmp	r7, #0
 800d4dc:	d143      	bne.n	800d566 <_malloc_r+0xd6>
 800d4de:	2c00      	cmp	r4, #0
 800d4e0:	d04b      	beq.n	800d57a <_malloc_r+0xea>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	eb04 0903 	add.w	r9, r4, r3
 800d4ec:	f000 f8a8 	bl	800d640 <_sbrk_r>
 800d4f0:	4581      	cmp	r9, r0
 800d4f2:	d142      	bne.n	800d57a <_malloc_r+0xea>
 800d4f4:	6821      	ldr	r1, [r4, #0]
 800d4f6:	1a6d      	subs	r5, r5, r1
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ffa6 	bl	800d44c <sbrk_aligned>
 800d500:	3001      	adds	r0, #1
 800d502:	d03a      	beq.n	800d57a <_malloc_r+0xea>
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	442b      	add	r3, r5
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	f8d8 3000 	ldr.w	r3, [r8]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	bb62      	cbnz	r2, 800d56c <_malloc_r+0xdc>
 800d512:	f8c8 7000 	str.w	r7, [r8]
 800d516:	e00f      	b.n	800d538 <_malloc_r+0xa8>
 800d518:	6822      	ldr	r2, [r4, #0]
 800d51a:	1b52      	subs	r2, r2, r5
 800d51c:	d420      	bmi.n	800d560 <_malloc_r+0xd0>
 800d51e:	2a0b      	cmp	r2, #11
 800d520:	d917      	bls.n	800d552 <_malloc_r+0xc2>
 800d522:	1961      	adds	r1, r4, r5
 800d524:	42a3      	cmp	r3, r4
 800d526:	6025      	str	r5, [r4, #0]
 800d528:	bf18      	it	ne
 800d52a:	6059      	strne	r1, [r3, #4]
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	bf08      	it	eq
 800d530:	f8c8 1000 	streq.w	r1, [r8]
 800d534:	5162      	str	r2, [r4, r5]
 800d536:	604b      	str	r3, [r1, #4]
 800d538:	4630      	mov	r0, r6
 800d53a:	f000 f82f 	bl	800d59c <__malloc_unlock>
 800d53e:	f104 000b 	add.w	r0, r4, #11
 800d542:	1d23      	adds	r3, r4, #4
 800d544:	f020 0007 	bic.w	r0, r0, #7
 800d548:	1ac2      	subs	r2, r0, r3
 800d54a:	bf1c      	itt	ne
 800d54c:	1a1b      	subne	r3, r3, r0
 800d54e:	50a3      	strne	r3, [r4, r2]
 800d550:	e7af      	b.n	800d4b2 <_malloc_r+0x22>
 800d552:	6862      	ldr	r2, [r4, #4]
 800d554:	42a3      	cmp	r3, r4
 800d556:	bf0c      	ite	eq
 800d558:	f8c8 2000 	streq.w	r2, [r8]
 800d55c:	605a      	strne	r2, [r3, #4]
 800d55e:	e7eb      	b.n	800d538 <_malloc_r+0xa8>
 800d560:	4623      	mov	r3, r4
 800d562:	6864      	ldr	r4, [r4, #4]
 800d564:	e7ae      	b.n	800d4c4 <_malloc_r+0x34>
 800d566:	463c      	mov	r4, r7
 800d568:	687f      	ldr	r7, [r7, #4]
 800d56a:	e7b6      	b.n	800d4da <_malloc_r+0x4a>
 800d56c:	461a      	mov	r2, r3
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	42a3      	cmp	r3, r4
 800d572:	d1fb      	bne.n	800d56c <_malloc_r+0xdc>
 800d574:	2300      	movs	r3, #0
 800d576:	6053      	str	r3, [r2, #4]
 800d578:	e7de      	b.n	800d538 <_malloc_r+0xa8>
 800d57a:	230c      	movs	r3, #12
 800d57c:	6033      	str	r3, [r6, #0]
 800d57e:	4630      	mov	r0, r6
 800d580:	f000 f80c 	bl	800d59c <__malloc_unlock>
 800d584:	e794      	b.n	800d4b0 <_malloc_r+0x20>
 800d586:	6005      	str	r5, [r0, #0]
 800d588:	e7d6      	b.n	800d538 <_malloc_r+0xa8>
 800d58a:	bf00      	nop
 800d58c:	20000660 	.word	0x20000660

0800d590 <__malloc_lock>:
 800d590:	4801      	ldr	r0, [pc, #4]	@ (800d598 <__malloc_lock+0x8>)
 800d592:	f000 b88f 	b.w	800d6b4 <__retarget_lock_acquire_recursive>
 800d596:	bf00      	nop
 800d598:	200007a0 	.word	0x200007a0

0800d59c <__malloc_unlock>:
 800d59c:	4801      	ldr	r0, [pc, #4]	@ (800d5a4 <__malloc_unlock+0x8>)
 800d59e:	f000 b88a 	b.w	800d6b6 <__retarget_lock_release_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	200007a0 	.word	0x200007a0

0800d5a8 <memset>:
 800d5a8:	4402      	add	r2, r0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d100      	bne.n	800d5b2 <memset+0xa>
 800d5b0:	4770      	bx	lr
 800d5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d5b6:	e7f9      	b.n	800d5ac <memset+0x4>

0800d5b8 <_raise_r>:
 800d5b8:	291f      	cmp	r1, #31
 800d5ba:	b538      	push	{r3, r4, r5, lr}
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	d904      	bls.n	800d5cc <_raise_r+0x14>
 800d5c2:	2316      	movs	r3, #22
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5ce:	b112      	cbz	r2, 800d5d6 <_raise_r+0x1e>
 800d5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5d4:	b94b      	cbnz	r3, 800d5ea <_raise_r+0x32>
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 f830 	bl	800d63c <_getpid_r>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4601      	mov	r1, r0
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e6:	f000 b817 	b.w	800d618 <_kill_r>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d00a      	beq.n	800d604 <_raise_r+0x4c>
 800d5ee:	1c59      	adds	r1, r3, #1
 800d5f0:	d103      	bne.n	800d5fa <_raise_r+0x42>
 800d5f2:	2316      	movs	r3, #22
 800d5f4:	6003      	str	r3, [r0, #0]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	e7e7      	b.n	800d5ca <_raise_r+0x12>
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d600:	4620      	mov	r0, r4
 800d602:	4798      	blx	r3
 800d604:	2000      	movs	r0, #0
 800d606:	e7e0      	b.n	800d5ca <_raise_r+0x12>

0800d608 <raise>:
 800d608:	4b02      	ldr	r3, [pc, #8]	@ (800d614 <raise+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f7ff bfd3 	b.w	800d5b8 <_raise_r>
 800d612:	bf00      	nop
 800d614:	2000001c 	.word	0x2000001c

0800d618 <_kill_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	@ (800d638 <_kill_r+0x20>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	f7f7 fbf5 	bl	8004e14 <_kill>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d102      	bne.n	800d634 <_kill_r+0x1c>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b103      	cbz	r3, 800d634 <_kill_r+0x1c>
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	bd38      	pop	{r3, r4, r5, pc}
 800d636:	bf00      	nop
 800d638:	2000079c 	.word	0x2000079c

0800d63c <_getpid_r>:
 800d63c:	f7f7 bbe2 	b.w	8004e04 <_getpid>

0800d640 <_sbrk_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4d06      	ldr	r5, [pc, #24]	@ (800d65c <_sbrk_r+0x1c>)
 800d644:	2300      	movs	r3, #0
 800d646:	4604      	mov	r4, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	602b      	str	r3, [r5, #0]
 800d64c:	f7f7 fbfe 	bl	8004e4c <_sbrk>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_sbrk_r+0x1a>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_sbrk_r+0x1a>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	2000079c 	.word	0x2000079c

0800d660 <__errno>:
 800d660:	4b01      	ldr	r3, [pc, #4]	@ (800d668 <__errno+0x8>)
 800d662:	6818      	ldr	r0, [r3, #0]
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	2000001c 	.word	0x2000001c

0800d66c <__libc_init_array>:
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	4d0d      	ldr	r5, [pc, #52]	@ (800d6a4 <__libc_init_array+0x38>)
 800d670:	4c0d      	ldr	r4, [pc, #52]	@ (800d6a8 <__libc_init_array+0x3c>)
 800d672:	1b64      	subs	r4, r4, r5
 800d674:	10a4      	asrs	r4, r4, #2
 800d676:	2600      	movs	r6, #0
 800d678:	42a6      	cmp	r6, r4
 800d67a:	d109      	bne.n	800d690 <__libc_init_array+0x24>
 800d67c:	4d0b      	ldr	r5, [pc, #44]	@ (800d6ac <__libc_init_array+0x40>)
 800d67e:	4c0c      	ldr	r4, [pc, #48]	@ (800d6b0 <__libc_init_array+0x44>)
 800d680:	f000 f864 	bl	800d74c <_init>
 800d684:	1b64      	subs	r4, r4, r5
 800d686:	10a4      	asrs	r4, r4, #2
 800d688:	2600      	movs	r6, #0
 800d68a:	42a6      	cmp	r6, r4
 800d68c:	d105      	bne.n	800d69a <__libc_init_array+0x2e>
 800d68e:	bd70      	pop	{r4, r5, r6, pc}
 800d690:	f855 3b04 	ldr.w	r3, [r5], #4
 800d694:	4798      	blx	r3
 800d696:	3601      	adds	r6, #1
 800d698:	e7ee      	b.n	800d678 <__libc_init_array+0xc>
 800d69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d69e:	4798      	blx	r3
 800d6a0:	3601      	adds	r6, #1
 800d6a2:	e7f2      	b.n	800d68a <__libc_init_array+0x1e>
 800d6a4:	0800d784 	.word	0x0800d784
 800d6a8:	0800d784 	.word	0x0800d784
 800d6ac:	0800d784 	.word	0x0800d784
 800d6b0:	0800d7a8 	.word	0x0800d7a8

0800d6b4 <__retarget_lock_acquire_recursive>:
 800d6b4:	4770      	bx	lr

0800d6b6 <__retarget_lock_release_recursive>:
 800d6b6:	4770      	bx	lr

0800d6b8 <_free_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	d041      	beq.n	800d744 <_free_r+0x8c>
 800d6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c4:	1f0c      	subs	r4, r1, #4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfb8      	it	lt
 800d6ca:	18e4      	addlt	r4, r4, r3
 800d6cc:	f7ff ff60 	bl	800d590 <__malloc_lock>
 800d6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d748 <_free_r+0x90>)
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	b933      	cbnz	r3, 800d6e4 <_free_r+0x2c>
 800d6d6:	6063      	str	r3, [r4, #4]
 800d6d8:	6014      	str	r4, [r2, #0]
 800d6da:	4628      	mov	r0, r5
 800d6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6e0:	f7ff bf5c 	b.w	800d59c <__malloc_unlock>
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d908      	bls.n	800d6fa <_free_r+0x42>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	1821      	adds	r1, r4, r0
 800d6ec:	428b      	cmp	r3, r1
 800d6ee:	bf01      	itttt	eq
 800d6f0:	6819      	ldreq	r1, [r3, #0]
 800d6f2:	685b      	ldreq	r3, [r3, #4]
 800d6f4:	1809      	addeq	r1, r1, r0
 800d6f6:	6021      	streq	r1, [r4, #0]
 800d6f8:	e7ed      	b.n	800d6d6 <_free_r+0x1e>
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	b10b      	cbz	r3, 800d704 <_free_r+0x4c>
 800d700:	42a3      	cmp	r3, r4
 800d702:	d9fa      	bls.n	800d6fa <_free_r+0x42>
 800d704:	6811      	ldr	r1, [r2, #0]
 800d706:	1850      	adds	r0, r2, r1
 800d708:	42a0      	cmp	r0, r4
 800d70a:	d10b      	bne.n	800d724 <_free_r+0x6c>
 800d70c:	6820      	ldr	r0, [r4, #0]
 800d70e:	4401      	add	r1, r0
 800d710:	1850      	adds	r0, r2, r1
 800d712:	4283      	cmp	r3, r0
 800d714:	6011      	str	r1, [r2, #0]
 800d716:	d1e0      	bne.n	800d6da <_free_r+0x22>
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	6053      	str	r3, [r2, #4]
 800d71e:	4408      	add	r0, r1
 800d720:	6010      	str	r0, [r2, #0]
 800d722:	e7da      	b.n	800d6da <_free_r+0x22>
 800d724:	d902      	bls.n	800d72c <_free_r+0x74>
 800d726:	230c      	movs	r3, #12
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	e7d6      	b.n	800d6da <_free_r+0x22>
 800d72c:	6820      	ldr	r0, [r4, #0]
 800d72e:	1821      	adds	r1, r4, r0
 800d730:	428b      	cmp	r3, r1
 800d732:	bf04      	itt	eq
 800d734:	6819      	ldreq	r1, [r3, #0]
 800d736:	685b      	ldreq	r3, [r3, #4]
 800d738:	6063      	str	r3, [r4, #4]
 800d73a:	bf04      	itt	eq
 800d73c:	1809      	addeq	r1, r1, r0
 800d73e:	6021      	streq	r1, [r4, #0]
 800d740:	6054      	str	r4, [r2, #4]
 800d742:	e7ca      	b.n	800d6da <_free_r+0x22>
 800d744:	bd38      	pop	{r3, r4, r5, pc}
 800d746:	bf00      	nop
 800d748:	20000660 	.word	0x20000660

0800d74c <_init>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	bf00      	nop
 800d750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d752:	bc08      	pop	{r3}
 800d754:	469e      	mov	lr, r3
 800d756:	4770      	bx	lr

0800d758 <_fini>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	bf00      	nop
 800d75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75e:	bc08      	pop	{r3}
 800d760:	469e      	mov	lr, r3
 800d762:	4770      	bx	lr
