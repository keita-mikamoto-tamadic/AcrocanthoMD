
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a128  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a300  0800a300  0000b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a320  0800a320  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a320  0800a320  0000c05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a320  0800a320  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a320  0800a320  0000b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a32c  0800a32c  0000b32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a334  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000005c  0800a390  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800a390  0000c530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002868f  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005027  00000000  00000000  0003471b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  00039748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001585  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e636  00000000  00000000  0003c8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202ef  00000000  00000000  0006af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001211ce  00000000  00000000  0008b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac3c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ebc  00000000  00000000  001ac404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b42c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a2e8 	.word	0x0800a2e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	0800a2e8 	.word	0x0800a2e8

08000218 <_ZN3Ang7raw2radEt>:
  volatile int8_t i2c_rx_complete;
  
  int16_t compAng();
  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000224:	887b      	ldrh	r3, [r7, #2]
 8000226:	ee07 3a90 	vmov	s15, r3
 800022a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800022e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000250 <_ZN3Ang7raw2radEt+0x38>
 8000232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000236:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000254 <_ZN3Ang7raw2radEt+0x3c>
 800023a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800023e:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000242:	eeb0 0a67 	vmov.f32	s0, s15
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40c90fdb 	.word	0x40c90fdb
 8000254:	45800000 	.word	0x45800000

08000258 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TaskTime * static_cast<float>(compTime));
 8000264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000268:	ee07 3a90 	vmov	s15, r3
 800026c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000270:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80002ac <_ZN3Ang8raw2radsEs+0x54>
 8000274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000278:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80002b0 <_ZN3Ang8raw2radsEs+0x58>
 800027c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	7a9b      	ldrb	r3, [r3, #10]
 8000284:	ee07 3a90 	vmov	s15, r3
 8000288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800028c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80002b4 <_ZN3Ang8raw2radsEs+0x5c>
 8000290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000294:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000298:	eef0 7a66 	vmov.f32	s15, s13
  }
 800029c:	eeb0 0a67 	vmov.f32	s0, s15
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40c90fdb 	.word	0x40c90fdb
 80002b0:	45800000 	.word	0x45800000
 80002b4:	38d1b717 	.word	0x38d1b717

080002b8 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "param.h"
#include "user_task.h"

extern Ang ang;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<angData>()) {}
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x68>)
 80002c6:	601a      	str	r2, [r3, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	721a      	strb	r2, [r3, #8]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<angData>()) {}
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	725a      	strb	r2, [r3, #9]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	729a      	strb	r2, [r3, #10]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f04f 0200 	mov.w	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<angData>()) {}
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	825a      	strh	r2, [r3, #18]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	829a      	strh	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2200      	movs	r2, #0
 80002f8:	849a      	strh	r2, [r3, #36]	@ 0x24
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<angData>()) {}
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3328      	adds	r3, #40	@ 0x28
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f9c2 	bl	8000698 <_ZSt11make_uniqueI7angDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4618      	mov	r0, r3
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	42480000 	.word	0x42480000

08000324 <_ZN3Ang4readEv>:

void Ang::read() {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7a1b      	ldrb	r3, [r3, #8]
 8000330:	f083 0301 	eor.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d00c      	beq.n	8000354 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 800033a:	230c      	movs	r3, #12
 800033c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6858      	ldr	r0, [r3, #4]
 8000342:	f107 020f 	add.w	r2, r7, #15
 8000346:	2301      	movs	r3, #1
 8000348:	216c      	movs	r1, #108	@ 0x6c
 800034a:	f005 fe35 	bl	8005fb8 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2201      	movs	r2, #1
 8000352:	721a      	strb	r2, [r3, #8]
  }
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <_ZN3Ang7receiveEv>:

void Ang::receive() {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800036a:	b25b      	sxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf14      	ite	ne
 8000370:	2301      	movne	r3, #1
 8000372:	2300      	moveq	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00c      	beq.n	8000394 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6858      	ldr	r0, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f103 0210 	add.w	r2, r3, #16
 8000384:	2302      	movs	r3, #2
 8000386:	216c      	movs	r1, #108	@ 0x6c
 8000388:	f005 ff2a 	bl	80061e0 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  }
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 800039c:	b5b0      	push	{r4, r5, r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  read();
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f7ff ffbd 	bl	8000324 <_ZN3Ang4readEv>
  receive();
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ffd6 	bl	800035c <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf14      	ite	ne
 80003bc:	2301      	movne	r3, #1
 80003be:	2300      	moveq	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d035      	beq.n	8000432 <_ZN3Ang8getAngleEv+0x96>
    rawAngPast = rawAng;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	8a5a      	ldrh	r2, [r3, #18]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	829a      	strh	r2, [r3, #20]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7c1b      	ldrb	r3, [r3, #16]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7c52      	ldrb	r2, [r2, #17]
 80003da:	4313      	orrs	r3, r2
 80003dc:	b29a      	uxth	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	825a      	strh	r2, [r3, #18]
    mechAngPast = data->mechAng;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3328      	adds	r3, #40	@ 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f972 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 80003ec:	4603      	mov	r3, r0
 80003ee:	685a      	ldr	r2, [r3, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	619a      	str	r2, [r3, #24]
    data->mechAng = raw2rad(rawAng);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	8a5d      	ldrh	r5, [r3, #18]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3328      	adds	r3, #40	@ 0x28
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f967 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000402:	4604      	mov	r4, r0
 8000404:	4629      	mov	r1, r5
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff ff06 	bl	8000218 <_ZN3Ang7raw2radEt>
 800040c:	eef0 7a40 	vmov.f32	s15, s0
 8000410:	edc4 7a01 	vstr	s15, [r4, #4]
    
    readStart = false;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	721a      	strb	r2, [r3, #8]
    i2c_rx_complete = false;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    compTime = comp;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7a5a      	ldrb	r2, [r3, #9]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	729a      	strb	r2, [r3, #10]
    comp = 0;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2200      	movs	r2, #0
 800042e:	725a      	strb	r2, [r3, #9]

  } else ++comp;

}
 8000430:	e005      	b.n	800043e <_ZN3Ang8getAngleEv+0xa2>
  } else ++comp;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	7a5b      	ldrb	r3, [r3, #9]
 8000436:	3301      	adds	r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	725a      	strb	r2, [r3, #9]
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bdb0      	pop	{r4, r5, r7, pc}

08000446 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000446:	b5b0      	push	{r4, r5, r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
  if (comp) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	7a5b      	ldrb	r3, [r3, #9]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d14d      	bne.n	80004f2 <_ZN3Ang6getVelEv+0xac>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	8a5a      	ldrh	r2, [r3, #18]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	8a9b      	ldrh	r3, [r3, #20]
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	b29b      	uxth	r3, r3
 8000462:	b21a      	sxth	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	839a      	strh	r2, [r3, #28]
    floatdiff = data->mechAng - mechAngPast;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3328      	adds	r3, #40	@ 0x28
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f92f 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000472:	4603      	mov	r3, r0
 8000474:	ed93 7a01 	vldr	s14, [r3, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	edd3 7a06 	vldr	s15, [r3, #24]
 800047e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	edc3 7a08 	vstr	s15, [r3, #32]

    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    if (diff > 2048) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800048e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000492:	dd0a      	ble.n	80004aa <_ZN3Ang6getVelEv+0x64>
      diff -= 4096;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800049a:	b29b      	uxth	r3, r3
 800049c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	b21a      	sxth	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	839a      	strh	r2, [r3, #28]
 80004a8:	e00f      	b.n	80004ca <_ZN3Ang6getVelEv+0x84>
    } else if (diff < -2048) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80004b0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80004b4:	da09      	bge.n	80004ca <_ZN3Ang6getVelEv+0x84>
      diff += 4096;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	b21a      	sxth	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	839a      	strh	r2, [r3, #28]
    }
    
    data->actVel = raw2rads(diff);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f9b3 501c 	ldrsh.w	r5, [r3, #28]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3328      	adds	r3, #40	@ 0x28
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f8fb 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 80004da:	4604      	mov	r4, r0
 80004dc:	4629      	mov	r1, r5
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff feba 	bl	8000258 <_ZN3Ang8raw2radsEs>
 80004e4:	eef0 7a40 	vmov.f32	s15, s0
 80004e8:	edc4 7a03 	vstr	s15, [r4, #12]
    mechAngleVelLPF();
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f000 f80f 	bl	8000510 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3328      	adds	r3, #40	@ 0x28
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f8ea 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 80004fc:	4602      	mov	r2, r0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000504:	8293      	strh	r3, [r2, #20]
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000510 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000510:	b580      	push	{r7, lr}
 8000512:	ed2d 8b02 	vpush	{d8}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	edd3 7a00 	vldr	s15, [r3]
 8000522:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80005b0 <_ZN3Ang15mechAngleVelLPFEv+0xa0>
 8000526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800052a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800052e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000532:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TaskTime * static_cast<float>(compTime)) / timeConst;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a9b      	ldrb	r3, [r3, #10]
 800053a:	ee07 3a90 	vmov	s15, r3
 800053e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000542:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80005b4 <_ZN3Ang15mechAngleVelLPFEv+0xa4>
 8000546:	ee67 6a87 	vmul.f32	s13, s15, s14
 800054a:	ed97 7a03 	vldr	s14, [r7, #12]
 800054e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000552:	edc7 7a02 	vstr	s15, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3328      	adds	r3, #40	@ 0x28
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f8b8 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000560:	4603      	mov	r3, r0
 8000562:	ed93 7a03 	vldr	s14, [r3, #12]
 8000566:	edd7 7a02 	vldr	s15, [r7, #8]
 800056a:	ee67 8a27 	vmul.f32	s17, s14, s15
 800056e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000572:	edd7 7a02 	vldr	s15, [r7, #8]
 8000576:	ee37 8a67 	vsub.f32	s16, s14, s15
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3328      	adds	r3, #40	@ 0x28
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f8a6 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000584:	4603      	mov	r3, r0
 8000586:	edd3 7a04 	vldr	s15, [r3, #16]
 800058a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3328      	adds	r3, #40	@ 0x28
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f89c 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000598:	4603      	mov	r3, r0
 800059a:	ee78 7a88 	vadd.f32	s15, s17, s16
 800059e:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	ecbd 8b02 	vpop	{d8}
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40c90fdb 	.word	0x40c90fdb
 80005b4:	38d1b717 	.word	0x38d1b717

080005b8 <_ZNK3Ang14prepareCanDataEPhj>:
int16_t Ang::compAng() {
  return 0;
}


void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]

  memcpy(buffer, &(data->mechAng), sizeof(data->mechAng));
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3328      	adds	r3, #40	@ 0x28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f881 	bl	80006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 80005ce:	4603      	mov	r3, r0
 80005d0:	3304      	adds	r3, #4
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2201      	movs	r2, #1
 800060a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000626:	f7ff ffdc 	bl	80005e2 <_ZN3Ang19i2cMasterTxCallbackEv>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200003a8 	.word	0x200003a8

08000638 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000642:	f7ff ffdc 	bl	80005fe <_ZN3Ang19i2cMasterRxCallbackEv>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200003a8 	.word	0x200003a8

08000654 <_ZN7angDataC1Ev>:
struct angData{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f04f 0200 	mov.w	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	829a      	strh	r2, [r3, #20]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZSt11make_uniqueI7angDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80006a0:	2018      	movs	r0, #24
 80006a2:	f009 fc6d 	bl	8009f80 <_Znwj>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461c      	mov	r4, r3
 80006aa:	4622      	mov	r2, r4
 80006ac:	2300      	movs	r3, #0
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	6053      	str	r3, [r2, #4]
 80006b2:	6093      	str	r3, [r2, #8]
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	6113      	str	r3, [r2, #16]
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff ffca 	bl	8000654 <_ZN7angDataC1Ev>
 80006c0:	4621      	mov	r1, r4
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f820 	bl	8000708 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	return get();
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f831 	bl	8000740 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EE3getEv>
 80006de:	4603      	mov	r3, r0
      }
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZNSt15__uniq_ptr_dataI7angDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f82e 	bl	800075a <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EEC1EPS0_>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffe6 	bl	80006e8 <_ZNSt15__uniq_ptr_dataI7angDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f826 	bl	8000782 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000736:	4603      	mov	r3, r0
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f826 	bl	800079c <_ZNKSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 8000750:	4603      	mov	r3, r0
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f826 	bl	80007b8 <_ZNSt5tupleIJP7angDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffda 	bl	8000726 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 8000772:	4602      	mov	r2, r0
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f820 	bl	80007d2 <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_ZNKSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f81f 	bl	80007ea <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80007ac:	4603      	mov	r3, r0
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZNSt5tupleIJP7angDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f81e 	bl	8000804 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEEC1Ev>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 f822 	bl	8000824 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERS4_>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f822 	bl	800083e <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f822 	bl	8000856 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEEC1Ev>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f82a 	bl	800086e <_ZNSt10_Head_baseILj0EP7angDataLb0EEC1Ev>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f82b 	bl	800088a <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERS2_>
 8000834:	4603      	mov	r3, r0
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f82a 	bl	80008a0 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERKS4_>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEEC1Ev>:
      _Tuple_impl()
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f82b 	bl	80008ba <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EEC1Ev>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZNSt10_Head_baseILj0EP7angDataLb0EEC1Ev>:
      constexpr _Head_base()
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f810 	bl	80008d0 <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERKS2_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EEC1Ev>:
      constexpr _Head_base()
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

// グローバルなインスタンスを使用
extern CanCom cancom;
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    data(std::make_unique<canData>()) {}
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3364      	adds	r3, #100	@ 0x64
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f978 	bl	8000c00 <_ZSt11make_uniqueI7canDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    data(std::make_unique<canData>()) {}
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	4611      	mov	r1, r2
 800092e:	461a      	mov	r2, r3
 8000930:	460b      	mov	r3, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	605a      	str	r2, [r3, #4]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN6CanCom12initTxHeaderEmbb+0x28>
 8000944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000948:	e000      	b.n	800094c <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 800094a:	2200      	movs	r2, #0
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	609a      	str	r2, [r3, #8]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2208      	movs	r2, #8
 800095a:	611a      	str	r2, [r3, #16]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 8000968:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800096c:	e000      	b.n	8000970 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 800096e:	2200      	movs	r2, #0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	619a      	str	r2, [r3, #24]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 800097a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800097e:	e000      	b.n	8000982 <_ZN6CanCom12initTxHeaderEmbb+0x60>
 8000980:	2200      	movs	r2, #0
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	61da      	str	r2, [r3, #28]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  txHeader.MessageMarker = 0;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b088      	sub	sp, #32
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d902      	bls.n	80009b6 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 80009b0:	f000 ff08 	bl	80017c4 <Error_Handler>
 80009b4:	e02a      	b.n	8000a0c <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e00c      	b.n	80009de <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	4413      	add	r3, r2
 80009ca:	7819      	ldrb	r1, [r3, #0]
 80009cc:	f107 0214 	add.w	r2, r7, #20
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	4413      	add	r3, r2
 80009d4:	460a      	mov	r2, r1
 80009d6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3ee      	bcc.n	80009c4 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3304      	adds	r3, #4
 80009ee:	f107 0214 	add.w	r2, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f004 fbc6 	bl	8005184 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 8000a08:	f000 fedc 	bl	80017c4 <Error_Handler>
  }
}
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d028      	beq.n	8000a78 <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3358      	adds	r3, #88	@ 0x58
 8000a34:	2140      	movs	r1, #64	@ 0x40
 8000a36:	f004 fbe9 	bl	800520c <HAL_FDCAN_GetRxMessage>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 8000a4a:	f000 febb 	bl	80017c4 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 fce0 	bl	800541c <HAL_FDCAN_ActivateNotification>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 8000a6c:	f000 feaa 	bl	80017c4 <Error_Handler>
    }

    canRxInterrupt = true;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  }
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	bf0c      	ite	eq
 8000a94:	2301      	moveq	r3, #1
 8000a96:	2300      	movne	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d011      	beq.n	8000ac2 <_ZN6CanCom12handleRxDataEv+0x42>
    data->genFuncRef = rxData[0];
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3364      	adds	r3, #100	@ 0x64
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8c7 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8000ab0:	7013      	strb	r3, [r2, #0]
    canRxInterrupt = false;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    canTxFlag = true;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  handleRxData();
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffd4 	bl	8000a80 <_ZN6CanCom12handleRxDataEv>
 
  uint8_t currentGenFuncRef = data->genFuncRef;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3364      	adds	r3, #100	@ 0x64
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8aa 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d02d      	beq.n	8000b50 <_ZN6CanCom6rxTaskEv+0x86>
    return;
  }

  if (data->genFuncRef == 0) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3364      	adds	r3, #100	@ 0x64
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f89c 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000afe:	4603      	mov	r3, r0
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <_ZN6CanCom6rxTaskEv+0x54>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2120      	movs	r1, #32
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f005 f95e 	bl	8005dd8 <HAL_GPIO_WritePin>
 8000b1c:	e013      	b.n	8000b46 <_ZN6CanCom6rxTaskEv+0x7c>
  } else if (data->genFuncRef == 1) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3364      	adds	r3, #100	@ 0x64
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f887 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <_ZN6CanCom6rxTaskEv+0x7c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f005 f949 	bl	8005dd8 <HAL_GPIO_WritePin>
  }
  prevGenFuncRef = currentGenFuncRef;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7bfa      	ldrb	r2, [r7, #15]
 8000b4a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8000b4e:	e000      	b.n	8000b52 <_ZN6CanCom6rxTaskEv+0x88>
    return;
 8000b50:	bf00      	nop
}
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d01b      	beq.n	8000ba4 <_ZN6CanCom6txTaskEv+0x4c>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3364      	adds	r3, #100	@ 0x64
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f860 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000b76:	4603      	mov	r3, r0
 8000b78:	3301      	adds	r3, #1
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <_ZN6CanCom6txTaskEv+0x54>)
 8000b80:	f7ff fd1a 	bl	80005b8 <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3364      	adds	r3, #100	@ 0x64
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f854 	bl	8000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	3301      	adds	r3, #1
 8000b92:	2208      	movs	r2, #8
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff01 	bl	800099e <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200003a8 	.word	0x200003a8

08000bb0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 8000bba:	6839      	ldr	r1, [r7, #0]
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8000bbe:	f7ff ff28 	bl	8000a12 <_ZN6CanCom15rxFifo0CallbackEm>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000033c 	.word	0x2000033c

08000bd0 <_ZN7canDataC1Ev>:

#include <cstdint>
#include <memory>
#include "main.h"

struct canData {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3301      	adds	r3, #1
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3309      	adds	r3, #9
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_ZSt11make_uniqueI7canDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000c08:	2011      	movs	r0, #17
 8000c0a:	f009 f9b9 	bl	8009f80 <_Znwj>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461c      	mov	r4, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	741a      	strb	r2, [r3, #16]
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff ffd5 	bl	8000bd0 <_ZN7canDataC1Ev>
 8000c26:	4621      	mov	r1, r4
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f820 	bl	8000c6e <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}

08000c36 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	return get();
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f831 	bl	8000ca6 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EE3getEv>
 8000c44:	4603      	mov	r3, r0
      }
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_ZNSt15__uniq_ptr_dataI7canDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f82e 	bl	8000cc0 <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EEC1EPS0_>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffe6 	bl	8000c4e <_ZNSt15__uniq_ptr_dataI7canDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f826 	bl	8000ce8 <_ZSt3getILj0EJP7canDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZNKSt10unique_ptrI7canDataSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f826 	bl	8000d02 <_ZNKSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE6_M_ptrEv>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f826 	bl	8000d1e <_ZNSt5tupleIJP7canDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffda 	bl	8000c8c <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE6_M_ptrEv>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_ZSt3getILj0EJP7canDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f820 	bl	8000d38 <_ZSt12__get_helperILj0EP7canDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZNKSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f81f 	bl	8000d50 <_ZSt3getILj0EJP7canDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8000d12:	4603      	mov	r3, r0
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_ZNSt5tupleIJP7canDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f81e 	bl	8000d6a <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEEC1Ev>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZSt12__get_helperILj0EP7canDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f822 	bl	8000d8a <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEE7_M_headERS4_>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_ZSt3getILj0EJP7canDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f822 	bl	8000da4 <_ZSt12__get_helperILj0EP7canDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f822 	bl	8000dbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7canDataEEEC1Ev>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f82a 	bl	8000dd4 <_ZNSt10_Head_baseILj0EP7canDataLb0EEC1Ev>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f82b 	bl	8000df0 <_ZNSt10_Head_baseILj0EP7canDataLb0EE7_M_headERS2_>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_ZSt12__get_helperILj0EP7canDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f82a 	bl	8000e06 <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEE7_M_headERKS4_>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7canDataEEEC1Ev>:
      _Tuple_impl()
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f82b 	bl	8000e20 <_ZNSt10_Head_baseILj1ESt14default_deleteI7canDataELb1EEC1Ev>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZNSt10_Head_baseILj0EP7canDataLb0EEC1Ev>:
      constexpr _Head_base()
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_ZNSt10_Head_baseILj0EP7canDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_ZNSt11_Tuple_implILj0EJP7canDataSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f810 	bl	8000e36 <_ZNSt10_Head_baseILj0EP7canDataLb0EE7_M_headERKS2_>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZNSt10_Head_baseILj1ESt14default_deleteI7canDataELb1EEC1Ev>:
      constexpr _Head_base()
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt10_Head_baseILj0EP7canDataLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <LL_CORDIC_Config+0x44>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4311      	orrs	r1, r2
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4311      	orrs	r1, r2
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	4311      	orrs	r1, r2
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	4311      	orrs	r1, r2
 8000e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	ff87f800 	.word	0xff87f800

08000e94 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8000e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8000eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2250      	movs	r2, #80	@ 0x50
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 8000ece:	f7ff ffbd 	bl	8000e4c <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 fa1e 	bl	800232a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f88d 	bl	800100c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fbd1 	bl	8001698 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000ef6:	f000 fb9d 	bl	8001634 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000efa:	f000 f8dd 	bl	80010b8 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000efe:	f000 f971 	bl	80011e4 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8000f02:	f000 fa2b 	bl	800135c <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8000f06:	f000 fa75 	bl	80013f4 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000f0a:	f000 fac5 	bl	8001498 <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 8000f0e:	f000 fa0d 	bl	800132c <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f12:	217f      	movs	r1, #127	@ 0x7f
 8000f14:	4838      	ldr	r0, [pc, #224]	@ (8000ff8 <main+0x114>)
 8000f16:	f002 fb6b 	bl	80035f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000f1a:	217f      	movs	r1, #127	@ 0x7f
 8000f1c:	4837      	ldr	r0, [pc, #220]	@ (8000ffc <main+0x118>)
 8000f1e:	f002 fb67 	bl	80035f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000f22:	4835      	ldr	r0, [pc, #212]	@ (8000ff8 <main+0x114>)
 8000f24:	f001 fd68 	bl	80029f8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000f28:	4834      	ldr	r0, [pc, #208]	@ (8000ffc <main+0x118>)
 8000f2a:	f001 fd65 	bl	80029f8 <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000f2e:	4832      	ldr	r0, [pc, #200]	@ (8000ff8 <main+0x114>)
 8000f30:	f002 fbc0 	bl	80036b4 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	4832      	ldr	r0, [pc, #200]	@ (8001000 <main+0x11c>)
 8000f38:	f007 ffd2 	bl	8008ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4830      	ldr	r0, [pc, #192]	@ (8001000 <main+0x11c>)
 8000f40:	f007 ffce 	bl	8008ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f44:	2108      	movs	r1, #8
 8000f46:	482e      	ldr	r0, [pc, #184]	@ (8001000 <main+0x11c>)
 8000f48:	f007 ffca 	bl	8008ee0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	482c      	ldr	r0, [pc, #176]	@ (8001000 <main+0x11c>)
 8000f50:	f008 fdf0 	bl	8009b34 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	482a      	ldr	r0, [pc, #168]	@ (8001000 <main+0x11c>)
 8000f58:	f008 fdec 	bl	8009b34 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4828      	ldr	r0, [pc, #160]	@ (8001000 <main+0x11c>)
 8000f60:	f008 fde8 	bl	8009b34 <HAL_TIMEx_PWMN_Start>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4619      	mov	r1, r3
 8000f82:	4820      	ldr	r0, [pc, #128]	@ (8001004 <main+0x120>)
 8000f84:	f004 f87c 	bl	8005080 <HAL_FDCAN_ConfigFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <main+0xb8>
    {
        // フィルタ設定エラー
        Error_Handler();
 8000f98:	f000 fc14 	bl	80017c4 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 8000f9c:	4819      	ldr	r0, [pc, #100]	@ (8001004 <main+0x120>)
 8000f9e:	f004 f8c9 	bl	8005134 <HAL_FDCAN_Start>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf14      	ite	ne
 8000fa8:	2301      	movne	r3, #1
 8000faa:	2300      	moveq	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <main+0xd2>
	  Error_Handler();
 8000fb2:	f000 fc07 	bl	80017c4 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4812      	ldr	r0, [pc, #72]	@ (8001004 <main+0x120>)
 8000fbc:	f004 fa2e 	bl	800541c <HAL_FDCAN_ActivateNotification>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <main+0xf0>
    /* Notification Error */
    Error_Handler();
 8000fd0:	f000 fbf8 	bl	80017c4 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff5c 	bl	8000e94 <_ZN10Acrocantho6CordicC1Ev>
  
  cancom.initTxHeader(0x01, false, false);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4809      	ldr	r0, [pc, #36]	@ (8001008 <main+0x124>)
 8000fe4:	f7ff fc9d 	bl	8000922 <_ZN6CanCom12initTxHeaderEmbb>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    cancom.rxTask();
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <main+0x124>)
 8000fea:	f7ff fd6e 	bl	8000aca <_ZN6CanCom6rxTaskEv>
    cancom.txTask();
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <main+0x124>)
 8000ff0:	f7ff fdb2 	bl	8000b58 <_ZN6CanCom6txTaskEv>
    cancom.rxTask();
 8000ff4:	bf00      	nop
 8000ff6:	e7f7      	b.n	8000fe8 <main+0x104>
 8000ff8:	20000078 	.word	0x20000078
 8000ffc:	200000e4 	.word	0x200000e4
 8001000:	200002f0 	.word	0x200002f0
 8001004:	20000178 	.word	0x20000178
 8001008:	2000033c 	.word	0x2000033c

0800100c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	@ 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2238      	movs	r2, #56	@ 0x38
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f009 f892 	bl	800a144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800102e:	2000      	movs	r0, #0
 8001030:	f006 ff06 	bl	8007e40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103e:	2340      	movs	r3, #64	@ 0x40
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800104a:	2304      	movs	r3, #4
 800104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800104e:	2355      	movs	r3, #85	@ 0x55
 8001050:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	4618      	mov	r0, r3
 8001064:	f006 ffa0 	bl	8007fa8 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001078:	f000 fba4 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2303      	movs	r3, #3
 8001082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f007 fa99 	bl	80085cc <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf14      	ite	ne
 80010a0:	2301      	movne	r3, #1
 80010a2:	2300      	moveq	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80010aa:	f000 fb8b 	bl	80017c4 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	@ 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b092      	sub	sp, #72	@ 0x48
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	223c      	movs	r2, #60	@ 0x3c
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 f837 	bl	800a144 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d6:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f8:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fe:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001100:	2204      	movs	r2, #4
 8001102:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001104:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001112:	2201      	movs	r2, #1
 8001114:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001126:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001128:	2200      	movs	r2, #0
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800112c:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	4829      	ldr	r0, [pc, #164]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001136:	f001 faa3 	bl	8002680 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 800114a:	f000 fb3b 	bl	80017c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800114e:	2305      	movs	r3, #5
 8001150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001152:	2300      	movs	r3, #0
 8001154:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8001156:	2300      	movs	r3, #0
 8001158:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800115a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800115e:	4619      	mov	r1, r3
 8001160:	481e      	ldr	r0, [pc, #120]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 8001162:	f003 f901 	bl	8004368 <HAL_ADCEx_MultiModeConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf14      	ite	ne
 800116c:	2301      	movne	r3, #1
 800116e:	2300      	moveq	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8001176:	f000 fb25 	bl	80017c4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <_ZL12MX_ADC1_Initv+0x128>)
 800117c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800117e:	2309      	movs	r3, #9
 8001180:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001186:	237f      	movs	r3, #127	@ 0x7f
 8001188:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800118a:	2304      	movs	r3, #4
 800118c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4808      	ldr	r0, [pc, #32]	@ (80011dc <_ZL12MX_ADC1_Initv+0x124>)
 80011bc:	f002 fba8 	bl	8003910 <HAL_ADCEx_InjectedConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 80011d0:	f000 faf8 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3748      	adds	r7, #72	@ 0x48
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000078 	.word	0x20000078
 80011e0:	04300002 	.word	0x04300002

080011e4 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b090      	sub	sp, #64	@ 0x40
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	223c      	movs	r2, #60	@ 0x3c
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 ffa7 	bl	800a144 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 80011f8:	4a48      	ldr	r2, [pc, #288]	@ (800131c <_ZL12MX_ADC2_Initv+0x138>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fc:	4b46      	ldr	r3, [pc, #280]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 80011fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001202:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b43      	ldr	r3, [pc, #268]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001210:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001216:	4b40      	ldr	r3, [pc, #256]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001218:	2201      	movs	r2, #1
 800121a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800121c:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 800121e:	2208      	movs	r2, #8
 8001220:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001222:	4b3d      	ldr	r3, [pc, #244]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001224:	2200      	movs	r2, #0
 8001226:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001228:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 800122a:	2200      	movs	r2, #0
 800122c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001230:	2201      	movs	r2, #1
 8001232:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800123c:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001244:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001246:	2200      	movs	r2, #0
 8001248:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4831      	ldr	r0, [pc, #196]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 8001254:	f001 fa14 	bl	8002680 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf14      	ite	ne
 800125e:	2301      	movne	r3, #1
 8001260:	2300      	moveq	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8001268:	f000 faac 	bl	80017c4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800126c:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <_ZL12MX_ADC2_Initv+0x13c>)
 800126e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001270:	2309      	movs	r3, #9
 8001272:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001278:	237f      	movs	r3, #127	@ 0x7f
 800127a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800127c:	2304      	movs	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001284:	2303      	movs	r3, #3
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	481c      	ldr	r0, [pc, #112]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 80012a6:	f002 fb33 	bl	8003910 <HAL_ADCEx_InjectedConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 80012ba:	f000 fa83 	bl	80017c4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <_ZL12MX_ADC2_Initv+0x140>)
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80012c2:	f240 130f 	movw	r3, #271	@ 0x10f
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4812      	ldr	r0, [pc, #72]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 80012ce:	f002 fb1f 	bl	8003910 <HAL_ADCEx_InjectedConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 80012e2:	f000 fa6f 	bl	80017c4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <_ZL12MX_ADC2_Initv+0x144>)
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80012ea:	f240 2315 	movw	r3, #533	@ 0x215
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <_ZL12MX_ADC2_Initv+0x134>)
 80012f6:	f002 fb0b 	bl	8003910 <HAL_ADCEx_InjectedConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 800130a:	f000 fa5b 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3740      	adds	r7, #64	@ 0x40
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000e4 	.word	0x200000e4
 800131c:	50000100 	.word	0x50000100
 8001320:	08600004 	.word	0x08600004
 8001324:	0c900008 	.word	0x0c900008
 8001328:	10c00010 	.word	0x10c00010

0800132c <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <_ZL14MX_CORDIC_Initv+0x28>)
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <_ZL14MX_CORDIC_Initv+0x2c>)
 8001334:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <_ZL14MX_CORDIC_Initv+0x28>)
 8001338:	f003 f91e 	bl	8004578 <HAL_CORDIC_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf14      	ite	ne
 8001342:	2301      	movne	r3, #1
 8001344:	2300      	moveq	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 800134c:	f000 fa3a 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000150 	.word	0x20000150
 8001358:	40020c00 	.word	0x40020c00

0800135c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800138c:	2205      	movs	r2, #5
 800138e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001392:	220b      	movs	r2, #11
 8001394:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001398:	2238      	movs	r2, #56	@ 0x38
 800139a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800139e:	220b      	movs	r2, #11
 80013a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013a4:	2205      	movs	r2, #5
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013b0:	220c      	movs	r2, #12
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013bc:	2201      	movs	r2, #1
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013ce:	f003 fcfd 	bl	8004dcc <HAL_FDCAN_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80013e2:	f000 f9ef 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000178 	.word	0x20000178
 80013f0:	40006400 	.word	0x40006400

080013f4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 80013fa:	4a25      	ldr	r2, [pc, #148]	@ (8001490 <_ZL12MX_I2C1_Initv+0x9c>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001400:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <_ZL12MX_I2C1_Initv+0xa0>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142e:	4817      	ldr	r0, [pc, #92]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001430:	f004 fd27 	bl	8005e82 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001444:	f000 f9be 	bl	80017c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	4810      	ldr	r0, [pc, #64]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 800144c:	f006 fc40 	bl	8007cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001460:	f000 f9b0 	bl	80017c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	4809      	ldr	r0, [pc, #36]	@ (800148c <_ZL12MX_I2C1_Initv+0x98>)
 8001468:	f006 fc7d 	bl	8007d66 <HAL_I2CEx_ConfigDigitalFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800147c:	f000 f9a2 	bl	80017c4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001480:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001484:	f006 fcbc 	bl	8007e00 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200001dc 	.word	0x200001dc
 8001490:	40005400 	.word	0x40005400
 8001494:	4052060f 	.word	0x4052060f

08001498 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b098      	sub	sp, #96	@ 0x60
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2234      	movs	r2, #52	@ 0x34
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f008 fe3d 	bl	800a144 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ca:	4b58      	ldr	r3, [pc, #352]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014cc:	4a58      	ldr	r2, [pc, #352]	@ (8001630 <_ZL12MX_TIM1_Initv+0x198>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014d6:	4b55      	ldr	r3, [pc, #340]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014d8:	2220      	movs	r2, #32
 80014da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014de:	f242 1233 	movw	r2, #8499	@ 0x2133
 80014e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b51      	ldr	r3, [pc, #324]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80014ea:	4b50      	ldr	r3, [pc, #320]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f0:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014f6:	484d      	ldr	r0, [pc, #308]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80014f8:	f007 fc9a 	bl	8008e30 <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf14      	ite	ne
 8001502:	2301      	movne	r3, #1
 8001504:	2300      	moveq	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 800150c:	f000 f95a 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001510:	2320      	movs	r3, #32
 8001512:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001514:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001518:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001522:	4619      	mov	r1, r3
 8001524:	4841      	ldr	r0, [pc, #260]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 8001526:	f008 fbc7 	bl	8009cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 800153a:	f000 f943 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	@ 0x60
 8001540:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800154a:	2300      	movs	r3, #0
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4832      	ldr	r0, [pc, #200]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 8001564:	f007 fdce 	bl	8009104 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf14      	ite	ne
 800156e:	2301      	movne	r3, #1
 8001570:	2300      	moveq	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8001578:	f000 f924 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001580:	2204      	movs	r2, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4829      	ldr	r0, [pc, #164]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 8001586:	f007 fdbd 	bl	8009104 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 800159a:	f000 f913 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015a2:	2208      	movs	r2, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	4821      	ldr	r0, [pc, #132]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80015a8:	f007 fdac 	bl	8009104 <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 80015bc:	f000 f902 	bl	80017c4 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80015c0:	481a      	ldr	r0, [pc, #104]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 80015c2:	f008 fca3 	bl	8009f0c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 80015d2:	2314      	movs	r3, #20
 80015d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	480a      	ldr	r0, [pc, #40]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 8001604:	f008 fbee 	bl	8009de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8001618:	f000 f8d4 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <_ZL12MX_TIM1_Initv+0x194>)
 800161e:	f000 fcad 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 8001622:	bf00      	nop
 8001624:	3760      	adds	r7, #96	@ 0x60
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002f0 	.word	0x200002f0
 8001630:	40012c00 	.word	0x40012c00

08001634 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6493      	str	r3, [r2, #72]	@ 0x48
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001656:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6493      	str	r3, [r2, #72]	@ 0x48
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <_ZL11MX_DMA_Initv+0x60>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	200b      	movs	r0, #11
 8001670:	f003 f88f 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001674:	200b      	movs	r0, #11
 8001676:	f003 f8a6 	bl	80047c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200c      	movs	r0, #12
 8001680:	f003 f887 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001684:	200c      	movs	r0, #12
 8001686:	f003 f89e 	bl	80047c6 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a42      	ldr	r2, [pc, #264]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a3c      	ldr	r2, [pc, #240]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a36      	ldr	r2, [pc, #216]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <_ZL12MX_GPIO_Initv+0x124>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f004 fb5e 	bl	8005dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001722:	4827      	ldr	r0, [pc, #156]	@ (80017c0 <_ZL12MX_GPIO_Initv+0x128>)
 8001724:	f004 fb58 	bl	8005dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4820      	ldr	r0, [pc, #128]	@ (80017c0 <_ZL12MX_GPIO_Initv+0x128>)
 8001740:	f004 f9c8 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001744:	230c      	movs	r3, #12
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001754:	230c      	movs	r3, #12
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f004 f9b7 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001766:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f004 f9a7 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <_ZL12MX_GPIO_Initv+0x128>)
 80017a0:	f004 f998 	bl	8005ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2028      	movs	r0, #40	@ 0x28
 80017aa:	f002 fff2 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ae:	2028      	movs	r0, #40	@ 0x28
 80017b0:	f003 f809 	bl	80047c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	@ 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <Error_Handler+0x8>

080017d0 <_ZN3AngD1Ev>:
class Ang {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3328      	adds	r3, #40	@ 0x28
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f843 	bl	8001868 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN6CanComD1Ev>:
  uint8_t genFuncRef = 0;
  uint8_t txBuff[8] = {0};
  uint8_t rxBuff[8] = {0};
};

class CanCom {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3364      	adds	r3, #100	@ 0x64
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f857 	bl	80018ac <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EED1Ev>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10c      	bne.n	8001832 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181e:	4293      	cmp	r3, r2
 8001820:	d107      	bne.n	8001832 <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom cancom(hfdcan1);
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001824:	480d      	ldr	r0, [pc, #52]	@ (800185c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001826:	f7ff f85e 	bl	80008e6 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800182e:	f7fe fd43 	bl	80002b8 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800183e:	4293      	cmp	r3, r2
 8001840:	d105      	bne.n	800184e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001844:	f7ff ffc4 	bl	80017d0 <_ZN3AngD1Ev>
CanCom cancom(hfdcan1);
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800184a:	f7ff ffcf 	bl	80017ec <_ZN6CanComD1Ev>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000178 	.word	0x20000178
 800185c:	2000033c 	.word	0x2000033c
 8001860:	200001dc 	.word	0x200001dc
 8001864:	200003a8 	.word	0x200003a8

08001868 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ff57 	bl	8000726 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 8001878:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f834 	bl	80018f0 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EE11get_deleterEv>
 8001888:	4604      	mov	r4, r0
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f83d 	bl	800190a <_ZSt4moveIRP7angDataEONSt16remove_referenceIT_E4typeEOS4_>
 8001890:	4603      	mov	r3, r0
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4620      	mov	r0, r4
 8001898:	f000 f842 	bl	8001920 <_ZNKSt14default_deleteI7angDataEclEPS0_>
	__ptr = pointer();
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
      }
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9e8 	bl	8000c8c <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE6_M_ptrEv>
 80018bc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f83a 	bl	8001940 <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EE11get_deleterEv>
 80018cc:	4604      	mov	r4, r0
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f843 	bl	800195a <_ZSt4moveIRP7canDataEONSt16remove_referenceIT_E4typeEOS4_>
 80018d4:	4603      	mov	r3, r0
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	4620      	mov	r0, r4
 80018dc:	f000 f848 	bl	8001970 <_ZNKSt14default_deleteI7canDataEclEPS0_>
	__ptr = pointer();
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
      }
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f848 	bl	8001990 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE10_M_deleterEv>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZSt4moveIRP7angDataEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_ZNKSt14default_deleteI7angDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <_ZNKSt14default_deleteI7angDataEclEPS0_+0x18>
 8001930:	2118      	movs	r1, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f008 fb22 	bl	8009f7c <_ZdlPvj>
      }
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZNSt10unique_ptrI7canDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f82d 	bl	80019aa <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE10_M_deleterEv>
 8001950:	4603      	mov	r3, r0
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZSt4moveIRP7canDataEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZNKSt14default_deleteI7canDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <_ZNKSt14default_deleteI7canDataEclEPS0_+0x18>
 8001980:	2111      	movs	r1, #17
 8001982:	4618      	mov	r0, r3
 8001984:	f008 fafa 	bl	8009f7c <_ZdlPvj>
      }
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f812 	bl	80019c4 <_ZSt3getILj1EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZNSt15__uniq_ptr_implI7canDataSt14default_deleteIS0_EE10_M_deleterEv>:
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f811 	bl	80019dc <_ZSt3getILj1EJP7canDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZSt3getILj1EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f811 	bl	80019f4 <_ZSt12__get_helperILj1ESt14default_deleteI7angDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_ZSt3getILj1EJP7canDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f811 	bl	8001a0c <_ZSt12__get_helperILj1ESt14default_deleteI7canDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZSt12__get_helperILj1ESt14default_deleteI7angDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f811 	bl	8001a24 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEE7_M_headERS3_>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZSt12__get_helperILj1ESt14default_deleteI7canDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f811 	bl	8001a3c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7canDataEEE7_M_headERS3_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f811 	bl	8001a54 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EE7_M_headERS3_>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7canDataEEE7_M_headERS3_>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f810 	bl	8001a6a <_ZNSt10_Head_baseILj1ESt14default_deleteI7canDataELb1EE7_M_headERS3_>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_ZNSt10_Head_baseILj1ESt14default_deleteI7canDataELb1EE7_M_headERS3_>:
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_GLOBAL__sub_I_hadc1>:
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff febd 	bl	8001808 <_Z41__static_initialization_and_destruction_0ii>
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_GLOBAL__sub_D_hadc1>:
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff feb5 	bl	8001808 <_Z41__static_initialization_and_destruction_0ii>
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ad6:	f006 fa57 	bl	8007f88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a0      	sub	sp, #128	@ 0x80
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	2254      	movs	r2, #84	@ 0x54
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f008 fb1b 	bl	800a144 <memset>
  if(hadc->Instance==ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b16:	d146      	bne.n	8001ba6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 ff33 	bl	8008994 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b34:	f7ff fe46 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b38:	4b42      	ldr	r3, [pc, #264]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a41      	ldr	r2, [pc, #260]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001b40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10b      	bne.n	8001b62 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6e:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b90:	f003 ffa0 	bl	8005ad4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f002 fdfa 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b9e:	2012      	movs	r0, #18
 8001ba0:	f002 fe11 	bl	80047c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ba4:	e04a      	b.n	8001c3c <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a28      	ldr	r2, [pc, #160]	@ (8001c4c <HAL_ADC_MspInit+0x164>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d145      	bne.n	8001c3c <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001bb6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f006 fee7 	bl	8008994 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8001bcc:	f7ff fdfa 	bl	80017c4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001bd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_ADC_MspInit+0x15c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	4a18      	ldr	r2, [pc, #96]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001be8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_ADC_MspInit+0x160>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001c12:	23c2      	movs	r3, #194	@ 0xc2
 8001c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f003 ff54 	bl	8005ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2012      	movs	r0, #18
 8001c32:	f002 fdae 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c36:	2012      	movs	r0, #18
 8001c38:	f002 fdc5 	bl	80047c6 <HAL_NVIC_EnableIRQ>
}
 8001c3c:	bf00      	nop
 8001c3e:	3780      	adds	r7, #128	@ 0x80
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200003d4 	.word	0x200003d4
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	50000100 	.word	0x50000100

08001c50 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_CORDIC_MspInit+0x38>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10b      	bne.n	8001c7a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_CORDIC_MspInit+0x3c>)
 8001c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_CORDIC_MspInit+0x3c>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_CORDIC_MspInit+0x3c>)
 8001c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09e      	sub	sp, #120	@ 0x78
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2254      	movs	r2, #84	@ 0x54
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f008 fa47 	bl	800a144 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_FDCAN_MspInit+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d153      	bne.n	8001d68 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001cc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fe5f 	bl	8008994 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001cdc:	f7ff fd72 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <HAL_FDCAN_MspInit+0xe4>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d14:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d22:	2309      	movs	r3, #9
 8001d24:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d30:	f003 fed0 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d46:	2309      	movs	r3, #9
 8001d48:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d54:	f003 febe 	bl	8005ad4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2015      	movs	r0, #21
 8001d5e:	f002 fd18 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d62:	2015      	movs	r0, #21
 8001d64:	f002 fd2f 	bl	80047c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001d68:	bf00      	nop
 8001d6a:	3778      	adds	r7, #120	@ 0x78
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40006400 	.word	0x40006400
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0a0      	sub	sp, #128	@ 0x80
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2254      	movs	r2, #84	@ 0x54
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 f9d3 	bl	800a144 <memset>
  if(hi2c->Instance==I2C1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f20 <HAL_I2C_MspInit+0x1a8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	f040 80b6 	bne.w	8001f16 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001daa:	2340      	movs	r3, #64	@ 0x40
 8001dac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	4618      	mov	r0, r3
 8001db8:	f006 fdec 	bl	8008994 <HAL_RCCEx_PeriphCLKConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dc2:	f7ff fcff 	bl	80017c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b57      	ldr	r3, [pc, #348]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a56      	ldr	r2, [pc, #344]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b54      	ldr	r3, [pc, #336]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b51      	ldr	r3, [pc, #324]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	4a50      	ldr	r2, [pc, #320]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f003 fe5d 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e32:	4619      	mov	r1, r3
 8001e34:	483c      	ldr	r0, [pc, #240]	@ (8001f28 <HAL_I2C_MspInit+0x1b0>)
 8001e36:	f003 fe4d 	bl	8005ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <HAL_I2C_MspInit+0x1ac>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e54:	4a36      	ldr	r2, [pc, #216]	@ (8001f30 <HAL_I2C_MspInit+0x1b8>)
 8001e56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e58:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5e:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e64:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6a:	4b30      	ldr	r3, [pc, #192]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e70:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e76:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e88:	4828      	ldr	r0, [pc, #160]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e8a:	f002 fcb7 	bl	80047fc <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001e94:	f7ff fc96 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <HAL_I2C_MspInit+0x1b4>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ea6:	4a24      	ldr	r2, [pc, #144]	@ (8001f38 <HAL_I2C_MspInit+0x1c0>)
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001eac:	2211      	movs	r2, #17
 8001eae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001eda:	4816      	ldr	r0, [pc, #88]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001edc:	f002 fc8e 	bl	80047fc <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001ee6:	f7ff fc6d 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a11      	ldr	r2, [pc, #68]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001eee:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ef0:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_I2C_MspInit+0x1bc>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	201f      	movs	r0, #31
 8001efc:	f002 fc49 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f00:	201f      	movs	r0, #31
 8001f02:	f002 fc60 	bl	80047c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2020      	movs	r0, #32
 8001f0c:	f002 fc41 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f10:	2020      	movs	r0, #32
 8001f12:	f002 fc58 	bl	80047c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f16:	bf00      	nop
 8001f18:	3780      	adds	r7, #128	@ 0x80
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	20000230 	.word	0x20000230
 8001f30:	40020008 	.word	0x40020008
 8001f34:	20000290 	.word	0x20000290
 8001f38:	4002001c 	.word	0x4002001c

08001f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x38>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10b      	bne.n	8001f66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_TIM_MspPostInit+0x9c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d138      	bne.n	8002010 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	4a18      	ldr	r2, [pc, #96]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_TIM_MspPostInit+0xa0>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480d      	ldr	r0, [pc, #52]	@ (8002020 <HAL_TIM_MspPostInit+0xa4>)
 8001fea:	f003 fd73 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001fee:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002000:	2306      	movs	r3, #6
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <HAL_TIM_MspPostInit+0xa8>)
 800200c:	f003 fd62 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	@ 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40021000 	.word	0x40021000
 8002020:	48000800 	.word	0x48000800
 8002024:	48000400 	.word	0x48000400

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <NMI_Handler+0x4>

08002030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 f9a7 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <DMA1_Channel1_IRQHandler+0x10>)
 800208e:	f002 fd3f 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000230 	.word	0x20000230

0800209c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA1_Channel2_IRQHandler+0x10>)
 80020a2:	f002 fd35 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000290 	.word	0x20000290

080020b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <ADC1_2_IRQHandler+0x14>)
 80020b6:	f000 fd83 	bl	8002bc0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <ADC1_2_IRQHandler+0x18>)
 80020bc:	f000 fd80 	bl	8002bc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000078 	.word	0x20000078
 80020c8:	200000e4 	.word	0x200000e4

080020cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <FDCAN1_IT0_IRQHandler+0x10>)
 80020d2:	f003 fa89 	bl	80055e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000178 	.word	0x20000178

080020e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <I2C1_EV_IRQHandler+0x10>)
 80020e6:	f004 f96b 	bl	80063c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200001dc 	.word	0x200001dc

080020f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <I2C1_ER_IRQHandler+0x10>)
 80020fa:	f004 f97b 	bl	80063f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200001dc 	.word	0x200001dc

08002108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800210c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002110:	f003 fe94 	bl	8005e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_kill>:

int _kill(int pid, int sig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002132:	f008 f863 	bl	800a1fc <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	2216      	movs	r2, #22
 800213a:	601a      	str	r2, [r3, #0]
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_exit>:

void _exit (int status)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ffe7 	bl	8002128 <_kill>
  while (1) {}    /* Make sure we hang here */
 800215a:	bf00      	nop
 800215c:	e7fd      	b.n	800215a <_exit+0x12>
	...

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f008 f834 	bl	800a1fc <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20020000 	.word	0x20020000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	200003d8 	.word	0x200003d8
 80021c8:	20000530 	.word	0x20000530

080021cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <_ZN8userTaskC1Ev>:
// main.cpp で定義されたインスタンスを使用
userTask usertask;

extern Ang ang;

userTask::userTask()
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  : count(0){}
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	705a      	strb	r2, [r3, #1]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <_ZN8userTask11cyclic_taskEv>:


void userTask::cyclic_task() {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
   switch (seqID) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <_ZN8userTask11cyclic_taskEv+0x22>
 8002224:	2b1f      	cmp	r3, #31
 8002226:	d11b      	bne.n	8002260 <_ZN8userTask11cyclic_taskEv+0x4c>
    case LOOP:
      ang.getAngle();
 8002228:	4811      	ldr	r0, [pc, #68]	@ (8002270 <_ZN8userTask11cyclic_taskEv+0x5c>)
 800222a:	f7fe f8b7 	bl	800039c <_ZN3Ang8getAngleEv>
      ang.getVel();
 800222e:	4810      	ldr	r0, [pc, #64]	@ (8002270 <_ZN8userTask11cyclic_taskEv+0x5c>)
 8002230:	f7fe f909 	bl	8000446 <_ZN3Ang6getVelEv>
      break;
 8002234:	e018      	b.n	8002268 <_ZN8userTask11cyclic_taskEv+0x54>
    case STEP00:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b09      	cmp	r3, #9
 800223c:	d809      	bhi.n	8002252 <_ZN8userTask11cyclic_taskEv+0x3e>
        ang.getAngle();
 800223e:	480c      	ldr	r0, [pc, #48]	@ (8002270 <_ZN8userTask11cyclic_taskEv+0x5c>)
 8002240:	f7fe f8ac 	bl	800039c <_ZN3Ang8getAngleEv>
        count++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	701a      	strb	r2, [r3, #0]
      } else {
        count = 0;
        seqID = LOOP;
      }

      break;
 8002250:	e00a      	b.n	8002268 <_ZN8userTask11cyclic_taskEv+0x54>
        count = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
        seqID = LOOP;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	221f      	movs	r2, #31
 800225c:	705a      	strb	r2, [r3, #1]
      break;
 800225e:	e003      	b.n	8002268 <_ZN8userTask11cyclic_taskEv+0x54>
    default:
      seqID = STEP00;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
      break;
 8002266:	bf00      	nop
    }
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200003a8 	.word	0x200003a8

08002274 <HAL_ADCEx_InjectedConvCpltCallback>:

void userTask::idle_task() {
  
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800227c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8002282:	f003 fdc1 	bl	8005e08 <HAL_GPIO_TogglePin>
  usertask.cyclic_task();
 8002286:	4804      	ldr	r0, [pc, #16]	@ (8002298 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8002288:	f7ff ffc4 	bl	8002214 <_ZN8userTask11cyclic_taskEv>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	48000800 	.word	0x48000800
 8002298:	200003dc 	.word	0x200003dc

0800229c <_Z41__static_initialization_and_destruction_0ii>:
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d102      	bne.n	80022bc <_Z41__static_initialization_and_destruction_0ii+0x20>
userTask usertask;
 80022b6:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80022b8:	f7ff ff9a 	bl	80021f0 <_ZN8userTaskC1Ev>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200003dc 	.word	0x200003dc

080022c8 <_GLOBAL__sub_I_usertask>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7ff ffe3 	bl	800229c <_Z41__static_initialization_and_destruction_0ii>
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d8:	480d      	ldr	r0, [pc, #52]	@ (8002310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022dc:	f7ff ff76 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <LoopForever+0x6>)
  ldr r1, =_edata
 80022e2:	490d      	ldr	r1, [pc, #52]	@ (8002318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <LoopForever+0xe>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002324 <LoopForever+0x16>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f007 ff7f 	bl	800a208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800230a:	f7fe fdeb 	bl	8000ee4 <main>

0800230e <LoopForever>:

LoopForever:
    b LoopForever
 800230e:	e7fe      	b.n	800230e <LoopForever>
  ldr   r0, =_estack
 8002310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800231c:	0800a334 	.word	0x0800a334
  ldr r2, =_sbss
 8002320:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002324:	20000530 	.word	0x20000530

08002328 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC3_IRQHandler>

0800232a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f002 fa21 	bl	800477c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f80e 	bl	800235c <HAL_InitTick>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	71fb      	strb	r3, [r7, #7]
 800234a:	e001      	b.n	8002350 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800234c:	f7ff fba8 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002350:	79fb      	ldrb	r3, [r7, #7]

}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002368:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <HAL_InitTick+0x68>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d022      	beq.n	80023b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_InitTick+0x6c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_InitTick+0x68>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800237c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fa2c 	bl	80047e2 <HAL_SYSTICK_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10f      	bne.n	80023b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	d809      	bhi.n	80023aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002396:	2200      	movs	r2, #0
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	f002 f9f8 	bl	8004792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <HAL_InitTick+0x70>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e007      	b.n	80023ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e004      	b.n	80023ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e001      	b.n	80023ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000008 	.word	0x20000008
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_IncTick+0x1c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_IncTick+0x20>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <HAL_IncTick+0x1c>)
 80023e0:	6013      	str	r3, [r2, #0]
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	200003e0 	.word	0x200003e0
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200003e0 	.word	0x200003e0

0800240c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002480:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 031f 	and.w	r3, r3, #31
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800250a:	d101      	bne.n	8002510 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800252e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002532:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800255a:	d101      	bne.n	8002560 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800257e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_IsEnabled+0x18>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_IsEnabled+0x1a>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d101      	bne.n	80025fc <LL_ADC_IsDisableOngoing+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_IsDisableOngoing+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800261a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d101      	bne.n	800264a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d101      	bne.n	8002670 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1a9      	b.n	80029ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fa1d 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff18 	bl	80024f6 <LL_ADC_IsDeepPowerDownEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fefe 	bl	80024d2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff33 	bl	8002546 <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff17 	bl	800251e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002964 <HAL_ADC_Init+0x2e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002968 <HAL_ADC_Init+0x2e8>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002704:	e002      	b.n	800270c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b01      	subs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff15 	bl	8002546 <LL_ADC_IsInternalRegulatorEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff75 	bl	8002632 <LL_ADC_REG_IsConversionOngoing>
 8002748:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 8142 	bne.w	80029dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 813e 	bne.w	80029dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff22 	bl	80025be <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d141      	bne.n	8002804 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADC_Init+0x114>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a77      	ldr	r2, [pc, #476]	@ (800296c <HAL_ADC_Init+0x2ec>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10f      	bne.n	80027b4 <HAL_ADC_Init+0x134>
 8002794:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002798:	f7ff ff11 	bl	80025be <LL_ADC_IsEnabled>
 800279c:	4604      	mov	r4, r0
 800279e:	4873      	ldr	r0, [pc, #460]	@ (800296c <HAL_ADC_Init+0x2ec>)
 80027a0:	f7ff ff0d 	bl	80025be <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4323      	orrs	r3, r4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_ADC_Init+0x15a>
 80027b4:	486e      	ldr	r0, [pc, #440]	@ (8002970 <HAL_ADC_Init+0x2f0>)
 80027b6:	f7ff ff02 	bl	80025be <LL_ADC_IsEnabled>
 80027ba:	4604      	mov	r4, r0
 80027bc:	486d      	ldr	r0, [pc, #436]	@ (8002974 <HAL_ADC_Init+0x2f4>)
 80027be:	f7ff fefe 	bl	80025be <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	431c      	orrs	r4, r3
 80027c6:	486c      	ldr	r0, [pc, #432]	@ (8002978 <HAL_ADC_Init+0x2f8>)
 80027c8:	f7ff fef9 	bl	80025be <LL_ADC_IsEnabled>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4323      	orrs	r3, r4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_Init+0x172>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5f      	ldr	r2, [pc, #380]	@ (800296c <HAL_ADC_Init+0x2ec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Init+0x176>
 80027f2:	4a62      	ldr	r2, [pc, #392]	@ (800297c <HAL_ADC_Init+0x2fc>)
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_Init+0x178>
 80027f6:	4a62      	ldr	r2, [pc, #392]	@ (8002980 <HAL_ADC_Init+0x300>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f7ff fe04 	bl	800240c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7f5b      	ldrb	r3, [r3, #29]
 8002808:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800280e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002814:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800281a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002822:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	045b      	lsls	r3, r3, #17
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <HAL_ADC_Init+0x304>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fee4 	bl	8002658 <LL_ADC_INJ_IsConversionOngoing>
 8002890:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d17f      	bne.n	8002998 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d17c      	bne.n	8002998 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028ba:	f023 0302 	bic.w	r3, r3, #2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6911      	ldr	r1, [r2, #16]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80028fe:	e013      	b.n	8002928 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800290e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002924:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12a      	bne.n	8002988 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002954:	430a      	orrs	r2, r1
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	611a      	str	r2, [r3, #16]
 8002962:	e019      	b.n	8002998 <HAL_ADC_Init+0x318>
 8002964:	20000000 	.word	0x20000000
 8002968:	053e2d63 	.word	0x053e2d63
 800296c:	50000100 	.word	0x50000100
 8002970:	50000400 	.word	0x50000400
 8002974:	50000500 	.word	0x50000500
 8002978:	50000600 	.word	0x50000600
 800297c:	50000300 	.word	0x50000300
 8002980:	50000700 	.word	0x50000700
 8002984:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10c      	bne.n	80029ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f023 010f 	bic.w	r1, r3, #15
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b8:	e007      	b.n	80029ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 020f 	bic.w	r2, r2, #15
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029da:	e007      	b.n	80029ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	f043 0210 	orr.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	bf00      	nop

080029f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_Start+0x1c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a67      	ldr	r2, [pc, #412]	@ (8002bac <HAL_ADC_Start+0x1b4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_Start+0x20>
 8002a14:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <HAL_ADC_Start+0x1b8>)
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_Start+0x22>
 8002a18:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_ADC_Start+0x1bc>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fd3d 	bl	800249a <LL_ADC_GetMultimode>
 8002a20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe03 	bl	8002632 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 80b4 	bne.w	8002b9c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_Start+0x4a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0af      	b.n	8002ba2 <HAL_ADC_Start+0x1aa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fb36 	bl	80030bc <ADC_Enable>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 809b 	bne.w	8002b92 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4d      	ldr	r2, [pc, #308]	@ (8002bac <HAL_ADC_Start+0x1b4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_ADC_Start+0x96>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb8 <HAL_ADC_Start+0x1c0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d002      	beq.n	8002a8a <HAL_ADC_Start+0x92>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e003      	b.n	8002a92 <HAL_ADC_Start+0x9a>
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_ADC_Start+0x1c4>)
 8002a8c:	e001      	b.n	8002a92 <HAL_ADC_Start+0x9a>
 8002a8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	f023 0206 	bic.w	r2, r3, #6
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	221c      	movs	r2, #28
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <HAL_ADC_Start+0x1b4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_ADC_Start+0x104>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a32      	ldr	r2, [pc, #200]	@ (8002bb8 <HAL_ADC_Start+0x1c0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d002      	beq.n	8002af8 <HAL_ADC_Start+0x100>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_Start+0x108>
 8002af8:	4b30      	ldr	r3, [pc, #192]	@ (8002bbc <HAL_ADC_Start+0x1c4>)
 8002afa:	e001      	b.n	8002b00 <HAL_ADC_Start+0x108>
 8002afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d008      	beq.n	8002b1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d114      	bne.n	8002b44 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fd64 	bl	800260a <LL_ADC_REG_StartConversion>
 8002b42:	e02d      	b.n	8002ba0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_ADC_Start+0x1b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_ADC_Start+0x176>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a16      	ldr	r2, [pc, #88]	@ (8002bb8 <HAL_ADC_Start+0x1c0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d002      	beq.n	8002b6a <HAL_ADC_Start+0x172>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	e003      	b.n	8002b72 <HAL_ADC_Start+0x17a>
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_ADC_Start+0x1c4>)
 8002b6c:	e001      	b.n	8002b72 <HAL_ADC_Start+0x17a>
 8002b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b90:	e006      	b.n	8002ba0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b9a:	e001      	b.n	8002ba0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	50000100 	.word	0x50000100
 8002bb0:	50000300 	.word	0x50000300
 8002bb4:	50000700 	.word	0x50000700
 8002bb8:	50000500 	.word	0x50000500
 8002bbc:	50000400 	.word	0x50000400

08002bc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x30>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a8e      	ldr	r2, [pc, #568]	@ (8002e24 <HAL_ADC_IRQHandler+0x264>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x34>
 8002bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8002e28 <HAL_ADC_IRQHandler+0x268>)
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADC_IRQHandler+0x36>
 8002bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002e2c <HAL_ADC_IRQHandler+0x26c>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fc4f 	bl	800249a <LL_ADC_GetMultimode>
 8002bfc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x78>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d012      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c22:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fe66 	bl	80038fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x8c>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8094 	beq.w	8002d80 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 808e 	beq.w	8002d80 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fbe4 	bl	800244e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d072      	beq.n	8002d72 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a64      	ldr	r2, [pc, #400]	@ (8002e24 <HAL_ADC_IRQHandler+0x264>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_ADC_IRQHandler+0xea>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a65      	ldr	r2, [pc, #404]	@ (8002e30 <HAL_ADC_IRQHandler+0x270>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_IRQHandler+0xe6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_IRQHandler+0xee>
 8002ca6:	4b63      	ldr	r3, [pc, #396]	@ (8002e34 <HAL_ADC_IRQHandler+0x274>)
 8002ca8:	e001      	b.n	8002cae <HAL_ADC_IRQHandler+0xee>
 8002caa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d008      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d002      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d104      	bne.n	8002cd2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e014      	b.n	8002cfc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a53      	ldr	r2, [pc, #332]	@ (8002e24 <HAL_ADC_IRQHandler+0x264>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x130>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a53      	ldr	r2, [pc, #332]	@ (8002e30 <HAL_ADC_IRQHandler+0x270>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d002      	beq.n	8002cec <HAL_ADC_IRQHandler+0x12c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e003      	b.n	8002cf4 <HAL_ADC_IRQHandler+0x134>
 8002cec:	4b51      	ldr	r3, [pc, #324]	@ (8002e34 <HAL_ADC_IRQHandler+0x274>)
 8002cee:	e001      	b.n	8002cf4 <HAL_ADC_IRQHandler+0x134>
 8002cf0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cf4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d135      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d12e      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fc8a 	bl	8002632 <LL_ADC_REG_IsConversionOngoing>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11a      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020c 	bic.w	r2, r2, #12
 8002d32:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d112      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d58:	e00b      	b.n	8002d72 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f984 	bl	8003080 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x1d4>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b3 	beq.w	8002f06 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80ad 	beq.w	8002f06 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fb53 	bl	8002474 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002dce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fb3a 	bl	800244e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dda:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <HAL_ADC_IRQHandler+0x264>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x23a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_ADC_IRQHandler+0x270>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d002      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x236>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	e003      	b.n	8002dfe <HAL_ADC_IRQHandler+0x23e>
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <HAL_ADC_IRQHandler+0x274>)
 8002df8:	e001      	b.n	8002dfe <HAL_ADC_IRQHandler+0x23e>
 8002dfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d008      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d002      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b07      	cmp	r3, #7
 8002e16:	d10f      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	e01f      	b.n	8002e62 <HAL_ADC_IRQHandler+0x2a2>
 8002e22:	bf00      	nop
 8002e24:	50000100 	.word	0x50000100
 8002e28:	50000300 	.word	0x50000300
 8002e2c:	50000700 	.word	0x50000700
 8002e30:	50000500 	.word	0x50000500
 8002e34:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a8b      	ldr	r2, [pc, #556]	@ (800306c <HAL_ADC_IRQHandler+0x4ac>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x296>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a8a      	ldr	r2, [pc, #552]	@ (8003070 <HAL_ADC_IRQHandler+0x4b0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d002      	beq.n	8002e52 <HAL_ADC_IRQHandler+0x292>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_IRQHandler+0x29a>
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_ADC_IRQHandler+0x4b4>)
 8002e54:	e001      	b.n	8002e5a <HAL_ADC_IRQHandler+0x29a>
 8002e56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d047      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_ADC_IRQHandler+0x2c2>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03f      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d13a      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d133      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d12e      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fbda 	bl	8002658 <LL_ADC_INJ_IsConversionOngoing>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002eb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d112      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ede:	e00b      	b.n	8002ef8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff f9bb 	bl	8002274 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2260      	movs	r2, #96	@ 0x60
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d011      	beq.n	8002f34 <HAL_ADC_IRQHandler+0x374>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8b4 	bl	8003094 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d012      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x3a4>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fcbd 	bl	80038d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x3d4>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fcaf 	bl	80038e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d043      	beq.n	8003026 <HAL_ADC_IRQHandler+0x466>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03e      	beq.n	8003026 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	e021      	b.n	8002ffa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x410>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a28      	ldr	r2, [pc, #160]	@ (800306c <HAL_ADC_IRQHandler+0x4ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x414>
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <HAL_ADC_IRQHandler+0x4b8>)
 8002fd2:	e000      	b.n	8002fd6 <HAL_ADC_IRQHandler+0x416>
 8002fd4:	4b29      	ldr	r3, [pc, #164]	@ (800307c <HAL_ADC_IRQHandler+0x4bc>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fa6d 	bl	80024b6 <LL_ADC_GetMultiDMATransfer>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe6:	e008      	b.n	8002ffa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10e      	bne.n	800301e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	f043 0202 	orr.w	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f845 	bl	80030a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_ADC_IRQHandler+0x4a2>
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d013      	beq.n	8003062 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc2f 	bl	80038c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003062:	bf00      	nop
 8003064:	3728      	adds	r7, #40	@ 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	50000100 	.word	0x50000100
 8003070:	50000500 	.word	0x50000500
 8003074:	50000400 	.word	0x50000400
 8003078:	50000300 	.word	0x50000300
 800307c:	50000700 	.word	0x50000700

08003080 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fa76 	bl	80025be <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d176      	bne.n	80031c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <ADC_Enable+0x114>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e062      	b.n	80031c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fa31 	bl	800256e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003114:	d004      	beq.n	8003120 <ADC_Enable+0x64>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2e      	ldr	r2, [pc, #184]	@ (80031d4 <ADC_Enable+0x118>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <ADC_Enable+0x68>
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <ADC_Enable+0x11c>)
 8003122:	e000      	b.n	8003126 <ADC_Enable+0x6a>
 8003124:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <ADC_Enable+0x120>)
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f983 	bl	8002432 <LL_ADC_GetCommonPathInternalCh>
 800312c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800312e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003132:	2b00      	cmp	r3, #0
 8003134:	d013      	beq.n	800315e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003136:	4b2a      	ldr	r3, [pc, #168]	@ (80031e0 <ADC_Enable+0x124>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	4a29      	ldr	r2, [pc, #164]	@ (80031e4 <ADC_Enable+0x128>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003150:	e002      	b.n	8003158 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3b01      	subs	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f9      	bne.n	8003152 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800315e:	f7ff f949 	bl	80023f4 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003164:	e028      	b.n	80031b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fa27 	bl	80025be <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f9f7 	bl	800256e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003180:	f7ff f938 	bl	80023f4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d914      	bls.n	80031b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d00d      	beq.n	80031b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d1cf      	bne.n	8003166 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	8000003f 	.word	0x8000003f
 80031d4:	50000100 	.word	0x50000100
 80031d8:	50000300 	.word	0x50000300
 80031dc:	50000700 	.word	0x50000700
 80031e0:	20000000 	.word	0x20000000
 80031e4:	053e2d63 	.word	0x053e2d63

080031e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f9f5 	bl	80025e4 <LL_ADC_IsDisableOngoing>
 80031fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f9dc 	bl	80025be <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d047      	beq.n	800329c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d144      	bne.n	800329c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030d 	and.w	r3, r3, #13
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f9b6 	bl	8002596 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2203      	movs	r2, #3
 8003230:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003232:	f7ff f8df 	bl	80023f4 <HAL_GetTick>
 8003236:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003238:	e029      	b.n	800328e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e023      	b.n	800329e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003256:	f7ff f8cd 	bl	80023f4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d914      	bls.n	800328e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e007      	b.n	800329e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1dc      	bne.n	8003256 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <LL_ADC_SetCommonPathInternalCh>:
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_GetCommonPathInternalCh>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_SetOffset>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3360      	adds	r3, #96	@ 0x60
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <LL_ADC_SetOffset+0x44>)
 800330a:	4013      	ands	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	03fff000 	.word	0x03fff000

08003330 <LL_ADC_GetOffsetChannel>:
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3360      	adds	r3, #96	@ 0x60
 800333e:	461a      	mov	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_SetOffsetState>:
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3360      	adds	r3, #96	@ 0x60
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	431a      	orrs	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_ADC_SetOffsetSign>:
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3360      	adds	r3, #96	@ 0x60
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	601a      	str	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_SetOffsetSaturation>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3360      	adds	r3, #96	@ 0x60
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	615a      	str	r2, [r3, #20]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_INJ_GetTrigAuto>:
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_ADC_SetChannelSamplingTime>:
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3314      	adds	r3, #20
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	0e5b      	lsrs	r3, r3, #25
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0d1b      	lsrs	r3, r3, #20
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2107      	movs	r1, #7
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	401a      	ands	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	0d1b      	lsrs	r3, r3, #20
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <LL_ADC_SetChannelSingleDiff>:
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0318 	and.w	r3, r3, #24
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80034bc:	40d9      	lsrs	r1, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	400b      	ands	r3, r1
 80034c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	0007ffff 	.word	0x0007ffff

080034e0 <LL_ADC_GetMultimode>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 031f 	and.w	r3, r3, #31
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_IsEnabled>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <LL_ADC_IsEnabled+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_IsEnabled+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_StartCalibration>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800353e:	4313      	orrs	r3, r2
 8003540:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_IsCalibrationOnGoing>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003568:	d101      	bne.n	800356e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_REG_IsConversionOngoing>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d101      	bne.n	8003594 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_INJ_StartConversion>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035b6:	f043 0208 	orr.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_INJ_IsConversionOngoing>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d101      	bne.n	80035e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_ADCEx_Calibration_Start+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e04d      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fde7 	bl	80031e8 <ADC_Disable>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d136      	bne.n	8003692 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003628:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff6f 	bl	8003522 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003644:	e014      	b.n	8003670 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d90d      	bls.n	8003670 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	f023 0312 	bic.w	r3, r3, #18
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e01b      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff6d 	bl	8003554 <LL_ADC_IsCalibrationOnGoing>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e2      	bne.n	8003646 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f023 0303 	bic.w	r3, r3, #3
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003690:	e005      	b.n	800369e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	0004de01 	.word	0x0004de01

080036b4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c4:	d004      	beq.n	80036d0 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a78      	ldr	r2, [pc, #480]	@ (80038ac <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_ADCEx_InjectedStart_IT+0x20>
 80036d0:	4b77      	ldr	r3, [pc, #476]	@ (80038b0 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80036d2:	e000      	b.n	80036d6 <HAL_ADCEx_InjectedStart_IT+0x22>
 80036d4:	4b77      	ldr	r3, [pc, #476]	@ (80038b4 <HAL_ADCEx_InjectedStart_IT+0x200>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff02 	bl	80034e0 <LL_ADC_GetMultimode>
 80036dc:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ff71 	bl	80035ca <LL_ADC_INJ_IsConversionOngoing>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0d8      	b.n	80038a4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036fc:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0c0      	b.n	80038a4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_ADCEx_InjectedStart_IT+0x7c>
 800372c:	2302      	movs	r3, #2
 800372e:	e0b9      	b.n	80038a4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fcbf 	bl	80030bc <ADC_Enable>
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 80a8 	bne.w	800389a <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	f023 0208 	bic.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60
 8003762:	e002      	b.n	800376a <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4a      	ldr	r2, [pc, #296]	@ (80038ac <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_ADCEx_InjectedStart_IT+0xe8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4a      	ldr	r2, [pc, #296]	@ (80038b8 <HAL_ADCEx_InjectedStart_IT+0x204>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d002      	beq.n	8003798 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e003      	b.n	80037a0 <HAL_ADCEx_InjectedStart_IT+0xec>
 8003798:	4b48      	ldr	r3, [pc, #288]	@ (80038bc <HAL_ADCEx_InjectedStart_IT+0x208>)
 800379a:	e001      	b.n	80037a0 <HAL_ADCEx_InjectedStart_IT+0xec>
 800379c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d002      	beq.n	80037ae <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2260      	movs	r2, #96	@ 0x60
 80037c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e6:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d110      	bne.n	8003812 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0220 	bic.w	r2, r2, #32
 80037fe:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800380e:	605a      	str	r2, [r3, #4]
          break;
 8003810:	e010      	b.n	8003834 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003820:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	605a      	str	r2, [r3, #4]
          break;
 8003832:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1c      	ldr	r2, [pc, #112]	@ (80038ac <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_ADCEx_InjectedStart_IT+0x19e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d002      	beq.n	800384e <HAL_ADCEx_InjectedStart_IT+0x19a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	e003      	b.n	8003856 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_ADCEx_InjectedStart_IT+0x208>)
 8003850:	e001      	b.n	8003856 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8003852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4293      	cmp	r3, r2
 800385c:	d008      	beq.n	8003870 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b06      	cmp	r3, #6
 8003868:	d002      	beq.n	8003870 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b07      	cmp	r3, #7
 800386e:	d10d      	bne.n	800388c <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fdd5 	bl	8003424 <LL_ADC_INJ_GetTrigAuto>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d110      	bne.n	80038a2 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fe8c 	bl	80035a2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800388a:	e00a      	b.n	80038a2 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003898:	e003      	b.n	80038a2 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	50000100 	.word	0x50000100
 80038b0:	50000300 	.word	0x50000300
 80038b4:	50000700 	.word	0x50000700
 80038b8:	50000500 	.word	0x50000500
 80038bc:	50000400 	.word	0x50000400

080038c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b0b6      	sub	sp, #216	@ 0xd8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003934:	2302      	movs	r3, #2
 8003936:	f000 bcfd 	b.w	8004334 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800394e:	2b01      	cmp	r3, #1
 8003950:	d130      	bne.n	80039b4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b09      	cmp	r3, #9
 8003958:	d179      	bne.n	8003a4e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d010      	beq.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	025b      	lsls	r3, r3, #9
 800396a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003976:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003982:	e007      	b.n	8003994 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	025b      	lsls	r3, r3, #9
 800398c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8003990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800399a:	4b84      	ldr	r3, [pc, #528]	@ (8003bac <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80039a6:	430b      	orrs	r3, r1
 80039a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039b0:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80039b2:	e04c      	b.n	8003a4e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80039e0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039ec:	e004      	b.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fdb9 	bl	80035ca <LL_ADC_INJ_IsConversionOngoing>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d124      	bne.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d112      	bne.n	8003a8e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003a78:	055a      	lsls	r2, r3, #21
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	e00c      	b.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003a9e:	055a      	lsls	r2, r3, #21
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fd65 	bl	800357c <LL_ADC_REG_IsConversionOngoing>
 8003ab2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd85 	bl	80035ca <LL_ADC_INJ_IsConversionOngoing>
 8003ac0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 822e 	bne.w	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 8229 	bne.w	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003b00:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003b02:	e01f      	b.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003b12:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003b14:	e016      	b.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d109      	bne.n	8003b34 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b32:	e007      	b.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003b42:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d110      	bne.n	8003b70 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	430b      	orrs	r3, r1
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0202 	orr.w	r2, r2, #2
 8003b6c:	611a      	str	r2, [r3, #16]
 8003b6e:	e007      	b.n	8003b80 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0202 	bic.w	r2, r2, #2
 8003b7e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b88:	d112      	bne.n	8003bb0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7ff fc53 	bl	8003440 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fc2b 	bl	80033fe <LL_ADC_SetSamplingTimeCommonConfig>
 8003ba8:	e011      	b.n	8003bce <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003baa:	bf00      	nop
 8003bac:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f7ff fc3f 	bl	8003440 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fc18 	bl	80033fe <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d022      	beq.n	8003c36 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c00:	f7ff fb72 	bl	80032e8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6919      	ldr	r1, [r3, #16]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f7ff fbbe 	bl	8003392 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003c26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c2a:	e000      	b.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7ff fbca 	bl	80033c8 <LL_ADC_SetOffsetSaturation>
 8003c34:	e179      	b.n	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fb77 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fb6c 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	0e9b      	lsrs	r3, r3, #26
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	e01e      	b.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fb61 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e004      	b.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8003c94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0e9b      	lsrs	r3, r3, #26
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	e018      	b.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	e004      	b.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d106      	bne.n	8003cfc <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fb30 	bl	800335c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fb14 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fb09 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	e01e      	b.n	8003d66 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fafe 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003d56:	2320      	movs	r3, #32
 8003d58:	e004      	b.n	8003d64 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0e9b      	lsrs	r3, r3, #26
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	e018      	b.n	8003db0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003da2:	2320      	movs	r3, #32
 8003da4:	e004      	b.n	8003db0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d106      	bne.n	8003dc2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff facd 	bl	800335c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fab1 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff faa6 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	0e9b      	lsrs	r3, r3, #26
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	e01e      	b.n	8003e2c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fa9b 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	e004      	b.n	8003e2a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	e014      	b.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e004      	b.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d106      	bne.n	8003e80 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fa6e 	bl	800335c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2103      	movs	r1, #3
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fa52 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fa47 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	f003 021f 	and.w	r2, r3, #31
 8003eaa:	e017      	b.n	8003edc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2103      	movs	r1, #3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fa3c 	bl	8003330 <LL_ADC_GetOffsetChannel>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003ece:	2320      	movs	r3, #32
 8003ed0:	e003      	b.n	8003eda <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	e011      	b.n	8003f18 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	e003      	b.n	8003f18 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d106      	bne.n	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2103      	movs	r1, #3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fa19 	bl	800335c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fae4 	bl	80034fc <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 813d 	bne.w	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f7ff faa5 	bl	8003498 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4aa2      	ldr	r2, [pc, #648]	@ (80041dc <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	f040 812e 	bne.w	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0e9b      	lsrs	r3, r3, #26
 8003f70:	3301      	adds	r3, #1
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	bf94      	ite	ls
 8003f7a:	2301      	movls	r3, #1
 8003f7c:	2300      	movhi	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e019      	b.n	8003fb6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	e003      	b.n	8003fa6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d079      	beq.n	80040ae <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0e9b      	lsrs	r3, r3, #26
 8003fcc:	3301      	adds	r3, #1
 8003fce:	069b      	lsls	r3, r3, #26
 8003fd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd4:	e015      	b.n	8004002 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e003      	b.n	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	069b      	lsls	r3, r3, #26
 8003ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0x712>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0e9b      	lsrs	r3, r3, #26
 8004014:	3301      	adds	r3, #1
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	e017      	b.n	8004052 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004032:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800403a:	2320      	movs	r3, #32
 800403c:	e003      	b.n	8004046 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800403e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	ea42 0103 	orr.w	r1, r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	0e9b      	lsrs	r3, r3, #26
 8004068:	3301      	adds	r3, #1
 800406a:	f003 021f 	and.w	r2, r3, #31
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	051b      	lsls	r3, r3, #20
 8004076:	e018      	b.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040aa:	430b      	orrs	r3, r1
 80040ac:	e07e      	b.n	80041ac <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0e9b      	lsrs	r3, r3, #26
 80040c0:	3301      	adds	r3, #1
 80040c2:	069b      	lsls	r3, r3, #26
 80040c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040c8:	e015      	b.n	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80040e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	069b      	lsls	r3, r3, #26
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	3301      	adds	r3, #1
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	e017      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	61bb      	str	r3, [r7, #24]
  return result;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e003      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	ea42 0103 	orr.w	r1, r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	3301      	adds	r3, #1
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	3b1e      	subs	r3, #30
 800416a:	051b      	lsls	r3, r3, #20
 800416c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004170:	e01b      	b.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
  return result;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800418a:	2320      	movs	r3, #32
 800418c:	e003      	b.n	8004196 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	3b1e      	subs	r3, #30
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041aa:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7ff f945 	bl	8003440 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80b2 	beq.w	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041cc:	d004      	beq.n	80041d8 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d109      	bne.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80041da:	e008      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80041dc:	407f0000 	.word	0x407f0000
 80041e0:	80080000 	.word	0x80080000
 80041e4:	50000100 	.word	0x50000100
 80041e8:	50000300 	.word	0x50000300
 80041ec:	4b53      	ldr	r3, [pc, #332]	@ (800433c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f86c 	bl	80032cc <LL_ADC_GetCommonPathInternalCh>
 80041f4:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a50      	ldr	r2, [pc, #320]	@ (8004340 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a4f      	ldr	r2, [pc, #316]	@ (8004344 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d139      	bne.n	8004280 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800420c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d133      	bne.n	8004280 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004220:	d004      	beq.n	800422c <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a48      	ldr	r2, [pc, #288]	@ (8004348 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d17a      	bne.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004234:	d004      	beq.n	8004240 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a44      	ldr	r2, [pc, #272]	@ (800434c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004240:	4a43      	ldr	r2, [pc, #268]	@ (8004350 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004242:	e000      	b.n	8004246 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004244:	4a3d      	ldr	r2, [pc, #244]	@ (800433c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800424a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f7ff f828 	bl	80032a6 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004256:	4b3f      	ldr	r3, [pc, #252]	@ (8004354 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	4a3e      	ldr	r2, [pc, #248]	@ (8004358 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	099a      	lsrs	r2, r3, #6
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800426e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004270:	e002      	b.n	8004278 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3b01      	subs	r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800427e:	e050      	b.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a35      	ldr	r2, [pc, #212]	@ (800435c <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d125      	bne.n	80042d6 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800428a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800428e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11f      	bne.n	80042d6 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d104      	bne.n	80042aa <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004360 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d03d      	beq.n	8004326 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b2:	d004      	beq.n	80042be <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a24      	ldr	r2, [pc, #144]	@ (800434c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80042be:	4a24      	ldr	r2, [pc, #144]	@ (8004350 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80042c0:	e000      	b.n	80042c4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80042c2:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80042c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7fe ffe9 	bl	80032a6 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d4:	e027      	b.n	8004326 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d123      	bne.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d11d      	bne.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a16      	ldr	r2, [pc, #88]	@ (800434c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042fe:	d004      	beq.n	800430a <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a11      	ldr	r2, [pc, #68]	@ (800434c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d101      	bne.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800430a:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800430c:	e000      	b.n	8004310 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800430e:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004314:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7fe ffc3 	bl	80032a6 <LL_ADC_SetCommonPathInternalCh>
 8004320:	e002      	b.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004326:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004330:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004334:	4618      	mov	r0, r3
 8004336:	37d8      	adds	r7, #216	@ 0xd8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	50000700 	.word	0x50000700
 8004340:	c3210000 	.word	0xc3210000
 8004344:	90c00010 	.word	0x90c00010
 8004348:	50000600 	.word	0x50000600
 800434c:	50000100 	.word	0x50000100
 8004350:	50000300 	.word	0x50000300
 8004354:	20000000 	.word	0x20000000
 8004358:	053e2d63 	.word	0x053e2d63
 800435c:	c7520000 	.word	0xc7520000
 8004360:	50000500 	.word	0x50000500
 8004364:	cb840000 	.word	0xcb840000

08004368 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b0a1      	sub	sp, #132	@ 0x84
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0e7      	b.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800438e:	2300      	movs	r3, #0
 8004390:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004392:	2300      	movs	r3, #0
 8004394:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800439e:	d102      	bne.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	e009      	b.n	80043ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d102      	bne.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80043b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	e001      	b.n	80043ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0be      	b.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f8ce 	bl	800357c <LL_ADC_REG_IsConversionOngoing>
 80043e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff f8c8 	bl	800357c <LL_ADC_REG_IsConversionOngoing>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 80a0 	bne.w	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80043f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 809c 	bne.w	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004404:	d004      	beq.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a55      	ldr	r2, [pc, #340]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004410:	4b56      	ldr	r3, [pc, #344]	@ (800456c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004412:	e000      	b.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004414:	4b56      	ldr	r3, [pc, #344]	@ (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004416:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04b      	beq.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004420:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004432:	035b      	lsls	r3, r3, #13
 8004434:	430b      	orrs	r3, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004444:	d004      	beq.n	8004450 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a45      	ldr	r2, [pc, #276]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10f      	bne.n	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004450:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004454:	f7ff f852 	bl	80034fc <LL_ADC_IsEnabled>
 8004458:	4604      	mov	r4, r0
 800445a:	4841      	ldr	r0, [pc, #260]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800445c:	f7ff f84e 	bl	80034fc <LL_ADC_IsEnabled>
 8004460:	4603      	mov	r3, r0
 8004462:	4323      	orrs	r3, r4
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e012      	b.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004470:	483c      	ldr	r0, [pc, #240]	@ (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004472:	f7ff f843 	bl	80034fc <LL_ADC_IsEnabled>
 8004476:	4604      	mov	r4, r0
 8004478:	483b      	ldr	r0, [pc, #236]	@ (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800447a:	f7ff f83f 	bl	80034fc <LL_ADC_IsEnabled>
 800447e:	4603      	mov	r3, r0
 8004480:	431c      	orrs	r4, r3
 8004482:	483c      	ldr	r0, [pc, #240]	@ (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004484:	f7ff f83a 	bl	80034fc <LL_ADC_IsEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	4323      	orrs	r3, r4
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d056      	beq.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800449a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044a2:	f023 030f 	bic.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	6811      	ldr	r1, [r2, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	6892      	ldr	r2, [r2, #8]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	431a      	orrs	r2, r3
 80044b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044b6:	e047      	b.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044cc:	d004      	beq.n	80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a23      	ldr	r2, [pc, #140]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10f      	bne.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80044d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044dc:	f7ff f80e 	bl	80034fc <LL_ADC_IsEnabled>
 80044e0:	4604      	mov	r4, r0
 80044e2:	481f      	ldr	r0, [pc, #124]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044e4:	f7ff f80a 	bl	80034fc <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4323      	orrs	r3, r4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e012      	b.n	800451e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80044f8:	481a      	ldr	r0, [pc, #104]	@ (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044fa:	f7fe ffff 	bl	80034fc <LL_ADC_IsEnabled>
 80044fe:	4604      	mov	r4, r0
 8004500:	4819      	ldr	r0, [pc, #100]	@ (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004502:	f7fe fffb 	bl	80034fc <LL_ADC_IsEnabled>
 8004506:	4603      	mov	r3, r0
 8004508:	431c      	orrs	r4, r3
 800450a:	481a      	ldr	r0, [pc, #104]	@ (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800450c:	f7fe fff6 	bl	80034fc <LL_ADC_IsEnabled>
 8004510:	4603      	mov	r3, r0
 8004512:	4323      	orrs	r3, r4
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800452a:	f023 030f 	bic.w	r3, r3, #15
 800452e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004530:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004532:	e009      	b.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004546:	e000      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004552:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004556:	4618      	mov	r0, r3
 8004558:	3784      	adds	r7, #132	@ 0x84
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop
 8004560:	50000100 	.word	0x50000100
 8004564:	50000400 	.word	0x50000400
 8004568:	50000500 	.word	0x50000500
 800456c:	50000300 	.word	0x50000300
 8004570:	50000700 	.word	0x50000700
 8004574:	50000600 	.word	0x50000600

08004578 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e023      	b.n	80045d2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fb56 	bl	8001c50 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	@ (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	db0b      	blt.n	800466a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	4907      	ldr	r1, [pc, #28]	@ (8004678 <__NVIC_EnableIRQ+0x38>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	@ (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	@ (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	@ 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
         );
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	@ 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004748:	d301      	bcc.n	800474e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474a:	2301      	movs	r3, #1
 800474c:	e00f      	b.n	800476e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <SysTick_Config+0x40>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004756:	210f      	movs	r1, #15
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	f7ff ff8e 	bl	800467c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004760:	4b05      	ldr	r3, [pc, #20]	@ (8004778 <SysTick_Config+0x40>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004766:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <SysTick_Config+0x40>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	e000e010 	.word	0xe000e010

0800477c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff29 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047a0:	f7ff ff40 	bl	8004624 <__NVIC_GetPriorityGrouping>
 80047a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff ff90 	bl	80046d0 <NVIC_EncodePriority>
 80047b0:	4602      	mov	r2, r0
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff5f 	bl	800467c <__NVIC_SetPriority>
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff33 	bl	8004640 <__NVIC_EnableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ffa4 	bl	8004738 <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e08d      	b.n	800492a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_DMA_Init+0x138>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d80f      	bhi.n	800483a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	4b45      	ldr	r3, [pc, #276]	@ (8004938 <HAL_DMA_Init+0x13c>)
 8004822:	4413      	add	r3, r2
 8004824:	4a45      	ldr	r2, [pc, #276]	@ (800493c <HAL_DMA_Init+0x140>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a42      	ldr	r2, [pc, #264]	@ (8004940 <HAL_DMA_Init+0x144>)
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40
 8004838:	e00e      	b.n	8004858 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b40      	ldr	r3, [pc, #256]	@ (8004944 <HAL_DMA_Init+0x148>)
 8004842:	4413      	add	r3, r2
 8004844:	4a3d      	ldr	r2, [pc, #244]	@ (800493c <HAL_DMA_Init+0x140>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	009a      	lsls	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <HAL_DMA_Init+0x14c>)
 8004856:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800487c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa2c 	bl	8004d08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048b8:	d102      	bne.n	80048c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_DMA_Init+0x104>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d80c      	bhi.n	8004900 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa4c 	bl	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	e008      	b.n	8004912 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40020407 	.word	0x40020407
 8004938:	bffdfff8 	.word	0xbffdfff8
 800493c:	cccccccd 	.word	0xcccccccd
 8004940:	40020000 	.word	0x40020000
 8004944:	bffdfbf8 	.word	0xbffdfbf8
 8004948:	40020400 	.word	0x40020400

0800494c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_DMA_Start_IT+0x20>
 8004968:	2302      	movs	r3, #2
 800496a:	e066      	b.n	8004a3a <HAL_DMA_Start_IT+0xee>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d155      	bne.n	8004a2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f970 	bl	8004c8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 020e 	orr.w	r2, r2, #14
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00f      	b.n	80049e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 020a 	orr.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e005      	b.n	8004a38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
 8004a36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d00d      	beq.n	8004a76 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e047      	b.n	8004b06 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 020e 	bic.w	r2, r2, #14
 8004a84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f003 021f 	and.w	r2, r3, #31
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ac2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ada:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ae4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
    }
  }
  return status;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2204      	movs	r2, #4
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d026      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x7a>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d021      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	2104      	movs	r1, #4
 8004b72:	fa01 f202 	lsl.w	r2, r1, r2
 8004b76:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d071      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b88:	e06c      	b.n	8004c64 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2202      	movs	r2, #2
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d029      	beq.n	8004bfc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 020a 	bic.w	r2, r2, #10
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f003 021f 	and.w	r2, r3, #31
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	2102      	movs	r1, #2
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d038      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bfa:	e033      	b.n	8004c64 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2208      	movs	r2, #8
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d02a      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d025      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 020e 	bic.w	r2, r2, #14
 8004c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f003 021f 	and.w	r2, r3, #31
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
}
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c7c:	b2db      	uxtb	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ca0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f003 021f 	and.w	r2, r3, #31
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d108      	bne.n	8004cea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ce8:	e007      	b.n	8004cfa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b16      	ldr	r3, [pc, #88]	@ (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d802      	bhi.n	8004d22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d1c:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e001      	b.n	8004d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004d22:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3b08      	subs	r3, #8
 8004d32:	4a12      	ldr	r2, [pc, #72]	@ (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	009a      	lsls	r2, r3, #2
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40020407 	.word	0x40020407
 8004d74:	40020800 	.word	0x40020800
 8004d78:	40020820 	.word	0x40020820
 8004d7c:	cccccccd 	.word	0xcccccccd
 8004d80:	40020880 	.word	0x40020880

08004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004da6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	1000823f 	.word	0x1000823f
 8004dc8:	40020940 	.word	0x40020940

08004dcc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e147      	b.n	800506e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc ff4c 	bl	8001c90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0210 	bic.w	r2, r2, #16
 8004e06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e08:	f7fd faf4 	bl	80023f4 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e0e:	e012      	b.n	8004e36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e10:	f7fd faf0 	bl	80023f4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b0a      	cmp	r3, #10
 8004e1c:	d90b      	bls.n	8004e36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e11b      	b.n	800506e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d0e5      	beq.n	8004e10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e54:	f7fd face 	bl	80023f4 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e5a:	e012      	b.n	8004e82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e5c:	f7fd faca 	bl	80023f4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b0a      	cmp	r3, #10
 8004e68:	d90b      	bls.n	8004e82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2203      	movs	r2, #3
 8004e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0f5      	b.n	800506e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0e5      	beq.n	8004e5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0202 	orr.w	r2, r2, #2
 8004e9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a74      	ldr	r2, [pc, #464]	@ (8005078 <HAL_FDCAN_Init+0x2ac>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d103      	bne.n	8004eb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004eaa:	4a74      	ldr	r2, [pc, #464]	@ (800507c <HAL_FDCAN_Init+0x2b0>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7c1b      	ldrb	r3, [r3, #16]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d108      	bne.n	8004ecc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e007      	b.n	8004edc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eda:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7c5b      	ldrb	r3, [r3, #17]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d108      	bne.n	8004ef6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef2:	619a      	str	r2, [r3, #24]
 8004ef4:	e007      	b.n	8004f06 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f04:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7c9b      	ldrb	r3, [r3, #18]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d108      	bne.n	8004f20 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f1c:	619a      	str	r2, [r3, #24]
 8004f1e:	e007      	b.n	8004f30 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f2e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004f54:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0210 	bic.w	r2, r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d108      	bne.n	8004f80 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0204 	orr.w	r2, r2, #4
 8004f7c:	619a      	str	r2, [r3, #24]
 8004f7e:	e02c      	b.n	8004fda <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d028      	beq.n	8004fda <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d01c      	beq.n	8004fca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0210 	orr.w	r2, r2, #16
 8004fae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d110      	bne.n	8004fda <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0220 	orr.w	r2, r2, #32
 8004fc6:	619a      	str	r2, [r3, #24]
 8004fc8:	e007      	b.n	8004fda <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0220 	orr.w	r2, r2, #32
 8004fd8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ff2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005002:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005004:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500e:	d115      	bne.n	800503c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	3b01      	subs	r3, #1
 800501c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800501e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005024:	3b01      	subs	r3, #1
 8005026:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005028:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	3b01      	subs	r3, #1
 8005032:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005038:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800503a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fc56 	bl	8005904 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40006400 	.word	0x40006400
 800507c:	40006500 	.word	0x40006500

08005080 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005090:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d002      	beq.n	800509e <HAL_FDCAN_ConfigFilter+0x1e>
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d13d      	bne.n	800511a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80050b2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80050ba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e01d      	b.n	8005116 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	075a      	lsls	r2, r3, #29
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	079a      	lsls	r2, r3, #30
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3304      	adds	r3, #4
 800510e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e006      	b.n	8005128 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d110      	bne.n	800516a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e006      	b.n	8005178 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d12c      	bne.n	80051f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e023      	b.n	8005204 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fc02 	bl	80059dc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	fa01 f202 	lsl.w	r2, r1, r2
 80051e4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80051e8:	2201      	movs	r2, #1
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	409a      	lsls	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e006      	b.n	8005204 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fa:	f043 0208 	orr.w	r2, r3, #8
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800520c:	b480      	push	{r7}
 800520e:	b08b      	sub	sp, #44	@ 0x2c
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005224:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005226:	7efb      	ldrb	r3, [r7, #27]
 8005228:	2b02      	cmp	r3, #2
 800522a:	f040 80e8 	bne.w	80053fe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d137      	bne.n	80052a4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005248:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0db      	b.n	800540c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10a      	bne.n	800527c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526e:	0a5b      	lsrs	r3, r3, #9
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	440b      	add	r3, r1
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a2:	e036      	b.n	8005312 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0a3      	b.n	800540c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10a      	bne.n	80052ec <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80052e8:	2301      	movs	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	0c9b      	lsrs	r3, r3, #18
 800532c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e005      	b.n	8005342 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	3304      	adds	r3, #4
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0e1b      	lsrs	r3, r3, #24
 8005396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	0fda      	lsrs	r2, r3, #31
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	3304      	adds	r3, #4
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	e00a      	b.n	80053ce <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	441a      	add	r2, r3
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	440b      	add	r3, r1
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	3301      	adds	r3, #1
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a11      	ldr	r2, [pc, #68]	@ (8005418 <HAL_FDCAN_GetRxMessage+0x20c>)
 80053d4:	5cd3      	ldrb	r3, [r2, r3]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	4293      	cmp	r3, r2
 80053dc:	d3ec      	bcc.n	80053b8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d105      	bne.n	80053f0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80053ee:	e004      	b.n	80053fa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e006      	b.n	800540c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0208 	orr.w	r2, r3, #8
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
  }
}
 800540c:	4618      	mov	r0, r3
 800540e:	372c      	adds	r7, #44	@ 0x2c
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	0800a310 	.word	0x0800a310

0800541c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800542e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d003      	beq.n	800543e <HAL_FDCAN_ActivateNotification+0x22>
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b02      	cmp	r3, #2
 800543a:	f040 80c8 	bne.w	80055ce <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d03b      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d031      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d027      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01d      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d013      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d107      	bne.n	80054e2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d13b      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d131      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d127      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d11d      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0202 	orr.w	r2, r2, #2
 800557c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	430a      	orrs	r2, r1
 8005598:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e006      	b.n	80055dc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	@ 0x30
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005604:	4013      	ands	r3, r2
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561c:	4013      	ands	r3, r2
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	4013      	ands	r3, r2
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005642:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	4013      	ands	r3, r2
 800564e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005656:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800565a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	4013      	ands	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005676:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2240      	movs	r2, #64	@ 0x40
 8005692:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f916 	bl	80058c6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d014      	beq.n	80056d8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056b6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80056d0:	6939      	ldr	r1, [r7, #16]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8d8 	bl	8005888 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80056d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80056e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8a2 	bl	8005832 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80056fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb fa56 	bl	8000bb0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005710:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f897 	bl	8005848 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005736:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f890 	bl	800585e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d018      	beq.n	800577a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d013      	beq.n	800577a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800575a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4013      	ands	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2280      	movs	r2, #128	@ 0x80
 8005770:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f87c 	bl	8005872 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005796:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f880 	bl	800589e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f878 	bl	80058b2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00f      	beq.n	80057ec <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80057fa:	69f9      	ldr	r1, [r7, #28]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f876 	bl	80058ee <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a3a      	ldr	r2, [r7, #32]
 800580e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f858 	bl	80058da <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800582a:	bf00      	nop
 800582c:	3730      	adds	r7, #48	@ 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800590c:	4b30      	ldr	r3, [pc, #192]	@ (80059d0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800590e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2f      	ldr	r2, [pc, #188]	@ (80059d4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d103      	bne.n	8005922 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005920:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2c      	ldr	r2, [pc, #176]	@ (80059d8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005932:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005942:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	041a      	lsls	r2, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005968:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	061a      	lsls	r2, r3, #24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e005      	b.n	80059b6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3304      	adds	r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3f3      	bcc.n	80059aa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	4000a400 	.word	0x4000a400
 80059d4:	40006800 	.word	0x40006800
 80059d8:	40006c00 	.word	0x40006c00

080059dc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	@ 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80059fa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	e00a      	b.n	8005a1e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005a10:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005a16:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a1c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a28:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005a2e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005a34:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	3304      	adds	r3, #4
 8005a68:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e020      	b.n	8005ab2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3303      	adds	r3, #3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3302      	adds	r3, #2
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	440b      	add	r3, r1
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a88:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	440b      	add	r3, r1
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a96:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005aa0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4a06      	ldr	r2, [pc, #24]	@ (8005ad0 <FDCAN_CopyMessageToRAM+0xf4>)
 8005ab8:	5cd3      	ldrb	r3, [r2, r3]
 8005aba:	461a      	mov	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d3d6      	bcc.n	8005a70 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	3724      	adds	r7, #36	@ 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	0800a310 	.word	0x0800a310

08005ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ae2:	e15a      	b.n	8005d9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 814c 	beq.w	8005d94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d005      	beq.n	8005b14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d130      	bne.n	8005b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	2203      	movs	r2, #3
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0201 	and.w	r2, r3, #1
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d017      	beq.n	8005bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d123      	bne.n	8005c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	08da      	lsrs	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4013      	ands	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	08da      	lsrs	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3208      	adds	r2, #8
 8005c00:	6939      	ldr	r1, [r7, #16]
 8005c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2203      	movs	r2, #3
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0203 	and.w	r2, r3, #3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80a6 	beq.w	8005d94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c48:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <HAL_GPIO_Init+0x2e4>)
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8005db8 <HAL_GPIO_Init+0x2e4>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c54:	4b58      	ldr	r3, [pc, #352]	@ (8005db8 <HAL_GPIO_Init+0x2e4>)
 8005c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c60:	4a56      	ldr	r2, [pc, #344]	@ (8005dbc <HAL_GPIO_Init+0x2e8>)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	3302      	adds	r3, #2
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	220f      	movs	r2, #15
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c8a:	d01f      	beq.n	8005ccc <HAL_GPIO_Init+0x1f8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc0 <HAL_GPIO_Init+0x2ec>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d019      	beq.n	8005cc8 <HAL_GPIO_Init+0x1f4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc4 <HAL_GPIO_Init+0x2f0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_GPIO_Init+0x1f0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc8 <HAL_GPIO_Init+0x2f4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_GPIO_Init+0x1ec>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a49      	ldr	r2, [pc, #292]	@ (8005dcc <HAL_GPIO_Init+0x2f8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d007      	beq.n	8005cbc <HAL_GPIO_Init+0x1e8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a48      	ldr	r2, [pc, #288]	@ (8005dd0 <HAL_GPIO_Init+0x2fc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_GPIO_Init+0x1e4>
 8005cb4:	2305      	movs	r3, #5
 8005cb6:	e00a      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cb8:	2306      	movs	r3, #6
 8005cba:	e008      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e006      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e004      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e002      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	f002 0203 	and.w	r2, r2, #3
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	4093      	lsls	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cde:	4937      	ldr	r1, [pc, #220]	@ (8005dbc <HAL_GPIO_Init+0x2e8>)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cec:	4b39      	ldr	r3, [pc, #228]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d10:	4a30      	ldr	r2, [pc, #192]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d16:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d3a:	4a26      	ldr	r2, [pc, #152]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d40:	4b24      	ldr	r3, [pc, #144]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d64:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	43db      	mvns	r3, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d8e:	4a11      	ldr	r2, [pc, #68]	@ (8005dd4 <HAL_GPIO_Init+0x300>)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3301      	adds	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f ae9d 	bne.w	8005ae4 <HAL_GPIO_Init+0x10>
  }
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	48000400 	.word	0x48000400
 8005dc4:	48000800 	.word	0x48000800
 8005dc8:	48000c00 	.word	0x48000c00
 8005dcc:	48001000 	.word	0x48001000
 8005dd0:	48001400 	.word	0x48001400
 8005dd4:	40010400 	.word	0x40010400

08005dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
 8005de4:	4613      	mov	r3, r2
 8005de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005de8:	787b      	ldrb	r3, [r7, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005df4:	e002      	b.n	8005dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	041a      	lsls	r2, r3, #16
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	43d9      	mvns	r1, r3
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	400b      	ands	r3, r1
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	619a      	str	r2, [r3, #24]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d006      	beq.n	8005e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e52:	4a05      	ldr	r2, [pc, #20]	@ (8005e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f806 	bl	8005e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40010400 	.word	0x40010400

08005e6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e08d      	b.n	8005fb0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fb ff65 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2224      	movs	r2, #36	@ 0x24
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ed2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d107      	bne.n	8005efc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	e006      	b.n	8005f0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d108      	bne.n	8005f24 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	e007      	b.n	8005f34 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69d9      	ldr	r1, [r3, #28]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	817b      	strh	r3, [r7, #10]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	f040 80ef 	bne.w	80061bc <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e0e5      	b.n	80061be <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0de      	b.n	80061be <HAL_I2C_Master_Transmit_DMA+0x206>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2221      	movs	r2, #33	@ 0x21
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2210      	movs	r2, #16
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	893a      	ldrh	r2, [r7, #8]
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4a66      	ldr	r2, [pc, #408]	@ (80061c8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800602e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a66      	ldr	r2, [pc, #408]	@ (80061cc <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006034:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2bff      	cmp	r3, #255	@ 0xff
 800603e:	d906      	bls.n	800604e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22ff      	movs	r2, #255	@ 0xff
 8006044:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	e007      	b.n	800605e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800605c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01a      	beq.n	800609c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006080:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d074      	beq.n	800618e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d022      	beq.n	80060f2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	4a47      	ldr	r2, [pc, #284]	@ (80061d0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80060b2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	4a46      	ldr	r2, [pc, #280]	@ (80061d4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80060ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	2200      	movs	r2, #0
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80060dc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80060e2:	f7fe fc33 	bl	800494c <HAL_DMA_Start_IT>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d13a      	bne.n	8006166 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80060f0:	e013      	b.n	800611a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e051      	b.n	80061be <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	b2db      	uxtb	r3, r3
 8006120:	3301      	adds	r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	8979      	ldrh	r1, [r7, #10]
 8006126:	4b2c      	ldr	r3, [pc, #176]	@ (80061d8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f001 fcbb 	bl	8007aa8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800614c:	2110      	movs	r1, #16
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f001 fcdc 	bl	8007b0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e028      	b.n	80061b8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617a:	f043 0210 	orr.w	r2, r3, #16
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e017      	b.n	80061be <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a12      	ldr	r2, [pc, #72]	@ (80061dc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006192:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	8979      	ldrh	r1, [r7, #10]
 800619a:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 fc80 	bl	8007aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061b0:	2101      	movs	r1, #1
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f001 fcaa 	bl	8007b0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	ffff0000 	.word	0xffff0000
 80061cc:	08006993 	.word	0x08006993
 80061d0:	08007913 	.word	0x08007913
 80061d4:	08007a3f 	.word	0x08007a3f
 80061d8:	80002000 	.word	0x80002000
 80061dc:	08006553 	.word	0x08006553

080061e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	461a      	mov	r2, r3
 80061ec:	460b      	mov	r3, r1
 80061ee:	817b      	strh	r3, [r7, #10]
 80061f0:	4613      	mov	r3, r2
 80061f2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	f040 80cd 	bne.w	800639c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006210:	d101      	bne.n	8006216 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	e0c3      	b.n	800639e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_I2C_Master_Receive_DMA+0x44>
 8006220:	2302      	movs	r3, #2
 8006222:	e0bc      	b.n	800639e <HAL_I2C_Master_Receive_DMA+0x1be>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2222      	movs	r2, #34	@ 0x22
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2210      	movs	r2, #16
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	893a      	ldrh	r2, [r7, #8]
 800624c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a55      	ldr	r2, [pc, #340]	@ (80063a8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8006252:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a55      	ldr	r2, [pc, #340]	@ (80063ac <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8006258:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2bff      	cmp	r3, #255	@ 0xff
 8006262:	d906      	bls.n	8006272 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	22ff      	movs	r2, #255	@ 0xff
 8006268:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800626a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e007      	b.n	8006282 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800627c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006280:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006286:	2b00      	cmp	r3, #0
 8006288:	d070      	beq.n	800636c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006296:	4a46      	ldr	r2, [pc, #280]	@ (80063b0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8006298:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	4a45      	ldr	r2, [pc, #276]	@ (80063b4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ae:	2200      	movs	r2, #0
 80062b0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3324      	adds	r3, #36	@ 0x24
 80062bc:	4619      	mov	r1, r3
 80062be:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80062c4:	f7fe fb42 	bl	800494c <HAL_DMA_Start_IT>
 80062c8:	4603      	mov	r3, r0
 80062ca:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d138      	bne.n	8006344 <HAL_I2C_Master_Receive_DMA+0x164>
 80062d2:	e013      	b.n	80062fc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e050      	b.n	800639e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	8979      	ldrh	r1, [r7, #10]
 8006304:	4b2c      	ldr	r3, [pc, #176]	@ (80063b8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f001 fbcc 	bl	8007aa8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800632a:	2110      	movs	r1, #16
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 fbed 	bl	8007b0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e029      	b.n	8006398 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006358:	f043 0210 	orr.w	r2, r3, #16
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e018      	b.n	800639e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a13      	ldr	r2, [pc, #76]	@ (80063bc <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006376:	b2da      	uxtb	r2, r3
 8006378:	8979      	ldrh	r1, [r7, #10]
 800637a:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 fb90 	bl	8007aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006390:	2102      	movs	r1, #2
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f001 fbba 	bl	8007b0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e000      	b.n	800639e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	ffff0000 	.word	0xffff0000
 80063ac:	08006993 	.word	0x08006993
 80063b0:	080079a9 	.word	0x080079a9
 80063b4:	08007a3f 	.word	0x08007a3f
 80063b8:	80002400 	.word	0x80002400
 80063bc:	08006553 	.word	0x08006553

080063c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
  }
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00f      	beq.n	8006436 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	f043 0201 	orr.w	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006434:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800645e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00f      	beq.n	800648a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	f043 0202 	orr.w	r2, r3, #2
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006488:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 030b 	and.w	r3, r3, #11
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f8fd 	bl	800769c <I2C_ITError>
  }
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
 80064de:	4613      	mov	r3, r2
 80064e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af02      	add	r7, sp, #8
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <I2C_Master_ISR_IT+0x1e>
 800656c:	2302      	movs	r3, #2
 800656e:	e113      	b.n	8006798 <I2C_Master_ISR_IT+0x246>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00d      	beq.n	80065a8 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2210      	movs	r2, #16
 8006592:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f001 f992 	bl	80078ca <I2C_Flush_TXDR>
 80065a6:	e0e4      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d022      	beq.n	80065f8 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01d      	beq.n	80065f8 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0304 	bic.w	r3, r3, #4
 80065c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065f6:	e0bc      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d128      	bne.n	8006654 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006608:	2b00      	cmp	r3, #0
 800660a:	d023      	beq.n	8006654 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01e      	beq.n	8006654 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80a8 	beq.w	8006772 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006652:	e08e      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d05c      	beq.n	8006718 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006664:	2b00      	cmp	r3, #0
 8006666:	d057      	beq.n	8006718 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d040      	beq.n	80066f4 <I2C_Master_ISR_IT+0x1a2>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d13c      	bne.n	80066f4 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006686:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2bff      	cmp	r3, #255	@ 0xff
 8006690:	d90e      	bls.n	80066b0 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	@ 0xff
 8006696:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	8a79      	ldrh	r1, [r7, #18]
 80066a0:	2300      	movs	r3, #0
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f001 f9fd 	bl	8007aa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ae:	e032      	b.n	8006716 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066c2:	d00b      	beq.n	80066dc <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80066ce:	8a79      	ldrh	r1, [r7, #18]
 80066d0:	2000      	movs	r0, #0
 80066d2:	9000      	str	r0, [sp, #0]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f001 f9e7 	bl	8007aa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066da:	e01c      	b.n	8006716 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	8a79      	ldrh	r1, [r7, #18]
 80066e4:	2300      	movs	r3, #0
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 f9db 	bl	8007aa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f2:	e010      	b.n	8006716 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006702:	d003      	beq.n	800670c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fcb0 	bl	800706a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800670a:	e032      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800670c:	2140      	movs	r1, #64	@ 0x40
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 ffc4 	bl	800769c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006714:	e02d      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
 8006716:	e02c      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d027      	beq.n	8006772 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006728:	2b00      	cmp	r3, #0
 800672a:	d022      	beq.n	8006772 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d119      	bne.n	800676a <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006744:	d015      	beq.n	8006772 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800674e:	d108      	bne.n	8006762 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	e007      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fc81 	bl	800706a <I2C_ITMasterSeqCplt>
 8006768:	e003      	b.n	8006772 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800676a:	2140      	movs	r1, #64	@ 0x40
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 ff95 	bl	800769c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006786:	6979      	ldr	r1, [r7, #20]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fd07 	bl	800719c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <I2C_Slave_ISR_IT+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0e2      	b.n	800698a <I2C_Slave_ISR_IT+0x1ea>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80067e0:	6939      	ldr	r1, [r7, #16]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fda2 	bl	800732c <I2C_ITSlaveCplt>
 80067e8:	e0ca      	b.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d04b      	beq.n	800688c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d046      	beq.n	800688c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d128      	bne.n	800685a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b28      	cmp	r3, #40	@ 0x28
 8006812:	d108      	bne.n	8006826 <I2C_Slave_ISR_IT+0x86>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800681a:	d104      	bne.n	8006826 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800681c:	6939      	ldr	r1, [r7, #16]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fee8 	bl	80075f4 <I2C_ITListenCplt>
 8006824:	e031      	b.n	800688a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b29      	cmp	r3, #41	@ 0x29
 8006830:	d10e      	bne.n	8006850 <I2C_Slave_ISR_IT+0xb0>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006838:	d00a      	beq.n	8006850 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2210      	movs	r2, #16
 8006840:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f841 	bl	80078ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fc4b 	bl	80070e4 <I2C_ITSlaveSeqCplt>
 800684e:	e01c      	b.n	800688a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2210      	movs	r2, #16
 8006856:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006858:	e08f      	b.n	800697a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2210      	movs	r2, #16
 8006860:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006866:	f043 0204 	orr.w	r2, r3, #4
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <I2C_Slave_ISR_IT+0xdc>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800687a:	d17e      	bne.n	800697a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	4619      	mov	r1, r3
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 ff0a 	bl	800769c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006888:	e077      	b.n	800697a <I2C_Slave_ISR_IT+0x1da>
 800688a:	e076      	b.n	800697a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02f      	beq.n	80068f6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02a      	beq.n	80068f6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d14b      	bne.n	800697e <I2C_Slave_ISR_IT+0x1de>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068ec:	d047      	beq.n	800697e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fbf8 	bl	80070e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80068f4:	e043      	b.n	800697e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800690a:	6939      	ldr	r1, [r7, #16]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fb28 	bl	8006f62 <I2C_ITAddrCplt>
 8006912:	e035      	b.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d030      	beq.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02b      	beq.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006962:	e00d      	b.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800696a:	d002      	beq.n	8006972 <I2C_Slave_ISR_IT+0x1d2>
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fbb6 	bl	80070e4 <I2C_ITSlaveSeqCplt>
 8006978:	e002      	b.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800697a:	bf00      	nop
 800697c:	e000      	b.n	8006980 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800697e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b088      	sub	sp, #32
 8006996:	af02      	add	r7, sp, #8
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <I2C_Master_ISR_DMA+0x1a>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0d9      	b.n	8006b60 <I2C_Master_ISR_DMA+0x1ce>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d016      	beq.n	80069ec <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2210      	movs	r2, #16
 80069ce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d4:	f043 0204 	orr.w	r2, r3, #4
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069dc:	2120      	movs	r1, #32
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 f894 	bl	8007b0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 ff70 	bl	80078ca <I2C_Flush_TXDR>
 80069ea:	e0b4      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d071      	beq.n	8006ada <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d06c      	beq.n	8006ada <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a0e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d04e      	beq.n	8006ab8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a26:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2bff      	cmp	r3, #255	@ 0xff
 8006a30:	d906      	bls.n	8006a40 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	22ff      	movs	r2, #255	@ 0xff
 8006a36:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e010      	b.n	8006a62 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a52:	d003      	beq.n	8006a5c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e002      	b.n	8006a62 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006a5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a60:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	8a79      	ldrh	r1, [r7, #18]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f001 f819 	bl	8007aa8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b22      	cmp	r3, #34	@ 0x22
 8006a92:	d108      	bne.n	8006aa6 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006aa4:	e057      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ab4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006ab6:	e04e      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ac6:	d003      	beq.n	8006ad0 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 face 	bl	800706a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006ace:	e042      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ad0:	2140      	movs	r1, #64	@ 0x40
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fde2 	bl	800769c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006ad8:	e03d      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d028      	beq.n	8006b36 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d023      	beq.n	8006b36 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d119      	bne.n	8006b2c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b06:	d025      	beq.n	8006b54 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b10:	d108      	bne.n	8006b24 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b20:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006b22:	e017      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 faa0 	bl	800706a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006b2a:	e013      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b2c:	2140      	movs	r1, #64	@ 0x40
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fdb4 	bl	800769c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b34:	e00e      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fb25 	bl	800719c <I2C_ITMasterCplt>
 8006b52:	e000      	b.n	8006b56 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006b54:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006b74:	4b8d      	ldr	r3, [pc, #564]	@ (8006dac <I2C_Mem_ISR_DMA+0x244>)
 8006b76:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <I2C_Mem_ISR_DMA+0x1e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e10e      	b.n	8006da4 <I2C_Mem_ISR_DMA+0x23c>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d011      	beq.n	8006bc6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f043 0204 	orr.w	r2, r3, #4
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006bb6:	2120      	movs	r1, #32
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 ffa7 	bl	8007b0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fe83 	bl	80078ca <I2C_Flush_TXDR>
 8006bc4:	e0e9      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006be2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	651a      	str	r2, [r3, #80]	@ 0x50
 8006bec:	e0d5      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d05f      	beq.n	8006cb8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05a      	beq.n	8006cb8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c02:	2101      	movs	r1, #1
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 f805 	bl	8007c14 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c0a:	2110      	movs	r1, #16
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 ff7d 	bl	8007b0c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d048      	beq.n	8006cae <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2bff      	cmp	r3, #255	@ 0xff
 8006c24:	d910      	bls.n	8006c48 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	22ff      	movs	r2, #255	@ 0xff
 8006c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c30:	b299      	uxth	r1, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 ff31 	bl	8007aa8 <I2C_TransferConfig>
 8006c46:	e011      	b.n	8006c6c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c56:	b299      	uxth	r1, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 ff1e 	bl	8007aa8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b22      	cmp	r3, #34	@ 0x22
 8006c88:	d108      	bne.n	8006c9c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c9a:	e07e      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006caa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006cac:	e075      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006cae:	2140      	movs	r1, #64	@ 0x40
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fcf3 	bl	800769c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006cb6:	e070      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d05d      	beq.n	8006d7e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d058      	beq.n	8006d7e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 ffa0 	bl	8007c14 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006cd4:	2110      	movs	r1, #16
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 ff18 	bl	8007b0c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b22      	cmp	r3, #34	@ 0x22
 8006ce6:	d101      	bne.n	8006cec <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006ce8:	4b31      	ldr	r3, [pc, #196]	@ (8006db0 <I2C_Mem_ISR_DMA+0x248>)
 8006cea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2bff      	cmp	r3, #255	@ 0xff
 8006cf4:	d910      	bls.n	8006d18 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	22ff      	movs	r2, #255	@ 0xff
 8006cfa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d00:	b299      	uxth	r1, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fec9 	bl	8007aa8 <I2C_TransferConfig>
 8006d16:	e011      	b.n	8006d3c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d26:	b299      	uxth	r1, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 feb6 	bl	8007aa8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b22      	cmp	r3, #34	@ 0x22
 8006d58:	d108      	bne.n	8006d6c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d68:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d6a:	e016      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d7a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d7c:	e00d      	b.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fa01 	bl	800719c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	80002000 	.word	0x80002000
 8006db0:	80002400 	.word	0x80002400

08006db4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <I2C_Slave_ISR_DMA+0x24>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e0c0      	b.n	8006f5a <I2C_Slave_ISR_DMA+0x1a6>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fa98 	bl	800732c <I2C_ITSlaveCplt>
 8006dfc:	e0a8      	b.n	8006f50 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8095 	beq.w	8006f34 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 808f 	beq.w	8006f34 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d07d      	beq.n	8006f26 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00c      	beq.n	8006e6e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d128      	bne.n	8006ec6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b28      	cmp	r3, #40	@ 0x28
 8006e7e:	d108      	bne.n	8006e92 <I2C_Slave_ISR_DMA+0xde>
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e86:	d104      	bne.n	8006e92 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fbb2 	bl	80075f4 <I2C_ITListenCplt>
 8006e90:	e048      	b.n	8006f24 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b29      	cmp	r3, #41	@ 0x29
 8006e9c:	d10e      	bne.n	8006ebc <I2C_Slave_ISR_DMA+0x108>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ea4:	d00a      	beq.n	8006ebc <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fd0b 	bl	80078ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f915 	bl	80070e4 <I2C_ITSlaveSeqCplt>
 8006eba:	e033      	b.n	8006f24 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2210      	movs	r2, #16
 8006ec2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006ec4:	e034      	b.n	8006f30 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	f043 0204 	orr.w	r2, r3, #4
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <I2C_Slave_ISR_DMA+0x13c>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eee:	d11f      	bne.n	8006f30 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b21      	cmp	r3, #33	@ 0x21
 8006ef4:	d002      	beq.n	8006efc <I2C_Slave_ISR_DMA+0x148>
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b29      	cmp	r3, #41	@ 0x29
 8006efa:	d103      	bne.n	8006f04 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2221      	movs	r2, #33	@ 0x21
 8006f00:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f02:	e008      	b.n	8006f16 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b22      	cmp	r3, #34	@ 0x22
 8006f08:	d002      	beq.n	8006f10 <I2C_Slave_ISR_DMA+0x15c>
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f0e:	d102      	bne.n	8006f16 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2222      	movs	r2, #34	@ 0x22
 8006f14:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fbbd 	bl	800769c <I2C_ITError>
      if (treatdmanack == 1U)
 8006f22:	e005      	b.n	8006f30 <I2C_Slave_ISR_DMA+0x17c>
 8006f24:	e004      	b.n	8006f30 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f2e:	e00f      	b.n	8006f50 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006f30:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f32:	e00d      	b.n	8006f50 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f809 	bl	8006f62 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f78:	2b28      	cmp	r3, #40	@ 0x28
 8006f7a:	d16a      	bne.n	8007052 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	0c1b      	lsrs	r3, r3, #16
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	0c1b      	lsrs	r3, r3, #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f9a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006fb6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d138      	bne.n	8007032 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006fc0:	897b      	ldrh	r3, [r7, #10]
 8006fc2:	09db      	lsrs	r3, r3, #7
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	89bb      	ldrh	r3, [r7, #12]
 8006fc8:	4053      	eors	r3, r2
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f003 0306 	and.w	r3, r3, #6
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11c      	bne.n	800700e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006fd4:	897b      	ldrh	r3, [r7, #10]
 8006fd6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d13b      	bne.n	8007062 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007000:	89ba      	ldrh	r2, [r7, #12]
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fa63 	bl	80064d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800700c:	e029      	b.n	8007062 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007012:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fdfc 	bl	8007c14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007024:	89ba      	ldrh	r2, [r7, #12]
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fa51 	bl	80064d2 <HAL_I2C_AddrCallback>
}
 8007030:	e017      	b.n	8007062 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007032:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fdec 	bl	8007c14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007044:	89ba      	ldrh	r2, [r7, #12]
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fa41 	bl	80064d2 <HAL_I2C_AddrCallback>
}
 8007050:	e007      	b.n	8007062 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2208      	movs	r2, #8
 8007058:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b21      	cmp	r3, #33	@ 0x21
 8007084:	d115      	bne.n	80070b2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2211      	movs	r2, #17
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fdb9 	bl	8007c14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7f9 fab6 	bl	800061c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070b0:	e014      	b.n	80070dc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2212      	movs	r2, #18
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070c6:	2102      	movs	r1, #2
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fda3 	bl	8007c14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7f9 faae 	bl	8000638 <HAL_I2C_MasterRxCpltCallback>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e00c      	b.n	8007132 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007130:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b29      	cmp	r3, #41	@ 0x29
 800713c:	d112      	bne.n	8007164 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2228      	movs	r2, #40	@ 0x28
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2221      	movs	r2, #33	@ 0x21
 800714a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fd60 	bl	8007c14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff f9a4 	bl	80064aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007162:	e017      	b.n	8007194 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b2a      	cmp	r3, #42	@ 0x2a
 800716e:	d111      	bne.n	8007194 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2228      	movs	r2, #40	@ 0x28
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2222      	movs	r2, #34	@ 0x22
 800717c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800717e:	2102      	movs	r1, #2
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fd47 	bl	8007c14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff f995 	bl	80064be <HAL_I2C_SlaveRxCpltCallback>
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2220      	movs	r2, #32
 80071b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b21      	cmp	r3, #33	@ 0x21
 80071bc:	d107      	bne.n	80071ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071be:	2101      	movs	r1, #1
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fd27 	bl	8007c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2211      	movs	r2, #17
 80071ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80071cc:	e00c      	b.n	80071e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b22      	cmp	r3, #34	@ 0x22
 80071d8:	d106      	bne.n	80071e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071da:	2102      	movs	r1, #2
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fd19 	bl	8007c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2212      	movs	r2, #18
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6859      	ldr	r1, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007324 <I2C_ITMasterCplt+0x188>)
 80071f4:	400b      	ands	r3, r1
 80071f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a49      	ldr	r2, [pc, #292]	@ (8007328 <I2C_ITMasterCplt+0x18c>)
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2210      	movs	r2, #16
 8007214:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	f043 0204 	orr.w	r2, r3, #4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b60      	cmp	r3, #96	@ 0x60
 800722c:	d10a      	bne.n	8007244 <I2C_ITMasterCplt+0xa8>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	b2db      	uxtb	r3, r3
 8007240:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007242:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fb40 	bl	80078ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b60      	cmp	r3, #96	@ 0x60
 800725a:	d002      	beq.n	8007262 <I2C_ITMasterCplt+0xc6>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa17 	bl	800769c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800726e:	e054      	b.n	800731a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b21      	cmp	r3, #33	@ 0x21
 800727a:	d124      	bne.n	80072c6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b40      	cmp	r3, #64	@ 0x40
 8007294:	d10b      	bne.n	80072ae <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff f92b 	bl	8006502 <HAL_I2C_MemTxCpltCallback>
}
 80072ac:	e035      	b.n	800731a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7f9 f9ac 	bl	800061c <HAL_I2C_MasterTxCpltCallback>
}
 80072c4:	e029      	b.n	800731a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b22      	cmp	r3, #34	@ 0x22
 80072d0:	d123      	bne.n	800731a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d10b      	bne.n	8007304 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff f90a 	bl	8006516 <HAL_I2C_MemRxCpltCallback>
}
 8007302:	e00a      	b.n	800731a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7f9 f98f 	bl	8000638 <HAL_I2C_MasterRxCpltCallback>
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	fe00e800 	.word	0xfe00e800
 8007328:	ffff0000 	.word	0xffff0000

0800732c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800734e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2220      	movs	r2, #32
 8007356:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	2b21      	cmp	r3, #33	@ 0x21
 800735c:	d002      	beq.n	8007364 <I2C_ITSlaveCplt+0x38>
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	2b29      	cmp	r3, #41	@ 0x29
 8007362:	d108      	bne.n	8007376 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007364:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc53 	bl	8007c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2221      	movs	r2, #33	@ 0x21
 8007372:	631a      	str	r2, [r3, #48]	@ 0x30
 8007374:	e019      	b.n	80073aa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	2b22      	cmp	r3, #34	@ 0x22
 800737a:	d002      	beq.n	8007382 <I2C_ITSlaveCplt+0x56>
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007380:	d108      	bne.n	8007394 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007382:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc44 	bl	8007c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2222      	movs	r2, #34	@ 0x22
 8007390:	631a      	str	r2, [r3, #48]	@ 0x30
 8007392:	e00a      	b.n	80073aa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	2b28      	cmp	r3, #40	@ 0x28
 8007398:	d107      	bne.n	80073aa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800739a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc38 	bl	8007c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6859      	ldr	r1, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b89      	ldr	r3, [pc, #548]	@ (80075ec <I2C_ITSlaveCplt+0x2c0>)
 80073c6:	400b      	ands	r3, r1
 80073c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa7d 	bl	80078ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d013      	beq.n	8007402 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01f      	beq.n	8007432 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007400:	e017      	b.n	8007432 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800741a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d006      	beq.n	8007432 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d020      	beq.n	800747e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0304 	bic.w	r3, r3, #4
 8007442:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748c:	f043 0204 	orr.w	r2, r3, #4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b00      	cmp	r3, #0
 800749c:	d049      	beq.n	8007532 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d044      	beq.n	8007532 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d128      	bne.n	8007504 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b28      	cmp	r3, #40	@ 0x28
 80074bc:	d108      	bne.n	80074d0 <I2C_ITSlaveCplt+0x1a4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074c4:	d104      	bne.n	80074d0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074c6:	6979      	ldr	r1, [r7, #20]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f893 	bl	80075f4 <I2C_ITListenCplt>
 80074ce:	e030      	b.n	8007532 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b29      	cmp	r3, #41	@ 0x29
 80074da:	d10e      	bne.n	80074fa <I2C_ITSlaveCplt+0x1ce>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074e2:	d00a      	beq.n	80074fa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2210      	movs	r2, #16
 80074ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f9ec 	bl	80078ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fdf6 	bl	80070e4 <I2C_ITSlaveSeqCplt>
 80074f8:	e01b      	b.n	8007532 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2210      	movs	r2, #16
 8007500:	61da      	str	r2, [r3, #28]
 8007502:	e016      	b.n	8007532 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2210      	movs	r2, #16
 800750a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007510:	f043 0204 	orr.w	r2, r3, #4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <I2C_ITSlaveCplt+0x1fa>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007524:	d105      	bne.n	8007532 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f8b5 	bl	800769c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007544:	2b00      	cmp	r3, #0
 8007546:	d010      	beq.n	800756a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f8a4 	bl	800769c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b28      	cmp	r3, #40	@ 0x28
 800755e:	d141      	bne.n	80075e4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f846 	bl	80075f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007568:	e03c      	b.n	80075e4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007572:	d014      	beq.n	800759e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fdb5 	bl	80070e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1c      	ldr	r2, [pc, #112]	@ (80075f0 <I2C_ITSlaveCplt+0x2c4>)
 800757e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fe ffa9 	bl	80064ee <HAL_I2C_ListenCpltCallback>
}
 800759c:	e022      	b.n	80075e4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b22      	cmp	r3, #34	@ 0x22
 80075a8:	d10e      	bne.n	80075c8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fe ff7c 	bl	80064be <HAL_I2C_SlaveRxCpltCallback>
}
 80075c6:	e00d      	b.n	80075e4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fe ff63 	bl	80064aa <HAL_I2C_SlaveTxCpltCallback>
}
 80075e4:	bf00      	nop
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	fe00e800 	.word	0xfe00e800
 80075f0:	ffff0000 	.word	0xffff0000

080075f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a25      	ldr	r2, [pc, #148]	@ (8007698 <I2C_ITListenCplt+0xa4>)
 8007602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d022      	beq.n	8007670 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d012      	beq.n	8007670 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007668:	f043 0204 	orr.w	r2, r3, #4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007670:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 facd 	bl	8007c14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2210      	movs	r2, #16
 8007680:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fe ff2f 	bl	80064ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	ffff0000 	.word	0xffff0000

0800769c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a6d      	ldr	r2, [pc, #436]	@ (8007870 <I2C_ITError+0x1d4>)
 80076ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b28      	cmp	r3, #40	@ 0x28
 80076d2:	d005      	beq.n	80076e0 <I2C_ITError+0x44>
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b29      	cmp	r3, #41	@ 0x29
 80076d8:	d002      	beq.n	80076e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80076de:	d10b      	bne.n	80076f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076e0:	2103      	movs	r1, #3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa96 	bl	8007c14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2228      	movs	r2, #40	@ 0x28
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a60      	ldr	r2, [pc, #384]	@ (8007874 <I2C_ITError+0x1d8>)
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80076f6:	e030      	b.n	800775a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa89 	bl	8007c14 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8e1 	bl	80078ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b60      	cmp	r3, #96	@ 0x60
 8007712:	d01f      	beq.n	8007754 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d114      	bne.n	8007754 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d109      	bne.n	800774c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2210      	movs	r2, #16
 800773e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007744:	f043 0204 	orr.w	r2, r3, #4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2220      	movs	r2, #32
 8007752:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d039      	beq.n	80077dc <I2C_ITError+0x140>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b11      	cmp	r3, #17
 800776c:	d002      	beq.n	8007774 <I2C_ITError+0xd8>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b21      	cmp	r3, #33	@ 0x21
 8007772:	d133      	bne.n	80077dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800777e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007782:	d107      	bne.n	8007794 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007792:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fa68 	bl	8004c6e <HAL_DMA_GetState>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d017      	beq.n	80077d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	4a33      	ldr	r2, [pc, #204]	@ (8007878 <I2C_ITError+0x1dc>)
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd f942 	bl	8004a42 <HAL_DMA_Abort_IT>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d04d      	beq.n	8007860 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077ce:	4610      	mov	r0, r2
 80077d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077d2:	e045      	b.n	8007860 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f851 	bl	800787c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077da:	e041      	b.n	8007860 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d039      	beq.n	8007858 <I2C_ITError+0x1bc>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b12      	cmp	r3, #18
 80077e8:	d002      	beq.n	80077f0 <I2C_ITError+0x154>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b22      	cmp	r3, #34	@ 0x22
 80077ee:	d133      	bne.n	8007858 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077fe:	d107      	bne.n	8007810 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800780e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	4618      	mov	r0, r3
 8007816:	f7fd fa2a 	bl	8004c6e <HAL_DMA_GetState>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d017      	beq.n	8007850 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007824:	4a14      	ldr	r2, [pc, #80]	@ (8007878 <I2C_ITError+0x1dc>)
 8007826:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd f904 	bl	8004a42 <HAL_DMA_Abort_IT>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800784a:	4610      	mov	r0, r2
 800784c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800784e:	e009      	b.n	8007864 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f813 	bl	800787c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007856:	e005      	b.n	8007864 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f80f 	bl	800787c <I2C_TreatErrorCallback>
  }
}
 800785e:	e002      	b.n	8007866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007864:	bf00      	nop
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	ffff0000 	.word	0xffff0000
 8007874:	080067a1 	.word	0x080067a1
 8007878:	08007a6d 	.word	0x08007a6d

0800787c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b60      	cmp	r3, #96	@ 0x60
 800788e:	d10e      	bne.n	80078ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe fe49 	bl	800653e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078ac:	e009      	b.n	80078c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fe fe34 	bl	800652a <HAL_I2C_ErrorCallback>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d103      	bne.n	80078e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2200      	movs	r2, #0
 80078e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d007      	beq.n	8007906 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	619a      	str	r2, [r3, #24]
  }
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800792e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800793a:	2120      	movs	r1, #32
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f8e5 	bl	8007b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007942:	e02d      	b.n	80079a0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800794c:	441a      	add	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007956:	b29b      	uxth	r3, r3
 8007958:	2bff      	cmp	r3, #255	@ 0xff
 800795a:	d903      	bls.n	8007964 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	22ff      	movs	r2, #255	@ 0xff
 8007960:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007962:	e004      	b.n	800796e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	4619      	mov	r1, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3328      	adds	r3, #40	@ 0x28
 800797e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007984:	f7fc ffe2 	bl	800494c <HAL_DMA_Start_IT>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800798e:	2110      	movs	r1, #16
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff fe83 	bl	800769c <I2C_ITError>
}
 8007996:	e003      	b.n	80079a0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007998:	2140      	movs	r1, #64	@ 0x40
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f8b6 	bl	8007b0c <I2C_Enable_IRQ>
}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079c4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80079d0:	2120      	movs	r1, #32
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f89a 	bl	8007b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80079d8:	e02d      	b.n	8007a36 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2bff      	cmp	r3, #255	@ 0xff
 80079f0:	d903      	bls.n	80079fa <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	22ff      	movs	r2, #255	@ 0xff
 80079f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80079f8:	e004      	b.n	8007a04 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3324      	adds	r3, #36	@ 0x24
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a1a:	f7fc ff97 	bl	800494c <HAL_DMA_Start_IT>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a24:	2110      	movs	r1, #16
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff fe38 	bl	800769c <I2C_ITError>
}
 8007a2c:	e003      	b.n	8007a36 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007a2e:	2140      	movs	r1, #64	@ 0x40
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f86b 	bl	8007b0c <I2C_Enable_IRQ>
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f7ff fe1c 	bl	800769c <I2C_ITError>
}
 8007a64:	bf00      	nop
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	2200      	movs	r2, #0
 8007a88:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a96:	2200      	movs	r2, #0
 8007a98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7ff feee 	bl	800787c <I2C_TreatErrorCallback>
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	817b      	strh	r3, [r7, #10]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ac0:	7a7b      	ldrb	r3, [r7, #9]
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ac8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ad6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	0d5b      	lsrs	r3, r3, #21
 8007ae2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <I2C_TransferConfig+0x60>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	43db      	mvns	r3, r3
 8007aec:	ea02 0103 	and.w	r1, r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	03ff63ff 	.word	0x03ff63ff

08007b0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b20:	4a39      	ldr	r2, [pc, #228]	@ (8007c08 <I2C_Enable_IRQ+0xfc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d032      	beq.n	8007b8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007b2a:	4a38      	ldr	r2, [pc, #224]	@ (8007c0c <I2C_Enable_IRQ+0x100>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d02d      	beq.n	8007b8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007b34:	4a36      	ldr	r2, [pc, #216]	@ (8007c10 <I2C_Enable_IRQ+0x104>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d028      	beq.n	8007b8c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da03      	bge.n	8007b4a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b5c:	887b      	ldrh	r3, [r7, #2]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b6e:	887b      	ldrh	r3, [r7, #2]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d103      	bne.n	8007b7c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b7c:	887b      	ldrh	r3, [r7, #2]
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d133      	bne.n	8007bea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f043 0320 	orr.w	r3, r3, #32
 8007b88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b8a:	e02e      	b.n	8007bea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da03      	bge.n	8007b9c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b9c:	887b      	ldrh	r3, [r7, #2]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007bac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007bae:	887b      	ldrh	r3, [r7, #2]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007bbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007bc0:	887b      	ldrh	r3, [r7, #2]
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d103      	bne.n	8007bce <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007bcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007bce:	887b      	ldrh	r3, [r7, #2]
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d103      	bne.n	8007bdc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	2b40      	cmp	r3, #64	@ 0x40
 8007be0:	d103      	bne.n	8007bea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	08006993 	.word	0x08006993
 8007c0c:	08006db5 	.word	0x08006db5
 8007c10:	08006b69 	.word	0x08006b69

08007c14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c24:	887b      	ldrh	r3, [r7, #2]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00f      	beq.n	8007c4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007c34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c42:	2b28      	cmp	r3, #40	@ 0x28
 8007c44:	d003      	beq.n	8007c4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c4e:	887b      	ldrh	r3, [r7, #2]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00f      	beq.n	8007c78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007c5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c6c:	2b28      	cmp	r3, #40	@ 0x28
 8007c6e:	d003      	beq.n	8007c78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da03      	bge.n	8007c88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007c86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c88:	887b      	ldrh	r3, [r7, #2]
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d103      	bne.n	8007c96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007c94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c96:	887b      	ldrh	r3, [r7, #2]
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d103      	bne.n	8007ca4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f043 0320 	orr.w	r3, r3, #32
 8007ca2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	2b40      	cmp	r3, #64	@ 0x40
 8007ca8:	d103      	bne.n	8007cb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	43da      	mvns	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	400a      	ands	r2, r1
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d138      	bne.n	8007d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e032      	b.n	8007d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2224      	movs	r2, #36	@ 0x24
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0201 	bic.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e000      	b.n	8007d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d139      	bne.n	8007df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e033      	b.n	8007df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2224      	movs	r2, #36	@ 0x24
 8007d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e000      	b.n	8007df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e08:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e0e:	f043 0301 	orr.w	r3, r3, #1
 8007e12:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e14:	4b08      	ldr	r3, [pc, #32]	@ (8007e38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007e20:	4b06      	ldr	r3, [pc, #24]	@ (8007e3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	4905      	ldr	r1, [pc, #20]	@ (8007e3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	604b      	str	r3, [r1, #4]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	40010000 	.word	0x40010000

08007e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d141      	bne.n	8007ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5a:	d131      	bne.n	8007ec0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e5c:	4b47      	ldr	r3, [pc, #284]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e62:	4a46      	ldr	r2, [pc, #280]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e6c:	4b43      	ldr	r3, [pc, #268]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e74:	4a41      	ldr	r2, [pc, #260]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e7c:	4b40      	ldr	r3, [pc, #256]	@ (8007f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2232      	movs	r2, #50	@ 0x32
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	4a3f      	ldr	r2, [pc, #252]	@ (8007f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	0c9b      	lsrs	r3, r3, #18
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e92:	e002      	b.n	8007e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e9a:	4b38      	ldr	r3, [pc, #224]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea6:	d102      	bne.n	8007eae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f2      	bne.n	8007e94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007eae:	4b33      	ldr	r3, [pc, #204]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eba:	d158      	bne.n	8007f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e057      	b.n	8007f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007ed0:	e04d      	b.n	8007f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed8:	d141      	bne.n	8007f5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007eda:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee6:	d131      	bne.n	8007f4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ee8:	4b24      	ldr	r3, [pc, #144]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eee:	4a23      	ldr	r2, [pc, #140]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ef8:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f00:	4a1e      	ldr	r2, [pc, #120]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f08:	4b1d      	ldr	r3, [pc, #116]	@ (8007f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2232      	movs	r2, #50	@ 0x32
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	4a1c      	ldr	r2, [pc, #112]	@ (8007f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	0c9b      	lsrs	r3, r3, #18
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f1e:	e002      	b.n	8007f26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f26:	4b15      	ldr	r3, [pc, #84]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f32:	d102      	bne.n	8007f3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f2      	bne.n	8007f20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f3a:	4b10      	ldr	r3, [pc, #64]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f46:	d112      	bne.n	8007f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e011      	b.n	8007f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f52:	4a0a      	ldr	r2, [pc, #40]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007f5c:	e007      	b.n	8007f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f5e:	4b07      	ldr	r3, [pc, #28]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f66:	4a05      	ldr	r2, [pc, #20]	@ (8007f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	40007000 	.word	0x40007000
 8007f80:	20000000 	.word	0x20000000
 8007f84:	431bde83 	.word	0x431bde83

08007f88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	4a04      	ldr	r2, [pc, #16]	@ (8007fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f96:	6093      	str	r3, [r2, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	40007000 	.word	0x40007000

08007fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e2fe      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d075      	beq.n	80080b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fc6:	4b97      	ldr	r3, [pc, #604]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 030c 	and.w	r3, r3, #12
 8007fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fd0:	4b94      	ldr	r3, [pc, #592]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b0c      	cmp	r3, #12
 8007fde:	d102      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x3e>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d002      	beq.n	8007fec <HAL_RCC_OscConfig+0x44>
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d10b      	bne.n	8008004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fec:	4b8d      	ldr	r3, [pc, #564]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d05b      	beq.n	80080b0 <HAL_RCC_OscConfig+0x108>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d157      	bne.n	80080b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e2d9      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800800c:	d106      	bne.n	800801c <HAL_RCC_OscConfig+0x74>
 800800e:	4b85      	ldr	r3, [pc, #532]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a84      	ldr	r2, [pc, #528]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	e01d      	b.n	8008058 <HAL_RCC_OscConfig+0xb0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008024:	d10c      	bne.n	8008040 <HAL_RCC_OscConfig+0x98>
 8008026:	4b7f      	ldr	r3, [pc, #508]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a7e      	ldr	r2, [pc, #504]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800802c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	4b7c      	ldr	r3, [pc, #496]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a7b      	ldr	r2, [pc, #492]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	e00b      	b.n	8008058 <HAL_RCC_OscConfig+0xb0>
 8008040:	4b78      	ldr	r3, [pc, #480]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a77      	ldr	r2, [pc, #476]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	4b75      	ldr	r3, [pc, #468]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a74      	ldr	r2, [pc, #464]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d013      	beq.n	8008088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008060:	f7fa f9c8 	bl	80023f4 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008068:	f7fa f9c4 	bl	80023f4 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b64      	cmp	r3, #100	@ 0x64
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e29e      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800807a:	4b6a      	ldr	r3, [pc, #424]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f0      	beq.n	8008068 <HAL_RCC_OscConfig+0xc0>
 8008086:	e014      	b.n	80080b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008088:	f7fa f9b4 	bl	80023f4 <HAL_GetTick>
 800808c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800808e:	e008      	b.n	80080a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008090:	f7fa f9b0 	bl	80023f4 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b64      	cmp	r3, #100	@ 0x64
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e28a      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080a2:	4b60      	ldr	r3, [pc, #384]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f0      	bne.n	8008090 <HAL_RCC_OscConfig+0xe8>
 80080ae:	e000      	b.n	80080b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d075      	beq.n	80081aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080be:	4b59      	ldr	r3, [pc, #356]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 030c 	and.w	r3, r3, #12
 80080c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080c8:	4b56      	ldr	r3, [pc, #344]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d102      	bne.n	80080de <HAL_RCC_OscConfig+0x136>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d002      	beq.n	80080e4 <HAL_RCC_OscConfig+0x13c>
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d11f      	bne.n	8008124 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_RCC_OscConfig+0x154>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e25d      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fc:	4b49      	ldr	r3, [pc, #292]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	4946      	ldr	r1, [pc, #280]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008110:	4b45      	ldr	r3, [pc, #276]	@ (8008228 <HAL_RCC_OscConfig+0x280>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f7fa f921 	bl	800235c <HAL_InitTick>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d043      	beq.n	80081a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e249      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d023      	beq.n	8008174 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800812c:	4b3d      	ldr	r3, [pc, #244]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a3c      	ldr	r2, [pc, #240]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fa f95c 	bl	80023f4 <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008140:	f7fa f958 	bl	80023f4 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e232      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008152:	4b34      	ldr	r3, [pc, #208]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815e:	4b31      	ldr	r3, [pc, #196]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	492d      	ldr	r1, [pc, #180]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800816e:	4313      	orrs	r3, r2
 8008170:	604b      	str	r3, [r1, #4]
 8008172:	e01a      	b.n	80081aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008174:	4b2b      	ldr	r3, [pc, #172]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2a      	ldr	r2, [pc, #168]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800817a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800817e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fa f938 	bl	80023f4 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008188:	f7fa f934 	bl	80023f4 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e20e      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800819a:	4b22      	ldr	r3, [pc, #136]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0x1e0>
 80081a6:	e000      	b.n	80081aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d041      	beq.n	800823a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01c      	beq.n	80081f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081be:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80081c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081c4:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7fa f911 	bl	80023f4 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081d4:	e008      	b.n	80081e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081d6:	f7fa f90d 	bl	80023f4 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e1e7      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80081ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0ef      	beq.n	80081d6 <HAL_RCC_OscConfig+0x22e>
 80081f6:	e020      	b.n	800823a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 80081fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081fe:	4a09      	ldr	r2, [pc, #36]	@ (8008224 <HAL_RCC_OscConfig+0x27c>)
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008208:	f7fa f8f4 	bl	80023f4 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800820e:	e00d      	b.n	800822c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008210:	f7fa f8f0 	bl	80023f4 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d906      	bls.n	800822c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e1ca      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
 8008222:	bf00      	nop
 8008224:	40021000 	.word	0x40021000
 8008228:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800822c:	4b8c      	ldr	r3, [pc, #560]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800822e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ea      	bne.n	8008210 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80a6 	beq.w	8008394 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008248:	2300      	movs	r3, #0
 800824a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800824c:	4b84      	ldr	r3, [pc, #528]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <HAL_RCC_OscConfig+0x2b4>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <HAL_RCC_OscConfig+0x2b6>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008262:	4b7f      	ldr	r3, [pc, #508]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008266:	4a7e      	ldr	r2, [pc, #504]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800826c:	6593      	str	r3, [r2, #88]	@ 0x58
 800826e:	4b7c      	ldr	r3, [pc, #496]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800827a:	2301      	movs	r3, #1
 800827c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800827e:	4b79      	ldr	r3, [pc, #484]	@ (8008464 <HAL_RCC_OscConfig+0x4bc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008286:	2b00      	cmp	r3, #0
 8008288:	d118      	bne.n	80082bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800828a:	4b76      	ldr	r3, [pc, #472]	@ (8008464 <HAL_RCC_OscConfig+0x4bc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a75      	ldr	r2, [pc, #468]	@ (8008464 <HAL_RCC_OscConfig+0x4bc>)
 8008290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008296:	f7fa f8ad 	bl	80023f4 <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800829e:	f7fa f8a9 	bl	80023f4 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e183      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008464 <HAL_RCC_OscConfig+0x4bc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f0      	beq.n	800829e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d108      	bne.n	80082d6 <HAL_RCC_OscConfig+0x32e>
 80082c4:	4b66      	ldr	r3, [pc, #408]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ca:	4a65      	ldr	r2, [pc, #404]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082d4:	e024      	b.n	8008320 <HAL_RCC_OscConfig+0x378>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b05      	cmp	r3, #5
 80082dc:	d110      	bne.n	8008300 <HAL_RCC_OscConfig+0x358>
 80082de:	4b60      	ldr	r3, [pc, #384]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e4:	4a5e      	ldr	r2, [pc, #376]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082e6:	f043 0304 	orr.w	r3, r3, #4
 80082ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082ee:	4b5c      	ldr	r3, [pc, #368]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f4:	4a5a      	ldr	r2, [pc, #360]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082fe:	e00f      	b.n	8008320 <HAL_RCC_OscConfig+0x378>
 8008300:	4b57      	ldr	r3, [pc, #348]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008306:	4a56      	ldr	r2, [pc, #344]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008310:	4b53      	ldr	r3, [pc, #332]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008316:	4a52      	ldr	r2, [pc, #328]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008318:	f023 0304 	bic.w	r3, r3, #4
 800831c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d016      	beq.n	8008356 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008328:	f7fa f864 	bl	80023f4 <HAL_GetTick>
 800832c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800832e:	e00a      	b.n	8008346 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008330:	f7fa f860 	bl	80023f4 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800833e:	4293      	cmp	r3, r2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e138      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008346:	4b46      	ldr	r3, [pc, #280]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0ed      	beq.n	8008330 <HAL_RCC_OscConfig+0x388>
 8008354:	e015      	b.n	8008382 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008356:	f7fa f84d 	bl	80023f4 <HAL_GetTick>
 800835a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800835c:	e00a      	b.n	8008374 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800835e:	f7fa f849 	bl	80023f4 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800836c:	4293      	cmp	r3, r2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e121      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008374:	4b3a      	ldr	r3, [pc, #232]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ed      	bne.n	800835e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008382:	7ffb      	ldrb	r3, [r7, #31]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d105      	bne.n	8008394 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008388:	4b35      	ldr	r3, [pc, #212]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800838a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800838c:	4a34      	ldr	r2, [pc, #208]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800838e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d03c      	beq.n	800841a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01c      	beq.n	80083e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80083aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80083b0:	f043 0301 	orr.w	r3, r3, #1
 80083b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b8:	f7fa f81c 	bl	80023f4 <HAL_GetTick>
 80083bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083c0:	f7fa f818 	bl	80023f4 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e0f2      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083d2:	4b23      	ldr	r3, [pc, #140]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80083d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ef      	beq.n	80083c0 <HAL_RCC_OscConfig+0x418>
 80083e0:	e01b      	b.n	800841a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80083e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f2:	f7f9 ffff 	bl	80023f4 <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083fa:	f7f9 fffb 	bl	80023f4 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e0d5      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800840c:	4b14      	ldr	r3, [pc, #80]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800840e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1ef      	bne.n	80083fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80c9 	beq.w	80085b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008424:	4b0e      	ldr	r3, [pc, #56]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 030c 	and.w	r3, r3, #12
 800842c:	2b0c      	cmp	r3, #12
 800842e:	f000 8083 	beq.w	8008538 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d15e      	bne.n	80084f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a08      	ldr	r2, [pc, #32]	@ (8008460 <HAL_RCC_OscConfig+0x4b8>)
 8008440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008446:	f7f9 ffd5 	bl	80023f4 <HAL_GetTick>
 800844a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800844c:	e00c      	b.n	8008468 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800844e:	f7f9 ffd1 	bl	80023f4 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d905      	bls.n	8008468 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e0ab      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
 8008460:	40021000 	.word	0x40021000
 8008464:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008468:	4b55      	ldr	r3, [pc, #340]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1ec      	bne.n	800844e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008474:	4b52      	ldr	r3, [pc, #328]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	4b52      	ldr	r3, [pc, #328]	@ (80085c4 <HAL_RCC_OscConfig+0x61c>)
 800847a:	4013      	ands	r3, r2
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6a11      	ldr	r1, [r2, #32]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008484:	3a01      	subs	r2, #1
 8008486:	0112      	lsls	r2, r2, #4
 8008488:	4311      	orrs	r1, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800848e:	0212      	lsls	r2, r2, #8
 8008490:	4311      	orrs	r1, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008496:	0852      	lsrs	r2, r2, #1
 8008498:	3a01      	subs	r2, #1
 800849a:	0552      	lsls	r2, r2, #21
 800849c:	4311      	orrs	r1, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80084a2:	0852      	lsrs	r2, r2, #1
 80084a4:	3a01      	subs	r2, #1
 80084a6:	0652      	lsls	r2, r2, #25
 80084a8:	4311      	orrs	r1, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084ae:	06d2      	lsls	r2, r2, #27
 80084b0:	430a      	orrs	r2, r1
 80084b2:	4943      	ldr	r1, [pc, #268]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084b8:	4b41      	ldr	r3, [pc, #260]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a40      	ldr	r2, [pc, #256]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084c4:	4b3e      	ldr	r3, [pc, #248]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4a3d      	ldr	r2, [pc, #244]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7f9 ff90 	bl	80023f4 <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d8:	f7f9 ff8c 	bl	80023f4 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e066      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ea:	4b35      	ldr	r3, [pc, #212]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f0      	beq.n	80084d8 <HAL_RCC_OscConfig+0x530>
 80084f6:	e05e      	b.n	80085b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f8:	4b31      	ldr	r3, [pc, #196]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a30      	ldr	r2, [pc, #192]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 80084fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008504:	f7f9 ff76 	bl	80023f4 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800850a:	e008      	b.n	800851e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800850c:	f7f9 ff72 	bl	80023f4 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e04c      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800851e:	4b28      	ldr	r3, [pc, #160]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f0      	bne.n	800850c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800852a:	4b25      	ldr	r3, [pc, #148]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	4924      	ldr	r1, [pc, #144]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 8008530:	4b25      	ldr	r3, [pc, #148]	@ (80085c8 <HAL_RCC_OscConfig+0x620>)
 8008532:	4013      	ands	r3, r2
 8008534:	60cb      	str	r3, [r1, #12]
 8008536:	e03e      	b.n	80085b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e039      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008544:	4b1e      	ldr	r3, [pc, #120]	@ (80085c0 <HAL_RCC_OscConfig+0x618>)
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f003 0203 	and.w	r2, r3, #3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	429a      	cmp	r2, r3
 8008556:	d12c      	bne.n	80085b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008562:	3b01      	subs	r3, #1
 8008564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008566:	429a      	cmp	r2, r3
 8008568:	d123      	bne.n	80085b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008574:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d11b      	bne.n	80085b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008584:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008586:	429a      	cmp	r2, r3
 8008588:	d113      	bne.n	80085b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	3b01      	subs	r3, #1
 8008598:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800859a:	429a      	cmp	r2, r3
 800859c:	d109      	bne.n	80085b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	3b01      	subs	r3, #1
 80085ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d001      	beq.n	80085b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40021000 	.word	0x40021000
 80085c4:	019f800c 	.word	0x019f800c
 80085c8:	feeefffc 	.word	0xfeeefffc

080085cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e11e      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085e4:	4b91      	ldr	r3, [pc, #580]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d910      	bls.n	8008614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f2:	4b8e      	ldr	r3, [pc, #568]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 020f 	bic.w	r2, r3, #15
 80085fa:	498c      	ldr	r1, [pc, #560]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	4313      	orrs	r3, r2
 8008600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b8a      	ldr	r3, [pc, #552]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e106      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d073      	beq.n	8008708 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d129      	bne.n	800867c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008628:	4b81      	ldr	r3, [pc, #516]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e0f4      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008638:	f000 f966 	bl	8008908 <RCC_GetSysClockFreqFromPLLSource>
 800863c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	4a7c      	ldr	r2, [pc, #496]	@ (8008834 <HAL_RCC_ClockConfig+0x268>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d93f      	bls.n	80086c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008646:	4b7a      	ldr	r3, [pc, #488]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800865a:	2b00      	cmp	r3, #0
 800865c:	d033      	beq.n	80086c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008662:	2b00      	cmp	r3, #0
 8008664:	d12f      	bne.n	80086c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008666:	4b72      	ldr	r3, [pc, #456]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800866e:	4a70      	ldr	r2, [pc, #448]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008674:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008676:	2380      	movs	r3, #128	@ 0x80
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e024      	b.n	80086c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d107      	bne.n	8008694 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008684:	4b6a      	ldr	r3, [pc, #424]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d109      	bne.n	80086a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0c6      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008694:	4b66      	ldr	r3, [pc, #408]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0be      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80086a4:	f000 f8ce 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 80086a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	4a61      	ldr	r2, [pc, #388]	@ (8008834 <HAL_RCC_ClockConfig+0x268>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d909      	bls.n	80086c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086b2:	4b5f      	ldr	r3, [pc, #380]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ba:	4a5d      	ldr	r2, [pc, #372]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80086bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80086c2:	2380      	movs	r3, #128	@ 0x80
 80086c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f023 0203 	bic.w	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	4957      	ldr	r1, [pc, #348]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d8:	f7f9 fe8c 	bl	80023f4 <HAL_GetTick>
 80086dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086de:	e00a      	b.n	80086f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e0:	f7f9 fe88 	bl	80023f4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e095      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f6:	4b4e      	ldr	r3, [pc, #312]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 020c 	and.w	r2, r3, #12
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	429a      	cmp	r2, r3
 8008706:	d1eb      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d023      	beq.n	800875c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008720:	4b43      	ldr	r3, [pc, #268]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	4a42      	ldr	r2, [pc, #264]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800872a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008738:	4b3d      	ldr	r3, [pc, #244]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008740:	4a3b      	ldr	r2, [pc, #236]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008742:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008746:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008748:	4b39      	ldr	r3, [pc, #228]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	4936      	ldr	r1, [pc, #216]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
 800875a:	e008      	b.n	800876e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b80      	cmp	r3, #128	@ 0x80
 8008760:	d105      	bne.n	800876e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008762:	4b33      	ldr	r3, [pc, #204]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	4a32      	ldr	r2, [pc, #200]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 8008768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800876c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800876e:	4b2f      	ldr	r3, [pc, #188]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d21d      	bcs.n	80087b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800877c:	4b2b      	ldr	r3, [pc, #172]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f023 020f 	bic.w	r2, r3, #15
 8008784:	4929      	ldr	r1, [pc, #164]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	4313      	orrs	r3, r2
 800878a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800878c:	f7f9 fe32 	bl	80023f4 <HAL_GetTick>
 8008790:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008792:	e00a      	b.n	80087aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008794:	f7f9 fe2e 	bl	80023f4 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e03b      	b.n	8008822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087aa:	4b20      	ldr	r3, [pc, #128]	@ (800882c <HAL_RCC_ClockConfig+0x260>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d1ed      	bne.n	8008794 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4917      	ldr	r1, [pc, #92]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087e2:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	490f      	ldr	r1, [pc, #60]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087f6:	f000 f825 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <HAL_RCC_ClockConfig+0x264>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	490c      	ldr	r1, [pc, #48]	@ (8008838 <HAL_RCC_ClockConfig+0x26c>)
 8008808:	5ccb      	ldrb	r3, [r1, r3]
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	fa22 f303 	lsr.w	r3, r2, r3
 8008812:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <HAL_RCC_ClockConfig+0x270>)
 8008814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008816:	4b0a      	ldr	r3, [pc, #40]	@ (8008840 <HAL_RCC_ClockConfig+0x274>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7f9 fd9e 	bl	800235c <HAL_InitTick>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	40022000 	.word	0x40022000
 8008830:	40021000 	.word	0x40021000
 8008834:	04c4b400 	.word	0x04c4b400
 8008838:	0800a300 	.word	0x0800a300
 800883c:	20000000 	.word	0x20000000
 8008840:	20000004 	.word	0x20000004

08008844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800884a:	4b2c      	ldr	r3, [pc, #176]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 030c 	and.w	r3, r3, #12
 8008852:	2b04      	cmp	r3, #4
 8008854:	d102      	bne.n	800885c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008856:	4b2a      	ldr	r3, [pc, #168]	@ (8008900 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	e047      	b.n	80088ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800885c:	4b27      	ldr	r3, [pc, #156]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 030c 	and.w	r3, r3, #12
 8008864:	2b08      	cmp	r3, #8
 8008866:	d102      	bne.n	800886e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008868:	4b26      	ldr	r3, [pc, #152]	@ (8008904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	e03e      	b.n	80088ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800886e:	4b23      	ldr	r3, [pc, #140]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 030c 	and.w	r3, r3, #12
 8008876:	2b0c      	cmp	r3, #12
 8008878:	d136      	bne.n	80088e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800887a:	4b20      	ldr	r3, [pc, #128]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008884:	4b1d      	ldr	r3, [pc, #116]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	3301      	adds	r3, #1
 8008890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b03      	cmp	r3, #3
 8008896:	d10c      	bne.n	80088b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008898:	4a1a      	ldr	r2, [pc, #104]	@ (8008904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a0:	4a16      	ldr	r2, [pc, #88]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80088a2:	68d2      	ldr	r2, [r2, #12]
 80088a4:	0a12      	lsrs	r2, r2, #8
 80088a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	617b      	str	r3, [r7, #20]
      break;
 80088b0:	e00c      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088b2:	4a13      	ldr	r2, [pc, #76]	@ (8008900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	4a10      	ldr	r2, [pc, #64]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80088bc:	68d2      	ldr	r2, [r2, #12]
 80088be:	0a12      	lsrs	r2, r2, #8
 80088c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
 80088c8:	617b      	str	r3, [r7, #20]
      break;
 80088ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	0e5b      	lsrs	r3, r3, #25
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	3301      	adds	r3, #1
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	e001      	b.n	80088ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088ec:	693b      	ldr	r3, [r7, #16]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40021000 	.word	0x40021000
 8008900:	00f42400 	.word	0x00f42400
 8008904:	016e3600 	.word	0x016e3600

08008908 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800890e:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008918:	4b1b      	ldr	r3, [pc, #108]	@ (8008988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	091b      	lsrs	r3, r3, #4
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	3301      	adds	r3, #1
 8008924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d10c      	bne.n	8008946 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800892c:	4a17      	ldr	r2, [pc, #92]	@ (800898c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	fbb2 f3f3 	udiv	r3, r2, r3
 8008934:	4a14      	ldr	r2, [pc, #80]	@ (8008988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008936:	68d2      	ldr	r2, [r2, #12]
 8008938:	0a12      	lsrs	r2, r2, #8
 800893a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	617b      	str	r3, [r7, #20]
    break;
 8008944:	e00c      	b.n	8008960 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008946:	4a12      	ldr	r2, [pc, #72]	@ (8008990 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	fbb2 f3f3 	udiv	r3, r2, r3
 800894e:	4a0e      	ldr	r2, [pc, #56]	@ (8008988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008950:	68d2      	ldr	r2, [r2, #12]
 8008952:	0a12      	lsrs	r2, r2, #8
 8008954:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008958:	fb02 f303 	mul.w	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
    break;
 800895e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008960:	4b09      	ldr	r3, [pc, #36]	@ (8008988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	0e5b      	lsrs	r3, r3, #25
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	3301      	adds	r3, #1
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800897a:	687b      	ldr	r3, [r7, #4]
}
 800897c:	4618      	mov	r0, r3
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	40021000 	.word	0x40021000
 800898c:	016e3600 	.word	0x016e3600
 8008990:	00f42400 	.word	0x00f42400

08008994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800899c:	2300      	movs	r3, #0
 800899e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089a0:	2300      	movs	r3, #0
 80089a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8098 	beq.w	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089b2:	2300      	movs	r3, #0
 80089b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089b6:	4b43      	ldr	r3, [pc, #268]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10d      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c2:	4b40      	ldr	r3, [pc, #256]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80089ce:	4b3d      	ldr	r3, [pc, #244]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089d6:	60bb      	str	r3, [r7, #8]
 80089d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089da:	2301      	movs	r3, #1
 80089dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089de:	4b3a      	ldr	r3, [pc, #232]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a39      	ldr	r2, [pc, #228]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089ea:	f7f9 fd03 	bl	80023f4 <HAL_GetTick>
 80089ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089f0:	e009      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089f2:	f7f9 fcff 	bl	80023f4 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d902      	bls.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	74fb      	strb	r3, [r7, #19]
        break;
 8008a04:	e005      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a06:	4b30      	ldr	r3, [pc, #192]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0ef      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008a12:	7cfb      	ldrb	r3, [r7, #19]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d159      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a18:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01e      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d019      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a34:	4b23      	ldr	r3, [pc, #140]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a40:	4b20      	ldr	r3, [pc, #128]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a46:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a50:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a56:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a60:	4a18      	ldr	r2, [pc, #96]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d016      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a72:	f7f9 fcbf 	bl	80023f4 <HAL_GetTick>
 8008a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a78:	e00b      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7a:	f7f9 fcbb 	bl	80023f4 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d902      	bls.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8008a90:	e006      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0ec      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008aa0:	7cfb      	ldrb	r3, [r7, #19]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008aa6:	4b07      	ldr	r3, [pc, #28]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab4:	4903      	ldr	r1, [pc, #12]	@ (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008abc:	e008      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008abe:	7cfb      	ldrb	r3, [r7, #19]
 8008ac0:	74bb      	strb	r3, [r7, #18]
 8008ac2:	e005      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ac4:	40021000 	.word	0x40021000
 8008ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	7cfb      	ldrb	r3, [r7, #19]
 8008ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ad0:	7c7b      	ldrb	r3, [r7, #17]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d105      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad6:	4ba7      	ldr	r3, [pc, #668]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ada:	4aa6      	ldr	r2, [pc, #664]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ae0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008aee:	4ba1      	ldr	r3, [pc, #644]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af4:	f023 0203 	bic.w	r2, r3, #3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	499d      	ldr	r1, [pc, #628]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b10:	4b98      	ldr	r3, [pc, #608]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b16:	f023 020c 	bic.w	r2, r3, #12
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	4995      	ldr	r1, [pc, #596]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b32:	4b90      	ldr	r3, [pc, #576]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	498c      	ldr	r1, [pc, #560]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b54:	4b87      	ldr	r3, [pc, #540]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	4984      	ldr	r1, [pc, #528]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b76:	4b7f      	ldr	r3, [pc, #508]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	497b      	ldr	r1, [pc, #492]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b98:	4b76      	ldr	r3, [pc, #472]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	4973      	ldr	r1, [pc, #460]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bba:	4b6e      	ldr	r3, [pc, #440]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	496a      	ldr	r1, [pc, #424]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bdc:	4b65      	ldr	r3, [pc, #404]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	4962      	ldr	r1, [pc, #392]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0c:	4959      	ldr	r1, [pc, #356]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c20:	4b54      	ldr	r3, [pc, #336]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c26:	f023 0203 	bic.w	r2, r3, #3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2e:	4951      	ldr	r1, [pc, #324]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c42:	4b4c      	ldr	r3, [pc, #304]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	4948      	ldr	r1, [pc, #288]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d015      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c64:	4b43      	ldr	r3, [pc, #268]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	4940      	ldr	r1, [pc, #256]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c82:	d105      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c84:	4b3b      	ldr	r3, [pc, #236]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	4a3a      	ldr	r2, [pc, #232]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c8e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d015      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c9c:	4b35      	ldr	r3, [pc, #212]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008caa:	4932      	ldr	r1, [pc, #200]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cba:	d105      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cc6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d015      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cd4:	4b27      	ldr	r3, [pc, #156]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	4924      	ldr	r1, [pc, #144]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cf2:	d105      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d015      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d0c:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	4916      	ldr	r1, [pc, #88]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d2a:	d105      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d2c:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4a10      	ldr	r2, [pc, #64]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d019      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d52:	4908      	ldr	r1, [pc, #32]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d62:	d109      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d64:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a02      	ldr	r2, [pc, #8]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d6e:	60d3      	str	r3, [r2, #12]
 8008d70:	e002      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d72:	bf00      	nop
 8008d74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d015      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d84:	4b29      	ldr	r3, [pc, #164]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d92:	4926      	ldr	r1, [pc, #152]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da2:	d105      	bne.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008da4:	4b21      	ldr	r3, [pc, #132]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4a20      	ldr	r2, [pc, #128]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d015      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dca:	4918      	ldr	r1, [pc, #96]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dda:	d105      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ddc:	4b13      	ldr	r3, [pc, #76]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4a12      	ldr	r2, [pc, #72]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008de6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d015      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008df4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e02:	490a      	ldr	r1, [pc, #40]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e12:	d105      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e14:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008e20:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	40021000 	.word	0x40021000

08008e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e049      	b.n	8008ed6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 f870 	bl	8001f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f000 fa5c 	bl	800932c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <HAL_TIM_PWM_Start+0x24>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e03c      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d109      	bne.n	8008f1e <HAL_TIM_PWM_Start+0x3e>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	bf14      	ite	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	2300      	moveq	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	e02f      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_PWM_Start+0x58>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e022      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b0c      	cmp	r3, #12
 8008f3c:	d109      	bne.n	8008f52 <HAL_TIM_PWM_Start+0x72>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	bf14      	ite	ne
 8008f4a:	2301      	movne	r3, #1
 8008f4c:	2300      	moveq	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	e015      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d109      	bne.n	8008f6c <HAL_TIM_PWM_Start+0x8c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	bf14      	ite	ne
 8008f64:	2301      	movne	r3, #1
 8008f66:	2300      	moveq	r3, #0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	e008      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e0a6      	b.n	80090d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <HAL_TIM_PWM_Start+0xb6>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f94:	e023      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	d104      	bne.n	8008fa6 <HAL_TIM_PWM_Start+0xc6>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fa4:	e01b      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0xd6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb4:	e013      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0xe6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fc4:	e00b      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xf6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fd4:	e003      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fd7e 	bl	8009ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80090dc <HAL_TIM_PWM_Start+0x1fc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d018      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a39      	ldr	r2, [pc, #228]	@ (80090e0 <HAL_TIM_PWM_Start+0x200>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d013      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a37      	ldr	r2, [pc, #220]	@ (80090e4 <HAL_TIM_PWM_Start+0x204>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00e      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a36      	ldr	r2, [pc, #216]	@ (80090e8 <HAL_TIM_PWM_Start+0x208>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d009      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a34      	ldr	r2, [pc, #208]	@ (80090ec <HAL_TIM_PWM_Start+0x20c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a33      	ldr	r2, [pc, #204]	@ (80090f0 <HAL_TIM_PWM_Start+0x210>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d101      	bne.n	800902c <HAL_TIM_PWM_Start+0x14c>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <HAL_TIM_PWM_Start+0x14e>
 800902c:	2300      	movs	r3, #0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009040:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a25      	ldr	r2, [pc, #148]	@ (80090dc <HAL_TIM_PWM_Start+0x1fc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d022      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009054:	d01d      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a26      	ldr	r2, [pc, #152]	@ (80090f4 <HAL_TIM_PWM_Start+0x214>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d018      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a24      	ldr	r2, [pc, #144]	@ (80090f8 <HAL_TIM_PWM_Start+0x218>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d013      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a23      	ldr	r2, [pc, #140]	@ (80090fc <HAL_TIM_PWM_Start+0x21c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00e      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a19      	ldr	r2, [pc, #100]	@ (80090e0 <HAL_TIM_PWM_Start+0x200>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d009      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a18      	ldr	r2, [pc, #96]	@ (80090e4 <HAL_TIM_PWM_Start+0x204>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d004      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a18      	ldr	r2, [pc, #96]	@ (80090f0 <HAL_TIM_PWM_Start+0x210>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d115      	bne.n	80090be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	4b19      	ldr	r3, [pc, #100]	@ (8009100 <HAL_TIM_PWM_Start+0x220>)
 800909a:	4013      	ands	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b06      	cmp	r3, #6
 80090a2:	d015      	beq.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090aa:	d011      	beq.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0201 	orr.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090bc:	e008      	b.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e000      	b.n	80090d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40013400 	.word	0x40013400
 80090e4:	40014000 	.word	0x40014000
 80090e8:	40014400 	.word	0x40014400
 80090ec:	40014800 	.word	0x40014800
 80090f0:	40015000 	.word	0x40015000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	00010007 	.word	0x00010007

08009104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800911e:	2302      	movs	r3, #2
 8009120:	e0ff      	b.n	8009322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b14      	cmp	r3, #20
 800912e:	f200 80f0 	bhi.w	8009312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009132:	a201      	add	r2, pc, #4	@ (adr r2, 8009138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	0800918d 	.word	0x0800918d
 800913c:	08009313 	.word	0x08009313
 8009140:	08009313 	.word	0x08009313
 8009144:	08009313 	.word	0x08009313
 8009148:	080091cd 	.word	0x080091cd
 800914c:	08009313 	.word	0x08009313
 8009150:	08009313 	.word	0x08009313
 8009154:	08009313 	.word	0x08009313
 8009158:	0800920f 	.word	0x0800920f
 800915c:	08009313 	.word	0x08009313
 8009160:	08009313 	.word	0x08009313
 8009164:	08009313 	.word	0x08009313
 8009168:	0800924f 	.word	0x0800924f
 800916c:	08009313 	.word	0x08009313
 8009170:	08009313 	.word	0x08009313
 8009174:	08009313 	.word	0x08009313
 8009178:	08009291 	.word	0x08009291
 800917c:	08009313 	.word	0x08009313
 8009180:	08009313 	.word	0x08009313
 8009184:	08009313 	.word	0x08009313
 8009188:	080092d1 	.word	0x080092d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f97e 	bl	8009494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0208 	orr.w	r2, r2, #8
 80091a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0204 	bic.w	r2, r2, #4
 80091b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6999      	ldr	r1, [r3, #24]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	619a      	str	r2, [r3, #24]
      break;
 80091ca:	e0a5      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f9f8 	bl	80095c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6999      	ldr	r1, [r3, #24]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	021a      	lsls	r2, r3, #8
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	619a      	str	r2, [r3, #24]
      break;
 800920c:	e084      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fa6b 	bl	80096f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0208 	orr.w	r2, r2, #8
 8009228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0204 	bic.w	r2, r2, #4
 8009238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69d9      	ldr	r1, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	61da      	str	r2, [r3, #28]
      break;
 800924c:	e064      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fadd 	bl	8009814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69da      	ldr	r2, [r3, #28]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69d9      	ldr	r1, [r3, #28]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	021a      	lsls	r2, r3, #8
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	61da      	str	r2, [r3, #28]
      break;
 800928e:	e043      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fb50 	bl	800993c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0208 	orr.w	r2, r2, #8
 80092aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0204 	bic.w	r2, r2, #4
 80092ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80092ce:	e023      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fb9a 	bl	8009a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	021a      	lsls	r2, r3, #8
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009310:	e002      	b.n	8009318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]
      break;
 8009316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop

0800932c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a4c      	ldr	r2, [pc, #304]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d017      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800934a:	d013      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a49      	ldr	r2, [pc, #292]	@ (8009474 <TIM_Base_SetConfig+0x148>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00f      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a48      	ldr	r2, [pc, #288]	@ (8009478 <TIM_Base_SetConfig+0x14c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00b      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a47      	ldr	r2, [pc, #284]	@ (800947c <TIM_Base_SetConfig+0x150>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a46      	ldr	r2, [pc, #280]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a45      	ldr	r2, [pc, #276]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d108      	bne.n	8009386 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a39      	ldr	r2, [pc, #228]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d023      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009394:	d01f      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a36      	ldr	r2, [pc, #216]	@ (8009474 <TIM_Base_SetConfig+0x148>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01b      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a35      	ldr	r2, [pc, #212]	@ (8009478 <TIM_Base_SetConfig+0x14c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d017      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a34      	ldr	r2, [pc, #208]	@ (800947c <TIM_Base_SetConfig+0x150>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a33      	ldr	r2, [pc, #204]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a33      	ldr	r2, [pc, #204]	@ (8009488 <TIM_Base_SetConfig+0x15c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a32      	ldr	r2, [pc, #200]	@ (800948c <TIM_Base_SetConfig+0x160>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a31      	ldr	r2, [pc, #196]	@ (8009490 <TIM_Base_SetConfig+0x164>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d108      	bne.n	80093e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a1a      	ldr	r2, [pc, #104]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00f      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1a      	ldr	r2, [pc, #104]	@ (8009488 <TIM_Base_SetConfig+0x15c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00b      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a19      	ldr	r2, [pc, #100]	@ (800948c <TIM_Base_SetConfig+0x160>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a18      	ldr	r2, [pc, #96]	@ (8009490 <TIM_Base_SetConfig+0x164>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a13      	ldr	r2, [pc, #76]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b01      	cmp	r3, #1
 8009454:	d105      	bne.n	8009462 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f023 0201 	bic.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	611a      	str	r2, [r3, #16]
  }
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40013400 	.word	0x40013400
 8009484:	40015000 	.word	0x40015000
 8009488:	40014000 	.word	0x40014000
 800948c:	40014400 	.word	0x40014400
 8009490:	40014800 	.word	0x40014800

08009494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f023 0201 	bic.w	r2, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f023 0302 	bic.w	r3, r3, #2
 80094e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a30      	ldr	r2, [pc, #192]	@ (80095b0 <TIM_OC1_SetConfig+0x11c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a2f      	ldr	r2, [pc, #188]	@ (80095b4 <TIM_OC1_SetConfig+0x120>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00f      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a2e      	ldr	r2, [pc, #184]	@ (80095b8 <TIM_OC1_SetConfig+0x124>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00b      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a2d      	ldr	r2, [pc, #180]	@ (80095bc <TIM_OC1_SetConfig+0x128>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a2c      	ldr	r2, [pc, #176]	@ (80095c0 <TIM_OC1_SetConfig+0x12c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a2b      	ldr	r2, [pc, #172]	@ (80095c4 <TIM_OC1_SetConfig+0x130>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d10c      	bne.n	8009536 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f023 0308 	bic.w	r3, r3, #8
 8009522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 0304 	bic.w	r3, r3, #4
 8009534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a1d      	ldr	r2, [pc, #116]	@ (80095b0 <TIM_OC1_SetConfig+0x11c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d013      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a1c      	ldr	r2, [pc, #112]	@ (80095b4 <TIM_OC1_SetConfig+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00f      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1b      	ldr	r2, [pc, #108]	@ (80095b8 <TIM_OC1_SetConfig+0x124>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00b      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a1a      	ldr	r2, [pc, #104]	@ (80095bc <TIM_OC1_SetConfig+0x128>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d007      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a19      	ldr	r2, [pc, #100]	@ (80095c0 <TIM_OC1_SetConfig+0x12c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a18      	ldr	r2, [pc, #96]	@ (80095c4 <TIM_OC1_SetConfig+0x130>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d111      	bne.n	800958a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	621a      	str	r2, [r3, #32]
}
 80095a4:	bf00      	nop
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	40012c00 	.word	0x40012c00
 80095b4:	40013400 	.word	0x40013400
 80095b8:	40014000 	.word	0x40014000
 80095bc:	40014400 	.word	0x40014400
 80095c0:	40014800 	.word	0x40014800
 80095c4:	40015000 	.word	0x40015000

080095c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	f023 0210 	bic.w	r2, r3, #16
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a2c      	ldr	r2, [pc, #176]	@ (80096d8 <TIM_OC2_SetConfig+0x110>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_OC2_SetConfig+0x74>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a2b      	ldr	r2, [pc, #172]	@ (80096dc <TIM_OC2_SetConfig+0x114>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_OC2_SetConfig+0x74>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a2a      	ldr	r2, [pc, #168]	@ (80096e0 <TIM_OC2_SetConfig+0x118>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d10d      	bne.n	8009658 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1f      	ldr	r2, [pc, #124]	@ (80096d8 <TIM_OC2_SetConfig+0x110>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d013      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a1e      	ldr	r2, [pc, #120]	@ (80096dc <TIM_OC2_SetConfig+0x114>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00f      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a1e      	ldr	r2, [pc, #120]	@ (80096e4 <TIM_OC2_SetConfig+0x11c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00b      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1d      	ldr	r2, [pc, #116]	@ (80096e8 <TIM_OC2_SetConfig+0x120>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d007      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1c      	ldr	r2, [pc, #112]	@ (80096ec <TIM_OC2_SetConfig+0x124>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d003      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <TIM_OC2_SetConfig+0x118>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d113      	bne.n	80096b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800968e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	621a      	str	r2, [r3, #32]
}
 80096ca:	bf00      	nop
 80096cc:	371c      	adds	r7, #28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40012c00 	.word	0x40012c00
 80096dc:	40013400 	.word	0x40013400
 80096e0:	40015000 	.word	0x40015000
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800

080096f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800973c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2b      	ldr	r2, [pc, #172]	@ (80097fc <TIM_OC3_SetConfig+0x10c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d007      	beq.n	8009762 <TIM_OC3_SetConfig+0x72>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2a      	ldr	r2, [pc, #168]	@ (8009800 <TIM_OC3_SetConfig+0x110>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d003      	beq.n	8009762 <TIM_OC3_SetConfig+0x72>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a29      	ldr	r2, [pc, #164]	@ (8009804 <TIM_OC3_SetConfig+0x114>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d10d      	bne.n	800977e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800977c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1e      	ldr	r2, [pc, #120]	@ (80097fc <TIM_OC3_SetConfig+0x10c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a1d      	ldr	r2, [pc, #116]	@ (8009800 <TIM_OC3_SetConfig+0x110>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00f      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a1d      	ldr	r2, [pc, #116]	@ (8009808 <TIM_OC3_SetConfig+0x118>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00b      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a1c      	ldr	r2, [pc, #112]	@ (800980c <TIM_OC3_SetConfig+0x11c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009810 <TIM_OC3_SetConfig+0x120>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <TIM_OC3_SetConfig+0x114>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d113      	bne.n	80097d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	621a      	str	r2, [r3, #32]
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40013400 	.word	0x40013400
 8009804:	40015000 	.word	0x40015000
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800984e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	031b      	lsls	r3, r3, #12
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2c      	ldr	r2, [pc, #176]	@ (8009924 <TIM_OC4_SetConfig+0x110>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d007      	beq.n	8009888 <TIM_OC4_SetConfig+0x74>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2b      	ldr	r2, [pc, #172]	@ (8009928 <TIM_OC4_SetConfig+0x114>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d003      	beq.n	8009888 <TIM_OC4_SetConfig+0x74>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a2a      	ldr	r2, [pc, #168]	@ (800992c <TIM_OC4_SetConfig+0x118>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d10d      	bne.n	80098a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800988e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009924 <TIM_OC4_SetConfig+0x110>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d013      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009928 <TIM_OC4_SetConfig+0x114>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00f      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009930 <TIM_OC4_SetConfig+0x11c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00b      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a1d      	ldr	r2, [pc, #116]	@ (8009934 <TIM_OC4_SetConfig+0x120>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d007      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009938 <TIM_OC4_SetConfig+0x124>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a17      	ldr	r2, [pc, #92]	@ (800992c <TIM_OC4_SetConfig+0x118>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d113      	bne.n	80098fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	019b      	lsls	r3, r3, #6
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	019b      	lsls	r3, r3, #6
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40015000 	.word	0x40015000
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800

0800993c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800996a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800996e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	041b      	lsls	r3, r3, #16
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4313      	orrs	r3, r2
 800998c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a19      	ldr	r2, [pc, #100]	@ (80099f8 <TIM_OC5_SetConfig+0xbc>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d013      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a18      	ldr	r2, [pc, #96]	@ (80099fc <TIM_OC5_SetConfig+0xc0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00f      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a17      	ldr	r2, [pc, #92]	@ (8009a00 <TIM_OC5_SetConfig+0xc4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00b      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a16      	ldr	r2, [pc, #88]	@ (8009a04 <TIM_OC5_SetConfig+0xc8>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d007      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a15      	ldr	r2, [pc, #84]	@ (8009a08 <TIM_OC5_SetConfig+0xcc>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d003      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a14      	ldr	r2, [pc, #80]	@ (8009a0c <TIM_OC5_SetConfig+0xd0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d109      	bne.n	80099d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	021b      	lsls	r3, r3, #8
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	621a      	str	r2, [r3, #32]
}
 80099ec:	bf00      	nop
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	40012c00 	.word	0x40012c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40014400 	.word	0x40014400
 8009a08:	40014800 	.word	0x40014800
 8009a0c:	40015000 	.word	0x40015000

08009a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	051b      	lsls	r3, r3, #20
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad0 <TIM_OC6_SetConfig+0xc0>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a19      	ldr	r2, [pc, #100]	@ (8009ad4 <TIM_OC6_SetConfig+0xc4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00f      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <TIM_OC6_SetConfig+0xc8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00b      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <TIM_OC6_SetConfig+0xcc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d007      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <TIM_OC6_SetConfig+0xd0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d003      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ae4 <TIM_OC6_SetConfig+0xd4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d109      	bne.n	8009aa8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	029b      	lsls	r3, r3, #10
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	621a      	str	r2, [r3, #32]
}
 8009ac2:	bf00      	nop
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40012c00 	.word	0x40012c00
 8009ad4:	40013400 	.word	0x40013400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800
 8009ae4:	40015000 	.word	0x40015000

08009ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	2201      	movs	r2, #1
 8009afc:	fa02 f303 	lsl.w	r3, r2, r3
 8009b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	401a      	ands	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a1a      	ldr	r2, [r3, #32]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f003 031f 	and.w	r3, r3, #31
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b20:	431a      	orrs	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	621a      	str	r2, [r3, #32]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
	...

08009b34 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d109      	bne.n	8009b58 <HAL_TIMEx_PWMN_Start+0x24>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	bf14      	ite	ne
 8009b50:	2301      	movne	r3, #1
 8009b52:	2300      	moveq	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	e022      	b.n	8009b9e <HAL_TIMEx_PWMN_Start+0x6a>
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d109      	bne.n	8009b72 <HAL_TIMEx_PWMN_Start+0x3e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	bf14      	ite	ne
 8009b6a:	2301      	movne	r3, #1
 8009b6c:	2300      	moveq	r3, #0
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	e015      	b.n	8009b9e <HAL_TIMEx_PWMN_Start+0x6a>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d109      	bne.n	8009b8c <HAL_TIMEx_PWMN_Start+0x58>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	bf14      	ite	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2300      	moveq	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e008      	b.n	8009b9e <HAL_TIMEx_PWMN_Start+0x6a>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	bf14      	ite	ne
 8009b98:	2301      	movne	r3, #1
 8009b9a:	2300      	moveq	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e073      	b.n	8009c8e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <HAL_TIMEx_PWMN_Start+0x82>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bb4:	e013      	b.n	8009bde <HAL_TIMEx_PWMN_Start+0xaa>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d104      	bne.n	8009bc6 <HAL_TIMEx_PWMN_Start+0x92>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bc4:	e00b      	b.n	8009bde <HAL_TIMEx_PWMN_Start+0xaa>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b08      	cmp	r3, #8
 8009bca:	d104      	bne.n	8009bd6 <HAL_TIMEx_PWMN_Start+0xa2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bd4:	e003      	b.n	8009bde <HAL_TIMEx_PWMN_Start+0xaa>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2204      	movs	r2, #4
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f9a3 	bl	8009f32 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a25      	ldr	r2, [pc, #148]	@ (8009c98 <HAL_TIMEx_PWMN_Start+0x164>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d022      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c0e:	d01d      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a21      	ldr	r2, [pc, #132]	@ (8009c9c <HAL_TIMEx_PWMN_Start+0x168>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d018      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a20      	ldr	r2, [pc, #128]	@ (8009ca0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d013      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a1e      	ldr	r2, [pc, #120]	@ (8009ca4 <HAL_TIMEx_PWMN_Start+0x170>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00e      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca8 <HAL_TIMEx_PWMN_Start+0x174>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009cac <HAL_TIMEx_PWMN_Start+0x178>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_TIMEx_PWMN_Start+0x118>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d115      	bne.n	8009c78 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	4b18      	ldr	r3, [pc, #96]	@ (8009cb4 <HAL_TIMEx_PWMN_Start+0x180>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b06      	cmp	r3, #6
 8009c5c:	d015      	beq.n	8009c8a <HAL_TIMEx_PWMN_Start+0x156>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c64:	d011      	beq.n	8009c8a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0201 	orr.w	r2, r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c76:	e008      	b.n	8009c8a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	e000      	b.n	8009c8c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	40012c00 	.word	0x40012c00
 8009c9c:	40000400 	.word	0x40000400
 8009ca0:	40000800 	.word	0x40000800
 8009ca4:	40000c00 	.word	0x40000c00
 8009ca8:	40013400 	.word	0x40013400
 8009cac:	40014000 	.word	0x40014000
 8009cb0:	40015000 	.word	0x40015000
 8009cb4:	00010007 	.word	0x00010007

08009cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e074      	b.n	8009dba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a34      	ldr	r2, [pc, #208]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d009      	beq.n	8009d0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a33      	ldr	r2, [pc, #204]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d004      	beq.n	8009d0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a31      	ldr	r2, [pc, #196]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d108      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a21      	ldr	r2, [pc, #132]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d022      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d50:	d01d      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d018      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d013      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00e      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a15      	ldr	r2, [pc, #84]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d009      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a18      	ldr	r2, [pc, #96]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d004      	beq.n	8009d8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a11      	ldr	r2, [pc, #68]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d10c      	bne.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	40012c00 	.word	0x40012c00
 8009dcc:	40013400 	.word	0x40013400
 8009dd0:	40015000 	.word	0x40015000
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40000800 	.word	0x40000800
 8009ddc:	40000c00 	.word	0x40000c00
 8009de0:	40014000 	.word	0x40014000

08009de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	e078      	b.n	8009ef2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	041b      	lsls	r3, r3, #16
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009f00 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1b      	ldr	r2, [pc, #108]	@ (8009f04 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a19      	ldr	r2, [pc, #100]	@ (8009f08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d11c      	bne.n	8009ee0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb0:	051b      	lsls	r3, r3, #20
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	40012c00 	.word	0x40012c00
 8009f04:	40013400 	.word	0x40013400
 8009f08:	40015000 	.word	0x40015000

08009f0c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009f22:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b087      	sub	sp, #28
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	2204      	movs	r2, #4
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a1a      	ldr	r2, [r3, #32]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	43db      	mvns	r3, r3
 8009f54:	401a      	ands	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1a      	ldr	r2, [r3, #32]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	621a      	str	r2, [r3, #32]
}
 8009f70:	bf00      	nop
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <_ZdlPvj>:
 8009f7c:	f000 b811 	b.w	8009fa2 <_ZdlPv>

08009f80 <_Znwj>:
 8009f80:	2801      	cmp	r0, #1
 8009f82:	bf38      	it	cc
 8009f84:	2001      	movcc	r0, #1
 8009f86:	b510      	push	{r4, lr}
 8009f88:	4604      	mov	r4, r0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f81c 	bl	8009fc8 <malloc>
 8009f90:	b100      	cbz	r0, 8009f94 <_Znwj+0x14>
 8009f92:	bd10      	pop	{r4, pc}
 8009f94:	f000 f808 	bl	8009fa8 <_ZSt15get_new_handlerv>
 8009f98:	b908      	cbnz	r0, 8009f9e <_Znwj+0x1e>
 8009f9a:	f000 f80d 	bl	8009fb8 <abort>
 8009f9e:	4780      	blx	r0
 8009fa0:	e7f3      	b.n	8009f8a <_Znwj+0xa>

08009fa2 <_ZdlPv>:
 8009fa2:	f000 b819 	b.w	8009fd8 <free>
	...

08009fa8 <_ZSt15get_new_handlerv>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <_ZSt15get_new_handlerv+0xc>)
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	f3bf 8f5b 	dmb	ish
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	200003e4 	.word	0x200003e4

08009fb8 <abort>:
 8009fb8:	b508      	push	{r3, lr}
 8009fba:	2006      	movs	r0, #6
 8009fbc:	f000 f8f2 	bl	800a1a4 <raise>
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	f7f8 f8c1 	bl	8002148 <_exit>
	...

08009fc8 <malloc>:
 8009fc8:	4b02      	ldr	r3, [pc, #8]	@ (8009fd4 <malloc+0xc>)
 8009fca:	4601      	mov	r1, r0
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	f000 b82d 	b.w	800a02c <_malloc_r>
 8009fd2:	bf00      	nop
 8009fd4:	2000000c 	.word	0x2000000c

08009fd8 <free>:
 8009fd8:	4b02      	ldr	r3, [pc, #8]	@ (8009fe4 <free+0xc>)
 8009fda:	4601      	mov	r1, r0
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	f000 b939 	b.w	800a254 <_free_r>
 8009fe2:	bf00      	nop
 8009fe4:	2000000c 	.word	0x2000000c

08009fe8 <sbrk_aligned>:
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	4e0f      	ldr	r6, [pc, #60]	@ (800a028 <sbrk_aligned+0x40>)
 8009fec:	460c      	mov	r4, r1
 8009fee:	6831      	ldr	r1, [r6, #0]
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	b911      	cbnz	r1, 8009ffa <sbrk_aligned+0x12>
 8009ff4:	f000 f8f2 	bl	800a1dc <_sbrk_r>
 8009ff8:	6030      	str	r0, [r6, #0]
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 f8ed 	bl	800a1dc <_sbrk_r>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d103      	bne.n	800a00e <sbrk_aligned+0x26>
 800a006:	f04f 34ff 	mov.w	r4, #4294967295
 800a00a:	4620      	mov	r0, r4
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
 800a00e:	1cc4      	adds	r4, r0, #3
 800a010:	f024 0403 	bic.w	r4, r4, #3
 800a014:	42a0      	cmp	r0, r4
 800a016:	d0f8      	beq.n	800a00a <sbrk_aligned+0x22>
 800a018:	1a21      	subs	r1, r4, r0
 800a01a:	4628      	mov	r0, r5
 800a01c:	f000 f8de 	bl	800a1dc <_sbrk_r>
 800a020:	3001      	adds	r0, #1
 800a022:	d1f2      	bne.n	800a00a <sbrk_aligned+0x22>
 800a024:	e7ef      	b.n	800a006 <sbrk_aligned+0x1e>
 800a026:	bf00      	nop
 800a028:	200003e8 	.word	0x200003e8

0800a02c <_malloc_r>:
 800a02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a030:	1ccd      	adds	r5, r1, #3
 800a032:	f025 0503 	bic.w	r5, r5, #3
 800a036:	3508      	adds	r5, #8
 800a038:	2d0c      	cmp	r5, #12
 800a03a:	bf38      	it	cc
 800a03c:	250c      	movcc	r5, #12
 800a03e:	2d00      	cmp	r5, #0
 800a040:	4606      	mov	r6, r0
 800a042:	db01      	blt.n	800a048 <_malloc_r+0x1c>
 800a044:	42a9      	cmp	r1, r5
 800a046:	d904      	bls.n	800a052 <_malloc_r+0x26>
 800a048:	230c      	movs	r3, #12
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	2000      	movs	r0, #0
 800a04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a128 <_malloc_r+0xfc>
 800a056:	f000 f869 	bl	800a12c <__malloc_lock>
 800a05a:	f8d8 3000 	ldr.w	r3, [r8]
 800a05e:	461c      	mov	r4, r3
 800a060:	bb44      	cbnz	r4, 800a0b4 <_malloc_r+0x88>
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff ffbf 	bl	8009fe8 <sbrk_aligned>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	4604      	mov	r4, r0
 800a06e:	d158      	bne.n	800a122 <_malloc_r+0xf6>
 800a070:	f8d8 4000 	ldr.w	r4, [r8]
 800a074:	4627      	mov	r7, r4
 800a076:	2f00      	cmp	r7, #0
 800a078:	d143      	bne.n	800a102 <_malloc_r+0xd6>
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	d04b      	beq.n	800a116 <_malloc_r+0xea>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	4639      	mov	r1, r7
 800a082:	4630      	mov	r0, r6
 800a084:	eb04 0903 	add.w	r9, r4, r3
 800a088:	f000 f8a8 	bl	800a1dc <_sbrk_r>
 800a08c:	4581      	cmp	r9, r0
 800a08e:	d142      	bne.n	800a116 <_malloc_r+0xea>
 800a090:	6821      	ldr	r1, [r4, #0]
 800a092:	1a6d      	subs	r5, r5, r1
 800a094:	4629      	mov	r1, r5
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ffa6 	bl	8009fe8 <sbrk_aligned>
 800a09c:	3001      	adds	r0, #1
 800a09e:	d03a      	beq.n	800a116 <_malloc_r+0xea>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	442b      	add	r3, r5
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	bb62      	cbnz	r2, 800a108 <_malloc_r+0xdc>
 800a0ae:	f8c8 7000 	str.w	r7, [r8]
 800a0b2:	e00f      	b.n	800a0d4 <_malloc_r+0xa8>
 800a0b4:	6822      	ldr	r2, [r4, #0]
 800a0b6:	1b52      	subs	r2, r2, r5
 800a0b8:	d420      	bmi.n	800a0fc <_malloc_r+0xd0>
 800a0ba:	2a0b      	cmp	r2, #11
 800a0bc:	d917      	bls.n	800a0ee <_malloc_r+0xc2>
 800a0be:	1961      	adds	r1, r4, r5
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	6025      	str	r5, [r4, #0]
 800a0c4:	bf18      	it	ne
 800a0c6:	6059      	strne	r1, [r3, #4]
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	bf08      	it	eq
 800a0cc:	f8c8 1000 	streq.w	r1, [r8]
 800a0d0:	5162      	str	r2, [r4, r5]
 800a0d2:	604b      	str	r3, [r1, #4]
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 f82f 	bl	800a138 <__malloc_unlock>
 800a0da:	f104 000b 	add.w	r0, r4, #11
 800a0de:	1d23      	adds	r3, r4, #4
 800a0e0:	f020 0007 	bic.w	r0, r0, #7
 800a0e4:	1ac2      	subs	r2, r0, r3
 800a0e6:	bf1c      	itt	ne
 800a0e8:	1a1b      	subne	r3, r3, r0
 800a0ea:	50a3      	strne	r3, [r4, r2]
 800a0ec:	e7af      	b.n	800a04e <_malloc_r+0x22>
 800a0ee:	6862      	ldr	r2, [r4, #4]
 800a0f0:	42a3      	cmp	r3, r4
 800a0f2:	bf0c      	ite	eq
 800a0f4:	f8c8 2000 	streq.w	r2, [r8]
 800a0f8:	605a      	strne	r2, [r3, #4]
 800a0fa:	e7eb      	b.n	800a0d4 <_malloc_r+0xa8>
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	6864      	ldr	r4, [r4, #4]
 800a100:	e7ae      	b.n	800a060 <_malloc_r+0x34>
 800a102:	463c      	mov	r4, r7
 800a104:	687f      	ldr	r7, [r7, #4]
 800a106:	e7b6      	b.n	800a076 <_malloc_r+0x4a>
 800a108:	461a      	mov	r2, r3
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	d1fb      	bne.n	800a108 <_malloc_r+0xdc>
 800a110:	2300      	movs	r3, #0
 800a112:	6053      	str	r3, [r2, #4]
 800a114:	e7de      	b.n	800a0d4 <_malloc_r+0xa8>
 800a116:	230c      	movs	r3, #12
 800a118:	6033      	str	r3, [r6, #0]
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 f80c 	bl	800a138 <__malloc_unlock>
 800a120:	e794      	b.n	800a04c <_malloc_r+0x20>
 800a122:	6005      	str	r5, [r0, #0]
 800a124:	e7d6      	b.n	800a0d4 <_malloc_r+0xa8>
 800a126:	bf00      	nop
 800a128:	200003ec 	.word	0x200003ec

0800a12c <__malloc_lock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	@ (800a134 <__malloc_lock+0x8>)
 800a12e:	f000 b88f 	b.w	800a250 <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	2000052c 	.word	0x2000052c

0800a138 <__malloc_unlock>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__malloc_unlock+0x8>)
 800a13a:	f000 b88a 	b.w	800a252 <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	2000052c 	.word	0x2000052c

0800a144 <memset>:
 800a144:	4402      	add	r2, r0
 800a146:	4603      	mov	r3, r0
 800a148:	4293      	cmp	r3, r2
 800a14a:	d100      	bne.n	800a14e <memset+0xa>
 800a14c:	4770      	bx	lr
 800a14e:	f803 1b01 	strb.w	r1, [r3], #1
 800a152:	e7f9      	b.n	800a148 <memset+0x4>

0800a154 <_raise_r>:
 800a154:	291f      	cmp	r1, #31
 800a156:	b538      	push	{r3, r4, r5, lr}
 800a158:	4605      	mov	r5, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	d904      	bls.n	800a168 <_raise_r+0x14>
 800a15e:	2316      	movs	r3, #22
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a16a:	b112      	cbz	r2, 800a172 <_raise_r+0x1e>
 800a16c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a170:	b94b      	cbnz	r3, 800a186 <_raise_r+0x32>
 800a172:	4628      	mov	r0, r5
 800a174:	f000 f830 	bl	800a1d8 <_getpid_r>
 800a178:	4622      	mov	r2, r4
 800a17a:	4601      	mov	r1, r0
 800a17c:	4628      	mov	r0, r5
 800a17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a182:	f000 b817 	b.w	800a1b4 <_kill_r>
 800a186:	2b01      	cmp	r3, #1
 800a188:	d00a      	beq.n	800a1a0 <_raise_r+0x4c>
 800a18a:	1c59      	adds	r1, r3, #1
 800a18c:	d103      	bne.n	800a196 <_raise_r+0x42>
 800a18e:	2316      	movs	r3, #22
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	2001      	movs	r0, #1
 800a194:	e7e7      	b.n	800a166 <_raise_r+0x12>
 800a196:	2100      	movs	r1, #0
 800a198:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a19c:	4620      	mov	r0, r4
 800a19e:	4798      	blx	r3
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	e7e0      	b.n	800a166 <_raise_r+0x12>

0800a1a4 <raise>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <raise+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f7ff bfd3 	b.w	800a154 <_raise_r>
 800a1ae:	bf00      	nop
 800a1b0:	2000000c 	.word	0x2000000c

0800a1b4 <_kill_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	@ (800a1d4 <_kill_r+0x20>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f7f7 ffb1 	bl	8002128 <_kill>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d102      	bne.n	800a1d0 <_kill_r+0x1c>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b103      	cbz	r3, 800a1d0 <_kill_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000528 	.word	0x20000528

0800a1d8 <_getpid_r>:
 800a1d8:	f7f7 bf9e 	b.w	8002118 <_getpid>

0800a1dc <_sbrk_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4d06      	ldr	r5, [pc, #24]	@ (800a1f8 <_sbrk_r+0x1c>)
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	602b      	str	r3, [r5, #0]
 800a1e8:	f7f7 ffba 	bl	8002160 <_sbrk>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_sbrk_r+0x1a>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_sbrk_r+0x1a>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	20000528 	.word	0x20000528

0800a1fc <__errno>:
 800a1fc:	4b01      	ldr	r3, [pc, #4]	@ (800a204 <__errno+0x8>)
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2000000c 	.word	0x2000000c

0800a208 <__libc_init_array>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	4d0d      	ldr	r5, [pc, #52]	@ (800a240 <__libc_init_array+0x38>)
 800a20c:	4c0d      	ldr	r4, [pc, #52]	@ (800a244 <__libc_init_array+0x3c>)
 800a20e:	1b64      	subs	r4, r4, r5
 800a210:	10a4      	asrs	r4, r4, #2
 800a212:	2600      	movs	r6, #0
 800a214:	42a6      	cmp	r6, r4
 800a216:	d109      	bne.n	800a22c <__libc_init_array+0x24>
 800a218:	4d0b      	ldr	r5, [pc, #44]	@ (800a248 <__libc_init_array+0x40>)
 800a21a:	4c0c      	ldr	r4, [pc, #48]	@ (800a24c <__libc_init_array+0x44>)
 800a21c:	f000 f864 	bl	800a2e8 <_init>
 800a220:	1b64      	subs	r4, r4, r5
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	2600      	movs	r6, #0
 800a226:	42a6      	cmp	r6, r4
 800a228:	d105      	bne.n	800a236 <__libc_init_array+0x2e>
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a230:	4798      	blx	r3
 800a232:	3601      	adds	r6, #1
 800a234:	e7ee      	b.n	800a214 <__libc_init_array+0xc>
 800a236:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23a:	4798      	blx	r3
 800a23c:	3601      	adds	r6, #1
 800a23e:	e7f2      	b.n	800a226 <__libc_init_array+0x1e>
 800a240:	0800a320 	.word	0x0800a320
 800a244:	0800a320 	.word	0x0800a320
 800a248:	0800a320 	.word	0x0800a320
 800a24c:	0800a32c 	.word	0x0800a32c

0800a250 <__retarget_lock_acquire_recursive>:
 800a250:	4770      	bx	lr

0800a252 <__retarget_lock_release_recursive>:
 800a252:	4770      	bx	lr

0800a254 <_free_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4605      	mov	r5, r0
 800a258:	2900      	cmp	r1, #0
 800a25a:	d041      	beq.n	800a2e0 <_free_r+0x8c>
 800a25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a260:	1f0c      	subs	r4, r1, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfb8      	it	lt
 800a266:	18e4      	addlt	r4, r4, r3
 800a268:	f7ff ff60 	bl	800a12c <__malloc_lock>
 800a26c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2e4 <_free_r+0x90>)
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	b933      	cbnz	r3, 800a280 <_free_r+0x2c>
 800a272:	6063      	str	r3, [r4, #4]
 800a274:	6014      	str	r4, [r2, #0]
 800a276:	4628      	mov	r0, r5
 800a278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a27c:	f7ff bf5c 	b.w	800a138 <__malloc_unlock>
 800a280:	42a3      	cmp	r3, r4
 800a282:	d908      	bls.n	800a296 <_free_r+0x42>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	1821      	adds	r1, r4, r0
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf01      	itttt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	1809      	addeq	r1, r1, r0
 800a292:	6021      	streq	r1, [r4, #0]
 800a294:	e7ed      	b.n	800a272 <_free_r+0x1e>
 800a296:	461a      	mov	r2, r3
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	b10b      	cbz	r3, 800a2a0 <_free_r+0x4c>
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	d9fa      	bls.n	800a296 <_free_r+0x42>
 800a2a0:	6811      	ldr	r1, [r2, #0]
 800a2a2:	1850      	adds	r0, r2, r1
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d10b      	bne.n	800a2c0 <_free_r+0x6c>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	1850      	adds	r0, r2, r1
 800a2ae:	4283      	cmp	r3, r0
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	d1e0      	bne.n	800a276 <_free_r+0x22>
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	6053      	str	r3, [r2, #4]
 800a2ba:	4408      	add	r0, r1
 800a2bc:	6010      	str	r0, [r2, #0]
 800a2be:	e7da      	b.n	800a276 <_free_r+0x22>
 800a2c0:	d902      	bls.n	800a2c8 <_free_r+0x74>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	e7d6      	b.n	800a276 <_free_r+0x22>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	1821      	adds	r1, r4, r0
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	bf04      	itt	eq
 800a2d0:	6819      	ldreq	r1, [r3, #0]
 800a2d2:	685b      	ldreq	r3, [r3, #4]
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	bf04      	itt	eq
 800a2d8:	1809      	addeq	r1, r1, r0
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	6054      	str	r4, [r2, #4]
 800a2de:	e7ca      	b.n	800a276 <_free_r+0x22>
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200003ec 	.word	0x200003ec

0800a2e8 <_init>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr

0800a2f4 <_fini>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr
