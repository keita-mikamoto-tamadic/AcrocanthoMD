
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf80  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c158  0800c158  0000d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c178  0800c178  0000e064  2**0
                  CONTENTS
  4 .ARM          00000000  0800c178  0800c178  0000e064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c178  0800c178  0000e064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0800c178  0800c178  0000d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000014  0800c190  0800c190  0000d190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800c1a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000064  0800c208  0000e064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800c208  0000e578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038732  00000000  00000000  0000e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cda  00000000  00000000  000467c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  0004d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001953  00000000  00000000  0004f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f710  00000000  00000000  00050f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024fd4  00000000  00000000  0008061b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128153  00000000  00000000  000a55ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009668  00000000  00000000  001cd788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001d6df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c140 	.word	0x0800c140

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	0800c140 	.word	0x0800c140

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <_ZN8UserTask7getDataEv>:
  void cyclicTask();
  void idleTask();
  void motorControl();

  // getter
  UserTaskData* getData() { return data.get(); }
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fb46 	bl	80010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_ZN3Ang7raw2radEt>:

  void elecAngVel();

  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000aa8 <_ZN3Ang7raw2radEt+0x38>
 8000a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000aac <_ZN3Ang7raw2radEt+0x3c>
 8000a92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a96:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40c90fdb 	.word	0x40c90fdb
 8000aac:	45800000 	.word	0x45800000

08000ab0 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TASK_TIME * static_cast<float>(compTime));
 8000abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000b38 <_ZN3Ang8raw2radsEs+0x88>
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000b3c <_ZN3Ang8raw2radsEs+0x8c>
 8000ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ad8:	ee16 0a90 	vmov	r0, s13
 8000adc:	f7ff fd00 	bl	80004e0 <__aeabi_f2d>
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7b9b      	ldrb	r3, [r3, #14]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af0:	ee17 0a90 	vmov	r0, s15
 8000af4:	f7ff fcf4 	bl	80004e0 <__aeabi_f2d>
 8000af8:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b30 <_ZN3Ang8raw2radsEs+0x80>)
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	f7ff fd47 	bl	8000590 <__aeabi_dmul>
 8000b02:	4602      	mov	r2, r0
 8000b04:	460b      	mov	r3, r1
 8000b06:	4620      	mov	r0, r4
 8000b08:	4629      	mov	r1, r5
 8000b0a:	f7ff fe6b 	bl	80007e4 <__aeabi_ddiv>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4610      	mov	r0, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	f7ff ff4d 	bl	80009b4 <__aeabi_d2f>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	ee07 3a90 	vmov	s15, r3
  }
 8000b20:	eeb0 0a67 	vmov.f32	s0, s15
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	f3af 8000 	nop.w
 8000b30:	cd630163 	.word	0xcd630163
 8000b34:	3f0a3618 	.word	0x3f0a3618
 8000b38:	40c90fdb 	.word	0x40c90fdb
 8000b3c:	45800000 	.word	0x45800000

08000b40 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "user_task.h"

extern Ang ang;
extern UserTask usertask;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fb0f 	bl	8001170 <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x74>)
 8000b56:	605a      	str	r2, [r3, #4]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	731a      	strb	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	735a      	strb	r2, [r3, #13]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	739a      	strb	r2, [r3, #14]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	82da      	strh	r2, [r3, #22]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	831a      	strh	r2, [r3, #24]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	851a      	strh	r2, [r3, #40]	@ 0x28
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	42480000 	.word	0x42480000

08000bb8 <_ZN3Ang4readEv>:

void Ang::read() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b1b      	ldrb	r3, [r3, #12]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00c      	beq.n	8000be8 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6898      	ldr	r0, [r3, #8]
 8000bd6:	f107 020f 	add.w	r2, r7, #15
 8000bda:	2301      	movs	r3, #1
 8000bdc:	216c      	movs	r1, #108	@ 0x6c
 8000bde:	f007 f917 	bl	8007e10 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	731a      	strb	r2, [r3, #12]
  }
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf14      	ite	ne
 8000c04:	2301      	movne	r3, #1
 8000c06:	2300      	moveq	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00c      	beq.n	8000c28 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6898      	ldr	r0, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f103 0214 	add.w	r2, r3, #20
 8000c18:	2302      	movs	r3, #2
 8000c1a:	216c      	movs	r1, #108	@ 0x6c
 8000c1c:	f007 fa0c 	bl	8008038 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  read();
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffbd 	bl	8000bb8 <_ZN3Ang4readEv>
  receive();
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffd6 	bl	8000bf0 <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d033      	beq.n	8000cc2 <_ZN3Ang8getAngleEv+0x92>
    rawAngPast = rawAng;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	8ada      	ldrh	r2, [r3, #22]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	831a      	strh	r2, [r3, #24]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7d1b      	ldrb	r3, [r3, #20]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7d52      	ldrb	r2, [r2, #21]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	82da      	strh	r2, [r3, #22]
    mechAngPast = data->mechAng;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa96 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61da      	str	r2, [r3, #28]
    data->mechAng = raw2rad(rawAng);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	8add      	ldrh	r5, [r3, #22]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fa8c 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c92:	4604      	mov	r4, r0
 8000c94:	4629      	mov	r1, r5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff feea 	bl	8000a70 <_ZN3Ang7raw2radEt>
 8000c9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ca0:	edc4 7a02 	vstr	s15, [r4, #8]
    
    readStart = false;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	731a      	strb	r2, [r3, #12]
    i2c_rx_complete = false;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    // 速度時間割りのためのカウンタ保存
    compTime = comp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b5a      	ldrb	r2, [r3, #13]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	739a      	strb	r2, [r3, #14]
    comp = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	735a      	strb	r2, [r3, #13]

  } else ++comp;

}
 8000cc0:	e005      	b.n	8000cce <_ZN3Ang8getAngleEv+0x9e>
  } else ++comp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7b5b      	ldrb	r3, [r3, #13]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	735a      	strb	r2, [r3, #13]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdb0      	pop	{r4, r5, r7, pc}

08000cd6 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000cd6:	b5b0      	push	{r4, r5, r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  if (comp) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b5b      	ldrb	r3, [r3, #13]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d13c      	bne.n	8000d60 <_ZN3Ang6getVelEv+0x8a>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8ada      	ldrh	r2, [r3, #22]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	8b1b      	ldrh	r3, [r3, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	841a      	strh	r2, [r3, #32]

    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    if (diff > 2048) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d02:	dd0a      	ble.n	8000d1a <_ZN3Ang6getVelEv+0x44>
      diff -= 4096;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	841a      	strh	r2, [r3, #32]
 8000d18:	e00f      	b.n	8000d3a <_ZN3Ang6getVelEv+0x64>
    } else if (diff < -2048) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d20:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000d24:	da09      	bge.n	8000d3a <_ZN3Ang6getVelEv+0x64>
      diff += 4096;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	841a      	strh	r2, [r3, #32]
    }
    
    data->actVel = raw2rads(diff);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fa31 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d48:	4604      	mov	r4, r0
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff feaf 	bl	8000ab0 <_ZN3Ang8raw2radsEs>
 8000d52:	eef0 7a40 	vmov.f32	s15, s0
 8000d56:	edc4 7a04 	vstr	s15, [r4, #16]
    mechAngleVelLPF();
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f810 	bl	8000d80 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fa21 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d70:	8313      	strh	r3, [r2, #24]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7a:	0000      	movs	r0, r0
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	ed2d 8b02 	vpush	{d8}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d92:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e48 <_ZN3Ang15mechAngleVelLPFEv+0xc8>
 8000d96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da2:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TASK_TIME * static_cast<float>(compTime)) / timeConst;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b9b      	ldrb	r3, [r3, #14]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db2:	ee17 0a90 	vmov	r0, s15
 8000db6:	f7ff fb93 	bl	80004e0 <__aeabi_f2d>
 8000dba:	a321      	add	r3, pc, #132	@ (adr r3, 8000e40 <_ZN3Ang15mechAngleVelLPFEv+0xc0>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fbe6 	bl	8000590 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4614      	mov	r4, r2
 8000dca:	461d      	mov	r5, r3
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f7ff fb87 	bl	80004e0 <__aeabi_f2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fd03 	bl	80007e4 <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fde5 	bl	80009b4 <__aeabi_d2f>
 8000dea:	4603      	mov	r3, r0
 8000dec:	60bb      	str	r3, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9da 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000df6:	4603      	mov	r3, r0
 8000df8:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e00:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e0c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f9c9 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e1e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f9c0 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8000e30:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	ecbd 8b02 	vpop	{d8}
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	cd630163 	.word	0xcd630163
 8000e44:	3f0a3618 	.word	0x3f0a3618
 8000e48:	40c90fdb 	.word	0x40c90fdb

08000e4c <_ZN3Ang7elecAngEv>:

float Ang::elecAng() {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  // comp = 0のときサンプル値更新あり
  // 次の更新まで2周期を補間するので3で割った値を足す
  if (comp == 0) rawElecComp = rawAng;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <_ZN3Ang7elecAngEv+0x1a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8ada      	ldrh	r2, [r3, #22]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000e64:	e00f      	b.n	8000e86 <_ZN3Ang7elecAngEv+0x3a>
  else rawElecComp = rawAng + (diff / 3);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	8ada      	ldrh	r2, [r3, #22]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e70:	4927      	ldr	r1, [pc, #156]	@ (8000f10 <_ZN3Ang7elecAngEv+0xc4>)
 8000e72:	fb81 0103 	smull	r0, r1, r1, r3
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	861a      	strh	r2, [r3, #48]	@ 0x30
  
  // 電気角反転
  static uint16_t elecAngtemp_ = 0;
  if (elecAngDir > 0) {
    elecAngtemp_ = rawElecComp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <_ZN3Ang7elecAngEv+0xc8>)
 8000e8c:	801a      	strh	r2, [r3, #0]

  // CWとCCWを切替
  static float ofs_ = 0.0f;
  if (rotDir > 0) {
    ofs_ = elecAngOfs + user2pi;
  }else ofs_ = elecAngOfs; // 極性反転不要
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e92:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <_ZN3Ang7elecAngEv+0xcc>)
 8000e94:	6013      	str	r3, [r2, #0]

  static uint16_t offset_ = 0;
  static uint16_t elecAngtemp2_ = 0;
  
  offset_ = static_cast<uint16_t>(ofs_ * 4096.0f / user2pi);
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <_ZN3Ang7elecAngEv+0xcc>)
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f1c <_ZN3Ang7elecAngEv+0xd0>
 8000ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000f20 <_ZN3Ang7elecAngEv+0xd4>
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <_ZN3Ang7elecAngEv+0xd8>)
 8000eb8:	801a      	strh	r2, [r3, #0]
  elecAngtemp2_ = (elecAngtemp_ * polePairs + offset_) % 4096;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <_ZN3Ang7elecAngEv+0xc8>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <_ZN3Ang7elecAngEv+0xd8>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	425a      	negs	r2, r3
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000eda:	bf58      	it	pl
 8000edc:	4253      	negpl	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_ZN3Ang7elecAngEv+0xdc>)
 8000ee2:	801a      	strh	r2, [r3, #0]

  return static_cast<float>(elecAngtemp2_) / 4096.0f * user2pi;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_ZN3Ang7elecAngEv+0xdc>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f1c <_ZN3Ang7elecAngEv+0xd0>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f20 <_ZN3Ang7elecAngEv+0xd4>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8000f00:	eeb0 0a67 	vmov.f32	s0, s15
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	55555556 	.word	0x55555556
 8000f14:	20000080 	.word	0x20000080
 8000f18:	20000084 	.word	0x20000084
 8000f1c:	45800000 	.word	0x45800000
 8000f20:	40c90fdb 	.word	0x40c90fdb
 8000f24:	20000088 	.word	0x20000088
 8000f28:	2000008a 	.word	0x2000008a
 8000f2c:	00000000 	.word	0x00000000

08000f30 <_ZN3Ang14elecAngVirtualEf>:

float Ang::elecAngVirtual(float _virFreqRef) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	ed87 0a00 	vstr	s0, [r7]
  // 仮想電気角
  static float _theta = 0.0f;
  // タスク周期で分割して足しこむ
  float _deltatheta = _virFreqRef * TASK_TIME;
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a327      	add	r3, pc, #156	@ (adr r3, 8000fe0 <_ZN3Ang14elecAngVirtualEf+0xb0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd2e 	bl	80009b4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  _theta += _deltatheta;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

  // 0~1の範囲に収める
  if (_theta > 1.0f) _theta -= 1.0f;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd09      	ble.n	8000f98 <_ZN3Ang14elecAngVirtualEf+0x68>
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
  if (_theta < 0.0f) _theta += 1.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <_ZN3Ang14elecAngVirtualEf+0x8c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

  // ラジアンで返却
  return _theta * user2pi;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fdc <_ZN3Ang14elecAngVirtualEf+0xac>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	2000008c 	.word	0x2000008c
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	cd630163 	.word	0xcd630163
 8000fe4:	3f0a3618 	.word	0x3f0a3618

08000fe8 <_ZN3Ang11elecAngleInEv>:

void Ang::elecAngleIn(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	ed2d 8b02 	vpush	{d8}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  UserTask::UserTaskData* usertaskdata = usertask.getData();
 8000ff4:	4817      	ldr	r0, [pc, #92]	@ (8001054 <_ZN3Ang11elecAngleInEv+0x6c>)
 8000ff6:	f7ff fd2d 	bl	8000a54 <_ZN8UserTask7getDataEv>
 8000ffa:	60f8      	str	r0, [r7, #12]
  
  if (usertaskdata->virAngFreq > 0.0f) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dd11      	ble.n	8001030 <_ZN3Ang11elecAngleInEv+0x48>
    data->elecAng = elecAngVirtual(usertaskdata->virAngFreq);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ed93 8a03 	vldr	s16, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8c8 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 800101a:	4604      	mov	r4, r0
 800101c:	eeb0 0a48 	vmov.f32	s0, s16
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff85 	bl	8000f30 <_ZN3Ang14elecAngVirtualEf>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	edc4 7a00 	vstr	s15, [r4]
  } else {
    data->elecAng = elecAng();
  }
}
 800102e:	e00b      	b.n	8001048 <_ZN3Ang11elecAngleInEv+0x60>
    data->elecAng = elecAng();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8b9 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001038:	4604      	mov	r4, r0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff06 	bl	8000e4c <_ZN3Ang7elecAngEv>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	edc4 7a00 	vstr	s15, [r4]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	ecbd 8b02 	vpop	{d8}
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	2000041c 	.word	0x2000041c

08001058 <_ZNK3Ang14prepareCanDataEPhj>:
int16_t Ang::compAng() {
  return 0;
}


void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]

  memcpy(buffer, &(data->elecAng), sizeof(data->elecAng));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f89f 	bl	80011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 800106c:	4603      	mov	r3, r0
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80010c2:	f7ff ffdc 	bl	800107e <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003bc 	.word	0x200003bc

080010d4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <HAL_I2C_MasterRxCpltCallback+0x18>)
 80010de:	f7ff ffdc 	bl	800109a <_ZN3Ang19i2cMasterRxCallbackEv>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003bc 	.word	0x200003bc

080010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f861 	bl	80011c2 <_ZNKSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f862 	bl	80011de <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN3Ang7AngDataC1Ev>:
  struct AngData{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	831a      	strh	r2, [r3, #24]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001178:	201c      	movs	r0, #28
 800117a:	f00a fe2d 	bl	800bdd8 <_Znwj>
 800117e:	4603      	mov	r3, r0
 8001180:	461c      	mov	r4, r3
 8001182:	4622      	mov	r2, r4
 8001184:	2300      	movs	r3, #0
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	6053      	str	r3, [r2, #4]
 800118a:	6093      	str	r3, [r2, #8]
 800118c:	60d3      	str	r3, [r2, #12]
 800118e:	6113      	str	r3, [r2, #16]
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ffc5 	bl	8001124 <_ZN3Ang7AngDataC1Ev>
 800119a:	4621      	mov	r1, r4
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f83c 	bl	800121a <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return get();
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa9 	bl	800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 80011b8:	4603      	mov	r3, r0
      }
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZNKSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f840 	bl	8001252 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011d2:	4603      	mov	r3, r0
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f83f 	bl	800126c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011ee:	4603      	mov	r3, r0
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f83b 	bl	8001286 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffe6 	bl	80011fa <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f833 	bl	80012ae <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f833 	bl	80012c8 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f832 	bl	80012e0 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f830 	bl	80012f8 <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffcd 	bl	8001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 800129e:	4602      	mov	r2, r0
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f82a 	bl	8001312 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012be:	4603      	mov	r3, r0
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f82a 	bl	800132a <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f82b 	bl	8001344 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f82b 	bl	800135e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f82f 	bl	800137e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82f 	bl	8001398 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERKS3_>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f82d 	bl	80013ae <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f82c 	bl	80013c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f834 	bl	80013dc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f835 	bl	80013f8 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>:
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>:
      _Tuple_impl()
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f81e 	bl	800140e <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>:
      constexpr _Head_base()
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

// グローバルなインスタンスを使用
extern CanCom cancom;
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
    data(std::make_unique<CanData>()) {}
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f994 	bl	800175e <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    data(std::make_unique<CanData>()) {}
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	609a      	str	r2, [r3, #8]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <_ZN6CanCom12initTxHeaderEmbb+0x28>
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	e000      	b.n	8001488 <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 8001486:	2200      	movs	r2, #0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	60da      	str	r2, [r3, #12]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2208      	movs	r2, #8
 8001496:	615a      	str	r2, [r3, #20]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 80014a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014a8:	e000      	b.n	80014ac <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 80014aa:	2200      	movs	r2, #0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	61da      	str	r2, [r3, #28]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 80014b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014ba:	e000      	b.n	80014be <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80014bc:	2200      	movs	r2, #0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	621a      	str	r2, [r3, #32]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
  txHeader.MessageMarker = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d902      	bls.n	80014f2 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 80014ec:	f000 ff04 	bl	80022f8 <Error_Handler>
 80014f0:	e02a      	b.n	8001548 <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e00c      	b.n	800151a <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	460a      	mov	r2, r1
 8001512:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3ee      	bcc.n	8001500 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6858      	ldr	r0, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3308      	adds	r3, #8
 800152a:	f107 0214 	add.w	r2, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	f005 fd6e 	bl	8007010 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 8001544:	f000 fed8 	bl	80022f8 <Error_Handler>
  }
}
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d028      	beq.n	80015b4 <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6858      	ldr	r0, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	335c      	adds	r3, #92	@ 0x5c
 8001570:	2140      	movs	r1, #64	@ 0x40
 8001572:	f005 fd91 	bl	8007098 <HAL_FDCAN_GetRxMessage>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 8001586:	f000 feb7 	bl	80022f8 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fe88 	bl	80072a8 <HAL_FDCAN_ActivateNotification>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 80015a8:	f000 fea6 	bl	80022f8 <Error_Handler>
    }

    canRxInterrupt = true;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  }
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d034      	beq.n	8001644 <_ZN6CanCom12handleRxDataEv+0x88>
    data->genFuncRef = rxData[0];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f8da 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015ea:	7013      	strb	r3, [r2, #0]
    data->drvMdRef = rxData[1];
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8d1 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80015fc:	7053      	strb	r3, [r2, #1]
    data->voltDRef = rxData[2];
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f8c8 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001606:	4602      	mov	r2, r0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800160e:	7093      	strb	r3, [r2, #2]
    data->voltQRef = rxData[3];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f8bf 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001620:	70d3      	strb	r3, [r2, #3]
    data->virAngFreq = rxData[4];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8b6 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800162a:	4602      	mov	r2, r0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001632:	7113      	strb	r3, [r2, #4]

    canRxInterrupt = false;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    canTxFlag = true;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  handleRxData();
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffb1 	bl	80015bc <_ZN6CanCom12handleRxDataEv>
 
  uint8_t currentGenFuncRef = data->genFuncRef;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f89a 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001662:	4603      	mov	r3, r0
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	429a      	cmp	r2, r3
 8001672:	d004      	beq.n	800167e <_ZN6CanCom6rxTaskEv+0x32>
    return;
  }
  prevGenFuncRef = currentGenFuncRef;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800167c:	e000      	b.n	8001680 <_ZN6CanCom6rxTaskEv+0x34>
    return;
 800167e:	bf00      	nop
}
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d019      	beq.n	80016d0 <_ZN6CanCom6txTaskEv+0x48>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f879 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	3305      	adds	r3, #5
 80016a8:	2208      	movs	r2, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480a      	ldr	r0, [pc, #40]	@ (80016d8 <_ZN6CanCom6txTaskEv+0x50>)
 80016ae:	f7ff fcd3 	bl	8001058 <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f86e 	bl	8001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3305      	adds	r3, #5
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff09 	bl	80014da <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003bc 	.word	0x200003bc

080016dc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 80016ea:	f7ff ff30 	bl	800154e <_ZN6CanCom15rxFifo0CallbackEm>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000354 	.word	0x20000354

080016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f851 	bl	80017ae <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZN6CanCom7CanDataC1Ev>:
#include <memory>
#include "main.h"

class CanCom {
public:
  struct CanData {
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	705a      	strb	r2, [r3, #1]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	709a      	strb	r2, [r3, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	70da      	strb	r2, [r3, #3]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	711a      	strb	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3305      	adds	r3, #5
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	330d      	adds	r3, #13
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800175e:	b590      	push	{r4, r7, lr}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001766:	2015      	movs	r0, #21
 8001768:	f00a fb36 	bl	800bdd8 <_Znwj>
 800176c:	4603      	mov	r3, r0
 800176e:	461c      	mov	r4, r3
 8001770:	4623      	mov	r3, r4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	751a      	strb	r2, [r3, #20]
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff ffc8 	bl	8001716 <_ZN6CanCom7CanDataC1Ev>
 8001786:	4621      	mov	r1, r4
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f82e 	bl	80017ea <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	return get();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffac 	bl	80016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 80017a4:	4603      	mov	r3, r0
      }
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f832 	bl	8001822 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80017be:	4603      	mov	r3, r0
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f82e 	bl	800183c <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffe6 	bl	80017ca <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f826 	bl	8001864 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f826 	bl	800187e <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f824 	bl	8001896 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffda 	bl	8001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001854:	4602      	mov	r2, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f81e 	bl	80018b0 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001874:	4603      	mov	r3, r0
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f81e 	bl	80018c8 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f81e 	bl	80018e2 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f822 	bl	8001902 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f822 	bl	800191c <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>
 80018d8:	4603      	mov	r3, r0
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f821 	bl	8001932 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f829 	bl	800194a <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f82a 	bl	8001966 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>:
      _Tuple_impl()
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f81e 	bl	800197c <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>:
      constexpr _Head_base()
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <LL_CORDIC_Config+0x44>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4311      	orrs	r1, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4311      	orrs	r1, r2
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	6a3a      	ldr	r2, [r7, #32]
 80019be:	4311      	orrs	r1, r2
 80019c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c2:	430a      	orrs	r2, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	ff87f800 	.word	0xff87f800

080019dc <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6493      	str	r3, [r2, #72]	@ 0x48
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80019f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 80019fc:	2300      	movs	r3, #0
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2250      	movs	r2, #80	@ 0x50
 8001a12:	2100      	movs	r1, #0
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 8001a16:	f7ff ffbd 	bl	8001994 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40020c00 	.word	0x40020c00

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a32:	f002 fbc0 	bl	80041b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a36:	f000 f883 	bl	8001b40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3a:	f000 fbc7 	bl	80021cc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a3e:	f000 fb93 	bl	8002168 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001a42:	f000 f8d3 	bl	8001bec <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001a46:	f000 f967 	bl	8001d18 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8001a4a:	f000 fa21 	bl	8001e90 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8001a4e:	f000 fa6b 	bl	8001f28 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8001a52:	f000 fabb 	bl	8001fcc <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 8001a56:	f000 fa03 	bl	8001e60 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a5a:	217f      	movs	r1, #127	@ 0x7f
 8001a5c:	4833      	ldr	r0, [pc, #204]	@ (8001b2c <main+0x100>)
 8001a5e:	f003 fd0d 	bl	800547c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a62:	217f      	movs	r1, #127	@ 0x7f
 8001a64:	4832      	ldr	r0, [pc, #200]	@ (8001b30 <main+0x104>)
 8001a66:	f003 fd09 	bl	800547c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001a6a:	4830      	ldr	r0, [pc, #192]	@ (8001b2c <main+0x100>)
 8001a6c:	f002 ff0a 	bl	8004884 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001a70:	482f      	ldr	r0, [pc, #188]	@ (8001b30 <main+0x104>)
 8001a72:	f002 ff07 	bl	8004884 <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001a76:	482d      	ldr	r0, [pc, #180]	@ (8001b2c <main+0x100>)
 8001a78:	f003 fd62 	bl	8005540 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	482d      	ldr	r0, [pc, #180]	@ (8001b34 <main+0x108>)
 8001a80:	f009 f95a 	bl	800ad38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a84:	2104      	movs	r1, #4
 8001a86:	482b      	ldr	r0, [pc, #172]	@ (8001b34 <main+0x108>)
 8001a88:	f009 f956 	bl	800ad38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4829      	ldr	r0, [pc, #164]	@ (8001b34 <main+0x108>)
 8001a90:	f009 f952 	bl	800ad38 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001a94:	2100      	movs	r1, #0
 8001a96:	4827      	ldr	r0, [pc, #156]	@ (8001b34 <main+0x108>)
 8001a98:	f009 ff78 	bl	800b98c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <main+0x108>)
 8001aa0:	f009 ff74 	bl	800b98c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	4823      	ldr	r0, [pc, #140]	@ (8001b34 <main+0x108>)
 8001aa8:	f009 ff70 	bl	800b98c <HAL_TIMEx_PWMN_Start>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481b      	ldr	r0, [pc, #108]	@ (8001b38 <main+0x10c>)
 8001acc:	f005 fa1e 	bl	8006f0c <HAL_FDCAN_ConfigFilter>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <main+0xb8>
    {
        // フィルタ設定エラー
        Error_Handler();
 8001ae0:	f000 fc0a 	bl	80022f8 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 8001ae4:	4814      	ldr	r0, [pc, #80]	@ (8001b38 <main+0x10c>)
 8001ae6:	f005 fa6b 	bl	8006fc0 <HAL_FDCAN_Start>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <main+0xd2>
	  Error_Handler();
 8001afa:	f000 fbfd 	bl	80022f8 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001afe:	2200      	movs	r2, #0
 8001b00:	2101      	movs	r1, #1
 8001b02:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <main+0x10c>)
 8001b04:	f005 fbd0 	bl	80072a8 <HAL_FDCAN_ActivateNotification>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <main+0xf0>
    /* Notification Error */
    Error_Handler();
 8001b18:	f000 fbee 	bl	80022f8 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff5c 	bl	80019dc <_ZN10Acrocantho6CordicC1Ev>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    usertask.idleTask();
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <main+0x110>)
 8001b26:	f002 f85f 	bl	8003be8 <_ZN8UserTask8idleTaskEv>
 8001b2a:	e7fb      	b.n	8001b24 <main+0xf8>
 8001b2c:	20000090 	.word	0x20000090
 8001b30:	200000fc 	.word	0x200000fc
 8001b34:	20000308 	.word	0x20000308
 8001b38:	20000190 	.word	0x20000190
 8001b3c:	2000041c 	.word	0x2000041c

08001b40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b094      	sub	sp, #80	@ 0x50
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00a fa24 	bl	800bf9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f008 f898 	bl	8009c98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b72:	2340      	movs	r3, #64	@ 0x40
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b82:	2355      	movs	r3, #85	@ 0x55
 8001b84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	4618      	mov	r0, r3
 8001b98:	f008 f932 	bl	8009e00 <HAL_RCC_OscConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001bac:	f000 fba4 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f008 fc2b 	bl	800a424 <HAL_RCC_ClockConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001bde:	f000 fb8b 	bl	80022f8 <Error_Handler>
  }
}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	@ 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b092      	sub	sp, #72	@ 0x48
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bf2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001bfe:	463b      	mov	r3, r7
 8001c00:	223c      	movs	r2, #60	@ 0x3c
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00a f9c9 	bl	800bf9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c0a:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c2c:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c38:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c44:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4a:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c68:	4829      	ldr	r0, [pc, #164]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c6a:	f002 fc4f 	bl	800450c <HAL_ADC_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8001c7e:	f000 fb3b 	bl	80022f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8001c82:	2305      	movs	r3, #5
 8001c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001c86:	2300      	movs	r3, #0
 8001c88:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c8e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001c96:	f004 faad 	bl	80061f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8001caa:	f000 fb25 	bl	80022f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <_ZL12MX_ADC1_Initv+0x128>)
 8001cb0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001cba:	237f      	movs	r3, #127	@ 0x7f
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <_ZL12MX_ADC1_Initv+0x124>)
 8001cf0:	f003 fd54 	bl	800579c <HAL_ADCEx_InjectedConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8001d04:	f000 faf8 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3748      	adds	r7, #72	@ 0x48
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000090 	.word	0x20000090
 8001d14:	04300002 	.word	0x04300002

08001d18 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b090      	sub	sp, #64	@ 0x40
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	223c      	movs	r2, #60	@ 0x3c
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00a f939 	bl	800bf9c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001d2a:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d2c:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <_ZL12MX_ADC2_Initv+0x138>)
 8001d2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d30:	4b46      	ldr	r3, [pc, #280]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d38:	4b44      	ldr	r3, [pc, #272]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001d44:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d4a:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d50:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d52:	2208      	movs	r2, #8
 8001d54:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d86:	4831      	ldr	r0, [pc, #196]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001d88:	f002 fbc0 	bl	800450c <HAL_ADC_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8001d9c:	f000 faac 	bl	80022f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001da0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <_ZL12MX_ADC2_Initv+0x13c>)
 8001da2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001da4:	2309      	movs	r3, #9
 8001da6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001dac:	237f      	movs	r3, #127	@ 0x7f
 8001dae:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001db0:	2304      	movs	r3, #4
 8001db2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001db8:	2303      	movs	r3, #3
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	481c      	ldr	r0, [pc, #112]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001dda:	f003 fcdf 	bl	800579c <HAL_ADCEx_InjectedConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8001dee:	f000 fa83 	bl	80022f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <_ZL12MX_ADC2_Initv+0x140>)
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001df6:	f240 130f 	movw	r3, #271	@ 0x10f
 8001dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4812      	ldr	r0, [pc, #72]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001e02:	f003 fccb 	bl	800579c <HAL_ADCEx_InjectedConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf14      	ite	ne
 8001e0c:	2301      	movne	r3, #1
 8001e0e:	2300      	moveq	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8001e16:	f000 fa6f 	bl	80022f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <_ZL12MX_ADC2_Initv+0x144>)
 8001e1c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001e1e:	f240 2315 	movw	r3, #533	@ 0x215
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4808      	ldr	r0, [pc, #32]	@ (8001e4c <_ZL12MX_ADC2_Initv+0x134>)
 8001e2a:	f003 fcb7 	bl	800579c <HAL_ADCEx_InjectedConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8001e3e:	f000 fa5b 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3740      	adds	r7, #64	@ 0x40
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200000fc 	.word	0x200000fc
 8001e50:	50000100 	.word	0x50000100
 8001e54:	08600004 	.word	0x08600004
 8001e58:	0c900008 	.word	0x0c900008
 8001e5c:	10c00010 	.word	0x10c00010

08001e60 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_ZL14MX_CORDIC_Initv+0x28>)
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <_ZL14MX_CORDIC_Initv+0x2c>)
 8001e68:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001e6a:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <_ZL14MX_CORDIC_Initv+0x28>)
 8001e6c:	f004 faca 	bl	8006404 <HAL_CORDIC_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8001e80:	f000 fa3a 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000168 	.word	0x20000168
 8001e8c:	40020c00 	.word	0x40020c00

08001e90 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e96:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001e98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ec6:	220b      	movs	r2, #11
 8001ec8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ecc:	2238      	movs	r2, #56	@ 0x38
 8001ece:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ed2:	220b      	movs	r2, #11
 8001ed4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ed8:	2205      	movs	r2, #5
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ede:	2204      	movs	r2, #4
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001eea:	2204      	movs	r2, #4
 8001eec:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f00:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f02:	f004 fea9 	bl	8006c58 <HAL_FDCAN_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001f16:	f000 f9ef 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000190 	.word	0x20000190
 8001f24:	40006400 	.word	0x40006400

08001f28 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f2e:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <_ZL12MX_I2C1_Initv+0x9c>)
 8001f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f34:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <_ZL12MX_I2C1_Initv+0xa0>)
 8001f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f38:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f62:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f64:	f005 feb9 	bl	8007cda <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001f78:	f000 f9be 	bl	80022f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4810      	ldr	r0, [pc, #64]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f80:	f007 fdd2 	bl	8009b28 <HAL_I2CEx_ConfigAnalogFilter>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001f94:	f000 f9b0 	bl	80022f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <_ZL12MX_I2C1_Initv+0x98>)
 8001f9c:	f007 fe0f 	bl	8009bbe <HAL_I2CEx_ConfigDigitalFilter>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001fb0:	f000 f9a2 	bl	80022f8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001fb4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001fb8:	f007 fe4e 	bl	8009c58 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200001f4 	.word	0x200001f4
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	4052060f 	.word	0x4052060f

08001fcc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b098      	sub	sp, #96	@ 0x60
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2234      	movs	r2, #52	@ 0x34
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 ffcf 	bl	800bf9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffe:	4b58      	ldr	r3, [pc, #352]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002000:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <_ZL12MX_TIM1_Initv+0x198>)
 8002002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002004:	4b56      	ldr	r3, [pc, #344]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800200a:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 800200c:	2220      	movs	r2, #32
 800200e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8002010:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002012:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b51      	ldr	r3, [pc, #324]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800201e:	4b50      	ldr	r3, [pc, #320]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002020:	2201      	movs	r2, #1
 8002022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002024:	4b4e      	ldr	r3, [pc, #312]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002026:	2280      	movs	r2, #128	@ 0x80
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202a:	484d      	ldr	r0, [pc, #308]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 800202c:	f008 fe2c 	bl	800ac88 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002040:	f000 f95a 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002044:	2320      	movs	r3, #32
 8002046:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002048:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800204c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002052:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002056:	4619      	mov	r1, r3
 8002058:	4841      	ldr	r0, [pc, #260]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 800205a:	f009 fd59 	bl	800bb10 <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 800206e:	f000 f943 	bl	80022f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002072:	2360      	movs	r3, #96	@ 0x60
 8002074:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207a:	2300      	movs	r3, #0
 800207c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207e:	2300      	movs	r3, #0
 8002080:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	4832      	ldr	r0, [pc, #200]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002098:	f008 ff60 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 80020ac:	f000 f924 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020b4:	2204      	movs	r2, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4829      	ldr	r0, [pc, #164]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 80020ba:	f008 ff4f 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 80020ce:	f000 f913 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020d6:	2208      	movs	r2, #8
 80020d8:	4619      	mov	r1, r3
 80020da:	4821      	ldr	r0, [pc, #132]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 80020dc:	f008 ff3e 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 80020f0:	f000 f902 	bl	80022f8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80020f4:	481a      	ldr	r0, [pc, #104]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 80020f6:	f009 fe35 	bl	800bd64 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8002106:	2314      	movs	r3, #20
 8002108:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800210e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002112:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800212a:	2300      	movs	r3, #0
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	480a      	ldr	r0, [pc, #40]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002138:	f009 fd80 	bl	800bc3c <HAL_TIMEx_ConfigBreakDeadTime>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 800214c:	f000 f8d4 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002150:	4803      	ldr	r0, [pc, #12]	@ (8002160 <_ZL12MX_TIM1_Initv+0x194>)
 8002152:	f001 fa17 	bl	8003584 <HAL_TIM_MspPostInit>

}
 8002156:	bf00      	nop
 8002158:	3760      	adds	r7, #96	@ 0x60
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000308 	.word	0x20000308
 8002164:	40012c00 	.word	0x40012c00

08002168 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6493      	str	r3, [r2, #72]	@ 0x48
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6493      	str	r3, [r2, #72]	@ 0x48
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <_ZL11MX_DMA_Initv+0x60>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	200b      	movs	r0, #11
 80021a4:	f004 fa3b 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021a8:	200b      	movs	r0, #11
 80021aa:	f004 fa52 	bl	8006652 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	200c      	movs	r0, #12
 80021b4:	f004 fa33 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021b8:	200c      	movs	r0, #12
 80021ba:	f004 fa4a 	bl	8006652 <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000

080021cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	4a42      	ldr	r2, [pc, #264]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002200:	f043 0320 	orr.w	r3, r3, #32
 8002204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002206:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b31      	ldr	r3, [pc, #196]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a30      	ldr	r2, [pc, #192]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <_ZL12MX_GPIO_Initv+0x124>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800224c:	f005 fd0a 	bl	8007c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002256:	4827      	ldr	r0, [pc, #156]	@ (80022f4 <_ZL12MX_GPIO_Initv+0x128>)
 8002258:	f005 fd04 	bl	8007c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800225c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002262:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4820      	ldr	r0, [pc, #128]	@ (80022f4 <_ZL12MX_GPIO_Initv+0x128>)
 8002274:	f005 fb74 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002278:	230c      	movs	r3, #12
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002288:	230c      	movs	r3, #12
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f005 fb63 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800229a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800229e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b6:	f005 fb53 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <_ZL12MX_GPIO_Initv+0x128>)
 80022d4:	f005 fb44 	bl	8007960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	2028      	movs	r0, #40	@ 0x28
 80022de:	f004 f99e 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022e2:	2028      	movs	r0, #40	@ 0x28
 80022e4:	f004 f9b5 	bl	8006652 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48000800 	.word	0x48000800

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <Error_Handler+0x8>

08002304 <_ZN3AngD1Ev>:
class Ang {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f842 	bl	8002398 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZN6CanComD1Ev>:
class CanCom {
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f857 	bl	80023dc <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10c      	bne.n	8002362 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800234e:	4293      	cmp	r3, r2
 8002350:	d107      	bne.n	8002362 <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom cancom(hfdcan1);
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002354:	480d      	ldr	r0, [pc, #52]	@ (800238c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002356:	f7ff f865 	bl	8001424 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800235c:	480d      	ldr	r0, [pc, #52]	@ (8002394 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800235e:	f7fe fbef 	bl	8000b40 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236e:	4293      	cmp	r3, r2
 8002370:	d105      	bne.n	800237e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002372:	4808      	ldr	r0, [pc, #32]	@ (8002394 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002374:	f7ff ffc6 	bl	8002304 <_ZN3AngD1Ev>
CanCom cancom(hfdcan1);
 8002378:	4804      	ldr	r0, [pc, #16]	@ (800238c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800237a:	f7ff ffd0 	bl	800231e <_ZN6CanComD1Ev>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000190 	.word	0x20000190
 800238c:	20000354 	.word	0x20000354
 8002390:	200001f4 	.word	0x200001f4
 8002394:	200003bc 	.word	0x200003bc

08002398 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff48 	bl	8001238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80023a8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f834 	bl	8002420 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>
 80023b8:	4604      	mov	r4, r0
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f83d 	bl	800243a <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>
 80023c0:	4603      	mov	r3, r0
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4620      	mov	r0, r4
 80023c8:	f000 f842 	bl	8002450 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>
	__ptr = pointer();
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
      }
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}

080023dc <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fa0e 	bl	8001808 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 80023ec:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00c      	beq.n	8002410 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f83a 	bl	8002470 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>
 80023fc:	4604      	mov	r4, r0
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f843 	bl	800248a <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002404:	4603      	mov	r3, r0
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4620      	mov	r0, r4
 800240c:	f000 f848 	bl	80024a0 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>
	__ptr = pointer();
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
      }
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}

08002420 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f848 	bl	80024c0 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002430:	4603      	mov	r3, r0
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_+0x18>
 8002460:	211c      	movs	r1, #28
 8002462:	4618      	mov	r0, r3
 8002464:	f009 fcb6 	bl	800bdd4 <_ZdlPvj>
      }
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f82d 	bl	80024da <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002480:	4603      	mov	r3, r0
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_+0x18>
 80024b0:	2115      	movs	r1, #21
 80024b2:	4618      	mov	r0, r3
 80024b4:	f009 fc8e 	bl	800bdd4 <_ZdlPvj>
      }
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f812 	bl	80024f4 <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>:
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f811 	bl	800250c <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f811 	bl	8002524 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002502:	4603      	mov	r3, r0
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f811 	bl	800253c <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f811 	bl	8002554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f811 	bl	800256c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>
 800254a:	4603      	mov	r3, r0
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f811 	bl	8002584 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>
 8002562:	4603      	mov	r3, r0
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f810 	bl	800259a <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>:
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_GLOBAL__sub_I_hadc1>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff febd 	bl	8002338 <_Z41__static_initialization_and_destruction_0ii>
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_GLOBAL__sub_D_hadc1>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff feb5 	bl	8002338 <_Z41__static_initialization_and_destruction_0ii>
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZN11ModeControlC1Ev>:
#include "user_task.h"

ModeControl modecontrol;
extern UserTask usertask;

ModeControl::ModeControl()
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  : mode(CTRLMODE_NONE){}
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_ZN11ModeControl8modeCtrlEh>:


void ModeControl::modeCtrl(uint8_t mode){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  UserTask::UserTaskData* usertaskdata = usertask.getData();
 80025f8:	4812      	ldr	r0, [pc, #72]	@ (8002644 <_ZN11ModeControl8modeCtrlEh+0x58>)
 80025fa:	f7fe fa2b 	bl	8000a54 <_ZN8UserTask7getDataEv>
 80025fe:	60f8      	str	r0, [r7, #12]
  
  switch (mode) {
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d815      	bhi.n	8002632 <_ZN11ModeControl8modeCtrlEh+0x46>
 8002606:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <_ZN11ModeControl8modeCtrlEh+0x20>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	08002621 	.word	0x08002621
 8002610:	08002639 	.word	0x08002639
 8002614:	08002639 	.word	0x08002639
 8002618:	08002639 	.word	0x08002639
 800261c:	08002639 	.word	0x08002639
    case CTRLMODE_NONE:
      usertaskdata->voltDRef = 0.0f;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	605a      	str	r2, [r3, #4]
      usertaskdata->voltQRef = 0.0f;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
      break;
 8002630:	e003      	b.n	800263a <_ZN11ModeControl8modeCtrlEh+0x4e>
    case CTRLMODE_VEL:
      break;
    case CTRLMODE_POS:
      break;
    default:
      mode = CTRLMODE_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	70fb      	strb	r3, [r7, #3]
      break;
 8002636:	e000      	b.n	800263a <_ZN11ModeControl8modeCtrlEh+0x4e>
      break;
 8002638:	bf00      	nop
  }
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000041c 	.word	0x2000041c

08002648 <_Z41__static_initialization_and_destruction_0ii>:
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800265e:	4293      	cmp	r3, r2
 8002660:	d102      	bne.n	8002668 <_Z41__static_initialization_and_destruction_0ii+0x20>
ModeControl modecontrol;
 8002662:	4803      	ldr	r0, [pc, #12]	@ (8002670 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002664:	f7ff ffb4 	bl	80025d0 <_ZN11ModeControlC1Ev>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003f0 	.word	0x200003f0

08002674 <_GLOBAL__sub_I_modecontrol>:
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
 8002678:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff ffe3 	bl	8002648 <_Z41__static_initialization_and_destruction_0ii>
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZN6OutPwmC1Ev>:
#include "param.h"
#include "can_communication.h"

OutPwm outpwm;

OutPwm::OutPwm()
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
    : data(std::make_unique<outPwmData>()) {}
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <_ZN6OutPwmC1Ev+0x40>)
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <_ZN6OutPwmC1Ev+0x44>)
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3314      	adds	r3, #20
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f8e0 	bl	800287a <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	3c23d70a 	.word	0x3c23d70a
 80026c8:	3f733333 	.word	0x3f733333

080026cc <_ZN6OutPwm3PonEv>:

void OutPwm::Pon(){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  setReg(DUTY_BASE, DUTY_BASE, DUTY_BASE);
 80026d4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80026d8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80026dc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f81b 	bl	800271c <_ZN6OutPwm6setRegEfff>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <_ZN6OutPwm4PoffEv>:

void OutPwm::Poff(){
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  TIM1->CCR1 = 0; 
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <_ZN6OutPwm4PoffEv+0x28>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0; 
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <_ZN6OutPwm4PoffEv+0x28>)
 8002700:	2200      	movs	r2, #0
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0; 
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <_ZN6OutPwm4PoffEv+0x28>)
 8002706:	2200      	movs	r2, #0
 8002708:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00

0800271c <_ZN6OutPwm6setRegEfff>:

void OutPwm::setReg(float u, float v, float w){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	ed87 0a02 	vstr	s0, [r7, #8]
 8002728:	edc7 0a01 	vstr	s1, [r7, #4]
 800272c:	ed87 1a00 	vstr	s2, [r7]

  TIM1->CCR1 = (uint16_t)((1.0f - dutyGuard(u)) * (float)CCR_MAX);
 8002730:	ed97 0a02 	vldr	s0, [r7, #8]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f845 	bl	80027c4 <_ZN6OutPwm9dutyGuardEf>
 800273a:	eef0 7a40 	vmov.f32	s15, s0
 800273e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002746:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80027bc <_ZN6OutPwm6setRegEfff+0xa0>
 800274a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002752:	ee17 3a90 	vmov	r3, s15
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <_ZN6OutPwm6setRegEfff+0xa4>)
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = (uint16_t)((1.0f - dutyGuard(v)) * (float)CCR_MAX);
 800275c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f82f 	bl	80027c4 <_ZN6OutPwm9dutyGuardEf>
 8002766:	eef0 7a40 	vmov.f32	s15, s0
 800276a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800276e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002772:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80027bc <_ZN6OutPwm6setRegEfff+0xa0>
 8002776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800277a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800277e:	ee17 3a90 	vmov	r3, s15
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <_ZN6OutPwm6setRegEfff+0xa4>)
 8002786:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = (uint16_t)((1.0f - dutyGuard(w)) * (float)CCR_MAX);
 8002788:	ed97 0a00 	vldr	s0, [r7]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f819 	bl	80027c4 <_ZN6OutPwm9dutyGuardEf>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80027bc <_ZN6OutPwm6setRegEfff+0xa0>
 80027a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027aa:	ee17 3a90 	vmov	r3, s15
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <_ZN6OutPwm6setRegEfff+0xa4>)
 80027b2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	4604cc00 	.word	0x4604cc00
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <_ZN6OutPwm9dutyGuardEf>:


float OutPwm::dutyGuard(float _rawDuty){
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	ed87 0a00 	vstr	s0, [r7]
    float result = 0.0f;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
    float sum = 0.0f;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
    static float limp = 0.95f;
    static float limm = 0.01f;
    
    sum = (_rawDuty / VOLT_PBM) + DUTY_BASE;
 80027dc:	ed97 7a00 	vldr	s14, [r7]
 80027e0:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80027e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027f0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (sum > limp){
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <_ZN6OutPwm9dutyGuardEf+0x80>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80027fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	dd03      	ble.n	8002810 <_ZN6OutPwm9dutyGuardEf+0x4c>
        result = limp;
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <_ZN6OutPwm9dutyGuardEf+0x80>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e00f      	b.n	8002830 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else if(sum < limm){
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <_ZN6OutPwm9dutyGuardEf+0x84>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ed97 7a02 	vldr	s14, [r7, #8]
 800281a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d503      	bpl.n	800282c <_ZN6OutPwm9dutyGuardEf+0x68>
        result = limm;
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <_ZN6OutPwm9dutyGuardEf+0x84>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e001      	b.n	8002830 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else{
        result = sum;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	ee07 3a90 	vmov	s15, r3
}
 8002836:	eeb0 0a67 	vmov.f32	s0, s15
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <_ZN10outPwmDataC1Ev>:
#include <memory>
#include "main.h"
#include "user_math.h"


struct outPwmData {
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002882:	200c      	movs	r0, #12
 8002884:	f009 faa8 	bl	800bdd8 <_Znwj>
 8002888:	4603      	mov	r3, r0
 800288a:	461c      	mov	r4, r3
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	60a3      	str	r3, [r4, #8]
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ffd4 	bl	800284c <_ZN10outPwmDataC1Ev>
 80028a4:	4621      	mov	r1, r4
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f836 	bl	8002918 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}

080028b4 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f839 	bl	8002936 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 80028c4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f83e 	bl	8002950 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>
 80028d4:	4604      	mov	r4, r0
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f847 	bl	800296a <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>
 80028dc:	4603      	mov	r3, r0
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 f84c 	bl	8002980 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>
	__ptr = pointer();
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
      }
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f849 	bl	80029a0 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffe6 	bl	80028f8 <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f841 	bl	80029c8 <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002946:	4603      	mov	r3, r0
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f841 	bl	80029e2 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>
 8002960:	4603      	mov	r3, r0
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_+0x18>
 8002990:	210c      	movs	r1, #12
 8002992:	4618      	mov	r0, r3
 8002994:	f009 fa1e 	bl	800bdd4 <_ZdlPvj>
      }
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f825 	bl	80029fc <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffbf 	bl	8002936 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 80029b8:	4602      	mov	r2, r0
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f81f 	bl	8002a16 <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80029d8:	4603      	mov	r3, r0
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f81e 	bl	8002a2e <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f81d 	bl	8002a46 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f821 	bl	8002a66 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f822 	bl	8002a80 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f822 	bl	8002a98 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f82a 	bl	8002ab0 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f82b 	bl	8002acc <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f82a 	bl	8002ae2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>:
      _Tuple_impl()
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f82a 	bl	8002afa <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>:
      constexpr _Head_base()
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f810 	bl	8002b10 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>:
      constexpr _Head_base()
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_ZN6OutPwmD1Ev>:
  float dutyU = 0.0f;
  float dutyV = 0.0f;
  float dutyW = 0.0f;
};

class OutPwm{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3314      	adds	r3, #20
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff febe 	bl	80028b4 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <_Z41__static_initialization_and_destruction_0ii>:
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d102      	bne.n	8002b64 <_Z41__static_initialization_and_destruction_0ii+0x20>
OutPwm outpwm;
 8002b5e:	4809      	ldr	r0, [pc, #36]	@ (8002b84 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b60:	f7ff fd90 	bl	8002684 <_ZN6OutPwmC1Ev>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b74:	4803      	ldr	r0, [pc, #12]	@ (8002b84 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b76:	f7ff ffd6 	bl	8002b26 <_ZN6OutPwmD1Ev>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200003f4 	.word	0x200003f4

08002b88 <_GLOBAL__sub_I_outpwm>:
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff ffd7 	bl	8002b44 <_Z41__static_initialization_and_destruction_0ii>
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_GLOBAL__sub_D_outpwm>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff ffcf 	bl	8002b44 <_Z41__static_initialization_and_destruction_0ii>
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_ZN7SensCurC1Ev>:

#include <cstdint>

SensCur senscur;

SensCur::SensCur()
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<SensCurData>()) {}
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f898 	bl	8002ce8 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	809a      	strh	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	80da      	strh	r2, [r3, #6]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <_ZN7SensCur9getRawCurEv>:
  
void SensCur::getRawCur() {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  rawCurU = ADC1 -> JDR1;
 8002bd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	809a      	strh	r2, [r3, #4]
  rawCurW = ADC2 -> JDR1;
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <_ZN7SensCur9getRawCurEv+0x30>)
 8002be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	80da      	strh	r2, [r3, #6]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	50000100 	.word	0x50000100

08002c04 <_ZN7SensCur9sensCurINEv>:

void SensCur::sensCurIN() {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	ed2d 8b02 	vpush	{d8}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  getRawCur();
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffdd 	bl	8002bd0 <_ZN7SensCur9getRawCurEv>
  
  data->curU = ADC_TO_CUR(rawCurU, 0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	889b      	ldrh	r3, [r3, #4]
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f89d 	bl	8002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8002c9c <_ZN7SensCur9sensCurINEv+0x98>
 8002c32:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c36:	edc3 7a00 	vstr	s15, [r3]
  data->curW = ADC_TO_CUR(rawCurW, 0);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	88db      	ldrh	r3, [r3, #6]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f88b 	bl	8002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002c9c <_ZN7SensCur9sensCurINEv+0x98>
 8002c56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c5a:	edc3 7a02 	vstr	s15, [r3, #8]
  
  // V相電流はU相とW相の合計値の逆数
  data->curV = -data->curU - data->curW;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f880 	bl	8002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	eef1 8a67 	vneg.f32	s17, s15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f877 	bl	8002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	ed93 8a02 	vldr	s16, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f870 	bl	8002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8002c8c:	edc3 7a01 	vstr	s15, [r3, #4]
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	ecbd 8b02 	vpop	{d8}
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	3b840842 	.word	0x3b840842

08002ca0 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f867 	bl	8002d7e <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_ZN7SensCur11SensCurDataC1Ev>:
#define ADC_TO_CUR(U2_V, U2_OFFS) (((float)((int16_t)U2_V - (int16_t)U2_OFFS)) * ADGAIN) /* アンプからモータへの電流流し込みでプラス */


class SensCur {
public:
  struct SensCurData {
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002cf0:	200c      	movs	r0, #12
 8002cf2:	f009 f871 	bl	800bdd8 <_Znwj>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	6063      	str	r3, [r4, #4]
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	60a3      	str	r3, [r4, #8]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff ffd4 	bl	8002cba <_ZN7SensCur11SensCurDataC1Ev>
 8002d12:	4621      	mov	r1, r4
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f850 	bl	8002dba <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}

08002d22 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8002d22:	b590      	push	{r4, r7, lr}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f853 	bl	8002dd8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002d32:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f858 	bl	8002df2 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>
 8002d42:	4604      	mov	r4, r0
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f861 	bl	8002e0c <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4620      	mov	r0, r4
 8002d52:	f000 f866 	bl	8002e22 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>
	__ptr = pointer();
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
      }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return get();
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff96 	bl	8002ca0 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 8002d74:	4603      	mov	r3, r0
      }
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f85a 	bl	8002e42 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f856 	bl	8002e5c <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ffe6 	bl	8002d9a <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f84e 	bl	8002e84 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f84e 	bl	8002e9e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_+0x18>
 8002e32:	210c      	movs	r1, #12
 8002e34:	4618      	mov	r0, r3
 8002e36:	f008 ffcd 	bl	800bdd4 <_ZdlPvj>
      }
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f833 	bl	8002eb8 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f831 	bl	8002ed0 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffb2 	bl	8002dd8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002e74:	4602      	mov	r2, r0
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f82b 	bl	8002eea <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f82a 	bl	8002f02 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f82a 	bl	8002f1a <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f82a 	bl	8002f34 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f82e 	bl	8002f54 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f82f 	bl	8002f6e <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f82e 	bl	8002f86 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f82d 	bl	8002f9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f835 	bl	8002fb4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f836 	bl	8002fd0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f835 	bl	8002fe6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>:
      _Tuple_impl()
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f82a 	bl	8002ffe <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>:
      constexpr _Head_base()
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f810 	bl	8003014 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_ZN7SensCurD1Ev>:
class SensCur {
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fe74 	bl	8002d22 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_Z41__static_initialization_and_destruction_0ii>:
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800305a:	4293      	cmp	r3, r2
 800305c:	d102      	bne.n	8003064 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensCur senscur;
 800305e:	4809      	ldr	r0, [pc, #36]	@ (8003084 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003060:	f7ff fda2 	bl	8002ba8 <_ZN7SensCurC1Ev>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003076:	f7ff ffd8 	bl	800302a <_ZN7SensCurD1Ev>
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000040c 	.word	0x2000040c

08003088 <_GLOBAL__sub_I_senscur>:
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
 800308c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003090:	2001      	movs	r0, #1
 8003092:	f7ff ffd7 	bl	8003044 <_Z41__static_initialization_and_destruction_0ii>
 8003096:	bd80      	pop	{r7, pc}

08003098 <_GLOBAL__sub_D_senscur>:
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
 800309c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff ffcf 	bl	8003044 <_Z41__static_initialization_and_destruction_0ii>
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_MspInit+0x44>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <HAL_MspInit+0x44>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_MspInit+0x44>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_MspInit+0x44>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <HAL_MspInit+0x44>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_MspInit+0x44>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030de:	f006 fe7f 	bl	8009de0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0a0      	sub	sp, #128	@ 0x80
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	f107 0318 	add.w	r3, r7, #24
 800310c:	2254      	movs	r2, #84	@ 0x54
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f008 ff43 	bl	800bf9c <memset>
  if(hadc->Instance==ADC1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800311e:	d146      	bne.n	80031ae <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003126:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800312a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	4618      	mov	r0, r3
 8003132:	f007 fb5b 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800313c:	f7ff f8dc 	bl	80022f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003140:	4b42      	ldr	r3, [pc, #264]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a41      	ldr	r2, [pc, #260]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 8003148:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800314a:	4b40      	ldr	r3, [pc, #256]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10b      	bne.n	800316a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003156:	4a3e      	ldr	r2, [pc, #248]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003158:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800315c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800315e:	4b3c      	ldr	r3, [pc, #240]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b39      	ldr	r3, [pc, #228]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	4a38      	ldr	r2, [pc, #224]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003176:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003182:	2301      	movs	r3, #1
 8003184:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003186:	2303      	movs	r3, #3
 8003188:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003198:	f004 fbe2 	bl	8007960 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2012      	movs	r0, #18
 80031a2:	f003 fa3c 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80031a6:	2012      	movs	r0, #18
 80031a8:	f003 fa53 	bl	8006652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80031ac:	e04a      	b.n	8003244 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a28      	ldr	r2, [pc, #160]	@ (8003254 <HAL_ADC_MspInit+0x164>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d145      	bne.n	8003244 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80031b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80031be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f007 fb0f 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80031d4:	f7ff f890 	bl	80022f8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a1b      	ldr	r2, [pc, #108]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 80031e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_ADC_MspInit+0x15c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10b      	bne.n	8003202 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 80031f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_ADC_MspInit+0x160>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800321a:	23c2      	movs	r3, #194	@ 0xc2
 800321c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321e:	2303      	movs	r3, #3
 8003220:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800322a:	4619      	mov	r1, r3
 800322c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003230:	f004 fb96 	bl	8007960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	2012      	movs	r0, #18
 800323a:	f003 f9f0 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800323e:	2012      	movs	r0, #18
 8003240:	f003 fa07 	bl	8006652 <HAL_NVIC_EnableIRQ>
}
 8003244:	bf00      	nop
 8003246:	3780      	adds	r7, #128	@ 0x80
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000414 	.word	0x20000414
 8003250:	40021000 	.word	0x40021000
 8003254:	50000100 	.word	0x50000100

08003258 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_CORDIC_MspInit+0x38>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10b      	bne.n	8003282 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_CORDIC_MspInit+0x3c>)
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_CORDIC_MspInit+0x3c>)
 8003270:	f043 0308 	orr.w	r3, r3, #8
 8003274:	6493      	str	r3, [r2, #72]	@ 0x48
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_CORDIC_MspInit+0x3c>)
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b09e      	sub	sp, #120	@ 0x78
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	2254      	movs	r2, #84	@ 0x54
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f008 fe6f 	bl	800bf9c <memset>
  if(hfdcan->Instance==FDCAN1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003378 <HAL_FDCAN_MspInit+0xe0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d153      	bne.n	8003370 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80032c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80032ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	4618      	mov	r0, r3
 80032da:	f007 fa87 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80032e4:	f7ff f808 	bl	80022f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80032e8:	4b24      	ldr	r3, [pc, #144]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a23      	ldr	r2, [pc, #140]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 80032ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f4:	4b21      	ldr	r3, [pc, #132]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003300:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_FDCAN_MspInit+0xe4>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003318:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800331c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003322:	2301      	movs	r3, #1
 8003324:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003326:	2303      	movs	r3, #3
 8003328:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800332a:	2309      	movs	r3, #9
 800332c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003332:	4619      	mov	r1, r3
 8003334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003338:	f004 fb12 	bl	8007960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800333c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003340:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800334e:	2309      	movs	r3, #9
 8003350:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800335c:	f004 fb00 	bl	8007960 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2015      	movs	r0, #21
 8003366:	f003 f95a 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800336a:	2015      	movs	r0, #21
 800336c:	f003 f971 	bl	8006652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8003370:	bf00      	nop
 8003372:	3778      	adds	r7, #120	@ 0x78
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40006400 	.word	0x40006400
 800337c:	40021000 	.word	0x40021000

08003380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0a0      	sub	sp, #128	@ 0x80
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003398:	f107 0318 	add.w	r3, r7, #24
 800339c:	2254      	movs	r2, #84	@ 0x54
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f008 fdfb 	bl	800bf9c <memset>
  if(hi2c->Instance==I2C1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003528 <HAL_I2C_MspInit+0x1a8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	f040 80b6 	bne.w	800351e <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033b2:	2340      	movs	r3, #64	@ 0x40
 80033b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033b6:	2300      	movs	r3, #0
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	4618      	mov	r0, r3
 80033c0:	f007 fa14 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80033ca:	f7fe ff95 	bl	80022f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	4b57      	ldr	r3, [pc, #348]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	4a56      	ldr	r2, [pc, #344]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033da:	4b54      	ldr	r3, [pc, #336]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e6:	4b51      	ldr	r3, [pc, #324]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	4a50      	ldr	r2, [pc, #320]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f2:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003402:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003404:	2312      	movs	r3, #18
 8003406:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003410:	2304      	movs	r3, #4
 8003412:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800341e:	f004 fa9f 	bl	8007960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003426:	2312      	movs	r3, #18
 8003428:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003432:	2304      	movs	r3, #4
 8003434:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800343a:	4619      	mov	r1, r3
 800343c:	483c      	ldr	r0, [pc, #240]	@ (8003530 <HAL_I2C_MspInit+0x1b0>)
 800343e:	f004 fa8f 	bl	8007960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003442:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	4a39      	ldr	r2, [pc, #228]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 8003448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800344c:	6593      	str	r3, [r2, #88]	@ 0x58
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_I2C_MspInit+0x1ac>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800345a:	4b36      	ldr	r3, [pc, #216]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 800345c:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_I2C_MspInit+0x1b8>)
 800345e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003460:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003462:	2210      	movs	r2, #16
 8003464:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003466:	4b33      	ldr	r3, [pc, #204]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003472:	4b30      	ldr	r3, [pc, #192]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003478:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347e:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003490:	4828      	ldr	r0, [pc, #160]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 8003492:	f003 f8f9 	bl	8006688 <HAL_DMA_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 800349c:	f7fe ff2c 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a24      	ldr	r2, [pc, #144]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 80034a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034a6:	4a23      	ldr	r2, [pc, #140]	@ (8003534 <HAL_I2C_MspInit+0x1b4>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80034ac:	4b23      	ldr	r3, [pc, #140]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034ae:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_I2C_MspInit+0x1c0>)
 80034b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80034b2:	4b22      	ldr	r3, [pc, #136]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034b4:	2211      	movs	r2, #17
 80034b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b8:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034ba:	2210      	movs	r2, #16
 80034bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034be:	4b1f      	ldr	r3, [pc, #124]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c4:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ca:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034d6:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034e2:	4816      	ldr	r0, [pc, #88]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034e4:	f003 f8d0 	bl	8006688 <HAL_DMA_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80034ee:	f7fe ff03 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a11      	ldr	r2, [pc, #68]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034f8:	4a10      	ldr	r2, [pc, #64]	@ (800353c <HAL_I2C_MspInit+0x1bc>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	201f      	movs	r0, #31
 8003504:	f003 f88b 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003508:	201f      	movs	r0, #31
 800350a:	f003 f8a2 	bl	8006652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2020      	movs	r0, #32
 8003514:	f003 f883 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003518:	2020      	movs	r0, #32
 800351a:	f003 f89a 	bl	8006652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800351e:	bf00      	nop
 8003520:	3780      	adds	r7, #128	@ 0x80
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40005400 	.word	0x40005400
 800352c:	40021000 	.word	0x40021000
 8003530:	48000400 	.word	0x48000400
 8003534:	20000248 	.word	0x20000248
 8003538:	40020008 	.word	0x40020008
 800353c:	200002a8 	.word	0x200002a8
 8003540:	4002001c 	.word	0x4002001c

08003544 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <HAL_TIM_PWM_MspInit+0x38>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10b      	bne.n	800356e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_TIM_PWM_MspInit+0x3c>)
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_TIM_PWM_MspInit+0x3c>)
 800355c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003560:	6613      	str	r3, [r2, #96]	@ 0x60
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <HAL_TIM_PWM_MspInit+0x3c>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003620 <HAL_TIM_MspPostInit+0x9c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d138      	bne.n	8003618 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ca:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <HAL_TIM_MspPostInit+0xa0>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035d6:	2307      	movs	r3, #7
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80035e6:	2302      	movs	r3, #2
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	480d      	ldr	r0, [pc, #52]	@ (8003628 <HAL_TIM_MspPostInit+0xa4>)
 80035f2:	f004 f9b5 	bl	8007960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80035f6:	f242 0303 	movw	r3, #8195	@ 0x2003
 80035fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003608:	2306      	movs	r3, #6
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4806      	ldr	r0, [pc, #24]	@ (800362c <HAL_TIM_MspPostInit+0xa8>)
 8003614:	f004 f9a4 	bl	8007960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40021000 	.word	0x40021000
 8003628:	48000800 	.word	0x48000800
 800362c:	48000400 	.word	0x48000400

08003630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <NMI_Handler+0x4>

08003638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <HardFault_Handler+0x4>

08003640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <MemManage_Handler+0x4>

08003648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <BusFault_Handler+0x4>

08003650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <UsageFault_Handler+0x4>

08003658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003686:	f000 fde9 	bl	800425c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003694:	4802      	ldr	r0, [pc, #8]	@ (80036a0 <DMA1_Channel1_IRQHandler+0x10>)
 8003696:	f003 f981 	bl	800699c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000248 	.word	0x20000248

080036a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80036a8:	4802      	ldr	r0, [pc, #8]	@ (80036b4 <DMA1_Channel2_IRQHandler+0x10>)
 80036aa:	f003 f977 	bl	800699c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200002a8 	.word	0x200002a8

080036b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80036bc:	4803      	ldr	r0, [pc, #12]	@ (80036cc <ADC1_2_IRQHandler+0x14>)
 80036be:	f001 f9c5 	bl	8004a4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80036c2:	4803      	ldr	r0, [pc, #12]	@ (80036d0 <ADC1_2_IRQHandler+0x18>)
 80036c4:	f001 f9c2 	bl	8004a4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000090 	.word	0x20000090
 80036d0:	200000fc 	.word	0x200000fc

080036d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80036da:	f003 fecb 	bl	8007474 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000190 	.word	0x20000190

080036e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036ec:	4802      	ldr	r0, [pc, #8]	@ (80036f8 <I2C1_EV_IRQHandler+0x10>)
 80036ee:	f004 fd93 	bl	8008218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200001f4 	.word	0x200001f4

080036fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003700:	4802      	ldr	r0, [pc, #8]	@ (800370c <I2C1_ER_IRQHandler+0x10>)
 8003702:	f004 fda3 	bl	800824c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200001f4 	.word	0x200001f4

08003710 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003714:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003718:	f004 fabc 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return 1;
 8003724:	2301      	movs	r3, #1
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_kill>:

int _kill(int pid, int sig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800373a:	f008 fc8b 	bl	800c054 <__errno>
 800373e:	4603      	mov	r3, r0
 8003740:	2216      	movs	r2, #22
 8003742:	601a      	str	r2, [r3, #0]
  return -1;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_exit>:

void _exit (int status)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003758:	f04f 31ff 	mov.w	r1, #4294967295
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffe7 	bl	8003730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <_exit+0x12>
	...

08003768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003770:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <_sbrk+0x5c>)
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <_sbrk+0x60>)
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <_sbrk+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003784:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <_sbrk+0x64>)
 8003786:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <_sbrk+0x68>)
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <_sbrk+0x64>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d207      	bcs.n	80037a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003798:	f008 fc5c 	bl	800c054 <__errno>
 800379c:	4603      	mov	r3, r0
 800379e:	220c      	movs	r2, #12
 80037a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	e009      	b.n	80037bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ae:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <_sbrk+0x64>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <_sbrk+0x64>)
 80037b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20020000 	.word	0x20020000
 80037c8:	00000400 	.word	0x00000400
 80037cc:	20000418 	.word	0x20000418
 80037d0:	20000578 	.word	0x20000578

080037d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <SystemInit+0x20>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <SystemInit+0x20>)
 80037e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4619      	mov	r1, r3
 800383a:	4817      	ldr	r0, [pc, #92]	@ (8003898 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 800383c:	f7ff ffdc 	bl	80037f8 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8003840:	4815      	ldr	r0, [pc, #84]	@ (8003898 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8003842:	f7ff ffe7 	bl	8003814 <LL_CORDIC_ReadData>
 8003846:	4603      	mov	r3, r0
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f88f 	bl	800396c <_ZN10Acrocantho6Cordic8from_q31Em>
 800384e:	eef0 7a40 	vmov.f32	s15, s0
 8003852:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 8003856:	4810      	ldr	r0, [pc, #64]	@ (8003898 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8003858:	f7ff ffdc 	bl	8003814 <LL_CORDIC_ReadData>
 800385c:	4603      	mov	r3, r0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f884 	bl	800396c <_ZN10Acrocantho6Cordic8from_q31Em>
 8003864:	eef0 7a40 	vmov.f32	s15, s0
 8003868:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 800386c:	f107 0318 	add.w	r3, r7, #24
 8003870:	f107 0210 	add.w	r2, r7, #16
 8003874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003878:	e883 0003 	stmia.w	r3, {r0, r1}
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	ee07 2a10 	vmov	s14, r2
 8003884:	ee07 3a90 	vmov	s15, r3
  };
 8003888:	eeb0 0a47 	vmov.f32	s0, s14
 800388c:	eef0 0a67 	vmov.f32	s1, s15
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40020c00 	.word	0x40020c00

0800389c <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 80038ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038b0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8003964 <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 80038b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b8:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 80038bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80038c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c4:	ee17 3a90 	vmov	r3, s15
 80038c8:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80038d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038dc:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 80038e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	d507      	bpl.n	80038fe <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 80038ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038fa:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 80038fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003902:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	dd06      	ble.n	800391e <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8003910:	edd7 7a06 	vldr	s15, [r7, #24]
 8003914:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800391c:	e001      	b.n	8003922 <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 800391e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003922:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003968 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 8003926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800392a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 800392e:	ee17 1a90 	vmov	r1, s15
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff ff7a 	bl	800382c <_ZNK10Acrocantho6CordicclEl>
 8003938:	eeb0 7a40 	vmov.f32	s14, s0
 800393c:	eef0 7a60 	vmov.f32	s15, s1
 8003940:	ed87 7a04 	vstr	s14, [r7, #16]
 8003944:	edc7 7a05 	vstr	s15, [r7, #20]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	ee07 2a10 	vmov	s14, r2
 8003950:	ee07 3a90 	vmov	s15, r3
  }
 8003954:	eeb0 0a47 	vmov.f32	s0, s14
 8003958:	eef0 0a67 	vmov.f32	s1, s15
 800395c:	3728      	adds	r7, #40	@ 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40c90fdb 	.word	0x40c90fdb
 8003968:	4f800000 	.word	0x4f800000

0800396c <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003994 <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 8003982:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8003986:	eeb0 0a67 	vmov.f32	s0, s15
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	30000000 	.word	0x30000000

08003998 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>:
};
struct TrigonTransform {
  /* f4t_trigon1 : V_d*cos - V_q*sin */
  /* f4t_trigon2 : V_d*sin + V_q*cos */
  TrigonTransform(const SinCos& sc, float vd, float vq)
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80039a6:	edc7 0a00 	vstr	s1, [r7]
    : _trigon1(sc.c * vd - sc.s * vq),
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80039b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	edd3 6a00 	vldr	s13, [r3]
 80039be:	edd7 7a00 	vldr	s15, [r7]
 80039c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	edc3 7a00 	vstr	s15, [r3]
      _trigon2(sc.s * vd + sc.c * vq) {}
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	ed93 7a00 	vldr	s14, [r3]
 80039d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80039e4:	edd7 7a00 	vldr	s15, [r7]
 80039e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_ZN10Acrocantho18InverseDqTransformC1Eff>:
  const float _trigon1;
  const float _trigon2;
};

struct InverseDqTransform {
  InverseDqTransform(float _tri1, float _tri2)
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a10:	edc7 0a01 	vstr	s1, [r7, #4]
      : u_ini(_tri1 * usersqrt1),
 8003a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a18:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003a7c <_ZN10Acrocantho18InverseDqTransformC1Eff+0x78>
 8003a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	edc3 7a00 	vstr	s15, [r3]
        v_ini(-(_tri1 * usersqrt3) + _tri2 * usersqrt2),
 8003a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a2a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003a80 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8003a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a36:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003a84 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8003a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	edc3 7a01 	vstr	s15, [r3, #4]
        w_ini(-(_tri1 * usersqrt3) - _tri2 * usersqrt2) {}
 8003a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003a84 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8003a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a54:	eeb1 7a67 	vneg.f32	s14, s15
 8003a58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003a80 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8003a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	edc3 7a02 	vstr	s15, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	3f5105eb 	.word	0x3f5105eb
 8003a80:	3f3504f3 	.word	0x3f3504f3
 8003a84:	3ed105eb 	.word	0x3ed105eb

08003a88 <_ZNK3Ang10getAngDataEv>:
  void elecAngleIn();
  void i2cMasterTxCallback();
  void i2cMasterRxCallback();
  void prepareCanData(uint8_t* buffer, size_t bufferSize) const;
  
  AngData* getAngData() const { return data.get(); }
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fb39 	bl	800110a <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_ZN6CanCom7getDataEv>:
  void rxFifo0Callback(uint32_t RxFifo0ITs);
  void handleRxData();
  void rxTask();
  void txTask();

  CanData* getData() { return data.get(); }
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fe25 	bl	80016fc <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZN8UserTaskC1Ev>:
extern SensCur senscur;
extern OutPwm outpwm;
extern CanCom cancom;
extern ModeControl modecontrol;

UserTask::UserTask()
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  : count(0), data(std::make_unique<UserTaskData>()){}
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9ad 	bl	8003e26 <_ZSt11make_uniqueIN8UserTask12UserTaskDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	711a      	strb	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	715a      	strb	r2, [r3, #5]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	719a      	strb	r2, [r3, #6]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZN8UserTask10cyclicTaskEv>:


void UserTask::cyclicTask() {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = STEP00;

   switch (seqID) {
 8003af0:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <_ZN8UserTask10cyclicTaskEv+0xf0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b0d      	cmp	r3, #13
 8003af6:	d028      	beq.n	8003b4a <_ZN8UserTask10cyclicTaskEv+0x62>
 8003af8:	2b0d      	cmp	r3, #13
 8003afa:	dc65      	bgt.n	8003bc8 <_ZN8UserTask10cyclicTaskEv+0xe0>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d046      	beq.n	8003b8e <_ZN8UserTask10cyclicTaskEv+0xa6>
 8003b00:	2b0b      	cmp	r3, #11
 8003b02:	d161      	bne.n	8003bc8 <_ZN8UserTask10cyclicTaskEv+0xe0>
    case LOOP:

      // 強制停止
      if (!servoCheck()) {
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f94b 	bl	8003da0 <_ZN8UserTask10servoCheckEv>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f083 0301 	eor.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <_ZN8UserTask10cyclicTaskEv+0x3c>
        outpwm.Poff();
 8003b16:	4831      	ldr	r0, [pc, #196]	@ (8003bdc <_ZN8UserTask10cyclicTaskEv+0xf4>)
 8003b18:	f7fe fdea 	bl	80026f0 <_ZN6OutPwm4PoffEv>
        seqID = STEP00;
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd8 <_ZN8UserTask10cyclicTaskEv+0xf0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
        break;
 8003b22:	e055      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>
      }

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003b24:	2201      	movs	r2, #1
 8003b26:	2120      	movs	r1, #32
 8003b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b2c:	f004 f89a 	bl	8007c64 <HAL_GPIO_WritePin>
      ang.getAngle();
 8003b30:	482b      	ldr	r0, [pc, #172]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b32:	f7fd f87d 	bl	8000c30 <_ZN3Ang8getAngleEv>
      ang.getVel();
 8003b36:	482a      	ldr	r0, [pc, #168]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b38:	f7fd f8cd 	bl	8000cd6 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 8003b3c:	4828      	ldr	r0, [pc, #160]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b3e:	f7fd fa53 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      motorControl();
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f870 	bl	8003c28 <_ZN8UserTask12motorControlEv>

      break;
 8003b48:	e042      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>
    case INIT:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	791b      	ldrb	r3, [r3, #4]
 8003b4e:	2b09      	cmp	r3, #9
 8003b50:	d809      	bhi.n	8003b66 <_ZN8UserTask10cyclicTaskEv+0x7e>
        ang.getAngle();
 8003b52:	4823      	ldr	r0, [pc, #140]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b54:	f7fd f86c 	bl	8000c30 <_ZN3Ang8getAngleEv>
        count++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	791b      	ldrb	r3, [r3, #4]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
        senscur.sensCurIN();
        count = 0;
        seqID = STEP00;
      }
      break;
 8003b64:	e034      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>
        ang.getAngle();
 8003b66:	481e      	ldr	r0, [pc, #120]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b68:	f7fd f862 	bl	8000c30 <_ZN3Ang8getAngleEv>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b76:	f004 f875 	bl	8007c64 <HAL_GPIO_WritePin>
        senscur.sensCurIN();
 8003b7a:	481a      	ldr	r0, [pc, #104]	@ (8003be4 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003b7c:	f7ff f842 	bl	8002c04 <_ZN7SensCur9sensCurINEv>
        count = 0;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	711a      	strb	r2, [r3, #4]
        seqID = STEP00;
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <_ZN8UserTask10cyclicTaskEv+0xf0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
      break;
 8003b8c:	e020      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>
    case STEP00:
      ang.getAngle();
 8003b8e:	4814      	ldr	r0, [pc, #80]	@ (8003be0 <_ZN8UserTask10cyclicTaskEv+0xf8>)
 8003b90:	f7fd f84e 	bl	8000c30 <_ZN3Ang8getAngleEv>
      if (servoCheck()){
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f903 	bl	8003da0 <_ZN8UserTask10servoCheckEv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <_ZN8UserTask10cyclicTaskEv+0xc6>
        outpwm.Pon();
 8003ba0:	480e      	ldr	r0, [pc, #56]	@ (8003bdc <_ZN8UserTask10cyclicTaskEv+0xf4>)
 8003ba2:	f7fe fd93 	bl	80026cc <_ZN6OutPwm3PonEv>
        seqID = LOOP;
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <_ZN8UserTask10cyclicTaskEv+0xf0>)
 8003ba8:	220b      	movs	r2, #11
 8003baa:	701a      	strb	r2, [r3, #0]
        break;
 8003bac:	e010      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>
      }
      senscur.sensCurIN();
 8003bae:	480d      	ldr	r0, [pc, #52]	@ (8003be4 <_ZN8UserTask10cyclicTaskEv+0xfc>)
 8003bb0:	f7ff f828 	bl	8002c04 <_ZN7SensCur9sensCurINEv>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bbc:	f004 f852 	bl	8007c64 <HAL_GPIO_WritePin>
      outpwm.Poff();
 8003bc0:	4806      	ldr	r0, [pc, #24]	@ (8003bdc <_ZN8UserTask10cyclicTaskEv+0xf4>)
 8003bc2:	f7fe fd95 	bl	80026f0 <_ZN6OutPwm4PoffEv>
      break;
 8003bc6:	e003      	b.n	8003bd0 <_ZN8UserTask10cyclicTaskEv+0xe8>

    default:
      seqID = INIT;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <_ZN8UserTask10cyclicTaskEv+0xf0>)
 8003bca:	220d      	movs	r2, #13
 8003bcc:	701a      	strb	r2, [r3, #0]
      break;
 8003bce:	bf00      	nop
    }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000424 	.word	0x20000424
 8003bdc:	200003f4 	.word	0x200003f4
 8003be0:	200003bc 	.word	0x200003bc
 8003be4:	2000040c 	.word	0x2000040c

08003be8 <_ZN8UserTask8idleTaskEv>:

void UserTask::idleTask() {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  cancom.rxTask();
 8003bf0:	480c      	ldr	r0, [pc, #48]	@ (8003c24 <_ZN8UserTask8idleTaskEv+0x3c>)
 8003bf2:	f7fd fd2b 	bl	800164c <_ZN6CanCom6rxTaskEv>
  setRef();
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f88c 	bl	8003d14 <_ZN8UserTask6setRefEv>

  cancom.initTxHeader(0x01, false, false);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2101      	movs	r1, #1
 8003c02:	4808      	ldr	r0, [pc, #32]	@ (8003c24 <_ZN8UserTask8idleTaskEv+0x3c>)
 8003c04:	f7fd fc2b 	bl	800145e <_ZN6CanCom12initTxHeaderEmbb>
  cancom.txTask();
 8003c08:	4806      	ldr	r0, [pc, #24]	@ (8003c24 <_ZN8UserTask8idleTaskEv+0x3c>)
 8003c0a:	f7fd fd3d 	bl	8001688 <_ZN6CanCom6txTaskEv>
  servocheck = servoCheck();
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8c6 	bl	8003da0 <_ZN8UserTask10servoCheckEv>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	715a      	strb	r2, [r3, #5]
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000354 	.word	0x20000354

08003c28 <_ZN8UserTask12motorControlEv>:

void UserTask::motorControl() {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	ed2d 8b02 	vpush	{d8}
 8003c2e:	b08e      	sub	sp, #56	@ 0x38
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 8003c34:	4833      	ldr	r0, [pc, #204]	@ (8003d04 <_ZN8UserTask12motorControlEv+0xdc>)
 8003c36:	f7ff ff27 	bl	8003a88 <_ZNK3Ang10getAngDataEv>
 8003c3a:	6378      	str	r0, [r7, #52]	@ 0x34
  Acrocantho::Cordic cordic;
 8003c3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd fecb 	bl	80019dc <_ZN10Acrocantho6CordicC1Ev>

  // drvMdNONEのとき電圧を0にする
  modecontrol.modeCtrl(data->drvMdRef);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f928 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	4619      	mov	r1, r3
 8003c54:	482c      	ldr	r0, [pc, #176]	@ (8003d08 <_ZN8UserTask12motorControlEv+0xe0>)
 8003c56:	f7fe fcc9 	bl	80025ec <_ZN11ModeControl8modeCtrlEh>
  
  senscur.sensCurIN();
 8003c5a:	482c      	ldr	r0, [pc, #176]	@ (8003d0c <_ZN8UserTask12motorControlEv+0xe4>)
 8003c5c:	f7fe ffd2 	bl	8002c04 <_ZN7SensCur9sensCurINEv>
  
  // SinCos演算
  Acrocantho::SinCos result = cordic.radians(angdata->elecAng);
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fe14 	bl	800389c <_ZNK10Acrocantho6Cordic7radiansEf>
 8003c74:	eeb0 7a40 	vmov.f32	s14, s0
 8003c78:	eef0 7a60 	vmov.f32	s15, s1
 8003c7c:	ed87 7a08 	vstr	s14, [r7, #32]
 8003c80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float s = result.s;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
  float c = result.c;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  // dq逆変換
  Acrocantho::TrigonTransform tt(result, data->voltDRef, data->voltQRef);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f905 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003c94:	4603      	mov	r3, r0
 8003c96:	ed93 8a01 	vldr	s16, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f8fe 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ca8:	f107 0220 	add.w	r2, r7, #32
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	eef0 0a67 	vmov.f32	s1, s15
 8003cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fe6c 	bl	8003998 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>
  Acrocantho::InverseDqTransform idt(tt._trigon1, tt._trigon2);
 8003cc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	eef0 0a47 	vmov.f32	s1, s14
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fe95 	bl	8003a04 <_ZN10Acrocantho18InverseDqTransformC1Eff>
  
  outpwm.setReg(idt.u_ini, idt.v_ini, idt.w_ini);
 8003cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cde:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ce2:	edd7 6a05 	vldr	s13, [r7, #20]
 8003ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8003cea:	eef0 0a47 	vmov.f32	s1, s14
 8003cee:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf2:	4807      	ldr	r0, [pc, #28]	@ (8003d10 <_ZN8UserTask12motorControlEv+0xe8>)
 8003cf4:	f7fe fd12 	bl	800271c <_ZN6OutPwm6setRegEfff>
}
 8003cf8:	bf00      	nop
 8003cfa:	3738      	adds	r7, #56	@ 0x38
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	ecbd 8b02 	vpop	{d8}
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200003bc 	.word	0x200003bc
 8003d08:	200003f0 	.word	0x200003f0
 8003d0c:	2000040c 	.word	0x2000040c
 8003d10:	200003f4 	.word	0x200003f4

08003d14 <_ZN8UserTask6setRefEv>:

// Canで受け取った指令値のセット
void UserTask::setRef() {
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8003d1c:	481f      	ldr	r0, [pc, #124]	@ (8003d9c <_ZN8UserTask6setRefEv+0x88>)
 8003d1e:	f7ff fec0 	bl	8003aa2 <_ZN6CanCom7getDataEv>
 8003d22:	60f8      	str	r0, [r7, #12]
  
  data->genFuncRef = candata->genFuncRef;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f8b9 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	7013      	strb	r3, [r2, #0]
  data->drvMdRef = candata->drvMdRef;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f8b1 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	7053      	strb	r3, [r2, #1]
  data->voltDRef = static_cast<float>(candata->voltDRef);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	789c      	ldrb	r4, [r3, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f8a7 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d50:	4603      	mov	r3, r0
 8003d52:	ee07 4a90 	vmov	s15, r4
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
  data->voltQRef = static_cast<float>(candata->voltQRef);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	78dc      	ldrb	r4, [r3, #3]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f89a 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	ee07 4a90 	vmov	s15, r4
 8003d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d74:	edc3 7a02 	vstr	s15, [r3, #8]
  data->virAngFreq = static_cast<float>(candata->virAngFreq);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	791c      	ldrb	r4, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f88d 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003d84:	4603      	mov	r3, r0
 8003d86:	ee07 4a90 	vmov	s15, r4
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	edc3 7a03 	vstr	s15, [r3, #12]
  
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000354 	.word	0x20000354

08003da0 <_ZN8UserTask10servoCheckEv>:

// Poffのみfalseを返す
bool UserTask::servoCheck() {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  switch (data->genFuncRef) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f877 	bl	8003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>
 8003db0:	4603      	mov	r3, r0
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <_ZN8UserTask10servoCheckEv+0x1e>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <_ZN8UserTask10servoCheckEv+0x22>
 8003dbc:	e003      	b.n	8003dc6 <_ZN8UserTask10servoCheckEv+0x26>
    case 0x00:
      return false;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e002      	b.n	8003dc8 <_ZN8UserTask10servoCheckEv+0x28>
    case 0x01:
      return true;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <_ZN8UserTask10servoCheckEv+0x28>
    default:
      return false;
 8003dc6:	2300      	movs	r3, #0
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  usertask.cyclicTask();
 8003dd8:	4803      	ldr	r0, [pc, #12]	@ (8003de8 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 8003dda:	f7ff fe85 	bl	8003ae8 <_ZN8UserTask10cyclicTaskEv>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	2000041c 	.word	0x2000041c

08003dec <_ZN8UserTask12UserTaskDataC1Ev>:
  struct UserTaskData {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	705a      	strb	r2, [r3, #1]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZSt11make_uniqueIN8UserTask12UserTaskDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003e26:	b590      	push	{r4, r7, lr}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003e2e:	2010      	movs	r0, #16
 8003e30:	f007 ffd2 	bl	800bdd8 <_Znwj>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461c      	mov	r4, r3
 8003e38:	4622      	mov	r2, r4
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	6053      	str	r3, [r2, #4]
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	60d3      	str	r3, [r2, #12]
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff ffd1 	bl	8003dec <_ZN8UserTask12UserTaskDataC1Ev>
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f842 	bl	8003ed6 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}

08003e5a <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f845 	bl	8003ef4 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003e6a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00c      	beq.n	8003e8e <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f84a 	bl	8003f0e <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE11get_deleterEv>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f853 	bl	8003f28 <_ZSt4moveIRPN8UserTask12UserTaskDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003e82:	4603      	mov	r3, r0
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f000 f858 	bl	8003f3e <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_>
	__ptr = pointer();
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
      }
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd90      	pop	{r4, r7, pc}

08003e9e <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
	return get();
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f922 	bl	80010f0 <_ZNKSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE3getEv>
 8003eac:	4603      	mov	r3, r0
      }
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_ZNSt15__uniq_ptr_dataIN8UserTask12UserTaskDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f849 	bl	8003f5e <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1EPS1_>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ffe6 	bl	8003eb6 <_ZNSt15__uniq_ptr_dataIN8UserTask12UserTaskDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f841 	bl	8003f86 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f841 	bl	8003fa0 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE10_M_deleterEv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZSt4moveIRPN8UserTask12UserTaskDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <_ZNKSt14default_deleteIN8UserTask12UserTaskDataEEclEPS1_+0x18>
 8003f4e:	2110      	movs	r1, #16
 8003f50:	4618      	mov	r0, r3
 8003f52:	f007 ff3f 	bl	800bdd4 <_ZdlPvj>
      }
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f825 	bl	8003fba <_ZNSt5tupleIJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ffbf 	bl	8003ef4 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_ZSt3getILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f81f 	bl	8003fd4 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_ZNSt15__uniq_ptr_implIN8UserTask12UserTaskDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f81e 	bl	8003fec <_ZSt3getILj1EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_ZNSt5tupleIJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f81d 	bl	8004004 <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1Ev>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <_ZSt12__get_helperILj0EPN8UserTask12UserTaskDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f821 	bl	8004024 <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZSt3getILj1EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f822 	bl	800403e <_ZSt12__get_helperILj1ESt14default_deleteIN8UserTask12UserTaskDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f822 	bl	8004056 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEEC1Ev>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f82a 	bl	800406e <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EEC1Ev>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <_ZNSt11_Tuple_implILj0EJPN8UserTask12UserTaskDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f82b 	bl	800408a <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERS3_>
 8004034:	4603      	mov	r3, r0
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZSt12__get_helperILj1ESt14default_deleteIN8UserTask12UserTaskDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f82a 	bl	80040a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEE7_M_headERS4_>
 800404c:	4603      	mov	r3, r0
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEEC1Ev>:
      _Tuple_impl()
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f82a 	bl	80040b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EEC1Ev>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EEC1Ev>:
      constexpr _Head_base()
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZNSt10_Head_baseILj0EPN8UserTask12UserTaskDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN8UserTask12UserTaskDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f810 	bl	80040ce <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EE7_M_headERS4_>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <_ZNSt10_Head_baseILj1ESt14default_deleteIN8UserTask12UserTaskDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZN8UserTaskD1Ev>:
class UserTask {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff feb3 	bl	8003e5a <_ZNSt10unique_ptrIN8UserTask12UserTaskDataESt14default_deleteIS1_EED1Ev>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <_Z41__static_initialization_and_destruction_0ii>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d107      	bne.n	8004120 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004116:	4293      	cmp	r3, r2
 8004118:	d102      	bne.n	8004120 <_Z41__static_initialization_and_destruction_0ii+0x20>
UserTask usertask;
 800411a:	4809      	ldr	r0, [pc, #36]	@ (8004140 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800411c:	f7ff fcce 	bl	8003abc <_ZN8UserTaskC1Ev>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d107      	bne.n	8004136 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800412c:	4293      	cmp	r3, r2
 800412e:	d102      	bne.n	8004136 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004130:	4803      	ldr	r0, [pc, #12]	@ (8004140 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004132:	f7ff ffd7 	bl	80040e4 <_ZN8UserTaskD1Ev>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000041c 	.word	0x2000041c

08004144 <_GLOBAL__sub_I_usertask>:
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
 8004148:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800414c:	2001      	movs	r0, #1
 800414e:	f7ff ffd7 	bl	8004100 <_Z41__static_initialization_and_destruction_0ii>
 8004152:	bd80      	pop	{r7, pc}

08004154 <_GLOBAL__sub_D_usertask>:
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
 8004158:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800415c:	2000      	movs	r0, #0
 800415e:	f7ff ffcf 	bl	8004100 <_Z41__static_initialization_and_destruction_0ii>
 8004162:	bd80      	pop	{r7, pc}

08004164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004164:	480d      	ldr	r0, [pc, #52]	@ (800419c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004166:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004168:	f7ff fb34 	bl	80037d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800416c:	480c      	ldr	r0, [pc, #48]	@ (80041a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800416e:	490d      	ldr	r1, [pc, #52]	@ (80041a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004170:	4a0d      	ldr	r2, [pc, #52]	@ (80041a8 <LoopForever+0xe>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004174:	e002      	b.n	800417c <LoopCopyDataInit>

08004176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417a:	3304      	adds	r3, #4

0800417c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800417c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004180:	d3f9      	bcc.n	8004176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004182:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004184:	4c0a      	ldr	r4, [pc, #40]	@ (80041b0 <LoopForever+0x16>)
  movs r3, #0
 8004186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004188:	e001      	b.n	800418e <LoopFillZerobss>

0800418a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800418c:	3204      	adds	r2, #4

0800418e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004190:	d3fb      	bcc.n	800418a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004192:	f007 ff65 	bl	800c060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004196:	f7fd fc49 	bl	8001a2c <main>

0800419a <LoopForever>:

LoopForever:
    b LoopForever
 800419a:	e7fe      	b.n	800419a <LoopForever>
  ldr   r0, =_estack
 800419c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80041a8:	0800c1a4 	.word	0x0800c1a4
  ldr r2, =_sbss
 80041ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80041b0:	20000578 	.word	0x20000578

080041b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041b4:	e7fe      	b.n	80041b4 <ADC3_IRQHandler>

080041b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c0:	2003      	movs	r0, #3
 80041c2:	f002 fa21 	bl	8006608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041c6:	2000      	movs	r0, #0
 80041c8:	f000 f80e 	bl	80041e8 <HAL_InitTick>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	71fb      	strb	r3, [r7, #7]
 80041d6:	e001      	b.n	80041dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041d8:	f7fe ff66 	bl	80030a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041dc:	79fb      	ldrb	r3, [r7, #7]

}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80041f4:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <HAL_InitTick+0x68>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d022      	beq.n	8004242 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041fc:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_InitTick+0x6c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_InitTick+0x68>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004208:	fbb1 f3f3 	udiv	r3, r1, r3
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	4618      	mov	r0, r3
 8004212:	f002 fa2c 	bl	800666e <HAL_SYSTICK_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	d809      	bhi.n	8004236 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004222:	2200      	movs	r2, #0
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	f002 f9f8 	bl	800661e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <HAL_InitTick+0x70>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e007      	b.n	8004246 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e004      	b.n	8004246 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e001      	b.n	8004246 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000010 	.word	0x20000010
 8004254:	20000008 	.word	0x20000008
 8004258:	2000000c 	.word	0x2000000c

0800425c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_IncTick+0x1c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_IncTick+0x20>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4413      	add	r3, r2
 800426a:	4a03      	ldr	r2, [pc, #12]	@ (8004278 <HAL_IncTick+0x1c>)
 800426c:	6013      	str	r3, [r2, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000428 	.word	0x20000428
 800427c:	20000010 	.word	0x20000010

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000428 	.word	0x20000428

08004298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 031f 	and.w	r3, r3, #31
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800436e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6093      	str	r3, [r2, #8]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004396:	d101      	bne.n	800439c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e6:	d101      	bne.n	80043ec <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800440a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004432:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <LL_ADC_IsEnabled+0x18>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_ADC_IsEnabled+0x1a>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d101      	bne.n	8004488 <LL_ADC_IsDisableOngoing+0x18>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <LL_ADC_IsDisableOngoing+0x1a>
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044aa:	f043 0204 	orr.w	r2, r3, #4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d101      	bne.n	80044d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d101      	bne.n	80044fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b089      	sub	sp, #36	@ 0x24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e1a9      	b.n	800487a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fe fddb 	bl	80030f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff18 	bl	8004382 <LL_ADC_IsDeepPowerDownEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fefe 	bl	800435e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff33 	bl	80043d2 <LL_ADC_IsInternalRegulatorEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d115      	bne.n	800459e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff17 	bl	80043aa <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800457c:	4b9c      	ldr	r3, [pc, #624]	@ (80047f0 <HAL_ADC_Init+0x2e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	4a9c      	ldr	r2, [pc, #624]	@ (80047f4 <HAL_ADC_Init+0x2e8>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	099b      	lsrs	r3, r3, #6
 800458a:	3301      	adds	r3, #1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004590:	e002      	b.n	8004598 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b01      	subs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f9      	bne.n	8004592 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff15 	bl	80043d2 <LL_ADC_IsInternalRegulatorEnabled>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	f043 0210 	orr.w	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff75 	bl	80044be <LL_ADC_REG_IsConversionOngoing>
 80045d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 8142 	bne.w	8004868 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 813e 	bne.w	8004868 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045f4:	f043 0202 	orr.w	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff22 	bl	800444a <LL_ADC_IsEnabled>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d141      	bne.n	8004690 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004614:	d004      	beq.n	8004620 <HAL_ADC_Init+0x114>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a77      	ldr	r2, [pc, #476]	@ (80047f8 <HAL_ADC_Init+0x2ec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10f      	bne.n	8004640 <HAL_ADC_Init+0x134>
 8004620:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004624:	f7ff ff11 	bl	800444a <LL_ADC_IsEnabled>
 8004628:	4604      	mov	r4, r0
 800462a:	4873      	ldr	r0, [pc, #460]	@ (80047f8 <HAL_ADC_Init+0x2ec>)
 800462c:	f7ff ff0d 	bl	800444a <LL_ADC_IsEnabled>
 8004630:	4603      	mov	r3, r0
 8004632:	4323      	orrs	r3, r4
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e012      	b.n	8004666 <HAL_ADC_Init+0x15a>
 8004640:	486e      	ldr	r0, [pc, #440]	@ (80047fc <HAL_ADC_Init+0x2f0>)
 8004642:	f7ff ff02 	bl	800444a <LL_ADC_IsEnabled>
 8004646:	4604      	mov	r4, r0
 8004648:	486d      	ldr	r0, [pc, #436]	@ (8004800 <HAL_ADC_Init+0x2f4>)
 800464a:	f7ff fefe 	bl	800444a <LL_ADC_IsEnabled>
 800464e:	4603      	mov	r3, r0
 8004650:	431c      	orrs	r4, r3
 8004652:	486c      	ldr	r0, [pc, #432]	@ (8004804 <HAL_ADC_Init+0x2f8>)
 8004654:	f7ff fef9 	bl	800444a <LL_ADC_IsEnabled>
 8004658:	4603      	mov	r3, r0
 800465a:	4323      	orrs	r3, r4
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004672:	d004      	beq.n	800467e <HAL_ADC_Init+0x172>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5f      	ldr	r2, [pc, #380]	@ (80047f8 <HAL_ADC_Init+0x2ec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_ADC_Init+0x176>
 800467e:	4a62      	ldr	r2, [pc, #392]	@ (8004808 <HAL_ADC_Init+0x2fc>)
 8004680:	e000      	b.n	8004684 <HAL_ADC_Init+0x178>
 8004682:	4a62      	ldr	r2, [pc, #392]	@ (800480c <HAL_ADC_Init+0x300>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7ff fe04 	bl	8004298 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7f5b      	ldrb	r3, [r3, #29]
 8004694:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800469a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80046a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80046a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d106      	bne.n	80046cc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	045b      	lsls	r3, r3, #17
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	4b48      	ldr	r3, [pc, #288]	@ (8004810 <HAL_ADC_Init+0x304>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	69b9      	ldr	r1, [r7, #24]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fee4 	bl	80044e4 <LL_ADC_INJ_IsConversionOngoing>
 800471c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d17f      	bne.n	8004824 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d17c      	bne.n	8004824 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800472e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004736:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004746:	f023 0302 	bic.w	r3, r3, #2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	430b      	orrs	r3, r1
 8004752:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800476a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004774:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004778:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6911      	ldr	r1, [r2, #16]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800478a:	e013      	b.n	80047b4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800479a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80047ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d12a      	bne.n	8004814 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047d4:	4311      	orrs	r1, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80047da:	4311      	orrs	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047e0:	430a      	orrs	r2, r1
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e019      	b.n	8004824 <HAL_ADC_Init+0x318>
 80047f0:	20000008 	.word	0x20000008
 80047f4:	053e2d63 	.word	0x053e2d63
 80047f8:	50000100 	.word	0x50000100
 80047fc:	50000400 	.word	0x50000400
 8004800:	50000500 	.word	0x50000500
 8004804:	50000600 	.word	0x50000600
 8004808:	50000300 	.word	0x50000300
 800480c:	50000700 	.word	0x50000700
 8004810:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f023 010f 	bic.w	r1, r3, #15
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	1e5a      	subs	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
 8004844:	e007      	b.n	8004856 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 020f 	bic.w	r2, r2, #15
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004866:	e007      	b.n	8004878 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486c:	f043 0210 	orr.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	@ 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_Start+0x1c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a67      	ldr	r2, [pc, #412]	@ (8004a38 <HAL_ADC_Start+0x1b4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_Start+0x20>
 80048a0:	4b66      	ldr	r3, [pc, #408]	@ (8004a3c <HAL_ADC_Start+0x1b8>)
 80048a2:	e000      	b.n	80048a6 <HAL_ADC_Start+0x22>
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_ADC_Start+0x1bc>)
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd3d 	bl	8004326 <LL_ADC_GetMultimode>
 80048ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fe03 	bl	80044be <LL_ADC_REG_IsConversionOngoing>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 80b4 	bne.w	8004a28 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_Start+0x4a>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e0af      	b.n	8004a2e <HAL_ADC_Start+0x1aa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb36 	bl	8004f48 <ADC_Enable>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 809b 	bne.w	8004a1e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a4d      	ldr	r2, [pc, #308]	@ (8004a38 <HAL_ADC_Start+0x1b4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_ADC_Start+0x96>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a44 <HAL_ADC_Start+0x1c0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d002      	beq.n	8004916 <HAL_ADC_Start+0x92>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	e003      	b.n	800491e <HAL_ADC_Start+0x9a>
 8004916:	4b4c      	ldr	r3, [pc, #304]	@ (8004a48 <HAL_ADC_Start+0x1c4>)
 8004918:	e001      	b.n	800491e <HAL_ADC_Start+0x9a>
 800491a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	4293      	cmp	r3, r2
 8004924:	d002      	beq.n	800492c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004930:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004944:	d106      	bne.n	8004954 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494a:	f023 0206 	bic.w	r2, r3, #6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	661a      	str	r2, [r3, #96]	@ 0x60
 8004952:	e002      	b.n	800495a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	221c      	movs	r2, #28
 8004960:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a32      	ldr	r2, [pc, #200]	@ (8004a38 <HAL_ADC_Start+0x1b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_ADC_Start+0x104>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <HAL_ADC_Start+0x1c0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d002      	beq.n	8004984 <HAL_ADC_Start+0x100>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	e003      	b.n	800498c <HAL_ADC_Start+0x108>
 8004984:	4b30      	ldr	r3, [pc, #192]	@ (8004a48 <HAL_ADC_Start+0x1c4>)
 8004986:	e001      	b.n	800498c <HAL_ADC_Start+0x108>
 8004988:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	4293      	cmp	r3, r2
 8004992:	d008      	beq.n	80049a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b05      	cmp	r3, #5
 800499e:	d002      	beq.n	80049a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	d114      	bne.n	80049d0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fd64 	bl	8004496 <LL_ADC_REG_StartConversion>
 80049ce:	e02d      	b.n	8004a2c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <HAL_ADC_Start+0x1b4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_ADC_Start+0x176>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <HAL_ADC_Start+0x1c0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d002      	beq.n	80049f6 <HAL_ADC_Start+0x172>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e003      	b.n	80049fe <HAL_ADC_Start+0x17a>
 80049f6:	4b14      	ldr	r3, [pc, #80]	@ (8004a48 <HAL_ADC_Start+0x1c4>)
 80049f8:	e001      	b.n	80049fe <HAL_ADC_Start+0x17a>
 80049fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049fe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00f      	beq.n	8004a2c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a1c:	e006      	b.n	8004a2c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a26:	e001      	b.n	8004a2c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	50000100 	.word	0x50000100
 8004a3c:	50000300 	.word	0x50000300
 8004a40:	50000700 	.word	0x50000700
 8004a44:	50000500 	.word	0x50000500
 8004a48:	50000400 	.word	0x50000400

08004a4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_IRQHandler+0x30>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a8e      	ldr	r2, [pc, #568]	@ (8004cb0 <HAL_ADC_IRQHandler+0x264>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_IRQHandler+0x34>
 8004a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb4 <HAL_ADC_IRQHandler+0x268>)
 8004a7e:	e000      	b.n	8004a82 <HAL_ADC_IRQHandler+0x36>
 8004a80:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb8 <HAL_ADC_IRQHandler+0x26c>)
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fc4f 	bl	8004326 <LL_ADC_GetMultimode>
 8004a88:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_ADC_IRQHandler+0x78>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fe66 	bl	8005788 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_ADC_IRQHandler+0x8c>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8094 	beq.w	8004c0c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 808e 	beq.w	8004c0c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fbe4 	bl	80042da <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d072      	beq.n	8004bfe <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a64      	ldr	r2, [pc, #400]	@ (8004cb0 <HAL_ADC_IRQHandler+0x264>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_ADC_IRQHandler+0xea>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a65      	ldr	r2, [pc, #404]	@ (8004cbc <HAL_ADC_IRQHandler+0x270>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d002      	beq.n	8004b32 <HAL_ADC_IRQHandler+0xe6>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_IRQHandler+0xee>
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_ADC_IRQHandler+0x274>)
 8004b34:	e001      	b.n	8004b3a <HAL_ADC_IRQHandler+0xee>
 8004b36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d008      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d002      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b09      	cmp	r3, #9
 8004b52:	d104      	bne.n	8004b5e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	e014      	b.n	8004b88 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a53      	ldr	r2, [pc, #332]	@ (8004cb0 <HAL_ADC_IRQHandler+0x264>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_ADC_IRQHandler+0x130>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a53      	ldr	r2, [pc, #332]	@ (8004cbc <HAL_ADC_IRQHandler+0x270>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d002      	beq.n	8004b78 <HAL_ADC_IRQHandler+0x12c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e003      	b.n	8004b80 <HAL_ADC_IRQHandler+0x134>
 8004b78:	4b51      	ldr	r3, [pc, #324]	@ (8004cc0 <HAL_ADC_IRQHandler+0x274>)
 8004b7a:	e001      	b.n	8004b80 <HAL_ADC_IRQHandler+0x134>
 8004b7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004b80:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d135      	bne.n	8004bfe <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d12e      	bne.n	8004bfe <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fc8a 	bl	80044be <LL_ADC_REG_IsConversionOngoing>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11a      	bne.n	8004be6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 020c 	bic.w	r2, r2, #12
 8004bbe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d112      	bne.n	8004bfe <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f043 0201 	orr.w	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004be4:	e00b      	b.n	8004bfe <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f984 	bl	8004f0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	220c      	movs	r2, #12
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <HAL_ADC_IRQHandler+0x1d4>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b3 	beq.w	8004d92 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80ad 	beq.w	8004d92 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fb53 	bl	8004300 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004c5a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fb3a 	bl	80042da <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c66:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a10      	ldr	r2, [pc, #64]	@ (8004cb0 <HAL_ADC_IRQHandler+0x264>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x23a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <HAL_ADC_IRQHandler+0x270>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d002      	beq.n	8004c82 <HAL_ADC_IRQHandler+0x236>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	e003      	b.n	8004c8a <HAL_ADC_IRQHandler+0x23e>
 8004c82:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <HAL_ADC_IRQHandler+0x274>)
 8004c84:	e001      	b.n	8004c8a <HAL_ADC_IRQHandler+0x23e>
 8004c86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d008      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d002      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	e01f      	b.n	8004cee <HAL_ADC_IRQHandler+0x2a2>
 8004cae:	bf00      	nop
 8004cb0:	50000100 	.word	0x50000100
 8004cb4:	50000300 	.word	0x50000300
 8004cb8:	50000700 	.word	0x50000700
 8004cbc:	50000500 	.word	0x50000500
 8004cc0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a8b      	ldr	r2, [pc, #556]	@ (8004ef8 <HAL_ADC_IRQHandler+0x4ac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_ADC_IRQHandler+0x296>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a8a      	ldr	r2, [pc, #552]	@ (8004efc <HAL_ADC_IRQHandler+0x4b0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d002      	beq.n	8004cde <HAL_ADC_IRQHandler+0x292>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	e003      	b.n	8004ce6 <HAL_ADC_IRQHandler+0x29a>
 8004cde:	4b88      	ldr	r3, [pc, #544]	@ (8004f00 <HAL_ADC_IRQHandler+0x4b4>)
 8004ce0:	e001      	b.n	8004ce6 <HAL_ADC_IRQHandler+0x29a>
 8004ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ce6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d047      	beq.n	8004d84 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <HAL_ADC_IRQHandler+0x2c2>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03f      	beq.n	8004d84 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d13a      	bne.n	8004d84 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d133      	bne.n	8004d84 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d12e      	bne.n	8004d84 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fbda 	bl	80044e4 <LL_ADC_INJ_IsConversionOngoing>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d44:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d112      	bne.n	8004d84 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d6a:	e00b      	b.n	8004d84 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d70:	f043 0210 	orr.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7c:	f043 0201 	orr.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff f823 	bl	8003dd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2260      	movs	r2, #96	@ 0x60
 8004d90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_ADC_IRQHandler+0x374>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f8b4 	bl	8004f20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2280      	movs	r2, #128	@ 0x80
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <HAL_ADC_IRQHandler+0x3a4>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fcbd 	bl	8005760 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_ADC_IRQHandler+0x3d4>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fcaf 	bl	8005774 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d043      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x466>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03e      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e40:	e021      	b.n	8004e86 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e50:	d004      	beq.n	8004e5c <HAL_ADC_IRQHandler+0x410>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a28      	ldr	r2, [pc, #160]	@ (8004ef8 <HAL_ADC_IRQHandler+0x4ac>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADC_IRQHandler+0x414>
 8004e5c:	4b29      	ldr	r3, [pc, #164]	@ (8004f04 <HAL_ADC_IRQHandler+0x4b8>)
 8004e5e:	e000      	b.n	8004e62 <HAL_ADC_IRQHandler+0x416>
 8004e60:	4b29      	ldr	r3, [pc, #164]	@ (8004f08 <HAL_ADC_IRQHandler+0x4bc>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fa6d 	bl	8004342 <LL_ADC_GetMultiDMATransfer>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e72:	e008      	b.n	8004e86 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10e      	bne.n	8004eaa <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e90:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	f043 0202 	orr.w	r2, r3, #2
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f845 	bl	8004f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2210      	movs	r2, #16
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d018      	beq.n	8004eee <HAL_ADC_IRQHandler+0x4a2>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d013      	beq.n	8004eee <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fc2f 	bl	800574c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004eee:	bf00      	nop
 8004ef0:	3728      	adds	r7, #40	@ 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	50000100 	.word	0x50000100
 8004efc:	50000500 	.word	0x50000500
 8004f00:	50000400 	.word	0x50000400
 8004f04:	50000300 	.word	0x50000300
 8004f08:	50000700 	.word	0x50000700

08004f0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fa76 	bl	800444a <LL_ADC_IsEnabled>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d176      	bne.n	8005052 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800505c <ADC_Enable+0x114>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f76:	f043 0210 	orr.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e062      	b.n	8005054 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fa31 	bl	80043fa <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa0:	d004      	beq.n	8004fac <ADC_Enable+0x64>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8005060 <ADC_Enable+0x118>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <ADC_Enable+0x68>
 8004fac:	4b2d      	ldr	r3, [pc, #180]	@ (8005064 <ADC_Enable+0x11c>)
 8004fae:	e000      	b.n	8004fb2 <ADC_Enable+0x6a>
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <ADC_Enable+0x120>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff f983 	bl	80042be <LL_ADC_GetCommonPathInternalCh>
 8004fb8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d013      	beq.n	8004fea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800506c <ADC_Enable+0x124>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <ADC_Enable+0x128>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	099b      	lsrs	r3, r3, #6
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fdc:	e002      	b.n	8004fe4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f9      	bne.n	8004fde <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fea:	f7ff f949 	bl	8004280 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ff0:	e028      	b.n	8005044 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fa27 	bl	800444a <LL_ADC_IsEnabled>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff f9f7 	bl	80043fa <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800500c:	f7ff f938 	bl	8004280 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d914      	bls.n	8005044 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d00d      	beq.n	8005044 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502c:	f043 0210 	orr.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e007      	b.n	8005054 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d1cf      	bne.n	8004ff2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	8000003f 	.word	0x8000003f
 8005060:	50000100 	.word	0x50000100
 8005064:	50000300 	.word	0x50000300
 8005068:	50000700 	.word	0x50000700
 800506c:	20000008 	.word	0x20000008
 8005070:	053e2d63 	.word	0x053e2d63

08005074 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f9f5 	bl	8004470 <LL_ADC_IsDisableOngoing>
 8005086:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff f9dc 	bl	800444a <LL_ADC_IsEnabled>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d047      	beq.n	8005128 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d144      	bne.n	8005128 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 030d 	and.w	r3, r3, #13
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10c      	bne.n	80050c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff f9b6 	bl	8004422 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2203      	movs	r2, #3
 80050bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050be:	f7ff f8df 	bl	8004280 <HAL_GetTick>
 80050c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050c4:	e029      	b.n	800511a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ca:	f043 0210 	orr.w	r2, r3, #16
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e023      	b.n	800512a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050e2:	f7ff f8cd 	bl	8004280 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d914      	bls.n	800511a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	f043 0210 	orr.w	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e007      	b.n	800512a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1dc      	bne.n	80050e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <LL_ADC_SetCommonPathInternalCh>:
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_ADC_GetCommonPathInternalCh>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <LL_ADC_SetOffset>:
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3360      	adds	r3, #96	@ 0x60
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <LL_ADC_SetOffset+0x44>)
 8005196:	4013      	ands	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	601a      	str	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	03fff000 	.word	0x03fff000

080051bc <LL_ADC_GetOffsetChannel>:
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3360      	adds	r3, #96	@ 0x60
 80051ca:	461a      	mov	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LL_ADC_SetOffsetState>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3360      	adds	r3, #96	@ 0x60
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	431a      	orrs	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_ADC_SetOffsetSign>:
{
 800521e:	b480      	push	{r7}
 8005220:	b087      	sub	sp, #28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3360      	adds	r3, #96	@ 0x60
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	431a      	orrs	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	601a      	str	r2, [r3, #0]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_ADC_SetOffsetSaturation>:
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3360      	adds	r3, #96	@ 0x60
 8005264:	461a      	mov	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	431a      	orrs	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	601a      	str	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	615a      	str	r2, [r3, #20]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_ADC_INJ_GetTrigAuto>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_ADC_SetChannelSamplingTime>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3314      	adds	r3, #20
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0e5b      	lsrs	r3, r3, #25
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	4413      	add	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0d1b      	lsrs	r3, r3, #20
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2107      	movs	r1, #7
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	401a      	ands	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	0d1b      	lsrs	r3, r3, #20
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <LL_ADC_SetChannelSingleDiff>:
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0318 	and.w	r3, r3, #24
 8005346:	4908      	ldr	r1, [pc, #32]	@ (8005368 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005348:	40d9      	lsrs	r1, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	400b      	ands	r3, r1
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	0007ffff 	.word	0x0007ffff

0800536c <LL_ADC_GetMultimode>:
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 031f 	and.w	r3, r3, #31
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_ADC_IsEnabled>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <LL_ADC_IsEnabled+0x18>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <LL_ADC_IsEnabled+0x1a>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_ADC_StartCalibration>:
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80053c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f4:	d101      	bne.n	80053fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_ADC_REG_IsConversionOngoing>:
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d101      	bne.n	8005420 <LL_ADC_REG_IsConversionOngoing+0x18>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_INJ_StartConversion>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800543e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d101      	bne.n	800546e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_ADCEx_Calibration_Start+0x1c>
 8005494:	2302      	movs	r3, #2
 8005496:	e04d      	b.n	8005534 <HAL_ADCEx_Calibration_Start+0xb8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fde7 	bl	8005074 <ADC_Disable>
 80054a6:	4603      	mov	r3, r0
 80054a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d136      	bne.n	800551e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80054b8:	f023 0302 	bic.w	r3, r3, #2
 80054bc:	f043 0202 	orr.w	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff6f 	bl	80053ae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054d0:	e014      	b.n	80054fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a18      	ldr	r2, [pc, #96]	@ (800553c <HAL_ADCEx_Calibration_Start+0xc0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d90d      	bls.n	80054fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e4:	f023 0312 	bic.w	r3, r3, #18
 80054e8:	f043 0210 	orr.w	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e01b      	b.n	8005534 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff6d 	bl	80053e0 <LL_ADC_IsCalibrationOnGoing>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e2      	bne.n	80054d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005510:	f023 0303 	bic.w	r3, r3, #3
 8005514:	f043 0201 	orr.w	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800551c:	e005      	b.n	800552a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0004de01 	.word	0x0004de01

08005540 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005550:	d004      	beq.n	800555c <HAL_ADCEx_InjectedStart_IT+0x1c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a78      	ldr	r2, [pc, #480]	@ (8005738 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d101      	bne.n	8005560 <HAL_ADCEx_InjectedStart_IT+0x20>
 800555c:	4b77      	ldr	r3, [pc, #476]	@ (800573c <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 800555e:	e000      	b.n	8005562 <HAL_ADCEx_InjectedStart_IT+0x22>
 8005560:	4b77      	ldr	r3, [pc, #476]	@ (8005740 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff ff02 	bl	800536c <LL_ADC_GetMultimode>
 8005568:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ff71 	bl	8005456 <LL_ADC_INJ_IsConversionOngoing>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	e0d8      	b.n	8005730 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005588:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005590:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d107      	bne.n	80055ae <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0c0      	b.n	8005730 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_ADCEx_InjectedStart_IT+0x7c>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0b9      	b.n	8005730 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fcbf 	bl	8004f48 <ADC_Enable>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 80a8 	bne.w	8005726 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	f023 0208 	bic.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80055ee:	e002      	b.n	80055f6 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a4a      	ldr	r2, [pc, #296]	@ (8005738 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a4a      	ldr	r2, [pc, #296]	@ (8005744 <HAL_ADCEx_InjectedStart_IT+0x204>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d002      	beq.n	8005624 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	e003      	b.n	800562c <HAL_ADCEx_InjectedStart_IT+0xec>
 8005624:	4b48      	ldr	r3, [pc, #288]	@ (8005748 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005626:	e001      	b.n	800562c <HAL_ADCEx_InjectedStart_IT+0xec>
 8005628:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	4293      	cmp	r3, r2
 8005632:	d002      	beq.n	800563a <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d105      	bne.n	8005646 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2260      	movs	r2, #96	@ 0x60
 800564c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005672:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d110      	bne.n	800569e <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0220 	bic.w	r2, r2, #32
 800568a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800569a:	605a      	str	r2, [r3, #4]
          break;
 800569c:	e010      	b.n	80056c0 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ac:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	605a      	str	r2, [r3, #4]
          break;
 80056be:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_ADCEx_InjectedStart_IT+0x19e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d002      	beq.n	80056da <HAL_ADCEx_InjectedStart_IT+0x19a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	e003      	b.n	80056e2 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80056da:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80056dc:	e001      	b.n	80056e2 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80056de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d008      	beq.n	80056fc <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d002      	beq.n	80056fc <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	d10d      	bne.n	8005718 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fdd5 	bl	80052b0 <LL_ADC_INJ_GetTrigAuto>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fe8c 	bl	800542e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005716:	e00a      	b.n	800572e <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005724:	e003      	b.n	800572e <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	50000100 	.word	0x50000100
 800573c:	50000300 	.word	0x50000300
 8005740:	50000700 	.word	0x50000700
 8005744:	50000500 	.word	0x50000500
 8005748:	50000400 	.word	0x50000400

0800574c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0b6      	sub	sp, #216	@ 0xd8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d102      	bne.n	80057c6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80057c0:	2302      	movs	r3, #2
 80057c2:	f000 bcfd 	b.w	80061c0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d130      	bne.n	8005840 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d179      	bne.n	80058da <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0e9b      	lsrs	r3, r3, #26
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005802:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800580e:	e007      	b.n	8005820 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	0e9b      	lsrs	r3, r3, #26
 8005816:	025b      	lsls	r3, r3, #9
 8005818:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800581c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005826:	4b84      	ldr	r3, [pc, #528]	@ (8005a38 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005832:	430b      	orrs	r3, r1
 8005834:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800583c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800583e:	e04c      	b.n	80058da <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11d      	bne.n	8005884 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800586c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005878:	e004      	b.n	8005884 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	3b01      	subs	r3, #1
 8005880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	0e9b      	lsrs	r3, r3, #26
 800588a:	f003 021f 	and.w	r2, r3, #31
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80058b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005a38 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	430b      	orrs	r3, r1
 80058d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fdb9 	bl	8005456 <LL_ADC_INJ_IsConversionOngoing>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d124      	bne.n	8005934 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d112      	bne.n	800591a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005904:	055a      	lsls	r2, r3, #21
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800590c:	051b      	lsls	r3, r3, #20
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	e00c      	b.n	8005934 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800592a:	055a      	lsls	r2, r3, #21
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fd65 	bl	8005408 <LL_ADC_REG_IsConversionOngoing>
 800593e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fd85 	bl	8005456 <LL_ADC_INJ_IsConversionOngoing>
 800594c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 822e 	bne.w	8005db6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800595a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 8229 	bne.w	8005db6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d116      	bne.n	80059a2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800598c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800598e:	e01f      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800599e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80059a0:	e016      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d109      	bne.n	80059c0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80059be:	e007      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80059ce:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d110      	bne.n	80059fc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ec:	430b      	orrs	r3, r1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0202 	orr.w	r2, r2, #2
 80059f8:	611a      	str	r2, [r3, #16]
 80059fa:	e007      	b.n	8005a0c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0202 	bic.w	r2, r2, #2
 8005a0a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a14:	d112      	bne.n	8005a3c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7ff fc53 	bl	80052cc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fc2b 	bl	800528a <LL_ADC_SetSamplingTimeCommonConfig>
 8005a34:	e011      	b.n	8005a5a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005a36:	bf00      	nop
 8005a38:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f7ff fc3f 	bl	80052cc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fc18 	bl	800528a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d022      	beq.n	8005ac2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6919      	ldr	r1, [r3, #16]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a8c:	f7ff fb72 	bl	8005174 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6919      	ldr	r1, [r3, #16]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f7ff fbbe 	bl	800521e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d102      	bne.n	8005ab8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab6:	e000      	b.n	8005aba <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7ff fbca 	bl	8005254 <LL_ADC_SetOffsetSaturation>
 8005ac0:	e179      	b.n	8005db6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff fb77 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fb6c 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	0e9b      	lsrs	r3, r3, #26
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	e01e      	b.n	8005b2c <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fb61 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	e004      	b.n	8005b2a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8005b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b24:	fab3 f383 	clz	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	0e9b      	lsrs	r3, r3, #26
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	e018      	b.n	8005b76 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005b68:	2320      	movs	r3, #32
 8005b6a:	e004      	b.n	8005b76 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b70:	fab3 f383 	clz	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d106      	bne.n	8005b88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fb30 	bl	80051e8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fb14 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fb09 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005baa:	4603      	mov	r3, r0
 8005bac:	0e9b      	lsrs	r3, r3, #26
 8005bae:	f003 021f 	and.w	r2, r3, #31
 8005bb2:	e01e      	b.n	8005bf2 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fafe 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8005be2:	2320      	movs	r3, #32
 8005be4:	e004      	b.n	8005bf0 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8005be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bea:	fab3 f383 	clz	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	0e9b      	lsrs	r3, r3, #26
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	e018      	b.n	8005c3c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c16:	fa93 f3a3 	rbit	r3, r3
 8005c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	e004      	b.n	8005c3c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d106      	bne.n	8005c4e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff facd 	bl	80051e8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2102      	movs	r1, #2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fab1 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff faa6 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005c70:	4603      	mov	r3, r0
 8005c72:	0e9b      	lsrs	r3, r3, #26
 8005c74:	f003 021f 	and.w	r2, r3, #31
 8005c78:	e01e      	b.n	8005cb8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fa9b 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c90:	fa93 f3a3 	rbit	r3, r3
 8005c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8005ca8:	2320      	movs	r3, #32
 8005caa:	e004      	b.n	8005cb6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8005cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb0:	fab3 f383 	clz	r3, r3
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	0e9b      	lsrs	r3, r3, #26
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	e014      	b.n	8005cfa <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cd8:	fa93 f3a3 	rbit	r3, r3
 8005cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005cde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005cec:	2320      	movs	r3, #32
 8005cee:	e004      	b.n	8005cfa <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cf4:	fab3 f383 	clz	r3, r3
 8005cf8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d106      	bne.n	8005d0c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2102      	movs	r1, #2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fa6e 	bl	80051e8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2103      	movs	r1, #3
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fa52 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2103      	movs	r1, #3
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fa47 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	f003 021f 	and.w	r2, r3, #31
 8005d36:	e017      	b.n	8005d68 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2103      	movs	r1, #3
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fa3c 	bl	80051bc <LL_ADC_GetOffsetChannel>
 8005d44:	4603      	mov	r3, r0
 8005d46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d4a:	fa93 f3a3 	rbit	r3, r3
 8005d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	e003      	b.n	8005d66 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8005d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0e9b      	lsrs	r3, r3, #26
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	e011      	b.n	8005da4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d88:	fa93 f3a3 	rbit	r3, r3
 8005d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005d92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8005d98:	2320      	movs	r3, #32
 8005d9a:	e003      	b.n	8005da4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d9e:	fab3 f383 	clz	r3, r3
 8005da2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d106      	bne.n	8005db6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2103      	movs	r1, #3
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fa19 	bl	80051e8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fae4 	bl	8005388 <LL_ADC_IsEnabled>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 813d 	bne.w	8006042 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f7ff faa5 	bl	8005324 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	4aa2      	ldr	r2, [pc, #648]	@ (8006068 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	f040 812e 	bne.w	8006042 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	0e9b      	lsrs	r3, r3, #26
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	2b09      	cmp	r3, #9
 8005e04:	bf94      	ite	ls
 8005e06:	2301      	movls	r3, #1
 8005e08:	2300      	movhi	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e019      	b.n	8005e42 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e16:	fa93 f3a3 	rbit	r3, r3
 8005e1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005e26:	2320      	movs	r3, #32
 8005e28:	e003      	b.n	8005e32 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e2c:	fab3 f383 	clz	r3, r3
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	3301      	adds	r3, #1
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2b09      	cmp	r3, #9
 8005e3a:	bf94      	ite	ls
 8005e3c:	2301      	movls	r3, #1
 8005e3e:	2300      	movhi	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d079      	beq.n	8005f3a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	0e9b      	lsrs	r3, r3, #26
 8005e58:	3301      	adds	r3, #1
 8005e5a:	069b      	lsls	r3, r3, #26
 8005e5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e60:	e015      	b.n	8005e8e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e6a:	fa93 f3a3 	rbit	r3, r3
 8005e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	e003      	b.n	8005e86 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	3301      	adds	r3, #1
 8005e88:	069b      	lsls	r3, r3, #26
 8005e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	0e9b      	lsrs	r3, r3, #26
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	e017      	b.n	8005ede <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e003      	b.n	8005ed2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	ea42 0103 	orr.w	r1, r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	0e9b      	lsrs	r3, r3, #26
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f003 021f 	and.w	r2, r3, #31
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	051b      	lsls	r3, r3, #20
 8005f02:	e018      	b.n	8005f36 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	fa93 f3a3 	rbit	r3, r3
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	e003      	b.n	8005f28 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f003 021f 	and.w	r2, r3, #31
 8005f2e:	4613      	mov	r3, r2
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	4413      	add	r3, r2
 8005f34:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f36:	430b      	orrs	r3, r1
 8005f38:	e07e      	b.n	8006038 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	0e9b      	lsrs	r3, r3, #26
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	069b      	lsls	r3, r3, #26
 8005f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f54:	e015      	b.n	8005f82 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	fa93 f3a3 	rbit	r3, r3
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8005f6e:	2320      	movs	r3, #32
 8005f70:	e003      	b.n	8005f7a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	fab3 f383 	clz	r3, r3
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	069b      	lsls	r3, r3, #26
 8005f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	0e9b      	lsrs	r3, r3, #26
 8005f94:	3301      	adds	r3, #1
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	e017      	b.n	8005fd2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	fa93 f3a3 	rbit	r3, r3
 8005fae:	61bb      	str	r3, [r7, #24]
  return result;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005fba:	2320      	movs	r3, #32
 8005fbc:	e003      	b.n	8005fc6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	ea42 0103 	orr.w	r1, r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	0e9b      	lsrs	r3, r3, #26
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f003 021f 	and.w	r2, r3, #31
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3b1e      	subs	r3, #30
 8005ff6:	051b      	lsls	r3, r3, #20
 8005ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ffc:	e01b      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	fa93 f3a3 	rbit	r3, r3
 800600a:	60fb      	str	r3, [r7, #12]
  return result;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8006016:	2320      	movs	r3, #32
 8006018:	e003      	b.n	8006022 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fab3 f383 	clz	r3, r3
 8006020:	b2db      	uxtb	r3, r3
 8006022:	3301      	adds	r3, #1
 8006024:	f003 021f 	and.w	r2, r3, #31
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	3b1e      	subs	r3, #30
 8006030:	051b      	lsls	r3, r3, #20
 8006032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006036:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800603c:	4619      	mov	r1, r3
 800603e:	f7ff f945 	bl	80052cc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b09      	ldr	r3, [pc, #36]	@ (800606c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80b2 	beq.w	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006058:	d004      	beq.n	8006064 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a04      	ldr	r2, [pc, #16]	@ (8006070 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d109      	bne.n	8006078 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8006064:	4b03      	ldr	r3, [pc, #12]	@ (8006074 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8006066:	e008      	b.n	800607a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8006068:	407f0000 	.word	0x407f0000
 800606c:	80080000 	.word	0x80080000
 8006070:	50000100 	.word	0x50000100
 8006074:	50000300 	.word	0x50000300
 8006078:	4b53      	ldr	r3, [pc, #332]	@ (80061c8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff f86c 	bl	8005158 <LL_ADC_GetCommonPathInternalCh>
 8006080:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a50      	ldr	r2, [pc, #320]	@ (80061cc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a4f      	ldr	r2, [pc, #316]	@ (80061d0 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d139      	bne.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800609c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d133      	bne.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ac:	d004      	beq.n	80060b8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a48      	ldr	r2, [pc, #288]	@ (80061d4 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d17a      	bne.n	80061ae <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060c0:	d004      	beq.n	80060cc <HAL_ADCEx_InjectedConfigChannel+0x930>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a44      	ldr	r2, [pc, #272]	@ (80061d8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80060cc:	4a43      	ldr	r2, [pc, #268]	@ (80061dc <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80060ce:	e000      	b.n	80060d2 <HAL_ADCEx_InjectedConfigChannel+0x936>
 80060d0:	4a3d      	ldr	r2, [pc, #244]	@ (80061c8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80060d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7ff f828 	bl	8005132 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80060e2:	4b3f      	ldr	r3, [pc, #252]	@ (80061e0 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	4a3e      	ldr	r2, [pc, #248]	@ (80061e4 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	099a      	lsrs	r2, r3, #6
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80060fa:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80060fc:	e002      	b.n	8006104 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3b01      	subs	r3, #1
 8006102:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f9      	bne.n	80060fe <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800610a:	e050      	b.n	80061ae <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a35      	ldr	r2, [pc, #212]	@ (80061e8 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d125      	bne.n	8006162 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800611a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d11f      	bne.n	8006162 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2c      	ldr	r2, [pc, #176]	@ (80061d8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d104      	bne.n	8006136 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2e      	ldr	r2, [pc, #184]	@ (80061ec <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03d      	beq.n	80061b2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800613e:	d004      	beq.n	800614a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a24      	ldr	r2, [pc, #144]	@ (80061d8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 800614a:	4a24      	ldr	r2, [pc, #144]	@ (80061dc <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800614c:	e000      	b.n	8006150 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800614e:	4a1e      	ldr	r2, [pc, #120]	@ (80061c8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe ffe9 	bl	8005132 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006160:	e027      	b.n	80061b2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a22      	ldr	r2, [pc, #136]	@ (80061f0 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d123      	bne.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800616c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11d      	bne.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a16      	ldr	r2, [pc, #88]	@ (80061d8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d018      	beq.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800618a:	d004      	beq.n	8006196 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a11      	ldr	r2, [pc, #68]	@ (80061d8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d101      	bne.n	800619a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8006196:	4a11      	ldr	r2, [pc, #68]	@ (80061dc <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006198:	e000      	b.n	800619c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800619a:	4a0b      	ldr	r2, [pc, #44]	@ (80061c8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800619c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe ffc3 	bl	8005132 <LL_ADC_SetCommonPathInternalCh>
 80061ac:	e002      	b.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061b2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	37d8      	adds	r7, #216	@ 0xd8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	50000700 	.word	0x50000700
 80061cc:	c3210000 	.word	0xc3210000
 80061d0:	90c00010 	.word	0x90c00010
 80061d4:	50000600 	.word	0x50000600
 80061d8:	50000100 	.word	0x50000100
 80061dc:	50000300 	.word	0x50000300
 80061e0:	20000008 	.word	0x20000008
 80061e4:	053e2d63 	.word	0x053e2d63
 80061e8:	c7520000 	.word	0xc7520000
 80061ec:	50000500 	.word	0x50000500
 80061f0:	cb840000 	.word	0xcb840000

080061f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b0a1      	sub	sp, #132	@ 0x84
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800620e:	2302      	movs	r3, #2
 8006210:	e0e7      	b.n	80063e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800621a:	2300      	movs	r3, #0
 800621c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800621e:	2300      	movs	r3, #0
 8006220:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800622a:	d102      	bne.n	8006232 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800622c:	4b6f      	ldr	r3, [pc, #444]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	e009      	b.n	8006246 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6e      	ldr	r2, [pc, #440]	@ (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d102      	bne.n	8006242 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800623c:	4b6d      	ldr	r3, [pc, #436]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	e001      	b.n	8006246 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0be      	b.n	80063e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff f8ce 	bl	8005408 <LL_ADC_REG_IsConversionOngoing>
 800626c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff f8c8 	bl	8005408 <LL_ADC_REG_IsConversionOngoing>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 80a0 	bne.w	80063c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 809c 	bne.w	80063c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006290:	d004      	beq.n	800629c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a55      	ldr	r2, [pc, #340]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800629c:	4b56      	ldr	r3, [pc, #344]	@ (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800629e:	e000      	b.n	80062a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80062a0:	4b56      	ldr	r3, [pc, #344]	@ (80063fc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80062a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d04b      	beq.n	8006344 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80062ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062be:	035b      	lsls	r3, r3, #13
 80062c0:	430b      	orrs	r3, r1
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d0:	d004      	beq.n	80062dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a45      	ldr	r2, [pc, #276]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10f      	bne.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80062dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80062e0:	f7ff f852 	bl	8005388 <LL_ADC_IsEnabled>
 80062e4:	4604      	mov	r4, r0
 80062e6:	4841      	ldr	r0, [pc, #260]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062e8:	f7ff f84e 	bl	8005388 <LL_ADC_IsEnabled>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4323      	orrs	r3, r4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e012      	b.n	8006322 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80062fc:	483c      	ldr	r0, [pc, #240]	@ (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80062fe:	f7ff f843 	bl	8005388 <LL_ADC_IsEnabled>
 8006302:	4604      	mov	r4, r0
 8006304:	483b      	ldr	r0, [pc, #236]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006306:	f7ff f83f 	bl	8005388 <LL_ADC_IsEnabled>
 800630a:	4603      	mov	r3, r0
 800630c:	431c      	orrs	r4, r3
 800630e:	483c      	ldr	r0, [pc, #240]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006310:	f7ff f83a 	bl	8005388 <LL_ADC_IsEnabled>
 8006314:	4603      	mov	r3, r0
 8006316:	4323      	orrs	r3, r4
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf0c      	ite	eq
 800631c:	2301      	moveq	r3, #1
 800631e:	2300      	movne	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d056      	beq.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800632e:	f023 030f 	bic.w	r3, r3, #15
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	6811      	ldr	r1, [r2, #0]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	6892      	ldr	r2, [r2, #8]
 800633a:	430a      	orrs	r2, r1
 800633c:	431a      	orrs	r2, r3
 800633e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006340:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006342:	e047      	b.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800634c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800634e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006358:	d004      	beq.n	8006364 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a23      	ldr	r2, [pc, #140]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d10f      	bne.n	8006384 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006364:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006368:	f7ff f80e 	bl	8005388 <LL_ADC_IsEnabled>
 800636c:	4604      	mov	r4, r0
 800636e:	481f      	ldr	r0, [pc, #124]	@ (80063ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006370:	f7ff f80a 	bl	8005388 <LL_ADC_IsEnabled>
 8006374:	4603      	mov	r3, r0
 8006376:	4323      	orrs	r3, r4
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e012      	b.n	80063aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006384:	481a      	ldr	r0, [pc, #104]	@ (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006386:	f7fe ffff 	bl	8005388 <LL_ADC_IsEnabled>
 800638a:	4604      	mov	r4, r0
 800638c:	4819      	ldr	r0, [pc, #100]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800638e:	f7fe fffb 	bl	8005388 <LL_ADC_IsEnabled>
 8006392:	4603      	mov	r3, r0
 8006394:	431c      	orrs	r4, r3
 8006396:	481a      	ldr	r0, [pc, #104]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006398:	f7fe fff6 	bl	8005388 <LL_ADC_IsEnabled>
 800639c:	4603      	mov	r3, r0
 800639e:	4323      	orrs	r3, r4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80063ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80063b6:	f023 030f 	bic.w	r3, r3, #15
 80063ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80063bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063be:	e009      	b.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80063d2:	e000      	b.n	80063d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80063de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3784      	adds	r7, #132	@ 0x84
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}
 80063ea:	bf00      	nop
 80063ec:	50000100 	.word	0x50000100
 80063f0:	50000400 	.word	0x50000400
 80063f4:	50000500 	.word	0x50000500
 80063f8:	50000300 	.word	0x50000300
 80063fc:	50000700 	.word	0x50000700
 8006400:	50000600 	.word	0x50000600

08006404 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e023      	b.n	800645e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc ff14 	bl	8003258 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800649a:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	60d3      	str	r3, [r2, #12]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064b4:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <__NVIC_GetPriorityGrouping+0x18>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	f003 0307 	and.w	r3, r3, #7
}
 80064be:	4618      	mov	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db0b      	blt.n	80064f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f003 021f 	and.w	r2, r3, #31
 80064e4:	4907      	ldr	r1, [pc, #28]	@ (8006504 <__NVIC_EnableIRQ+0x38>)
 80064e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	2001      	movs	r0, #1
 80064ee:	fa00 f202 	lsl.w	r2, r0, r2
 80064f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	e000e100 	.word	0xe000e100

08006508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006518:	2b00      	cmp	r3, #0
 800651a:	db0a      	blt.n	8006532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	490c      	ldr	r1, [pc, #48]	@ (8006554 <__NVIC_SetPriority+0x4c>)
 8006522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006526:	0112      	lsls	r2, r2, #4
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	440b      	add	r3, r1
 800652c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006530:	e00a      	b.n	8006548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4908      	ldr	r1, [pc, #32]	@ (8006558 <__NVIC_SetPriority+0x50>)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	3b04      	subs	r3, #4
 8006540:	0112      	lsls	r2, r2, #4
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	440b      	add	r3, r1
 8006546:	761a      	strb	r2, [r3, #24]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	e000e100 	.word	0xe000e100
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	@ 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f1c3 0307 	rsb	r3, r3, #7
 8006576:	2b04      	cmp	r3, #4
 8006578:	bf28      	it	cs
 800657a:	2304      	movcs	r3, #4
 800657c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3304      	adds	r3, #4
 8006582:	2b06      	cmp	r3, #6
 8006584:	d902      	bls.n	800658c <NVIC_EncodePriority+0x30>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3b03      	subs	r3, #3
 800658a:	e000      	b.n	800658e <NVIC_EncodePriority+0x32>
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43da      	mvns	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	401a      	ands	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065a4:	f04f 31ff 	mov.w	r1, #4294967295
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43d9      	mvns	r1, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b4:	4313      	orrs	r3, r2
         );
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	@ 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065d4:	d301      	bcc.n	80065da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065d6:	2301      	movs	r3, #1
 80065d8:	e00f      	b.n	80065fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <SysTick_Config+0x40>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065e2:	210f      	movs	r1, #15
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	f7ff ff8e 	bl	8006508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ec:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <SysTick_Config+0x40>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065f2:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <SysTick_Config+0x40>)
 80065f4:	2207      	movs	r2, #7
 80065f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	e000e010 	.word	0xe000e010

08006608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff29 	bl	8006468 <__NVIC_SetPriorityGrouping>
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	4603      	mov	r3, r0
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800662c:	f7ff ff40 	bl	80064b0 <__NVIC_GetPriorityGrouping>
 8006630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	f7ff ff90 	bl	800655c <NVIC_EncodePriority>
 800663c:	4602      	mov	r2, r0
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff ff5f 	bl	8006508 <__NVIC_SetPriority>
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	4603      	mov	r3, r0
 800665a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800665c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff ff33 	bl	80064cc <__NVIC_EnableIRQ>
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff ffa4 	bl	80065c4 <SysTick_Config>
 800667c:	4603      	mov	r3, r0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e08d      	b.n	80067b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	4b47      	ldr	r3, [pc, #284]	@ (80067c0 <HAL_DMA_Init+0x138>)
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d80f      	bhi.n	80066c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	4b45      	ldr	r3, [pc, #276]	@ (80067c4 <HAL_DMA_Init+0x13c>)
 80066ae:	4413      	add	r3, r2
 80066b0:	4a45      	ldr	r2, [pc, #276]	@ (80067c8 <HAL_DMA_Init+0x140>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	009a      	lsls	r2, r3, #2
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a42      	ldr	r2, [pc, #264]	@ (80067cc <HAL_DMA_Init+0x144>)
 80066c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80066c4:	e00e      	b.n	80066e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b40      	ldr	r3, [pc, #256]	@ (80067d0 <HAL_DMA_Init+0x148>)
 80066ce:	4413      	add	r3, r2
 80066d0:	4a3d      	ldr	r2, [pc, #244]	@ (80067c8 <HAL_DMA_Init+0x140>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	009a      	lsls	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a3c      	ldr	r2, [pc, #240]	@ (80067d4 <HAL_DMA_Init+0x14c>)
 80066e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa2c 	bl	8006b94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006744:	d102      	bne.n	800674c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006760:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d010      	beq.n	800678c <HAL_DMA_Init+0x104>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b04      	cmp	r3, #4
 8006770:	d80c      	bhi.n	800678c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa4c 	bl	8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	e008      	b.n	800679e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40020407 	.word	0x40020407
 80067c4:	bffdfff8 	.word	0xbffdfff8
 80067c8:	cccccccd 	.word	0xcccccccd
 80067cc:	40020000 	.word	0x40020000
 80067d0:	bffdfbf8 	.word	0xbffdfbf8
 80067d4:	40020400 	.word	0x40020400

080067d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_DMA_Start_IT+0x20>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e066      	b.n	80068c6 <HAL_DMA_Start_IT+0xee>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	d155      	bne.n	80068b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0201 	bic.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f970 	bl	8006b16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 020e 	orr.w	r2, r2, #14
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e00f      	b.n	8006870 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0204 	bic.w	r2, r2, #4
 800685e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 020a 	orr.w	r2, r2, #10
 800686e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800688c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e005      	b.n	80068c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
 80068c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d00d      	beq.n	8006902 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2204      	movs	r2, #4
 80068ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e047      	b.n	8006992 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 020e 	bic.w	r2, r2, #14
 8006910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f003 021f 	and.w	r2, r3, #31
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	2101      	movs	r1, #1
 8006940:	fa01 f202 	lsl.w	r2, r1, r2
 8006944:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800694e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006970:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
    }
  }
  return status;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	2204      	movs	r2, #4
 80069be:	409a      	lsls	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d026      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x7a>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d021      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d107      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0204 	bic.w	r2, r2, #4
 80069ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f4:	f003 021f 	and.w	r2, r3, #31
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	2104      	movs	r1, #4
 80069fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006a02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d071      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006a14:	e06c      	b.n	8006af0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2202      	movs	r2, #2
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4013      	ands	r3, r2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d02e      	beq.n	8006a88 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d029      	beq.n	8006a88 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 020a 	bic.w	r2, r2, #10
 8006a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	f003 021f 	and.w	r2, r3, #31
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2102      	movs	r1, #2
 8006a68:	fa01 f202 	lsl.w	r2, r1, r2
 8006a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d038      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006a86:	e033      	b.n	8006af0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2208      	movs	r2, #8
 8006a92:	409a      	lsls	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4013      	ands	r3, r2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02a      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d025      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 020e 	bic.w	r2, r2, #14
 8006ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aba:	f003 021f 	and.w	r2, r3, #31
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
}
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b08:	b2db      	uxtb	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b2c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b44:	f003 021f 	and.w	r2, r3, #31
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d108      	bne.n	8006b76 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b74:	e007      	b.n	8006b86 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b16      	ldr	r3, [pc, #88]	@ (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d802      	bhi.n	8006bae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006ba8:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e001      	b.n	8006bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006bae:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006bb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3b08      	subs	r3, #8
 8006bbe:	4a12      	ldr	r2, [pc, #72]	@ (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	009a      	lsls	r2, r3, #2
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	2201      	movs	r2, #1
 8006be8:	409a      	lsls	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40020407 	.word	0x40020407
 8006c00:	40020800 	.word	0x40020800
 8006c04:	40020820 	.word	0x40020820
 8006c08:	cccccccd 	.word	0xcccccccd
 8006c0c:	40020880 	.word	0x40020880

08006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a08      	ldr	r2, [pc, #32]	@ (8006c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c32:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	409a      	lsls	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	1000823f 	.word	0x1000823f
 8006c54:	40020940 	.word	0x40020940

08006c58 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e147      	b.n	8006efa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fc fb0a 	bl	8003298 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0210 	bic.w	r2, r2, #16
 8006c92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c94:	f7fd faf4 	bl	8004280 <HAL_GetTick>
 8006c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c9a:	e012      	b.n	8006cc2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c9c:	f7fd faf0 	bl	8004280 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b0a      	cmp	r3, #10
 8006ca8:	d90b      	bls.n	8006cc2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e11b      	b.n	8006efa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d0e5      	beq.n	8006c9c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ce0:	f7fd face 	bl	8004280 <HAL_GetTick>
 8006ce4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ce6:	e012      	b.n	8006d0e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ce8:	f7fd faca 	bl	8004280 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b0a      	cmp	r3, #10
 8006cf4:	d90b      	bls.n	8006d0e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e0f5      	b.n	8006efa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0e5      	beq.n	8006ce8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0202 	orr.w	r2, r2, #2
 8006d2a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a74      	ldr	r2, [pc, #464]	@ (8006f04 <HAL_FDCAN_Init+0x2ac>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d103      	bne.n	8006d3e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006d36:	4a74      	ldr	r2, [pc, #464]	@ (8006f08 <HAL_FDCAN_Init+0x2b0>)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7c1b      	ldrb	r3, [r3, #16]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d108      	bne.n	8006d58 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d54:	619a      	str	r2, [r3, #24]
 8006d56:	e007      	b.n	8006d68 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d66:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7c5b      	ldrb	r3, [r3, #17]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d108      	bne.n	8006d82 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d7e:	619a      	str	r2, [r3, #24]
 8006d80:	e007      	b.n	8006d92 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d90:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7c9b      	ldrb	r3, [r3, #18]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d108      	bne.n	8006dac <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006da8:	619a      	str	r2, [r3, #24]
 8006daa:	e007      	b.n	8006dbc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006dba:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006de0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0210 	bic.w	r2, r2, #16
 8006df0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d108      	bne.n	8006e0c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0204 	orr.w	r2, r2, #4
 8006e08:	619a      	str	r2, [r3, #24]
 8006e0a:	e02c      	b.n	8006e66 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d028      	beq.n	8006e66 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d01c      	beq.n	8006e56 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e2a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0210 	orr.w	r2, r2, #16
 8006e3a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d110      	bne.n	8006e66 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0220 	orr.w	r2, r2, #32
 8006e52:	619a      	str	r2, [r3, #24]
 8006e54:	e007      	b.n	8006e66 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0220 	orr.w	r2, r2, #32
 8006e64:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e76:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e7e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e8e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e90:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e9a:	d115      	bne.n	8006ec8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006eaa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006eb4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ec4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ec6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fc56 	bl	8007790 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40006400 	.word	0x40006400
 8006f08:	40006500 	.word	0x40006500

08006f0c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f1c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d002      	beq.n	8006f2a <HAL_FDCAN_ConfigFilter+0x1e>
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d13d      	bne.n	8006fa6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d119      	bne.n	8006f66 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f3e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006f46:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e01d      	b.n	8006fa2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	075a      	lsls	r2, r3, #29
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	079a      	lsls	r2, r3, #30
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e006      	b.n	8006fb4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d110      	bne.n	8006ff6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e006      	b.n	8007004 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ffa:	f043 0204 	orr.w	r2, r3, #4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d12c      	bne.n	8007082 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800703c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e023      	b.n	8007090 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fc02 	bl	8007868 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2101      	movs	r1, #1
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	fa01 f202 	lsl.w	r2, r1, r2
 8007070:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007074:	2201      	movs	r2, #1
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	409a      	lsls	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e006      	b.n	8007090 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007086:	f043 0208 	orr.w	r2, r3, #8
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007098:	b480      	push	{r7}
 800709a:	b08b      	sub	sp, #44	@ 0x2c
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80070b2:	7efb      	ldrb	r3, [r7, #27]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	f040 80e8 	bne.w	800728a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	d137      	bne.n	8007130 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d107      	bne.n	80070e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0db      	b.n	8007298 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e8:	0e1b      	lsrs	r3, r3, #24
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d10a      	bne.n	8007108 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fa:	0a5b      	lsrs	r3, r3, #9
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007104:	2301      	movs	r3, #1
 8007106:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
 800712e:	e036      	b.n	800719e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007144:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e0a3      	b.n	8007298 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007158:	0e1b      	lsrs	r3, r3, #24
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d10a      	bne.n	8007178 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007174:	2301      	movs	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	440b      	add	r3, r1
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	0c9b      	lsrs	r3, r3, #18
 80071b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e005      	b.n	80071ce <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	3304      	adds	r3, #4
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	f003 020f 	and.w	r2, r3, #15
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	0fda      	lsrs	r2, r3, #31
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	3304      	adds	r3, #4
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800723e:	2300      	movs	r3, #0
 8007240:	623b      	str	r3, [r7, #32]
 8007242:	e00a      	b.n	800725a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	441a      	add	r2, r3
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	440b      	add	r3, r1
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	3301      	adds	r3, #1
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4a11      	ldr	r2, [pc, #68]	@ (80072a4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8007260:	5cd3      	ldrb	r3, [r2, r3]
 8007262:	461a      	mov	r2, r3
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	4293      	cmp	r3, r2
 8007268:	d3ec      	bcc.n	8007244 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b40      	cmp	r3, #64	@ 0x40
 800726e:	d105      	bne.n	800727c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800727a:	e004      	b.n	8007286 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e006      	b.n	8007298 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728e:	f043 0208 	orr.w	r2, r3, #8
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	372c      	adds	r7, #44	@ 0x2c
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	0800c168 	.word	0x0800c168

080072a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80072ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d003      	beq.n	80072ca <HAL_FDCAN_ActivateNotification+0x22>
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	f040 80c8 	bne.w	800745a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d03b      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d031      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d027      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01d      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	d013      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0201 	orr.w	r2, r2, #1
 800736c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d13b      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d131      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d127      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11d      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d113      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00c      	beq.n	800740a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0202 	orr.w	r2, r2, #2
 8007408:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	430a      	orrs	r2, r1
 8007424:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	430a      	orrs	r2, r1
 8007442:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	430a      	orrs	r2, r1
 8007454:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e006      	b.n	8007468 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745e:	f043 0202 	orr.w	r2, r3, #2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08c      	sub	sp, #48	@ 0x30
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007482:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8007486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007490:	4013      	ands	r3, r2
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a8:	4013      	ands	r3, r2
 80074aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c0:	4013      	ands	r3, r2
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ca:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80074ce:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d6:	6a3a      	ldr	r2, [r7, #32]
 80074d8:	4013      	ands	r3, r2
 80074da:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80074e6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	4013      	ands	r3, r2
 80074f2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007502:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2240      	movs	r2, #64	@ 0x40
 800751e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f916 	bl	8007752 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d019      	beq.n	8007564 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d014      	beq.n	8007564 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007542:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4013      	ands	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800755a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800755c:	6939      	ldr	r1, [r7, #16]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f8d8 	bl	8007714 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007570:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8a2 	bl	80076be <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007586:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa f8a6 	bl	80016dc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800759e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f897 	bl	80076d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f890 	bl	80076ea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d018      	beq.n	8007606 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80075e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4013      	ands	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2280      	movs	r2, #128	@ 0x80
 80075fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f87c 	bl	80076fe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007622:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f880 	bl	800772a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007646:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f878 	bl	800773e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00f      	beq.n	8007678 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800766a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007670:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007686:	69f9      	ldr	r1, [r7, #28]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f876 	bl	800777a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a3a      	ldr	r2, [r7, #32]
 800769a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f858 	bl	8007766 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80076b6:	bf00      	nop
 80076b8:	3730      	adds	r7, #48	@ 0x30
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007798:	4b30      	ldr	r3, [pc, #192]	@ (800785c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800779a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007860 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d103      	bne.n	80077ae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077ac:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007864 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80077be:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d6:	041a      	lsls	r2, r3, #16
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fc:	061a      	lsls	r2, r3, #24
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e005      	b.n	8007842 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3304      	adds	r3, #4
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3f3      	bcc.n	8007836 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	4000a400 	.word	0x4000a400
 8007860:	40006800 	.word	0x40006800
 8007864:	40006c00 	.word	0x40006c00

08007868 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	@ 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007886:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800788e:	4313      	orrs	r3, r2
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	e00a      	b.n	80078aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800789c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80078a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80078ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80078c0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	4613      	mov	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	440b      	add	r3, r1
 80078dc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	3304      	adds	r3, #4
 80078e8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	3304      	adds	r3, #4
 80078f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e020      	b.n	800793e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3303      	adds	r3, #3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3302      	adds	r3, #2
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	440b      	add	r3, r1
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007914:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	440b      	add	r3, r1
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007922:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	440a      	add	r2, r1
 800792a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800792c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	3304      	adds	r3, #4
 8007936:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3304      	adds	r3, #4
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	4a06      	ldr	r2, [pc, #24]	@ (800795c <FDCAN_CopyMessageToRAM+0xf4>)
 8007944:	5cd3      	ldrb	r3, [r2, r3]
 8007946:	461a      	mov	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4293      	cmp	r3, r2
 800794c:	d3d6      	bcc.n	80078fc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3724      	adds	r7, #36	@ 0x24
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	0800c168 	.word	0x0800c168

08007960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800796e:	e15a      	b.n	8007c26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	2101      	movs	r1, #1
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 814c 	beq.w	8007c20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d005      	beq.n	80079a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800799c:	2b02      	cmp	r3, #2
 800799e:	d130      	bne.n	8007a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	2203      	movs	r2, #3
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	43db      	mvns	r3, r3
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4013      	ands	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079d6:	2201      	movs	r2, #1
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4013      	ands	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 0201 	and.w	r2, r3, #1
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d017      	beq.n	8007a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	2203      	movs	r2, #3
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4013      	ands	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d123      	bne.n	8007a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	08da      	lsrs	r2, r3, #3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3208      	adds	r2, #8
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	6939      	ldr	r1, [r7, #16]
 8007a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f003 0203 	and.w	r2, r3, #3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80a6 	beq.w	8007c20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6613      	str	r3, [r2, #96]	@ 0x60
 8007ae0:	4b58      	ldr	r3, [pc, #352]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aec:	4a56      	ldr	r2, [pc, #344]	@ (8007c48 <HAL_GPIO_Init+0x2e8>)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	3302      	adds	r3, #2
 8007af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	220f      	movs	r2, #15
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007b16:	d01f      	beq.n	8007b58 <HAL_GPIO_Init+0x1f8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8007c4c <HAL_GPIO_Init+0x2ec>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d019      	beq.n	8007b54 <HAL_GPIO_Init+0x1f4>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a4b      	ldr	r2, [pc, #300]	@ (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_GPIO_Init+0x1f0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c54 <HAL_GPIO_Init+0x2f4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00d      	beq.n	8007b4c <HAL_GPIO_Init+0x1ec>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a49      	ldr	r2, [pc, #292]	@ (8007c58 <HAL_GPIO_Init+0x2f8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d007      	beq.n	8007b48 <HAL_GPIO_Init+0x1e8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a48      	ldr	r2, [pc, #288]	@ (8007c5c <HAL_GPIO_Init+0x2fc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <HAL_GPIO_Init+0x1e4>
 8007b40:	2305      	movs	r3, #5
 8007b42:	e00a      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b44:	2306      	movs	r3, #6
 8007b46:	e008      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	e006      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e004      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e002      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f002 0203 	and.w	r2, r2, #3
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4093      	lsls	r3, r2
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b6a:	4937      	ldr	r1, [pc, #220]	@ (8007c48 <HAL_GPIO_Init+0x2e8>)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	3302      	adds	r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b78:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4013      	ands	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b9c:	4a30      	ldr	r2, [pc, #192]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bc6:	4a26      	ldr	r2, [pc, #152]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007bcc:	4b24      	ldr	r3, [pc, #144]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c1a:	4a11      	ldr	r2, [pc, #68]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3301      	adds	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f ae9d 	bne.w	8007970 <HAL_GPIO_Init+0x10>
  }
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	48000400 	.word	0x48000400
 8007c50:	48000800 	.word	0x48000800
 8007c54:	48000c00 	.word	0x48000c00
 8007c58:	48001000 	.word	0x48001000
 8007c5c:	48001400 	.word	0x48001400
 8007c60:	40010400 	.word	0x40010400

08007c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	807b      	strh	r3, [r7, #2]
 8007c70:	4613      	mov	r3, r2
 8007c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c74:	787b      	ldrb	r3, [r7, #1]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c80:	e002      	b.n	8007c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c9e:	4b08      	ldr	r3, [pc, #32]	@ (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007caa:	4a05      	ldr	r2, [pc, #20]	@ (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f806 	bl	8007cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40010400 	.word	0x40010400

08007cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e08d      	b.n	8007e08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fb fb3d 	bl	8003380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2224      	movs	r2, #36	@ 0x24
 8007d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0201 	bic.w	r2, r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007d2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d107      	bne.n	8007d54 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d50:	609a      	str	r2, [r3, #8]
 8007d52:	e006      	b.n	8007d62 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d108      	bne.n	8007d7c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	e007      	b.n	8007d8c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69d9      	ldr	r1, [r3, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	@ 0x28
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	817b      	strh	r3, [r7, #10]
 8007e20:	4613      	mov	r3, r2
 8007e22:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	f040 80ef 	bne.w	8008014 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e44:	d101      	bne.n	8007e4a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007e46:	2302      	movs	r3, #2
 8007e48:	e0e5      	b.n	8008016 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e0de      	b.n	8008016 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2221      	movs	r2, #33	@ 0x21
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	893a      	ldrh	r2, [r7, #8]
 8007e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a66      	ldr	r2, [pc, #408]	@ (8008020 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007e86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a66      	ldr	r2, [pc, #408]	@ (8008024 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007e8c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2bff      	cmp	r3, #255	@ 0xff
 8007e96:	d906      	bls.n	8007ea6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	22ff      	movs	r2, #255	@ 0xff
 8007e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e007      	b.n	8007eb6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007eb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007eb4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01a      	beq.n	8007ef4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d074      	beq.n	8007fe6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d022      	beq.n	8007f4a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	4a47      	ldr	r2, [pc, #284]	@ (8008028 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	4a46      	ldr	r2, [pc, #280]	@ (800802c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007f12:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	2200      	movs	r2, #0
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007f34:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007f3a:	f7fe fc4d 	bl	80067d8 <HAL_DMA_Start_IT>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d13a      	bne.n	8007fbe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007f48:	e013      	b.n	8007f72 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e051      	b.n	8008016 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	3301      	adds	r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	8979      	ldrh	r1, [r7, #10]
 8007f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8008030 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 fcbb 	bl	8009900 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007fa4:	2110      	movs	r1, #16
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 fcdc 	bl	8009964 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e028      	b.n	8008010 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd2:	f043 0210 	orr.w	r2, r3, #16
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e017      	b.n	8008016 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a12      	ldr	r2, [pc, #72]	@ (8008034 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007fea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	8979      	ldrh	r1, [r7, #10]
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8008030 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 fc80 	bl	8009900 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008008:	2101      	movs	r1, #1
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f001 fcaa 	bl	8009964 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e000      	b.n	8008016 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008014:	2302      	movs	r3, #2
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	ffff0000 	.word	0xffff0000
 8008024:	080087eb 	.word	0x080087eb
 8008028:	0800976b 	.word	0x0800976b
 800802c:	08009897 	.word	0x08009897
 8008030:	80002000 	.word	0x80002000
 8008034:	080083ab 	.word	0x080083ab

08008038 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	461a      	mov	r2, r3
 8008044:	460b      	mov	r3, r1
 8008046:	817b      	strh	r3, [r7, #10]
 8008048:	4613      	mov	r3, r2
 800804a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b20      	cmp	r3, #32
 8008056:	f040 80cd 	bne.w	80081f4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008068:	d101      	bne.n	800806e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
 800806c:	e0c3      	b.n	80081f6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_I2C_Master_Receive_DMA+0x44>
 8008078:	2302      	movs	r3, #2
 800807a:	e0bc      	b.n	80081f6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2222      	movs	r2, #34	@ 0x22
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2210      	movs	r2, #16
 8008090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	893a      	ldrh	r2, [r7, #8]
 80080a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a55      	ldr	r2, [pc, #340]	@ (8008200 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80080aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4a55      	ldr	r2, [pc, #340]	@ (8008204 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80080b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2bff      	cmp	r3, #255	@ 0xff
 80080ba:	d906      	bls.n	80080ca <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	22ff      	movs	r2, #255	@ 0xff
 80080c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80080c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	e007      	b.n	80080da <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80080d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d070      	beq.n	80081c4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d020      	beq.n	800812c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	4a46      	ldr	r2, [pc, #280]	@ (8008208 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80080f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f6:	4a45      	ldr	r2, [pc, #276]	@ (800820c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80080f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008106:	2200      	movs	r2, #0
 8008108:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3324      	adds	r3, #36	@ 0x24
 8008114:	4619      	mov	r1, r3
 8008116:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800811c:	f7fe fb5c 	bl	80067d8 <HAL_DMA_Start_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008124:	7cfb      	ldrb	r3, [r7, #19]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d138      	bne.n	800819c <HAL_I2C_Master_Receive_DMA+0x164>
 800812a:	e013      	b.n	8008154 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008140:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e050      	b.n	80081f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008158:	b2da      	uxtb	r2, r3
 800815a:	8979      	ldrh	r1, [r7, #10]
 800815c:	4b2c      	ldr	r3, [pc, #176]	@ (8008210 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f001 fbcc 	bl	8009900 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008182:	2110      	movs	r1, #16
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f001 fbed 	bl	8009964 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e029      	b.n	80081f0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b0:	f043 0210 	orr.w	r2, r3, #16
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e018      	b.n	80081f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a13      	ldr	r2, [pc, #76]	@ (8008214 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80081c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	8979      	ldrh	r1, [r7, #10]
 80081d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008210 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f001 fb90 	bl	8009900 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081e8:	2102      	movs	r1, #2
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f001 fbba 	bl	8009964 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e000      	b.n	80081f6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80081f4:	2302      	movs	r3, #2
  }
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	ffff0000 	.word	0xffff0000
 8008204:	080087eb 	.word	0x080087eb
 8008208:	08009801 	.word	0x08009801
 800820c:	08009897 	.word	0x08009897
 8008210:	80002400 	.word	0x80002400
 8008214:	080083ab 	.word	0x080083ab

08008218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
  }
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00f      	beq.n	800828e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827c:	f043 0201 	orr.w	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800828c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00f      	beq.n	80082b8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a6:	f043 0208 	orr.w	r2, r3, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00f      	beq.n	80082e2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d0:	f043 0202 	orr.w	r2, r3, #2
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 030b 	and.w	r3, r3, #11
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f8fd 	bl	80094f4 <I2C_ITError>
  }
}
 80082fa:	bf00      	nop
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
 8008336:	4613      	mov	r3, r2
 8008338:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b088      	sub	sp, #32
 80083ae:	af02      	add	r7, sp, #8
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <I2C_Master_ISR_IT+0x1e>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e113      	b.n	80085f0 <I2C_Master_ISR_IT+0x246>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d012      	beq.n	8008400 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00d      	beq.n	8008400 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2210      	movs	r2, #16
 80083ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f0:	f043 0204 	orr.w	r2, r3, #4
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 f992 	bl	8009722 <I2C_Flush_TXDR>
 80083fe:	e0e4      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d022      	beq.n	8008450 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01d      	beq.n	8008450 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f023 0304 	bic.w	r3, r3, #4
 800841a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008444:	b29b      	uxth	r3, r3
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800844e:	e0bc      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d128      	bne.n	80084ac <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008460:	2b00      	cmp	r3, #0
 8008462:	d023      	beq.n	80084ac <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01e      	beq.n	80084ac <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008472:	b29b      	uxth	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80a8 	beq.w	80085ca <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80084aa:	e08e      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d05c      	beq.n	8008570 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d057      	beq.n	8008570 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d040      	beq.n	800854c <I2C_Master_ISR_IT+0x1a2>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d13c      	bne.n	800854c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084de:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2bff      	cmp	r3, #255	@ 0xff
 80084e8:	d90e      	bls.n	8008508 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	22ff      	movs	r2, #255	@ 0xff
 80084ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	8a79      	ldrh	r1, [r7, #18]
 80084f8:	2300      	movs	r3, #0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 f9fd 	bl	8009900 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008506:	e032      	b.n	800856e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800851a:	d00b      	beq.n	8008534 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008520:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008526:	8a79      	ldrh	r1, [r7, #18]
 8008528:	2000      	movs	r0, #0
 800852a:	9000      	str	r0, [sp, #0]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 f9e7 	bl	8009900 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008532:	e01c      	b.n	800856e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008538:	b2da      	uxtb	r2, r3
 800853a:	8a79      	ldrh	r1, [r7, #18]
 800853c:	2300      	movs	r3, #0
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f001 f9db 	bl	8009900 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800854a:	e010      	b.n	800856e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800855a:	d003      	beq.n	8008564 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fcb0 	bl	8008ec2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008562:	e032      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008564:	2140      	movs	r1, #64	@ 0x40
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 ffc4 	bl	80094f4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800856c:	e02d      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
 800856e:	e02c      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d027      	beq.n	80085ca <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008580:	2b00      	cmp	r3, #0
 8008582:	d022      	beq.n	80085ca <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d119      	bne.n	80085c2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800859c:	d015      	beq.n	80085ca <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085a6:	d108      	bne.n	80085ba <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085b6:	605a      	str	r2, [r3, #4]
 80085b8:	e007      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fc81 	bl	8008ec2 <I2C_ITMasterSeqCplt>
 80085c0:	e003      	b.n	80085ca <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80085c2:	2140      	movs	r1, #64	@ 0x40
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 ff95 	bl	80094f4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80085de:	6979      	ldr	r1, [r7, #20]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fd07 	bl	8008ff4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <I2C_Slave_ISR_IT+0x24>
 8008618:	2302      	movs	r3, #2
 800861a:	e0e2      	b.n	80087e2 <I2C_Slave_ISR_IT+0x1ea>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008638:	6939      	ldr	r1, [r7, #16]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 fda2 	bl	8009184 <I2C_ITSlaveCplt>
 8008640:	e0ca      	b.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d04b      	beq.n	80086e4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008652:	2b00      	cmp	r3, #0
 8008654:	d046      	beq.n	80086e4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d128      	bne.n	80086b2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b28      	cmp	r3, #40	@ 0x28
 800866a:	d108      	bne.n	800867e <I2C_Slave_ISR_IT+0x86>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008672:	d104      	bne.n	800867e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 fee8 	bl	800944c <I2C_ITListenCplt>
 800867c:	e031      	b.n	80086e2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b29      	cmp	r3, #41	@ 0x29
 8008688:	d10e      	bne.n	80086a8 <I2C_Slave_ISR_IT+0xb0>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008690:	d00a      	beq.n	80086a8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f001 f841 	bl	8009722 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fc4b 	bl	8008f3c <I2C_ITSlaveSeqCplt>
 80086a6:	e01c      	b.n	80086e2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2210      	movs	r2, #16
 80086ae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80086b0:	e08f      	b.n	80087d2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	f043 0204 	orr.w	r2, r3, #4
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <I2C_Slave_ISR_IT+0xdc>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d2:	d17e      	bne.n	80087d2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d8:	4619      	mov	r1, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 ff0a 	bl	80094f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80086e0:	e077      	b.n	80087d2 <I2C_Slave_ISR_IT+0x1da>
 80086e2:	e076      	b.n	80087d2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02f      	beq.n	800874e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d02a      	beq.n	800874e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d018      	beq.n	8008734 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d14b      	bne.n	80087d6 <I2C_Slave_ISR_IT+0x1de>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008744:	d047      	beq.n	80087d6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fbf8 	bl	8008f3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800874c:	e043      	b.n	80087d6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008762:	6939      	ldr	r1, [r7, #16]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fb28 	bl	8008dba <I2C_ITAddrCplt>
 800876a:	e035      	b.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d030      	beq.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800877c:	2b00      	cmp	r3, #0
 800877e:	d02b      	beq.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d018      	beq.n	80087bc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80087ba:	e00d      	b.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087c2:	d002      	beq.n	80087ca <I2C_Slave_ISR_IT+0x1d2>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fbb6 	bl	8008f3c <I2C_ITSlaveSeqCplt>
 80087d0:	e002      	b.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80087d2:	bf00      	nop
 80087d4:	e000      	b.n	80087d8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80087d6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b088      	sub	sp, #32
 80087ee:	af02      	add	r7, sp, #8
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <I2C_Master_ISR_DMA+0x1a>
 8008800:	2302      	movs	r3, #2
 8008802:	e0d9      	b.n	80089b8 <I2C_Master_ISR_DMA+0x1ce>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800881c:	2b00      	cmp	r3, #0
 800881e:	d011      	beq.n	8008844 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2210      	movs	r2, #16
 8008826:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882c:	f043 0204 	orr.w	r2, r3, #4
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008834:	2120      	movs	r1, #32
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f001 f894 	bl	8009964 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 ff70 	bl	8009722 <I2C_Flush_TXDR>
 8008842:	e0b4      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d071      	beq.n	8008932 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008854:	2b00      	cmp	r3, #0
 8008856:	d06c      	beq.n	8008932 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008866:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d04e      	beq.n	8008910 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	b29b      	uxth	r3, r3
 800887a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800887e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008884:	b29b      	uxth	r3, r3
 8008886:	2bff      	cmp	r3, #255	@ 0xff
 8008888:	d906      	bls.n	8008898 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	22ff      	movs	r2, #255	@ 0xff
 800888e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	e010      	b.n	80088ba <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088aa:	d003      	beq.n	80088b4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	e002      	b.n	80088ba <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80088b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	8a79      	ldrh	r1, [r7, #18]
 80088c2:	2300      	movs	r3, #0
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f001 f819 	bl	8009900 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b22      	cmp	r3, #34	@ 0x22
 80088ea:	d108      	bne.n	80088fe <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80088fc:	e057      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800890c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800890e:	e04e      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800891a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800891e:	d003      	beq.n	8008928 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 face 	bl	8008ec2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008926:	e042      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008928:	2140      	movs	r1, #64	@ 0x40
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fde2 	bl	80094f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008930:	e03d      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d028      	beq.n	800898e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008942:	2b00      	cmp	r3, #0
 8008944:	d023      	beq.n	800898e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d119      	bne.n	8008984 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800895a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800895e:	d025      	beq.n	80089ac <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008964:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008968:	d108      	bne.n	800897c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008978:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800897a:	e017      	b.n	80089ac <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 faa0 	bl	8008ec2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008982:	e013      	b.n	80089ac <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008984:	2140      	movs	r1, #64	@ 0x40
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fdb4 	bl	80094f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800898c:	e00e      	b.n	80089ac <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fb25 	bl	8008ff4 <I2C_ITMasterCplt>
 80089aa:	e000      	b.n	80089ae <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80089ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80089cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008c04 <I2C_Mem_ISR_DMA+0x244>)
 80089ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <I2C_Mem_ISR_DMA+0x1e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e10e      	b.n	8008bfc <I2C_Mem_ISR_DMA+0x23c>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d016      	beq.n	8008a1e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d011      	beq.n	8008a1e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2210      	movs	r2, #16
 8008a00:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a06:	f043 0204 	orr.w	r2, r3, #4
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a0e:	2120      	movs	r1, #32
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 ffa7 	bl	8009964 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fe83 	bl	8009722 <I2C_Flush_TXDR>
 8008a1c:	e0e9      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00e      	beq.n	8008a46 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	651a      	str	r2, [r3, #80]	@ 0x50
 8008a44:	e0d5      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d05f      	beq.n	8008b10 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05a      	beq.n	8008b10 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f001 f805 	bl	8009a6c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008a62:	2110      	movs	r1, #16
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 ff7d 	bl	8009964 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d048      	beq.n	8008b06 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2bff      	cmp	r3, #255	@ 0xff
 8008a7c:	d910      	bls.n	8008aa0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	22ff      	movs	r2, #255	@ 0xff
 8008a82:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a88:	b299      	uxth	r1, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 ff31 	bl	8009900 <I2C_TransferConfig>
 8008a9e:	e011      	b.n	8008ac4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aae:	b299      	uxth	r1, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 ff1e 	bl	8009900 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b22      	cmp	r3, #34	@ 0x22
 8008ae0:	d108      	bne.n	8008af4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008af0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008af2:	e07e      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008b04:	e075      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b06:	2140      	movs	r1, #64	@ 0x40
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fcf3 	bl	80094f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008b0e:	e070      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d05d      	beq.n	8008bd6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d058      	beq.n	8008bd6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b24:	2101      	movs	r1, #1
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 ffa0 	bl	8009a6c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b2c:	2110      	movs	r1, #16
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 ff18 	bl	8009964 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b22      	cmp	r3, #34	@ 0x22
 8008b3e:	d101      	bne.n	8008b44 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008b40:	4b31      	ldr	r3, [pc, #196]	@ (8008c08 <I2C_Mem_ISR_DMA+0x248>)
 8008b42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2bff      	cmp	r3, #255	@ 0xff
 8008b4c:	d910      	bls.n	8008b70 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22ff      	movs	r2, #255	@ 0xff
 8008b52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b58:	b299      	uxth	r1, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fec9 	bl	8009900 <I2C_TransferConfig>
 8008b6e:	e011      	b.n	8008b94 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b7e:	b299      	uxth	r1, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 feb6 	bl	8009900 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b22      	cmp	r3, #34	@ 0x22
 8008bb0:	d108      	bne.n	8008bc4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bc0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bc2:	e016      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bd2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bd4:	e00d      	b.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fa01 	bl	8008ff4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	80002000 	.word	0x80002000
 8008c08:	80002400 	.word	0x80002400

08008c0c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <I2C_Slave_ISR_DMA+0x24>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e0c0      	b.n	8008db2 <I2C_Slave_ISR_DMA+0x1a6>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fa98 	bl	8009184 <I2C_ITSlaveCplt>
 8008c54:	e0a8      	b.n	8008da8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f003 0310 	and.w	r3, r3, #16
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8095 	beq.w	8008d8c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 808f 	beq.w	8008d8c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d07d      	beq.n	8008d7e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00c      	beq.n	8008ca4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d007      	beq.n	8008cc6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d128      	bne.n	8008d1e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b28      	cmp	r3, #40	@ 0x28
 8008cd6:	d108      	bne.n	8008cea <I2C_Slave_ISR_DMA+0xde>
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cde:	d104      	bne.n	8008cea <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fbb2 	bl	800944c <I2C_ITListenCplt>
 8008ce8:	e048      	b.n	8008d7c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b29      	cmp	r3, #41	@ 0x29
 8008cf4:	d10e      	bne.n	8008d14 <I2C_Slave_ISR_DMA+0x108>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008cfc:	d00a      	beq.n	8008d14 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2210      	movs	r2, #16
 8008d04:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fd0b 	bl	8009722 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f915 	bl	8008f3c <I2C_ITSlaveSeqCplt>
 8008d12:	e033      	b.n	8008d7c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2210      	movs	r2, #16
 8008d1a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008d1c:	e034      	b.n	8008d88 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2210      	movs	r2, #16
 8008d24:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2a:	f043 0204 	orr.w	r2, r3, #4
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d38:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <I2C_Slave_ISR_DMA+0x13c>
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d46:	d11f      	bne.n	8008d88 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b21      	cmp	r3, #33	@ 0x21
 8008d4c:	d002      	beq.n	8008d54 <I2C_Slave_ISR_DMA+0x148>
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	2b29      	cmp	r3, #41	@ 0x29
 8008d52:	d103      	bne.n	8008d5c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2221      	movs	r2, #33	@ 0x21
 8008d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d5a:	e008      	b.n	8008d6e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b22      	cmp	r3, #34	@ 0x22
 8008d60:	d002      	beq.n	8008d68 <I2C_Slave_ISR_DMA+0x15c>
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d66:	d102      	bne.n	8008d6e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2222      	movs	r2, #34	@ 0x22
 8008d6c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d72:	4619      	mov	r1, r3
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fbbd 	bl	80094f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8008d7a:	e005      	b.n	8008d88 <I2C_Slave_ISR_DMA+0x17c>
 8008d7c:	e004      	b.n	8008d88 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2210      	movs	r2, #16
 8008d84:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d86:	e00f      	b.n	8008da8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8008d88:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d8a:	e00d      	b.n	8008da8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d008      	beq.n	8008da8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 f809 	bl	8008dba <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3720      	adds	r7, #32
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008dd0:	2b28      	cmp	r3, #40	@ 0x28
 8008dd2:	d16a      	bne.n	8008eaa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	0c1b      	lsrs	r3, r3, #16
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	0c1b      	lsrs	r3, r3, #16
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008df2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e00:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008e0e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d138      	bne.n	8008e8a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008e18:	897b      	ldrh	r3, [r7, #10]
 8008e1a:	09db      	lsrs	r3, r3, #7
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	89bb      	ldrh	r3, [r7, #12]
 8008e20:	4053      	eors	r3, r2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f003 0306 	and.w	r3, r3, #6
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11c      	bne.n	8008e66 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008e2c:	897b      	ldrh	r3, [r7, #10]
 8008e2e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d13b      	bne.n	8008eba <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e58:	89ba      	ldrh	r2, [r7, #12]
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff fa63 	bl	800832a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008e64:	e029      	b.n	8008eba <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008e66:	893b      	ldrh	r3, [r7, #8]
 8008e68:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fdfc 	bl	8009a6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e7c:	89ba      	ldrh	r2, [r7, #12]
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fa51 	bl	800832a <HAL_I2C_AddrCallback>
}
 8008e88:	e017      	b.n	8008eba <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008e8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fdec 	bl	8009a6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e9c:	89ba      	ldrh	r2, [r7, #12]
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fa41 	bl	800832a <HAL_I2C_AddrCallback>
}
 8008ea8:	e007      	b.n	8008eba <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2208      	movs	r2, #8
 8008eb0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b21      	cmp	r3, #33	@ 0x21
 8008edc:	d115      	bne.n	8008f0a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2211      	movs	r2, #17
 8008eea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fdb9 	bl	8009a6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f8 f8d8 	bl	80010b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f08:	e014      	b.n	8008f34 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2212      	movs	r2, #18
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f1e:	2102      	movs	r1, #2
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fda3 	bl	8009a6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7f8 f8d0 	bl	80010d4 <HAL_I2C_MasterRxCpltCallback>
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d008      	beq.n	8008f70 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e00c      	b.n	8008f8a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b29      	cmp	r3, #41	@ 0x29
 8008f94:	d112      	bne.n	8008fbc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2228      	movs	r2, #40	@ 0x28
 8008f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2221      	movs	r2, #33	@ 0x21
 8008fa2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fd60 	bl	8009a6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff f9a4 	bl	8008302 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fba:	e017      	b.n	8008fec <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fc6:	d111      	bne.n	8008fec <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2228      	movs	r2, #40	@ 0x28
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2222      	movs	r2, #34	@ 0x22
 8008fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fd47 	bl	8009a6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff f995 	bl	8008316 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2220      	movs	r2, #32
 8009008:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b21      	cmp	r3, #33	@ 0x21
 8009014:	d107      	bne.n	8009026 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009016:	2101      	movs	r1, #1
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fd27 	bl	8009a6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2211      	movs	r2, #17
 8009022:	631a      	str	r2, [r3, #48]	@ 0x30
 8009024:	e00c      	b.n	8009040 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b22      	cmp	r3, #34	@ 0x22
 8009030:	d106      	bne.n	8009040 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009032:	2102      	movs	r1, #2
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fd19 	bl	8009a6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2212      	movs	r2, #18
 800903e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6859      	ldr	r1, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b4c      	ldr	r3, [pc, #304]	@ (800917c <I2C_ITMasterCplt+0x188>)
 800904c:	400b      	ands	r3, r1
 800904e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a49      	ldr	r2, [pc, #292]	@ (8009180 <I2C_ITMasterCplt+0x18c>)
 800905a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2210      	movs	r2, #16
 800906c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	f043 0204 	orr.w	r2, r3, #4
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b60      	cmp	r3, #96	@ 0x60
 8009084:	d10a      	bne.n	800909c <I2C_ITMasterCplt+0xa8>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	b2db      	uxtb	r3, r3
 8009098:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800909a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fb40 	bl	8009722 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b60      	cmp	r3, #96	@ 0x60
 80090b2:	d002      	beq.n	80090ba <I2C_ITMasterCplt+0xc6>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d006      	beq.n	80090c8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fa17 	bl	80094f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090c6:	e054      	b.n	8009172 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b21      	cmp	r3, #33	@ 0x21
 80090d2:	d124      	bne.n	800911e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b40      	cmp	r3, #64	@ 0x40
 80090ec:	d10b      	bne.n	8009106 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff f92b 	bl	800835a <HAL_I2C_MemTxCpltCallback>
}
 8009104:	e035      	b.n	8009172 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7f7 ffce 	bl	80010b8 <HAL_I2C_MasterTxCpltCallback>
}
 800911c:	e029      	b.n	8009172 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b22      	cmp	r3, #34	@ 0x22
 8009128:	d123      	bne.n	8009172 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	d10b      	bne.n	800915c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff f90a 	bl	800836e <HAL_I2C_MemRxCpltCallback>
}
 800915a:	e00a      	b.n	8009172 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f7 ffb1 	bl	80010d4 <HAL_I2C_MasterRxCpltCallback>
}
 8009172:	bf00      	nop
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	fe00e800 	.word	0xfe00e800
 8009180:	ffff0000 	.word	0xffff0000

08009184 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2220      	movs	r2, #32
 80091ae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	2b21      	cmp	r3, #33	@ 0x21
 80091b4:	d002      	beq.n	80091bc <I2C_ITSlaveCplt+0x38>
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b29      	cmp	r3, #41	@ 0x29
 80091ba:	d108      	bne.n	80091ce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80091bc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fc53 	bl	8009a6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2221      	movs	r2, #33	@ 0x21
 80091ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80091cc:	e019      	b.n	8009202 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	2b22      	cmp	r3, #34	@ 0x22
 80091d2:	d002      	beq.n	80091da <I2C_ITSlaveCplt+0x56>
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d8:	d108      	bne.n	80091ec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80091da:	f248 0102 	movw	r1, #32770	@ 0x8002
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fc44 	bl	8009a6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2222      	movs	r2, #34	@ 0x22
 80091e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80091ea:	e00a      	b.n	8009202 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	2b28      	cmp	r3, #40	@ 0x28
 80091f0:	d107      	bne.n	8009202 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80091f2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fc38 	bl	8009a6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009210:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b89      	ldr	r3, [pc, #548]	@ (8009444 <I2C_ITSlaveCplt+0x2c0>)
 800921e:	400b      	ands	r3, r1
 8009220:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa7d 	bl	8009722 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d013      	beq.n	800925a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009240:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d01f      	beq.n	800928a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009258:	e017      	b.n	800928a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d012      	beq.n	800928a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009272:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d006      	beq.n	800928a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	b29a      	uxth	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d020      	beq.n	80092d6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f023 0304 	bic.w	r3, r3, #4
 800929a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e4:	f043 0204 	orr.w	r2, r3, #4
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d049      	beq.n	800938a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d044      	beq.n	800938a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009304:	b29b      	uxth	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d128      	bne.n	800935c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b28      	cmp	r3, #40	@ 0x28
 8009314:	d108      	bne.n	8009328 <I2C_ITSlaveCplt+0x1a4>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800931c:	d104      	bne.n	8009328 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800931e:	6979      	ldr	r1, [r7, #20]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f893 	bl	800944c <I2C_ITListenCplt>
 8009326:	e030      	b.n	800938a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b29      	cmp	r3, #41	@ 0x29
 8009332:	d10e      	bne.n	8009352 <I2C_ITSlaveCplt+0x1ce>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800933a:	d00a      	beq.n	8009352 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2210      	movs	r2, #16
 8009342:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f9ec 	bl	8009722 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fdf6 	bl	8008f3c <I2C_ITSlaveSeqCplt>
 8009350:	e01b      	b.n	800938a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2210      	movs	r2, #16
 8009358:	61da      	str	r2, [r3, #28]
 800935a:	e016      	b.n	800938a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2210      	movs	r2, #16
 8009362:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009368:	f043 0204 	orr.w	r2, r3, #4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <I2C_ITSlaveCplt+0x1fa>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800937c:	d105      	bne.n	800938a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8b5 	bl	80094f4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800939c:	2b00      	cmp	r3, #0
 800939e:	d010      	beq.n	80093c2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8a4 	bl	80094f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b28      	cmp	r3, #40	@ 0x28
 80093b6:	d141      	bne.n	800943c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f846 	bl	800944c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093c0:	e03c      	b.n	800943c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80093ca:	d014      	beq.n	80093f6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fdb5 	bl	8008f3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009448 <I2C_ITSlaveCplt+0x2c4>)
 80093d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fe ffa9 	bl	8008346 <HAL_I2C_ListenCpltCallback>
}
 80093f4:	e022      	b.n	800943c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b22      	cmp	r3, #34	@ 0x22
 8009400:	d10e      	bne.n	8009420 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7fe ff7c 	bl	8008316 <HAL_I2C_SlaveRxCpltCallback>
}
 800941e:	e00d      	b.n	800943c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe ff63 	bl	8008302 <HAL_I2C_SlaveTxCpltCallback>
}
 800943c:	bf00      	nop
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	fe00e800 	.word	0xfe00e800
 8009448:	ffff0000 	.word	0xffff0000

0800944c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a25      	ldr	r2, [pc, #148]	@ (80094f0 <I2C_ITListenCplt+0xa4>)
 800945a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f003 0304 	and.w	r3, r3, #4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d022      	beq.n	80094c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d012      	beq.n	80094c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c0:	f043 0204 	orr.w	r2, r3, #4
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80094c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 facd 	bl	8009a6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2210      	movs	r2, #16
 80094d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fe ff2f 	bl	8008346 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	ffff0000 	.word	0xffff0000

080094f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009504:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a6d      	ldr	r2, [pc, #436]	@ (80096c8 <I2C_ITError+0x1d4>)
 8009512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b28      	cmp	r3, #40	@ 0x28
 800952a:	d005      	beq.n	8009538 <I2C_ITError+0x44>
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b29      	cmp	r3, #41	@ 0x29
 8009530:	d002      	beq.n	8009538 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b2a      	cmp	r3, #42	@ 0x2a
 8009536:	d10b      	bne.n	8009550 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009538:	2103      	movs	r1, #3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa96 	bl	8009a6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2228      	movs	r2, #40	@ 0x28
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a60      	ldr	r2, [pc, #384]	@ (80096cc <I2C_ITError+0x1d8>)
 800954c:	635a      	str	r2, [r3, #52]	@ 0x34
 800954e:	e030      	b.n	80095b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009550:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fa89 	bl	8009a6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8e1 	bl	8009722 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b60      	cmp	r3, #96	@ 0x60
 800956a:	d01f      	beq.n	80095ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b20      	cmp	r3, #32
 8009580:	d114      	bne.n	80095ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b10      	cmp	r3, #16
 800958e:	d109      	bne.n	80095a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2210      	movs	r2, #16
 8009596:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800959c:	f043 0204 	orr.w	r2, r3, #4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2220      	movs	r2, #32
 80095aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d039      	beq.n	8009634 <I2C_ITError+0x140>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b11      	cmp	r3, #17
 80095c4:	d002      	beq.n	80095cc <I2C_ITError+0xd8>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b21      	cmp	r3, #33	@ 0x21
 80095ca:	d133      	bne.n	8009634 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095da:	d107      	bne.n	80095ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80095ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fd fa82 	bl	8006afa <HAL_DMA_GetState>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d017      	beq.n	800962c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009600:	4a33      	ldr	r2, [pc, #204]	@ (80096d0 <I2C_ITError+0x1dc>)
 8009602:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009610:	4618      	mov	r0, r3
 8009612:	f7fd f95c 	bl	80068ce <HAL_DMA_Abort_IT>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d04d      	beq.n	80096b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800962a:	e045      	b.n	80096b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f851 	bl	80096d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009632:	e041      	b.n	80096b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d039      	beq.n	80096b0 <I2C_ITError+0x1bc>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b12      	cmp	r3, #18
 8009640:	d002      	beq.n	8009648 <I2C_ITError+0x154>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b22      	cmp	r3, #34	@ 0x22
 8009646:	d133      	bne.n	80096b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009656:	d107      	bne.n	8009668 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009666:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966c:	4618      	mov	r0, r3
 800966e:	f7fd fa44 	bl	8006afa <HAL_DMA_GetState>
 8009672:	4603      	mov	r3, r0
 8009674:	2b01      	cmp	r3, #1
 8009676:	d017      	beq.n	80096a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800967c:	4a14      	ldr	r2, [pc, #80]	@ (80096d0 <I2C_ITError+0x1dc>)
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800968c:	4618      	mov	r0, r3
 800968e:	f7fd f91e 	bl	80068ce <HAL_DMA_Abort_IT>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d011      	beq.n	80096bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80096a2:	4610      	mov	r0, r2
 80096a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096a6:	e009      	b.n	80096bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f813 	bl	80096d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096ae:	e005      	b.n	80096bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f80f 	bl	80096d4 <I2C_TreatErrorCallback>
  }
}
 80096b6:	e002      	b.n	80096be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096b8:	bf00      	nop
 80096ba:	e000      	b.n	80096be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096bc:	bf00      	nop
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	ffff0000 	.word	0xffff0000
 80096cc:	080085f9 	.word	0x080085f9
 80096d0:	080098c5 	.word	0x080098c5

080096d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b60      	cmp	r3, #96	@ 0x60
 80096e6:	d10e      	bne.n	8009706 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fe fe49 	bl	8008396 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009704:	e009      	b.n	800971a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7fe fe34 	bl	8008382 <HAL_I2C_ErrorCallback>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d103      	bne.n	8009740 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2200      	movs	r2, #0
 800973e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b01      	cmp	r3, #1
 800974c:	d007      	beq.n	800975e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699a      	ldr	r2, [r3, #24]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	619a      	str	r2, [r3, #24]
  }
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009776:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009786:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800978c:	b29b      	uxth	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009792:	2120      	movs	r1, #32
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f8e5 	bl	8009964 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800979a:	e02d      	b.n	80097f8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80097a4:	441a      	add	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2bff      	cmp	r3, #255	@ 0xff
 80097b2:	d903      	bls.n	80097bc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	22ff      	movs	r2, #255	@ 0xff
 80097b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80097ba:	e004      	b.n	80097c6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ce:	4619      	mov	r1, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3328      	adds	r3, #40	@ 0x28
 80097d6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80097dc:	f7fc fffc 	bl	80067d8 <HAL_DMA_Start_IT>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097e6:	2110      	movs	r1, #16
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff fe83 	bl	80094f4 <I2C_ITError>
}
 80097ee:	e003      	b.n	80097f8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80097f0:	2140      	movs	r1, #64	@ 0x40
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f8b6 	bl	8009964 <I2C_Enable_IRQ>
}
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800981c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009828:	2120      	movs	r1, #32
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f89a 	bl	8009964 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009830:	e02d      	b.n	800988e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800983a:	441a      	add	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009844:	b29b      	uxth	r3, r3
 8009846:	2bff      	cmp	r3, #255	@ 0xff
 8009848:	d903      	bls.n	8009852 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	22ff      	movs	r2, #255	@ 0xff
 800984e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009850:	e004      	b.n	800985c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3324      	adds	r3, #36	@ 0x24
 8009866:	4619      	mov	r1, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009872:	f7fc ffb1 	bl	80067d8 <HAL_DMA_Start_IT>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d004      	beq.n	8009886 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800987c:	2110      	movs	r1, #16
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fe38 	bl	80094f4 <I2C_ITError>
}
 8009884:	e003      	b.n	800988e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009886:	2140      	movs	r1, #64	@ 0x40
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f86b 	bl	8009964 <I2C_Enable_IRQ>
}
 800988e:	bf00      	nop
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098b2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098b4:	2110      	movs	r1, #16
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff fe1c 	bl	80094f4 <I2C_ITError>
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098de:	2200      	movs	r2, #0
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ee:	2200      	movs	r2, #0
 80098f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7ff feee 	bl	80096d4 <I2C_TreatErrorCallback>
}
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	817b      	strh	r3, [r7, #10]
 800990e:	4613      	mov	r3, r2
 8009910:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009912:	897b      	ldrh	r3, [r7, #10]
 8009914:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009918:	7a7b      	ldrb	r3, [r7, #9]
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009920:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	4313      	orrs	r3, r2
 800992a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800992e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	0d5b      	lsrs	r3, r3, #21
 800993a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800993e:	4b08      	ldr	r3, [pc, #32]	@ (8009960 <I2C_TransferConfig+0x60>)
 8009940:	430b      	orrs	r3, r1
 8009942:	43db      	mvns	r3, r3
 8009944:	ea02 0103 	and.w	r1, r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	03ff63ff 	.word	0x03ff63ff

08009964 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009978:	4a39      	ldr	r2, [pc, #228]	@ (8009a60 <I2C_Enable_IRQ+0xfc>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d032      	beq.n	80099e4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009982:	4a38      	ldr	r2, [pc, #224]	@ (8009a64 <I2C_Enable_IRQ+0x100>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d02d      	beq.n	80099e4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800998c:	4a36      	ldr	r2, [pc, #216]	@ (8009a68 <I2C_Enable_IRQ+0x104>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d028      	beq.n	80099e4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009996:	2b00      	cmp	r3, #0
 8009998:	da03      	bge.n	80099a2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099a2:	887b      	ldrh	r3, [r7, #2]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80099b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099b4:	887b      	ldrh	r3, [r7, #2]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80099c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80099c6:	887b      	ldrh	r3, [r7, #2]
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d103      	bne.n	80099d4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80099d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099d4:	887b      	ldrh	r3, [r7, #2]
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d133      	bne.n	8009a42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f043 0320 	orr.w	r3, r3, #32
 80099e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099e2:	e02e      	b.n	8009a42 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	da03      	bge.n	80099f4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099f4:	887b      	ldrh	r3, [r7, #2]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009a04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a06:	887b      	ldrh	r3, [r7, #2]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009a16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a18:	887b      	ldrh	r3, [r7, #2]
 8009a1a:	2b10      	cmp	r3, #16
 8009a1c:	d103      	bne.n	8009a26 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d103      	bne.n	8009a34 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009a32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a34:	887b      	ldrh	r3, [r7, #2]
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	d103      	bne.n	8009a42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a40:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6819      	ldr	r1, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	080087eb 	.word	0x080087eb
 8009a64:	08008c0d 	.word	0x08008c0d
 8009a68:	080089c1 	.word	0x080089c1

08009a6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a7c:	887b      	ldrh	r3, [r7, #2]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009a8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a9a:	2b28      	cmp	r3, #40	@ 0x28
 8009a9c:	d003      	beq.n	8009aa6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009aa4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009aa6:	887b      	ldrh	r3, [r7, #2]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00f      	beq.n	8009ad0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009ab6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ac4:	2b28      	cmp	r3, #40	@ 0x28
 8009ac6:	d003      	beq.n	8009ad0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009ace:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009ad0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da03      	bge.n	8009ae0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009ade:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ae0:	887b      	ldrh	r3, [r7, #2]
 8009ae2:	2b10      	cmp	r3, #16
 8009ae4:	d103      	bne.n	8009aee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009aec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009aee:	887b      	ldrh	r3, [r7, #2]
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d103      	bne.n	8009afc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f043 0320 	orr.w	r3, r3, #32
 8009afa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009afc:	887b      	ldrh	r3, [r7, #2]
 8009afe:	2b40      	cmp	r3, #64	@ 0x40
 8009b00:	d103      	bne.n	8009b0a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b08:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	43da      	mvns	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	400a      	ands	r2, r1
 8009b1a:	601a      	str	r2, [r3, #0]
}
 8009b1c:	bf00      	nop
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d138      	bne.n	8009bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e032      	b.n	8009bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2224      	movs	r2, #36	@ 0x24
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0201 	bic.w	r2, r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6819      	ldr	r1, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e000      	b.n	8009bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d139      	bne.n	8009c48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d101      	bne.n	8009be2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bde:	2302      	movs	r3, #2
 8009be0:	e033      	b.n	8009c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2224      	movs	r2, #36	@ 0x24
 8009bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0201 	bic.w	r2, r2, #1
 8009c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f042 0201 	orr.w	r2, r2, #1
 8009c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e000      	b.n	8009c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
  }
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c60:	4b0b      	ldr	r3, [pc, #44]	@ (8009c90 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c64:	4a0a      	ldr	r2, [pc, #40]	@ (8009c90 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009c66:	f043 0301 	orr.w	r3, r3, #1
 8009c6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8009c6c:	4b08      	ldr	r3, [pc, #32]	@ (8009c90 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009c78:	4b06      	ldr	r3, [pc, #24]	@ (8009c94 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4905      	ldr	r1, [pc, #20]	@ (8009c94 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	604b      	str	r3, [r1, #4]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	40021000 	.word	0x40021000
 8009c94:	40010000 	.word	0x40010000

08009c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d141      	bne.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cb2:	d131      	bne.n	8009d18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009cb4:	4b47      	ldr	r3, [pc, #284]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cba:	4a46      	ldr	r2, [pc, #280]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cc4:	4b43      	ldr	r3, [pc, #268]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009ccc:	4a41      	ldr	r2, [pc, #260]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009cd4:	4b40      	ldr	r3, [pc, #256]	@ (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2232      	movs	r2, #50	@ 0x32
 8009cda:	fb02 f303 	mul.w	r3, r2, r3
 8009cde:	4a3f      	ldr	r2, [pc, #252]	@ (8009ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce4:	0c9b      	lsrs	r3, r3, #18
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cea:	e002      	b.n	8009cf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cf2:	4b38      	ldr	r3, [pc, #224]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cfe:	d102      	bne.n	8009d06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f2      	bne.n	8009cec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d06:	4b33      	ldr	r3, [pc, #204]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d12:	d158      	bne.n	8009dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e057      	b.n	8009dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009d18:	4b2e      	ldr	r3, [pc, #184]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009d28:	e04d      	b.n	8009dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d30:	d141      	bne.n	8009db6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d32:	4b28      	ldr	r3, [pc, #160]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d3e:	d131      	bne.n	8009da4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009d40:	4b24      	ldr	r3, [pc, #144]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d46:	4a23      	ldr	r2, [pc, #140]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d50:	4b20      	ldr	r3, [pc, #128]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009d58:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d60:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2232      	movs	r2, #50	@ 0x32
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
 8009d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8009ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d70:	0c9b      	lsrs	r3, r3, #18
 8009d72:	3301      	adds	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d76:	e002      	b.n	8009d7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d7e:	4b15      	ldr	r3, [pc, #84]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d8a:	d102      	bne.n	8009d92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f2      	bne.n	8009d78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d92:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d9e:	d112      	bne.n	8009dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e011      	b.n	8009dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009da4:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009daa:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009db4:	e007      	b.n	8009dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009db6:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009dbe:	4a05      	ldr	r2, [pc, #20]	@ (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009dc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	40007000 	.word	0x40007000
 8009dd8:	20000008 	.word	0x20000008
 8009ddc:	431bde83 	.word	0x431bde83

08009de0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009de0:	b480      	push	{r7}
 8009de2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009de4:	4b05      	ldr	r3, [pc, #20]	@ (8009dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	4a04      	ldr	r2, [pc, #16]	@ (8009dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009dee:	6093      	str	r3, [r2, #8]
}
 8009df0:	bf00      	nop
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	40007000 	.word	0x40007000

08009e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e2fe      	b.n	800a410 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d075      	beq.n	8009f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e1e:	4b97      	ldr	r3, [pc, #604]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f003 030c 	and.w	r3, r3, #12
 8009e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e28:	4b94      	ldr	r3, [pc, #592]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b0c      	cmp	r3, #12
 8009e36:	d102      	bne.n	8009e3e <HAL_RCC_OscConfig+0x3e>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d002      	beq.n	8009e44 <HAL_RCC_OscConfig+0x44>
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d10b      	bne.n	8009e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e44:	4b8d      	ldr	r3, [pc, #564]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d05b      	beq.n	8009f08 <HAL_RCC_OscConfig+0x108>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d157      	bne.n	8009f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e2d9      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e64:	d106      	bne.n	8009e74 <HAL_RCC_OscConfig+0x74>
 8009e66:	4b85      	ldr	r3, [pc, #532]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a84      	ldr	r2, [pc, #528]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	e01d      	b.n	8009eb0 <HAL_RCC_OscConfig+0xb0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e7c:	d10c      	bne.n	8009e98 <HAL_RCC_OscConfig+0x98>
 8009e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a7e      	ldr	r2, [pc, #504]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	e00b      	b.n	8009eb0 <HAL_RCC_OscConfig+0xb0>
 8009e98:	4b78      	ldr	r3, [pc, #480]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a77      	ldr	r2, [pc, #476]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	4b75      	ldr	r3, [pc, #468]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a74      	ldr	r2, [pc, #464]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d013      	beq.n	8009ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb8:	f7fa f9e2 	bl	8004280 <HAL_GetTick>
 8009ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ec0:	f7fa f9de 	bl	8004280 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	@ 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e29e      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <HAL_RCC_OscConfig+0xc0>
 8009ede:	e014      	b.n	8009f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fa f9ce 	bl	8004280 <HAL_GetTick>
 8009ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ee8:	f7fa f9ca 	bl	8004280 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b64      	cmp	r3, #100	@ 0x64
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e28a      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009efa:	4b60      	ldr	r3, [pc, #384]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1f0      	bne.n	8009ee8 <HAL_RCC_OscConfig+0xe8>
 8009f06:	e000      	b.n	8009f0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d075      	beq.n	800a002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f16:	4b59      	ldr	r3, [pc, #356]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 030c 	and.w	r3, r3, #12
 8009f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f20:	4b56      	ldr	r3, [pc, #344]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d102      	bne.n	8009f36 <HAL_RCC_OscConfig+0x136>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d002      	beq.n	8009f3c <HAL_RCC_OscConfig+0x13c>
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d11f      	bne.n	8009f7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_RCC_OscConfig+0x154>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e25d      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f54:	4b49      	ldr	r3, [pc, #292]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	061b      	lsls	r3, r3, #24
 8009f62:	4946      	ldr	r1, [pc, #280]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009f68:	4b45      	ldr	r3, [pc, #276]	@ (800a080 <HAL_RCC_OscConfig+0x280>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fa f93b 	bl	80041e8 <HAL_InitTick>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d043      	beq.n	800a000 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e249      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d023      	beq.n	8009fcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f84:	4b3d      	ldr	r3, [pc, #244]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a3c      	ldr	r2, [pc, #240]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f90:	f7fa f976 	bl	8004280 <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f98:	f7fa f972 	bl	8004280 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e232      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009faa:	4b34      	ldr	r3, [pc, #208]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f0      	beq.n	8009f98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb6:	4b31      	ldr	r3, [pc, #196]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	061b      	lsls	r3, r3, #24
 8009fc4:	492d      	ldr	r1, [pc, #180]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	604b      	str	r3, [r1, #4]
 8009fca:	e01a      	b.n	800a002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009fd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd8:	f7fa f952 	bl	8004280 <HAL_GetTick>
 8009fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fde:	e008      	b.n	8009ff2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fe0:	f7fa f94e 	bl	8004280 <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e20e      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ff2:	4b22      	ldr	r3, [pc, #136]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f0      	bne.n	8009fe0 <HAL_RCC_OscConfig+0x1e0>
 8009ffe:	e000      	b.n	800a002 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0308 	and.w	r3, r3, #8
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d041      	beq.n	800a092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01c      	beq.n	800a050 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a016:	4b19      	ldr	r3, [pc, #100]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 800a018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a01c:	4a17      	ldr	r2, [pc, #92]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a026:	f7fa f92b 	bl	8004280 <HAL_GetTick>
 800a02a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a02c:	e008      	b.n	800a040 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a02e:	f7fa f927 	bl	8004280 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e1e7      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a040:	4b0e      	ldr	r3, [pc, #56]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 800a042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ef      	beq.n	800a02e <HAL_RCC_OscConfig+0x22e>
 800a04e:	e020      	b.n	800a092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a050:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 800a052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a056:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <HAL_RCC_OscConfig+0x27c>)
 800a058:	f023 0301 	bic.w	r3, r3, #1
 800a05c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a060:	f7fa f90e 	bl	8004280 <HAL_GetTick>
 800a064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a066:	e00d      	b.n	800a084 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a068:	f7fa f90a 	bl	8004280 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d906      	bls.n	800a084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e1ca      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
 800a07a:	bf00      	nop
 800a07c:	40021000 	.word	0x40021000
 800a080:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a084:	4b8c      	ldr	r3, [pc, #560]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1ea      	bne.n	800a068 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0304 	and.w	r3, r3, #4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 80a6 	beq.w	800a1ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a0a4:	4b84      	ldr	r3, [pc, #528]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x2b4>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <HAL_RCC_OscConfig+0x2b6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0ba:	4b7f      	ldr	r3, [pc, #508]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0be:	4a7e      	ldr	r2, [pc, #504]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a0c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0c6:	4b7c      	ldr	r3, [pc, #496]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0d6:	4b79      	ldr	r3, [pc, #484]	@ (800a2bc <HAL_RCC_OscConfig+0x4bc>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d118      	bne.n	800a114 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0e2:	4b76      	ldr	r3, [pc, #472]	@ (800a2bc <HAL_RCC_OscConfig+0x4bc>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a75      	ldr	r2, [pc, #468]	@ (800a2bc <HAL_RCC_OscConfig+0x4bc>)
 800a0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0ee:	f7fa f8c7 	bl	8004280 <HAL_GetTick>
 800a0f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0f4:	e008      	b.n	800a108 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0f6:	f7fa f8c3 	bl	8004280 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e183      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a108:	4b6c      	ldr	r3, [pc, #432]	@ (800a2bc <HAL_RCC_OscConfig+0x4bc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0f0      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d108      	bne.n	800a12e <HAL_RCC_OscConfig+0x32e>
 800a11c:	4b66      	ldr	r3, [pc, #408]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a122:	4a65      	ldr	r2, [pc, #404]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a124:	f043 0301 	orr.w	r3, r3, #1
 800a128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a12c:	e024      	b.n	800a178 <HAL_RCC_OscConfig+0x378>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b05      	cmp	r3, #5
 800a134:	d110      	bne.n	800a158 <HAL_RCC_OscConfig+0x358>
 800a136:	4b60      	ldr	r3, [pc, #384]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13c:	4a5e      	ldr	r2, [pc, #376]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a13e:	f043 0304 	orr.w	r3, r3, #4
 800a142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a146:	4b5c      	ldr	r3, [pc, #368]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a14c:	4a5a      	ldr	r2, [pc, #360]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a156:	e00f      	b.n	800a178 <HAL_RCC_OscConfig+0x378>
 800a158:	4b57      	ldr	r3, [pc, #348]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a15e:	4a56      	ldr	r2, [pc, #344]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a160:	f023 0301 	bic.w	r3, r3, #1
 800a164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a168:	4b53      	ldr	r3, [pc, #332]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a16e:	4a52      	ldr	r2, [pc, #328]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a170:	f023 0304 	bic.w	r3, r3, #4
 800a174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d016      	beq.n	800a1ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a180:	f7fa f87e 	bl	8004280 <HAL_GetTick>
 800a184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a186:	e00a      	b.n	800a19e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a188:	f7fa f87a 	bl	8004280 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a196:	4293      	cmp	r3, r2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e138      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a19e:	4b46      	ldr	r3, [pc, #280]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0ed      	beq.n	800a188 <HAL_RCC_OscConfig+0x388>
 800a1ac:	e015      	b.n	800a1da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ae:	f7fa f867 	bl	8004280 <HAL_GetTick>
 800a1b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1b4:	e00a      	b.n	800a1cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b6:	f7fa f863 	bl	8004280 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d901      	bls.n	800a1cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e121      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1cc:	4b3a      	ldr	r3, [pc, #232]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1ed      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1da:	7ffb      	ldrb	r3, [r7, #31]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d105      	bne.n	800a1ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1e0:	4b35      	ldr	r3, [pc, #212]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e4:	4a34      	ldr	r2, [pc, #208]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a1e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0320 	and.w	r3, r3, #32
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d03c      	beq.n	800a272 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01c      	beq.n	800a23a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a200:	4b2d      	ldr	r3, [pc, #180]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a206:	4a2c      	ldr	r2, [pc, #176]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a210:	f7fa f836 	bl	8004280 <HAL_GetTick>
 800a214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a218:	f7fa f832 	bl	8004280 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e0f2      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a22a:	4b23      	ldr	r3, [pc, #140]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a22c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0ef      	beq.n	800a218 <HAL_RCC_OscConfig+0x418>
 800a238:	e01b      	b.n	800a272 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a23a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a23c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a240:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a242:	f023 0301 	bic.w	r3, r3, #1
 800a246:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24a:	f7fa f819 	bl	8004280 <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a250:	e008      	b.n	800a264 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a252:	f7fa f815 	bl	8004280 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e0d5      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a264:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1ef      	bne.n	800a252 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80c9 	beq.w	800a40e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a27c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f003 030c 	and.w	r3, r3, #12
 800a284:	2b0c      	cmp	r3, #12
 800a286:	f000 8083 	beq.w	800a390 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d15e      	bne.n	800a350 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a292:	4b09      	ldr	r3, [pc, #36]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <HAL_RCC_OscConfig+0x4b8>)
 800a298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a29c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a29e:	f7f9 ffef 	bl	8004280 <HAL_GetTick>
 800a2a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2a4:	e00c      	b.n	800a2c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2a6:	f7f9 ffeb 	bl	8004280 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d905      	bls.n	800a2c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e0ab      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2c0:	4b55      	ldr	r3, [pc, #340]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1ec      	bne.n	800a2a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2cc:	4b52      	ldr	r3, [pc, #328]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	4b52      	ldr	r3, [pc, #328]	@ (800a41c <HAL_RCC_OscConfig+0x61c>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6a11      	ldr	r1, [r2, #32]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a2dc:	3a01      	subs	r2, #1
 800a2de:	0112      	lsls	r2, r2, #4
 800a2e0:	4311      	orrs	r1, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a2e6:	0212      	lsls	r2, r2, #8
 800a2e8:	4311      	orrs	r1, r2
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a2ee:	0852      	lsrs	r2, r2, #1
 800a2f0:	3a01      	subs	r2, #1
 800a2f2:	0552      	lsls	r2, r2, #21
 800a2f4:	4311      	orrs	r1, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a2fa:	0852      	lsrs	r2, r2, #1
 800a2fc:	3a01      	subs	r2, #1
 800a2fe:	0652      	lsls	r2, r2, #25
 800a300:	4311      	orrs	r1, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a306:	06d2      	lsls	r2, r2, #27
 800a308:	430a      	orrs	r2, r1
 800a30a:	4943      	ldr	r1, [pc, #268]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a310:	4b41      	ldr	r3, [pc, #260]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a40      	ldr	r2, [pc, #256]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a31a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a31c:	4b3e      	ldr	r3, [pc, #248]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4a3d      	ldr	r2, [pc, #244]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a328:	f7f9 ffaa 	bl	8004280 <HAL_GetTick>
 800a32c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a32e:	e008      	b.n	800a342 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a330:	f7f9 ffa6 	bl	8004280 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e066      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a342:	4b35      	ldr	r3, [pc, #212]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f0      	beq.n	800a330 <HAL_RCC_OscConfig+0x530>
 800a34e:	e05e      	b.n	800a40e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a350:	4b31      	ldr	r3, [pc, #196]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a30      	ldr	r2, [pc, #192]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a35a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a35c:	f7f9 ff90 	bl	8004280 <HAL_GetTick>
 800a360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a364:	f7f9 ff8c 	bl	8004280 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e04c      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a376:	4b28      	ldr	r3, [pc, #160]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f0      	bne.n	800a364 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a382:	4b25      	ldr	r3, [pc, #148]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	4924      	ldr	r1, [pc, #144]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a388:	4b25      	ldr	r3, [pc, #148]	@ (800a420 <HAL_RCC_OscConfig+0x620>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	60cb      	str	r3, [r1, #12]
 800a38e:	e03e      	b.n	800a40e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d101      	bne.n	800a39c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e039      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a39c:	4b1e      	ldr	r3, [pc, #120]	@ (800a418 <HAL_RCC_OscConfig+0x618>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f003 0203 	and.w	r2, r3, #3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d12c      	bne.n	800a40a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d123      	bne.n	800a40a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d11b      	bne.n	800a40a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d113      	bne.n	800a40a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ec:	085b      	lsrs	r3, r3, #1
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d109      	bne.n	800a40a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	3b01      	subs	r3, #1
 800a404:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a406:	429a      	cmp	r2, r3
 800a408:	d001      	beq.n	800a40e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40021000 	.word	0x40021000
 800a41c:	019f800c 	.word	0x019f800c
 800a420:	feeefffc 	.word	0xfeeefffc

0800a424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a42e:	2300      	movs	r3, #0
 800a430:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e11e      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a43c:	4b91      	ldr	r3, [pc, #580]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d910      	bls.n	800a46c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a44a:	4b8e      	ldr	r3, [pc, #568]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f023 020f 	bic.w	r2, r3, #15
 800a452:	498c      	ldr	r1, [pc, #560]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	4313      	orrs	r3, r2
 800a458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a45a:	4b8a      	ldr	r3, [pc, #552]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d001      	beq.n	800a46c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e106      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d073      	beq.n	800a560 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d129      	bne.n	800a4d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a480:	4b81      	ldr	r3, [pc, #516]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0f4      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a490:	f000 f966 	bl	800a760 <RCC_GetSysClockFreqFromPLLSource>
 800a494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	4a7c      	ldr	r2, [pc, #496]	@ (800a68c <HAL_RCC_ClockConfig+0x268>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d93f      	bls.n	800a51e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a49e:	4b7a      	ldr	r3, [pc, #488]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d009      	beq.n	800a4be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d033      	beq.n	800a51e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d12f      	bne.n	800a51e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a4be:	4b72      	ldr	r3, [pc, #456]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4c6:	4a70      	ldr	r2, [pc, #448]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a4c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a4ce:	2380      	movs	r3, #128	@ 0x80
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	e024      	b.n	800a51e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d107      	bne.n	800a4ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4dc:	4b6a      	ldr	r3, [pc, #424]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0c6      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4ec:	4b66      	ldr	r3, [pc, #408]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e0be      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a4fc:	f000 f8ce 	bl	800a69c <HAL_RCC_GetSysClockFreq>
 800a500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4a61      	ldr	r2, [pc, #388]	@ (800a68c <HAL_RCC_ClockConfig+0x268>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d909      	bls.n	800a51e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a50a:	4b5f      	ldr	r3, [pc, #380]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a512:	4a5d      	ldr	r2, [pc, #372]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a518:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a51a:	2380      	movs	r3, #128	@ 0x80
 800a51c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a51e:	4b5a      	ldr	r3, [pc, #360]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f023 0203 	bic.w	r2, r3, #3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	4957      	ldr	r1, [pc, #348]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a530:	f7f9 fea6 	bl	8004280 <HAL_GetTick>
 800a534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a536:	e00a      	b.n	800a54e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a538:	f7f9 fea2 	bl	8004280 <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a546:	4293      	cmp	r3, r2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e095      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a54e:	4b4e      	ldr	r3, [pc, #312]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f003 020c 	and.w	r2, r3, #12
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d1eb      	bne.n	800a538 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d023      	beq.n	800a5b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a578:	4b43      	ldr	r3, [pc, #268]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	4a42      	ldr	r2, [pc, #264]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a57e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a582:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a590:	4b3d      	ldr	r3, [pc, #244]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a598:	4a3b      	ldr	r2, [pc, #236]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a59a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a59e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5a0:	4b39      	ldr	r3, [pc, #228]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4936      	ldr	r1, [pc, #216]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	608b      	str	r3, [r1, #8]
 800a5b2:	e008      	b.n	800a5c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b80      	cmp	r3, #128	@ 0x80
 800a5b8:	d105      	bne.n	800a5c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a5ba:	4b33      	ldr	r3, [pc, #204]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4a32      	ldr	r2, [pc, #200]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a5c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d21d      	bcs.n	800a610 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f023 020f 	bic.w	r2, r3, #15
 800a5dc:	4929      	ldr	r1, [pc, #164]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a5e4:	f7f9 fe4c 	bl	8004280 <HAL_GetTick>
 800a5e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ea:	e00a      	b.n	800a602 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5ec:	f7f9 fe48 	bl	8004280 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d901      	bls.n	800a602 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e03b      	b.n	800a67a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a602:	4b20      	ldr	r3, [pc, #128]	@ (800a684 <HAL_RCC_ClockConfig+0x260>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d1ed      	bne.n	800a5ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a61c:	4b1a      	ldr	r3, [pc, #104]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	4917      	ldr	r1, [pc, #92]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0308 	and.w	r3, r3, #8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d009      	beq.n	800a64e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a63a:	4b13      	ldr	r3, [pc, #76]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	490f      	ldr	r1, [pc, #60]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a64e:	f000 f825 	bl	800a69c <HAL_RCC_GetSysClockFreq>
 800a652:	4602      	mov	r2, r0
 800a654:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <HAL_RCC_ClockConfig+0x264>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	091b      	lsrs	r3, r3, #4
 800a65a:	f003 030f 	and.w	r3, r3, #15
 800a65e:	490c      	ldr	r1, [pc, #48]	@ (800a690 <HAL_RCC_ClockConfig+0x26c>)
 800a660:	5ccb      	ldrb	r3, [r1, r3]
 800a662:	f003 031f 	and.w	r3, r3, #31
 800a666:	fa22 f303 	lsr.w	r3, r2, r3
 800a66a:	4a0a      	ldr	r2, [pc, #40]	@ (800a694 <HAL_RCC_ClockConfig+0x270>)
 800a66c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a66e:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <HAL_RCC_ClockConfig+0x274>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4618      	mov	r0, r3
 800a674:	f7f9 fdb8 	bl	80041e8 <HAL_InitTick>
 800a678:	4603      	mov	r3, r0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40022000 	.word	0x40022000
 800a688:	40021000 	.word	0x40021000
 800a68c:	04c4b400 	.word	0x04c4b400
 800a690:	0800c158 	.word	0x0800c158
 800a694:	20000008 	.word	0x20000008
 800a698:	2000000c 	.word	0x2000000c

0800a69c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a6a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f003 030c 	and.w	r3, r3, #12
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d102      	bne.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a6ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	e047      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a6b4:	4b27      	ldr	r3, [pc, #156]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f003 030c 	and.w	r3, r3, #12
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d102      	bne.n	800a6c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6c0:	4b26      	ldr	r3, [pc, #152]	@ (800a75c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	e03e      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a6c6:	4b23      	ldr	r3, [pc, #140]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f003 030c 	and.w	r3, r3, #12
 800a6ce:	2b0c      	cmp	r3, #12
 800a6d0:	d136      	bne.n	800a740 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6d2:	4b20      	ldr	r3, [pc, #128]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	091b      	lsrs	r3, r3, #4
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d10c      	bne.n	800a70a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a75c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f8:	4a16      	ldr	r2, [pc, #88]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6fa:	68d2      	ldr	r2, [r2, #12]
 800a6fc:	0a12      	lsrs	r2, r2, #8
 800a6fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a702:	fb02 f303 	mul.w	r3, r2, r3
 800a706:	617b      	str	r3, [r7, #20]
      break;
 800a708:	e00c      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a70a:	4a13      	ldr	r2, [pc, #76]	@ (800a758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a712:	4a10      	ldr	r2, [pc, #64]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a714:	68d2      	ldr	r2, [r2, #12]
 800a716:	0a12      	lsrs	r2, r2, #8
 800a718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	617b      	str	r3, [r7, #20]
      break;
 800a722:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a724:	4b0b      	ldr	r3, [pc, #44]	@ (800a754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	0e5b      	lsrs	r3, r3, #25
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	3301      	adds	r3, #1
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	e001      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a744:	693b      	ldr	r3, [r7, #16]
}
 800a746:	4618      	mov	r0, r3
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	40021000 	.word	0x40021000
 800a758:	00f42400 	.word	0x00f42400
 800a75c:	016e3600 	.word	0x016e3600

0800a760 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a766:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a770:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b03      	cmp	r3, #3
 800a782:	d10c      	bne.n	800a79e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a784:	4a17      	ldr	r2, [pc, #92]	@ (800a7e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78c:	4a14      	ldr	r2, [pc, #80]	@ (800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a78e:	68d2      	ldr	r2, [r2, #12]
 800a790:	0a12      	lsrs	r2, r2, #8
 800a792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a796:	fb02 f303 	mul.w	r3, r2, r3
 800a79a:	617b      	str	r3, [r7, #20]
    break;
 800a79c:	e00c      	b.n	800a7b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a79e:	4a12      	ldr	r2, [pc, #72]	@ (800a7e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7a8:	68d2      	ldr	r2, [r2, #12]
 800a7aa:	0a12      	lsrs	r2, r2, #8
 800a7ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a7b0:	fb02 f303 	mul.w	r3, r2, r3
 800a7b4:	617b      	str	r3, [r7, #20]
    break;
 800a7b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a7b8:	4b09      	ldr	r3, [pc, #36]	@ (800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	0e5b      	lsrs	r3, r3, #25
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a7d2:	687b      	ldr	r3, [r7, #4]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	40021000 	.word	0x40021000
 800a7e4:	016e3600 	.word	0x016e3600
 800a7e8:	00f42400 	.word	0x00f42400

0800a7ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8098 	beq.w	800a93a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a80a:	2300      	movs	r3, #0
 800a80c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a80e:	4b43      	ldr	r3, [pc, #268]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10d      	bne.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a81a:	4b40      	ldr	r3, [pc, #256]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81e:	4a3f      	ldr	r2, [pc, #252]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a824:	6593      	str	r3, [r2, #88]	@ 0x58
 800a826:	4b3d      	ldr	r3, [pc, #244]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a82a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a82e:	60bb      	str	r3, [r7, #8]
 800a830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a832:	2301      	movs	r3, #1
 800a834:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a836:	4b3a      	ldr	r3, [pc, #232]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a39      	ldr	r2, [pc, #228]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a83c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a842:	f7f9 fd1d 	bl	8004280 <HAL_GetTick>
 800a846:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a848:	e009      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a84a:	f7f9 fd19 	bl	8004280 <HAL_GetTick>
 800a84e:	4602      	mov	r2, r0
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	2b02      	cmp	r3, #2
 800a856:	d902      	bls.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a858:	2303      	movs	r3, #3
 800a85a:	74fb      	strb	r3, [r7, #19]
        break;
 800a85c:	e005      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a85e:	4b30      	ldr	r3, [pc, #192]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0ef      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a86a:	7cfb      	ldrb	r3, [r7, #19]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d159      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a870:	4b2a      	ldr	r3, [pc, #168]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a87a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01e      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d019      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a896:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a898:	4b20      	ldr	r3, [pc, #128]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89e:	4a1f      	ldr	r2, [pc, #124]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a8a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a8b8:	4a18      	ldr	r2, [pc, #96]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d016      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ca:	f7f9 fcd9 	bl	8004280 <HAL_GetTick>
 800a8ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8d0:	e00b      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d2:	f7f9 fcd5 	bl	8004280 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d902      	bls.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	74fb      	strb	r3, [r7, #19]
            break;
 800a8e8:	e006      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0ec      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a8f8:	7cfb      	ldrb	r3, [r7, #19]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8fe:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a90c:	4903      	ldr	r1, [pc, #12]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a914:	e008      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a916:	7cfb      	ldrb	r3, [r7, #19]
 800a918:	74bb      	strb	r3, [r7, #18]
 800a91a:	e005      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a91c:	40021000 	.word	0x40021000
 800a920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a924:	7cfb      	ldrb	r3, [r7, #19]
 800a926:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a928:	7c7b      	ldrb	r3, [r7, #17]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d105      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a92e:	4ba7      	ldr	r3, [pc, #668]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a932:	4aa6      	ldr	r2, [pc, #664]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a938:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a946:	4ba1      	ldr	r3, [pc, #644]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a94c:	f023 0203 	bic.w	r2, r3, #3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	499d      	ldr	r1, [pc, #628]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a956:	4313      	orrs	r3, r2
 800a958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00a      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a968:	4b98      	ldr	r3, [pc, #608]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a96e:	f023 020c 	bic.w	r2, r3, #12
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	4995      	ldr	r1, [pc, #596]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0304 	and.w	r3, r3, #4
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00a      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a98a:	4b90      	ldr	r3, [pc, #576]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a990:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	498c      	ldr	r1, [pc, #560]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0308 	and.w	r3, r3, #8
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00a      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a9ac:	4b87      	ldr	r3, [pc, #540]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	4984      	ldr	r1, [pc, #528]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a9ce:	4b7f      	ldr	r3, [pc, #508]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	497b      	ldr	r1, [pc, #492]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0320 	and.w	r3, r3, #32
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00a      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9f0:	4b76      	ldr	r3, [pc, #472]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	4973      	ldr	r1, [pc, #460]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa00:	4313      	orrs	r3, r2
 800aa02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa12:	4b6e      	ldr	r3, [pc, #440]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	496a      	ldr	r1, [pc, #424]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa22:	4313      	orrs	r3, r2
 800aa24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00a      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aa34:	4b65      	ldr	r3, [pc, #404]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	4962      	ldr	r1, [pc, #392]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aa56:	4b5d      	ldr	r3, [pc, #372]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa64:	4959      	ldr	r1, [pc, #356]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00a      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa78:	4b54      	ldr	r3, [pc, #336]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa7e:	f023 0203 	bic.w	r2, r3, #3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa86:	4951      	ldr	r1, [pc, #324]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa9a:	4b4c      	ldr	r3, [pc, #304]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa8:	4948      	ldr	r1, [pc, #288]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d015      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aabc:	4b43      	ldr	r3, [pc, #268]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaca:	4940      	ldr	r1, [pc, #256]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aada:	d105      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aadc:	4b3b      	ldr	r3, [pc, #236]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	4a3a      	ldr	r2, [pc, #232]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aae6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d015      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aaf4:	4b35      	ldr	r3, [pc, #212]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aafa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab02:	4932      	ldr	r1, [pc, #200]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab12:	d105      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab14:	4b2d      	ldr	r3, [pc, #180]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	4a2c      	ldr	r2, [pc, #176]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab1e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d015      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab2c:	4b27      	ldr	r3, [pc, #156]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab3a:	4924      	ldr	r1, [pc, #144]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab4a:	d105      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab4c:	4b1f      	ldr	r3, [pc, #124]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	4a1e      	ldr	r2, [pc, #120]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d015      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab64:	4b19      	ldr	r3, [pc, #100]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab72:	4916      	ldr	r1, [pc, #88]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab82:	d105      	bne.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab84:	4b11      	ldr	r3, [pc, #68]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	4a10      	ldr	r2, [pc, #64]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d019      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abaa:	4908      	ldr	r1, [pc, #32]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abac:	4313      	orrs	r3, r2
 800abae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abba:	d109      	bne.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abbc:	4b03      	ldr	r3, [pc, #12]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	4a02      	ldr	r2, [pc, #8]	@ (800abcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abc6:	60d3      	str	r3, [r2, #12]
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800abca:	bf00      	nop
 800abcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d015      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800abdc:	4b29      	ldr	r3, [pc, #164]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abea:	4926      	ldr	r1, [pc, #152]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abec:	4313      	orrs	r3, r2
 800abee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abfa:	d105      	bne.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800abfc:	4b21      	ldr	r3, [pc, #132]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	4a20      	ldr	r2, [pc, #128]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d015      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ac14:	4b1b      	ldr	r3, [pc, #108]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac22:	4918      	ldr	r1, [pc, #96]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac32:	d105      	bne.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ac34:	4b13      	ldr	r3, [pc, #76]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	4a12      	ldr	r2, [pc, #72]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d015      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac5a:	490a      	ldr	r1, [pc, #40]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac6a:	d105      	bne.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac6c:	4b05      	ldr	r3, [pc, #20]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	4a04      	ldr	r2, [pc, #16]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ac78:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	40021000 	.word	0x40021000

0800ac88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e049      	b.n	800ad2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f8 fc48 	bl	8003544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3304      	adds	r3, #4
 800acc4:	4619      	mov	r1, r3
 800acc6:	4610      	mov	r0, r2
 800acc8:	f000 fa5c 	bl	800b184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d109      	bne.n	800ad5c <HAL_TIM_PWM_Start+0x24>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	bf14      	ite	ne
 800ad54:	2301      	movne	r3, #1
 800ad56:	2300      	moveq	r3, #0
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	e03c      	b.n	800add6 <HAL_TIM_PWM_Start+0x9e>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d109      	bne.n	800ad76 <HAL_TIM_PWM_Start+0x3e>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	bf14      	ite	ne
 800ad6e:	2301      	movne	r3, #1
 800ad70:	2300      	moveq	r3, #0
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	e02f      	b.n	800add6 <HAL_TIM_PWM_Start+0x9e>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d109      	bne.n	800ad90 <HAL_TIM_PWM_Start+0x58>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	e022      	b.n	800add6 <HAL_TIM_PWM_Start+0x9e>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b0c      	cmp	r3, #12
 800ad94:	d109      	bne.n	800adaa <HAL_TIM_PWM_Start+0x72>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	bf14      	ite	ne
 800ada2:	2301      	movne	r3, #1
 800ada4:	2300      	moveq	r3, #0
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	e015      	b.n	800add6 <HAL_TIM_PWM_Start+0x9e>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2b10      	cmp	r3, #16
 800adae:	d109      	bne.n	800adc4 <HAL_TIM_PWM_Start+0x8c>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b01      	cmp	r3, #1
 800adba:	bf14      	ite	ne
 800adbc:	2301      	movne	r3, #1
 800adbe:	2300      	moveq	r3, #0
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	e008      	b.n	800add6 <HAL_TIM_PWM_Start+0x9e>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b01      	cmp	r3, #1
 800adce:	bf14      	ite	ne
 800add0:	2301      	movne	r3, #1
 800add2:	2300      	moveq	r3, #0
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0a6      	b.n	800af2c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d104      	bne.n	800adee <HAL_TIM_PWM_Start+0xb6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2202      	movs	r2, #2
 800ade8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adec:	e023      	b.n	800ae36 <HAL_TIM_PWM_Start+0xfe>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d104      	bne.n	800adfe <HAL_TIM_PWM_Start+0xc6>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adfc:	e01b      	b.n	800ae36 <HAL_TIM_PWM_Start+0xfe>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_PWM_Start+0xd6>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2202      	movs	r2, #2
 800ae08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae0c:	e013      	b.n	800ae36 <HAL_TIM_PWM_Start+0xfe>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b0c      	cmp	r3, #12
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_PWM_Start+0xe6>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae1c:	e00b      	b.n	800ae36 <HAL_TIM_PWM_Start+0xfe>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d104      	bne.n	800ae2e <HAL_TIM_PWM_Start+0xf6>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae2c:	e003      	b.n	800ae36 <HAL_TIM_PWM_Start+0xfe>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2202      	movs	r2, #2
 800ae32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fd7e 	bl	800b940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a3a      	ldr	r2, [pc, #232]	@ (800af34 <HAL_TIM_PWM_Start+0x1fc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d018      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x148>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a39      	ldr	r2, [pc, #228]	@ (800af38 <HAL_TIM_PWM_Start+0x200>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d013      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x148>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a37      	ldr	r2, [pc, #220]	@ (800af3c <HAL_TIM_PWM_Start+0x204>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d00e      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x148>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a36      	ldr	r2, [pc, #216]	@ (800af40 <HAL_TIM_PWM_Start+0x208>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d009      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x148>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a34      	ldr	r2, [pc, #208]	@ (800af44 <HAL_TIM_PWM_Start+0x20c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d004      	beq.n	800ae80 <HAL_TIM_PWM_Start+0x148>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a33      	ldr	r2, [pc, #204]	@ (800af48 <HAL_TIM_PWM_Start+0x210>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d101      	bne.n	800ae84 <HAL_TIM_PWM_Start+0x14c>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <HAL_TIM_PWM_Start+0x14e>
 800ae84:	2300      	movs	r3, #0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a25      	ldr	r2, [pc, #148]	@ (800af34 <HAL_TIM_PWM_Start+0x1fc>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d022      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeac:	d01d      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a26      	ldr	r2, [pc, #152]	@ (800af4c <HAL_TIM_PWM_Start+0x214>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d018      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a24      	ldr	r2, [pc, #144]	@ (800af50 <HAL_TIM_PWM_Start+0x218>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d013      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a23      	ldr	r2, [pc, #140]	@ (800af54 <HAL_TIM_PWM_Start+0x21c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00e      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a19      	ldr	r2, [pc, #100]	@ (800af38 <HAL_TIM_PWM_Start+0x200>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d009      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a18      	ldr	r2, [pc, #96]	@ (800af3c <HAL_TIM_PWM_Start+0x204>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d004      	beq.n	800aeea <HAL_TIM_PWM_Start+0x1b2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a18      	ldr	r2, [pc, #96]	@ (800af48 <HAL_TIM_PWM_Start+0x210>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d115      	bne.n	800af16 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	4b19      	ldr	r3, [pc, #100]	@ (800af58 <HAL_TIM_PWM_Start+0x220>)
 800aef2:	4013      	ands	r3, r2
 800aef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b06      	cmp	r3, #6
 800aefa:	d015      	beq.n	800af28 <HAL_TIM_PWM_Start+0x1f0>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af02:	d011      	beq.n	800af28 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f042 0201 	orr.w	r2, r2, #1
 800af12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af14:	e008      	b.n	800af28 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f042 0201 	orr.w	r2, r2, #1
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	e000      	b.n	800af2a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	40012c00 	.word	0x40012c00
 800af38:	40013400 	.word	0x40013400
 800af3c:	40014000 	.word	0x40014000
 800af40:	40014400 	.word	0x40014400
 800af44:	40014800 	.word	0x40014800
 800af48:	40015000 	.word	0x40015000
 800af4c:	40000400 	.word	0x40000400
 800af50:	40000800 	.word	0x40000800
 800af54:	40000c00 	.word	0x40000c00
 800af58:	00010007 	.word	0x00010007

0800af5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af76:	2302      	movs	r3, #2
 800af78:	e0ff      	b.n	800b17a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b14      	cmp	r3, #20
 800af86:	f200 80f0 	bhi.w	800b16a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af8a:	a201      	add	r2, pc, #4	@ (adr r2, 800af90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800afe5 	.word	0x0800afe5
 800af94:	0800b16b 	.word	0x0800b16b
 800af98:	0800b16b 	.word	0x0800b16b
 800af9c:	0800b16b 	.word	0x0800b16b
 800afa0:	0800b025 	.word	0x0800b025
 800afa4:	0800b16b 	.word	0x0800b16b
 800afa8:	0800b16b 	.word	0x0800b16b
 800afac:	0800b16b 	.word	0x0800b16b
 800afb0:	0800b067 	.word	0x0800b067
 800afb4:	0800b16b 	.word	0x0800b16b
 800afb8:	0800b16b 	.word	0x0800b16b
 800afbc:	0800b16b 	.word	0x0800b16b
 800afc0:	0800b0a7 	.word	0x0800b0a7
 800afc4:	0800b16b 	.word	0x0800b16b
 800afc8:	0800b16b 	.word	0x0800b16b
 800afcc:	0800b16b 	.word	0x0800b16b
 800afd0:	0800b0e9 	.word	0x0800b0e9
 800afd4:	0800b16b 	.word	0x0800b16b
 800afd8:	0800b16b 	.word	0x0800b16b
 800afdc:	0800b16b 	.word	0x0800b16b
 800afe0:	0800b129 	.word	0x0800b129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 f97e 	bl	800b2ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699a      	ldr	r2, [r3, #24]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0208 	orr.w	r2, r2, #8
 800affe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0204 	bic.w	r2, r2, #4
 800b00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6999      	ldr	r1, [r3, #24]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	619a      	str	r2, [r3, #24]
      break;
 800b022:	e0a5      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 f9f8 	bl	800b420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b03e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b04e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	021a      	lsls	r2, r3, #8
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	619a      	str	r2, [r3, #24]
      break;
 800b064:	e084      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 fa6b 	bl	800b548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f042 0208 	orr.w	r2, r2, #8
 800b080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f022 0204 	bic.w	r2, r2, #4
 800b090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69d9      	ldr	r1, [r3, #28]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	691a      	ldr	r2, [r3, #16]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	61da      	str	r2, [r3, #28]
      break;
 800b0a4:	e064      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fadd 	bl	800b66c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69d9      	ldr	r1, [r3, #28]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	021a      	lsls	r2, r3, #8
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	61da      	str	r2, [r3, #28]
      break;
 800b0e6:	e043      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fb50 	bl	800b794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0208 	orr.w	r2, r2, #8
 800b102:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0204 	bic.w	r2, r2, #4
 800b112:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b126:	e023      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fb9a 	bl	800b868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b152:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	021a      	lsls	r2, r3, #8
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b168:	e002      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	75fb      	strb	r3, [r7, #23]
      break;
 800b16e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b178:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop

0800b184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a4c      	ldr	r2, [pc, #304]	@ (800b2c8 <TIM_Base_SetConfig+0x144>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d017      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1a2:	d013      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a49      	ldr	r2, [pc, #292]	@ (800b2cc <TIM_Base_SetConfig+0x148>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00f      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a48      	ldr	r2, [pc, #288]	@ (800b2d0 <TIM_Base_SetConfig+0x14c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a47      	ldr	r2, [pc, #284]	@ (800b2d4 <TIM_Base_SetConfig+0x150>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a46      	ldr	r2, [pc, #280]	@ (800b2d8 <TIM_Base_SetConfig+0x154>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_Base_SetConfig+0x48>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a45      	ldr	r2, [pc, #276]	@ (800b2dc <TIM_Base_SetConfig+0x158>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d108      	bne.n	800b1de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a39      	ldr	r2, [pc, #228]	@ (800b2c8 <TIM_Base_SetConfig+0x144>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d023      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ec:	d01f      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a36      	ldr	r2, [pc, #216]	@ (800b2cc <TIM_Base_SetConfig+0x148>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d01b      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a35      	ldr	r2, [pc, #212]	@ (800b2d0 <TIM_Base_SetConfig+0x14c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d017      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a34      	ldr	r2, [pc, #208]	@ (800b2d4 <TIM_Base_SetConfig+0x150>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d013      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a33      	ldr	r2, [pc, #204]	@ (800b2d8 <TIM_Base_SetConfig+0x154>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d00f      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a33      	ldr	r2, [pc, #204]	@ (800b2e0 <TIM_Base_SetConfig+0x15c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d00b      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a32      	ldr	r2, [pc, #200]	@ (800b2e4 <TIM_Base_SetConfig+0x160>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d007      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a31      	ldr	r2, [pc, #196]	@ (800b2e8 <TIM_Base_SetConfig+0x164>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d003      	beq.n	800b22e <TIM_Base_SetConfig+0xaa>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a2c      	ldr	r2, [pc, #176]	@ (800b2dc <TIM_Base_SetConfig+0x158>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d108      	bne.n	800b240 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a18      	ldr	r2, [pc, #96]	@ (800b2c8 <TIM_Base_SetConfig+0x144>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <TIM_Base_SetConfig+0x110>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d8 <TIM_Base_SetConfig+0x154>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_Base_SetConfig+0x110>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a1a      	ldr	r2, [pc, #104]	@ (800b2e0 <TIM_Base_SetConfig+0x15c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00b      	beq.n	800b294 <TIM_Base_SetConfig+0x110>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a19      	ldr	r2, [pc, #100]	@ (800b2e4 <TIM_Base_SetConfig+0x160>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_Base_SetConfig+0x110>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a18      	ldr	r2, [pc, #96]	@ (800b2e8 <TIM_Base_SetConfig+0x164>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_Base_SetConfig+0x110>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a13      	ldr	r2, [pc, #76]	@ (800b2dc <TIM_Base_SetConfig+0x158>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d103      	bne.n	800b29c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d105      	bne.n	800b2ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f023 0201 	bic.w	r2, r3, #1
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	611a      	str	r2, [r3, #16]
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	40012c00 	.word	0x40012c00
 800b2cc:	40000400 	.word	0x40000400
 800b2d0:	40000800 	.word	0x40000800
 800b2d4:	40000c00 	.word	0x40000c00
 800b2d8:	40013400 	.word	0x40013400
 800b2dc:	40015000 	.word	0x40015000
 800b2e0:	40014000 	.word	0x40014000
 800b2e4:	40014400 	.word	0x40014400
 800b2e8:	40014800 	.word	0x40014800

0800b2ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	f023 0201 	bic.w	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 0303 	bic.w	r3, r3, #3
 800b326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f023 0302 	bic.w	r3, r3, #2
 800b338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a30      	ldr	r2, [pc, #192]	@ (800b408 <TIM_OC1_SetConfig+0x11c>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d013      	beq.n	800b374 <TIM_OC1_SetConfig+0x88>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a2f      	ldr	r2, [pc, #188]	@ (800b40c <TIM_OC1_SetConfig+0x120>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d00f      	beq.n	800b374 <TIM_OC1_SetConfig+0x88>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a2e      	ldr	r2, [pc, #184]	@ (800b410 <TIM_OC1_SetConfig+0x124>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00b      	beq.n	800b374 <TIM_OC1_SetConfig+0x88>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a2d      	ldr	r2, [pc, #180]	@ (800b414 <TIM_OC1_SetConfig+0x128>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d007      	beq.n	800b374 <TIM_OC1_SetConfig+0x88>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a2c      	ldr	r2, [pc, #176]	@ (800b418 <TIM_OC1_SetConfig+0x12c>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_OC1_SetConfig+0x88>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a2b      	ldr	r2, [pc, #172]	@ (800b41c <TIM_OC1_SetConfig+0x130>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d10c      	bne.n	800b38e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f023 0308 	bic.w	r3, r3, #8
 800b37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f023 0304 	bic.w	r3, r3, #4
 800b38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a1d      	ldr	r2, [pc, #116]	@ (800b408 <TIM_OC1_SetConfig+0x11c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d013      	beq.n	800b3be <TIM_OC1_SetConfig+0xd2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a1c      	ldr	r2, [pc, #112]	@ (800b40c <TIM_OC1_SetConfig+0x120>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00f      	beq.n	800b3be <TIM_OC1_SetConfig+0xd2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a1b      	ldr	r2, [pc, #108]	@ (800b410 <TIM_OC1_SetConfig+0x124>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00b      	beq.n	800b3be <TIM_OC1_SetConfig+0xd2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b414 <TIM_OC1_SetConfig+0x128>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d007      	beq.n	800b3be <TIM_OC1_SetConfig+0xd2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a19      	ldr	r2, [pc, #100]	@ (800b418 <TIM_OC1_SetConfig+0x12c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d003      	beq.n	800b3be <TIM_OC1_SetConfig+0xd2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a18      	ldr	r2, [pc, #96]	@ (800b41c <TIM_OC1_SetConfig+0x130>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d111      	bne.n	800b3e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	621a      	str	r2, [r3, #32]
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	40013400 	.word	0x40013400
 800b410:	40014000 	.word	0x40014000
 800b414:	40014400 	.word	0x40014400
 800b418:	40014800 	.word	0x40014800
 800b41c:	40015000 	.word	0x40015000

0800b420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	f023 0210 	bic.w	r2, r3, #16
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b44e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0320 	bic.w	r3, r3, #32
 800b46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a2c      	ldr	r2, [pc, #176]	@ (800b530 <TIM_OC2_SetConfig+0x110>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d007      	beq.n	800b494 <TIM_OC2_SetConfig+0x74>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a2b      	ldr	r2, [pc, #172]	@ (800b534 <TIM_OC2_SetConfig+0x114>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d003      	beq.n	800b494 <TIM_OC2_SetConfig+0x74>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2a      	ldr	r2, [pc, #168]	@ (800b538 <TIM_OC2_SetConfig+0x118>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d10d      	bne.n	800b4b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b49a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b530 <TIM_OC2_SetConfig+0x110>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d013      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xc0>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b534 <TIM_OC2_SetConfig+0x114>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00f      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xc0>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800b53c <TIM_OC2_SetConfig+0x11c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d00b      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xc0>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a1d      	ldr	r2, [pc, #116]	@ (800b540 <TIM_OC2_SetConfig+0x120>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d007      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xc0>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a1c      	ldr	r2, [pc, #112]	@ (800b544 <TIM_OC2_SetConfig+0x124>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d003      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xc0>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a17      	ldr	r2, [pc, #92]	@ (800b538 <TIM_OC2_SetConfig+0x118>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d113      	bne.n	800b508 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	621a      	str	r2, [r3, #32]
}
 800b522:	bf00      	nop
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40012c00 	.word	0x40012c00
 800b534:	40013400 	.word	0x40013400
 800b538:	40015000 	.word	0x40015000
 800b53c:	40014000 	.word	0x40014000
 800b540:	40014400 	.word	0x40014400
 800b544:	40014800 	.word	0x40014800

0800b548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	021b      	lsls	r3, r3, #8
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a2b      	ldr	r2, [pc, #172]	@ (800b654 <TIM_OC3_SetConfig+0x10c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d007      	beq.n	800b5ba <TIM_OC3_SetConfig+0x72>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a2a      	ldr	r2, [pc, #168]	@ (800b658 <TIM_OC3_SetConfig+0x110>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d003      	beq.n	800b5ba <TIM_OC3_SetConfig+0x72>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a29      	ldr	r2, [pc, #164]	@ (800b65c <TIM_OC3_SetConfig+0x114>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d10d      	bne.n	800b5d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a1e      	ldr	r2, [pc, #120]	@ (800b654 <TIM_OC3_SetConfig+0x10c>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d013      	beq.n	800b606 <TIM_OC3_SetConfig+0xbe>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b658 <TIM_OC3_SetConfig+0x110>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00f      	beq.n	800b606 <TIM_OC3_SetConfig+0xbe>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b660 <TIM_OC3_SetConfig+0x118>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00b      	beq.n	800b606 <TIM_OC3_SetConfig+0xbe>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b664 <TIM_OC3_SetConfig+0x11c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d007      	beq.n	800b606 <TIM_OC3_SetConfig+0xbe>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b668 <TIM_OC3_SetConfig+0x120>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d003      	beq.n	800b606 <TIM_OC3_SetConfig+0xbe>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a16      	ldr	r2, [pc, #88]	@ (800b65c <TIM_OC3_SetConfig+0x114>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d113      	bne.n	800b62e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b60c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	4313      	orrs	r3, r2
 800b620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	011b      	lsls	r3, r3, #4
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	621a      	str	r2, [r3, #32]
}
 800b648:	bf00      	nop
 800b64a:	371c      	adds	r7, #28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	40012c00 	.word	0x40012c00
 800b658:	40013400 	.word	0x40013400
 800b65c:	40015000 	.word	0x40015000
 800b660:	40014000 	.word	0x40014000
 800b664:	40014400 	.word	0x40014400
 800b668:	40014800 	.word	0x40014800

0800b66c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b69a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	031b      	lsls	r3, r3, #12
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a2c      	ldr	r2, [pc, #176]	@ (800b77c <TIM_OC4_SetConfig+0x110>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d007      	beq.n	800b6e0 <TIM_OC4_SetConfig+0x74>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a2b      	ldr	r2, [pc, #172]	@ (800b780 <TIM_OC4_SetConfig+0x114>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_OC4_SetConfig+0x74>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a2a      	ldr	r2, [pc, #168]	@ (800b784 <TIM_OC4_SetConfig+0x118>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10d      	bne.n	800b6fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	031b      	lsls	r3, r3, #12
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b77c <TIM_OC4_SetConfig+0x110>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d013      	beq.n	800b72c <TIM_OC4_SetConfig+0xc0>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a1e      	ldr	r2, [pc, #120]	@ (800b780 <TIM_OC4_SetConfig+0x114>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d00f      	beq.n	800b72c <TIM_OC4_SetConfig+0xc0>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a1e      	ldr	r2, [pc, #120]	@ (800b788 <TIM_OC4_SetConfig+0x11c>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d00b      	beq.n	800b72c <TIM_OC4_SetConfig+0xc0>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a1d      	ldr	r2, [pc, #116]	@ (800b78c <TIM_OC4_SetConfig+0x120>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d007      	beq.n	800b72c <TIM_OC4_SetConfig+0xc0>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a1c      	ldr	r2, [pc, #112]	@ (800b790 <TIM_OC4_SetConfig+0x124>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d003      	beq.n	800b72c <TIM_OC4_SetConfig+0xc0>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a17      	ldr	r2, [pc, #92]	@ (800b784 <TIM_OC4_SetConfig+0x118>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d113      	bne.n	800b754 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b732:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b73a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	019b      	lsls	r3, r3, #6
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4313      	orrs	r3, r2
 800b746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	019b      	lsls	r3, r3, #6
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	40012c00 	.word	0x40012c00
 800b780:	40013400 	.word	0x40013400
 800b784:	40015000 	.word	0x40015000
 800b788:	40014000 	.word	0x40014000
 800b78c:	40014400 	.word	0x40014400
 800b790:	40014800 	.word	0x40014800

0800b794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b7d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a19      	ldr	r2, [pc, #100]	@ (800b850 <TIM_OC5_SetConfig+0xbc>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d013      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a18      	ldr	r2, [pc, #96]	@ (800b854 <TIM_OC5_SetConfig+0xc0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00f      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a17      	ldr	r2, [pc, #92]	@ (800b858 <TIM_OC5_SetConfig+0xc4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d00b      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a16      	ldr	r2, [pc, #88]	@ (800b85c <TIM_OC5_SetConfig+0xc8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d007      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a15      	ldr	r2, [pc, #84]	@ (800b860 <TIM_OC5_SetConfig+0xcc>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d003      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a14      	ldr	r2, [pc, #80]	@ (800b864 <TIM_OC5_SetConfig+0xd0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d109      	bne.n	800b82a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b81c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	4313      	orrs	r3, r2
 800b828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	621a      	str	r2, [r3, #32]
}
 800b844:	bf00      	nop
 800b846:	371c      	adds	r7, #28
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	40012c00 	.word	0x40012c00
 800b854:	40013400 	.word	0x40013400
 800b858:	40014000 	.word	0x40014000
 800b85c:	40014400 	.word	0x40014400
 800b860:	40014800 	.word	0x40014800
 800b864:	40015000 	.word	0x40015000

0800b868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a1b      	ldr	r3, [r3, #32]
 800b87c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	051b      	lsls	r3, r3, #20
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1a      	ldr	r2, [pc, #104]	@ (800b928 <TIM_OC6_SetConfig+0xc0>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	@ (800b92c <TIM_OC6_SetConfig+0xc4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a18      	ldr	r2, [pc, #96]	@ (800b930 <TIM_OC6_SetConfig+0xc8>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a17      	ldr	r2, [pc, #92]	@ (800b934 <TIM_OC6_SetConfig+0xcc>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a16      	ldr	r2, [pc, #88]	@ (800b938 <TIM_OC6_SetConfig+0xd0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	@ (800b93c <TIM_OC6_SetConfig+0xd4>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d109      	bne.n	800b900 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	029b      	lsls	r3, r3, #10
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	621a      	str	r2, [r3, #32]
}
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40013400 	.word	0x40013400
 800b930:	40014000 	.word	0x40014000
 800b934:	40014400 	.word	0x40014400
 800b938:	40014800 	.word	0x40014800
 800b93c:	40015000 	.word	0x40015000

0800b940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2201      	movs	r2, #1
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1a      	ldr	r2, [r3, #32]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	43db      	mvns	r3, r3
 800b962:	401a      	ands	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1a      	ldr	r2, [r3, #32]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 031f 	and.w	r3, r3, #31
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	fa01 f303 	lsl.w	r3, r1, r3
 800b978:	431a      	orrs	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	621a      	str	r2, [r3, #32]
}
 800b97e:	bf00      	nop
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d109      	bne.n	800b9b0 <HAL_TIMEx_PWMN_Start+0x24>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	bf14      	ite	ne
 800b9a8:	2301      	movne	r3, #1
 800b9aa:	2300      	moveq	r3, #0
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	e022      	b.n	800b9f6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d109      	bne.n	800b9ca <HAL_TIMEx_PWMN_Start+0x3e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	bf14      	ite	ne
 800b9c2:	2301      	movne	r3, #1
 800b9c4:	2300      	moveq	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	e015      	b.n	800b9f6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	d109      	bne.n	800b9e4 <HAL_TIMEx_PWMN_Start+0x58>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	bf14      	ite	ne
 800b9dc:	2301      	movne	r3, #1
 800b9de:	2300      	moveq	r3, #0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	e008      	b.n	800b9f6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	bf14      	ite	ne
 800b9f0:	2301      	movne	r3, #1
 800b9f2:	2300      	moveq	r3, #0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e073      	b.n	800bae6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <HAL_TIMEx_PWMN_Start+0x82>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba0c:	e013      	b.n	800ba36 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d104      	bne.n	800ba1e <HAL_TIMEx_PWMN_Start+0x92>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2202      	movs	r2, #2
 800ba18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba1c:	e00b      	b.n	800ba36 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d104      	bne.n	800ba2e <HAL_TIMEx_PWMN_Start+0xa2>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2202      	movs	r2, #2
 800ba28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba2c:	e003      	b.n	800ba36 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2202      	movs	r2, #2
 800ba32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f9a3 	bl	800bd8a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a25      	ldr	r2, [pc, #148]	@ (800baf0 <HAL_TIMEx_PWMN_Start+0x164>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d022      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba66:	d01d      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a21      	ldr	r2, [pc, #132]	@ (800baf4 <HAL_TIMEx_PWMN_Start+0x168>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d018      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a20      	ldr	r2, [pc, #128]	@ (800baf8 <HAL_TIMEx_PWMN_Start+0x16c>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d013      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a1e      	ldr	r2, [pc, #120]	@ (800bafc <HAL_TIMEx_PWMN_Start+0x170>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d00e      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a1d      	ldr	r2, [pc, #116]	@ (800bb00 <HAL_TIMEx_PWMN_Start+0x174>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d009      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a1b      	ldr	r2, [pc, #108]	@ (800bb04 <HAL_TIMEx_PWMN_Start+0x178>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d004      	beq.n	800baa4 <HAL_TIMEx_PWMN_Start+0x118>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a1a      	ldr	r2, [pc, #104]	@ (800bb08 <HAL_TIMEx_PWMN_Start+0x17c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d115      	bne.n	800bad0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	4b18      	ldr	r3, [pc, #96]	@ (800bb0c <HAL_TIMEx_PWMN_Start+0x180>)
 800baac:	4013      	ands	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b06      	cmp	r3, #6
 800bab4:	d015      	beq.n	800bae2 <HAL_TIMEx_PWMN_Start+0x156>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800babc:	d011      	beq.n	800bae2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f042 0201 	orr.w	r2, r2, #1
 800bacc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bace:	e008      	b.n	800bae2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f042 0201 	orr.w	r2, r2, #1
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e000      	b.n	800bae4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	40012c00 	.word	0x40012c00
 800baf4:	40000400 	.word	0x40000400
 800baf8:	40000800 	.word	0x40000800
 800bafc:	40000c00 	.word	0x40000c00
 800bb00:	40013400 	.word	0x40013400
 800bb04:	40014000 	.word	0x40014000
 800bb08:	40015000 	.word	0x40015000
 800bb0c:	00010007 	.word	0x00010007

0800bb10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d101      	bne.n	800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb24:	2302      	movs	r3, #2
 800bb26:	e074      	b.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2202      	movs	r2, #2
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a34      	ldr	r2, [pc, #208]	@ (800bc20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d009      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a33      	ldr	r2, [pc, #204]	@ (800bc24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a31      	ldr	r2, [pc, #196]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d108      	bne.n	800bb78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bb6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bb7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a21      	ldr	r2, [pc, #132]	@ (800bc20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d022      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bba8:	d01d      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a1f      	ldr	r2, [pc, #124]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d018      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d013      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a1c      	ldr	r2, [pc, #112]	@ (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d00e      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a15      	ldr	r2, [pc, #84]	@ (800bc24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d009      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a18      	ldr	r2, [pc, #96]	@ (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d004      	beq.n	800bbe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a11      	ldr	r2, [pc, #68]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d10c      	bne.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	40012c00 	.word	0x40012c00
 800bc24:	40013400 	.word	0x40013400
 800bc28:	40015000 	.word	0x40015000
 800bc2c:	40000400 	.word	0x40000400
 800bc30:	40000800 	.word	0x40000800
 800bc34:	40000c00 	.word	0x40000c00
 800bc38:	40014000 	.word	0x40014000

0800bc3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d101      	bne.n	800bc58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc54:	2302      	movs	r3, #2
 800bc56:	e078      	b.n	800bd4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	041b      	lsls	r3, r3, #16
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d009      	beq.n	800bcfe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a1b      	ldr	r2, [pc, #108]	@ (800bd5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d004      	beq.n	800bcfe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a19      	ldr	r2, [pc, #100]	@ (800bd60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d11c      	bne.n	800bd38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd08:	051b      	lsls	r3, r3, #20
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40012c00 	.word	0x40012c00
 800bd5c:	40013400 	.word	0x40013400
 800bd60:	40015000 	.word	0x40015000

0800bd64 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bd7a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b087      	sub	sp, #28
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	60f8      	str	r0, [r7, #12]
 800bd92:	60b9      	str	r1, [r7, #8]
 800bd94:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f003 030f 	and.w	r3, r3, #15
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bda2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6a1a      	ldr	r2, [r3, #32]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	43db      	mvns	r3, r3
 800bdac:	401a      	ands	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1a      	ldr	r2, [r3, #32]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	621a      	str	r2, [r3, #32]
}
 800bdc8:	bf00      	nop
 800bdca:	371c      	adds	r7, #28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <_ZdlPvj>:
 800bdd4:	f000 b811 	b.w	800bdfa <_ZdlPv>

0800bdd8 <_Znwj>:
 800bdd8:	2801      	cmp	r0, #1
 800bdda:	bf38      	it	cc
 800bddc:	2001      	movcc	r0, #1
 800bdde:	b510      	push	{r4, lr}
 800bde0:	4604      	mov	r4, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 f81c 	bl	800be20 <malloc>
 800bde8:	b100      	cbz	r0, 800bdec <_Znwj+0x14>
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	f000 f808 	bl	800be00 <_ZSt15get_new_handlerv>
 800bdf0:	b908      	cbnz	r0, 800bdf6 <_Znwj+0x1e>
 800bdf2:	f000 f80d 	bl	800be10 <abort>
 800bdf6:	4780      	blx	r0
 800bdf8:	e7f3      	b.n	800bde2 <_Znwj+0xa>

0800bdfa <_ZdlPv>:
 800bdfa:	f000 b819 	b.w	800be30 <free>
	...

0800be00 <_ZSt15get_new_handlerv>:
 800be00:	4b02      	ldr	r3, [pc, #8]	@ (800be0c <_ZSt15get_new_handlerv+0xc>)
 800be02:	6818      	ldr	r0, [r3, #0]
 800be04:	f3bf 8f5b 	dmb	ish
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	2000042c 	.word	0x2000042c

0800be10 <abort>:
 800be10:	b508      	push	{r3, lr}
 800be12:	2006      	movs	r0, #6
 800be14:	f000 f8f2 	bl	800bffc <raise>
 800be18:	2001      	movs	r0, #1
 800be1a:	f7f7 fc99 	bl	8003750 <_exit>
	...

0800be20 <malloc>:
 800be20:	4b02      	ldr	r3, [pc, #8]	@ (800be2c <malloc+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f000 b82d 	b.w	800be84 <_malloc_r>
 800be2a:	bf00      	nop
 800be2c:	20000014 	.word	0x20000014

0800be30 <free>:
 800be30:	4b02      	ldr	r3, [pc, #8]	@ (800be3c <free+0xc>)
 800be32:	4601      	mov	r1, r0
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	f000 b939 	b.w	800c0ac <_free_r>
 800be3a:	bf00      	nop
 800be3c:	20000014 	.word	0x20000014

0800be40 <sbrk_aligned>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	4e0f      	ldr	r6, [pc, #60]	@ (800be80 <sbrk_aligned+0x40>)
 800be44:	460c      	mov	r4, r1
 800be46:	6831      	ldr	r1, [r6, #0]
 800be48:	4605      	mov	r5, r0
 800be4a:	b911      	cbnz	r1, 800be52 <sbrk_aligned+0x12>
 800be4c:	f000 f8f2 	bl	800c034 <_sbrk_r>
 800be50:	6030      	str	r0, [r6, #0]
 800be52:	4621      	mov	r1, r4
 800be54:	4628      	mov	r0, r5
 800be56:	f000 f8ed 	bl	800c034 <_sbrk_r>
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	d103      	bne.n	800be66 <sbrk_aligned+0x26>
 800be5e:	f04f 34ff 	mov.w	r4, #4294967295
 800be62:	4620      	mov	r0, r4
 800be64:	bd70      	pop	{r4, r5, r6, pc}
 800be66:	1cc4      	adds	r4, r0, #3
 800be68:	f024 0403 	bic.w	r4, r4, #3
 800be6c:	42a0      	cmp	r0, r4
 800be6e:	d0f8      	beq.n	800be62 <sbrk_aligned+0x22>
 800be70:	1a21      	subs	r1, r4, r0
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f8de 	bl	800c034 <_sbrk_r>
 800be78:	3001      	adds	r0, #1
 800be7a:	d1f2      	bne.n	800be62 <sbrk_aligned+0x22>
 800be7c:	e7ef      	b.n	800be5e <sbrk_aligned+0x1e>
 800be7e:	bf00      	nop
 800be80:	20000430 	.word	0x20000430

0800be84 <_malloc_r>:
 800be84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be88:	1ccd      	adds	r5, r1, #3
 800be8a:	f025 0503 	bic.w	r5, r5, #3
 800be8e:	3508      	adds	r5, #8
 800be90:	2d0c      	cmp	r5, #12
 800be92:	bf38      	it	cc
 800be94:	250c      	movcc	r5, #12
 800be96:	2d00      	cmp	r5, #0
 800be98:	4606      	mov	r6, r0
 800be9a:	db01      	blt.n	800bea0 <_malloc_r+0x1c>
 800be9c:	42a9      	cmp	r1, r5
 800be9e:	d904      	bls.n	800beaa <_malloc_r+0x26>
 800bea0:	230c      	movs	r3, #12
 800bea2:	6033      	str	r3, [r6, #0]
 800bea4:	2000      	movs	r0, #0
 800bea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf80 <_malloc_r+0xfc>
 800beae:	f000 f869 	bl	800bf84 <__malloc_lock>
 800beb2:	f8d8 3000 	ldr.w	r3, [r8]
 800beb6:	461c      	mov	r4, r3
 800beb8:	bb44      	cbnz	r4, 800bf0c <_malloc_r+0x88>
 800beba:	4629      	mov	r1, r5
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7ff ffbf 	bl	800be40 <sbrk_aligned>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	4604      	mov	r4, r0
 800bec6:	d158      	bne.n	800bf7a <_malloc_r+0xf6>
 800bec8:	f8d8 4000 	ldr.w	r4, [r8]
 800becc:	4627      	mov	r7, r4
 800bece:	2f00      	cmp	r7, #0
 800bed0:	d143      	bne.n	800bf5a <_malloc_r+0xd6>
 800bed2:	2c00      	cmp	r4, #0
 800bed4:	d04b      	beq.n	800bf6e <_malloc_r+0xea>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	4639      	mov	r1, r7
 800beda:	4630      	mov	r0, r6
 800bedc:	eb04 0903 	add.w	r9, r4, r3
 800bee0:	f000 f8a8 	bl	800c034 <_sbrk_r>
 800bee4:	4581      	cmp	r9, r0
 800bee6:	d142      	bne.n	800bf6e <_malloc_r+0xea>
 800bee8:	6821      	ldr	r1, [r4, #0]
 800beea:	1a6d      	subs	r5, r5, r1
 800beec:	4629      	mov	r1, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ffa6 	bl	800be40 <sbrk_aligned>
 800bef4:	3001      	adds	r0, #1
 800bef6:	d03a      	beq.n	800bf6e <_malloc_r+0xea>
 800bef8:	6823      	ldr	r3, [r4, #0]
 800befa:	442b      	add	r3, r5
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	f8d8 3000 	ldr.w	r3, [r8]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	bb62      	cbnz	r2, 800bf60 <_malloc_r+0xdc>
 800bf06:	f8c8 7000 	str.w	r7, [r8]
 800bf0a:	e00f      	b.n	800bf2c <_malloc_r+0xa8>
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	1b52      	subs	r2, r2, r5
 800bf10:	d420      	bmi.n	800bf54 <_malloc_r+0xd0>
 800bf12:	2a0b      	cmp	r2, #11
 800bf14:	d917      	bls.n	800bf46 <_malloc_r+0xc2>
 800bf16:	1961      	adds	r1, r4, r5
 800bf18:	42a3      	cmp	r3, r4
 800bf1a:	6025      	str	r5, [r4, #0]
 800bf1c:	bf18      	it	ne
 800bf1e:	6059      	strne	r1, [r3, #4]
 800bf20:	6863      	ldr	r3, [r4, #4]
 800bf22:	bf08      	it	eq
 800bf24:	f8c8 1000 	streq.w	r1, [r8]
 800bf28:	5162      	str	r2, [r4, r5]
 800bf2a:	604b      	str	r3, [r1, #4]
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f000 f82f 	bl	800bf90 <__malloc_unlock>
 800bf32:	f104 000b 	add.w	r0, r4, #11
 800bf36:	1d23      	adds	r3, r4, #4
 800bf38:	f020 0007 	bic.w	r0, r0, #7
 800bf3c:	1ac2      	subs	r2, r0, r3
 800bf3e:	bf1c      	itt	ne
 800bf40:	1a1b      	subne	r3, r3, r0
 800bf42:	50a3      	strne	r3, [r4, r2]
 800bf44:	e7af      	b.n	800bea6 <_malloc_r+0x22>
 800bf46:	6862      	ldr	r2, [r4, #4]
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	bf0c      	ite	eq
 800bf4c:	f8c8 2000 	streq.w	r2, [r8]
 800bf50:	605a      	strne	r2, [r3, #4]
 800bf52:	e7eb      	b.n	800bf2c <_malloc_r+0xa8>
 800bf54:	4623      	mov	r3, r4
 800bf56:	6864      	ldr	r4, [r4, #4]
 800bf58:	e7ae      	b.n	800beb8 <_malloc_r+0x34>
 800bf5a:	463c      	mov	r4, r7
 800bf5c:	687f      	ldr	r7, [r7, #4]
 800bf5e:	e7b6      	b.n	800bece <_malloc_r+0x4a>
 800bf60:	461a      	mov	r2, r3
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	42a3      	cmp	r3, r4
 800bf66:	d1fb      	bne.n	800bf60 <_malloc_r+0xdc>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	6053      	str	r3, [r2, #4]
 800bf6c:	e7de      	b.n	800bf2c <_malloc_r+0xa8>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	6033      	str	r3, [r6, #0]
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 f80c 	bl	800bf90 <__malloc_unlock>
 800bf78:	e794      	b.n	800bea4 <_malloc_r+0x20>
 800bf7a:	6005      	str	r5, [r0, #0]
 800bf7c:	e7d6      	b.n	800bf2c <_malloc_r+0xa8>
 800bf7e:	bf00      	nop
 800bf80:	20000434 	.word	0x20000434

0800bf84 <__malloc_lock>:
 800bf84:	4801      	ldr	r0, [pc, #4]	@ (800bf8c <__malloc_lock+0x8>)
 800bf86:	f000 b88f 	b.w	800c0a8 <__retarget_lock_acquire_recursive>
 800bf8a:	bf00      	nop
 800bf8c:	20000574 	.word	0x20000574

0800bf90 <__malloc_unlock>:
 800bf90:	4801      	ldr	r0, [pc, #4]	@ (800bf98 <__malloc_unlock+0x8>)
 800bf92:	f000 b88a 	b.w	800c0aa <__retarget_lock_release_recursive>
 800bf96:	bf00      	nop
 800bf98:	20000574 	.word	0x20000574

0800bf9c <memset>:
 800bf9c:	4402      	add	r2, r0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d100      	bne.n	800bfa6 <memset+0xa>
 800bfa4:	4770      	bx	lr
 800bfa6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfaa:	e7f9      	b.n	800bfa0 <memset+0x4>

0800bfac <_raise_r>:
 800bfac:	291f      	cmp	r1, #31
 800bfae:	b538      	push	{r3, r4, r5, lr}
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	d904      	bls.n	800bfc0 <_raise_r+0x14>
 800bfb6:	2316      	movs	r3, #22
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfc2:	b112      	cbz	r2, 800bfca <_raise_r+0x1e>
 800bfc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc8:	b94b      	cbnz	r3, 800bfde <_raise_r+0x32>
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 f830 	bl	800c030 <_getpid_r>
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfda:	f000 b817 	b.w	800c00c <_kill_r>
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d00a      	beq.n	800bff8 <_raise_r+0x4c>
 800bfe2:	1c59      	adds	r1, r3, #1
 800bfe4:	d103      	bne.n	800bfee <_raise_r+0x42>
 800bfe6:	2316      	movs	r3, #22
 800bfe8:	6003      	str	r3, [r0, #0]
 800bfea:	2001      	movs	r0, #1
 800bfec:	e7e7      	b.n	800bfbe <_raise_r+0x12>
 800bfee:	2100      	movs	r1, #0
 800bff0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bff4:	4620      	mov	r0, r4
 800bff6:	4798      	blx	r3
 800bff8:	2000      	movs	r0, #0
 800bffa:	e7e0      	b.n	800bfbe <_raise_r+0x12>

0800bffc <raise>:
 800bffc:	4b02      	ldr	r3, [pc, #8]	@ (800c008 <raise+0xc>)
 800bffe:	4601      	mov	r1, r0
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f7ff bfd3 	b.w	800bfac <_raise_r>
 800c006:	bf00      	nop
 800c008:	20000014 	.word	0x20000014

0800c00c <_kill_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	@ (800c02c <_kill_r+0x20>)
 800c010:	2300      	movs	r3, #0
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	4611      	mov	r1, r2
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	f7f7 fb89 	bl	8003730 <_kill>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d102      	bne.n	800c028 <_kill_r+0x1c>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b103      	cbz	r3, 800c028 <_kill_r+0x1c>
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	20000570 	.word	0x20000570

0800c030 <_getpid_r>:
 800c030:	f7f7 bb76 	b.w	8003720 <_getpid>

0800c034 <_sbrk_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4d06      	ldr	r5, [pc, #24]	@ (800c050 <_sbrk_r+0x1c>)
 800c038:	2300      	movs	r3, #0
 800c03a:	4604      	mov	r4, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	f7f7 fb92 	bl	8003768 <_sbrk>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_sbrk_r+0x1a>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_sbrk_r+0x1a>
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	20000570 	.word	0x20000570

0800c054 <__errno>:
 800c054:	4b01      	ldr	r3, [pc, #4]	@ (800c05c <__errno+0x8>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	20000014 	.word	0x20000014

0800c060 <__libc_init_array>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	4d0d      	ldr	r5, [pc, #52]	@ (800c098 <__libc_init_array+0x38>)
 800c064:	4c0d      	ldr	r4, [pc, #52]	@ (800c09c <__libc_init_array+0x3c>)
 800c066:	1b64      	subs	r4, r4, r5
 800c068:	10a4      	asrs	r4, r4, #2
 800c06a:	2600      	movs	r6, #0
 800c06c:	42a6      	cmp	r6, r4
 800c06e:	d109      	bne.n	800c084 <__libc_init_array+0x24>
 800c070:	4d0b      	ldr	r5, [pc, #44]	@ (800c0a0 <__libc_init_array+0x40>)
 800c072:	4c0c      	ldr	r4, [pc, #48]	@ (800c0a4 <__libc_init_array+0x44>)
 800c074:	f000 f864 	bl	800c140 <_init>
 800c078:	1b64      	subs	r4, r4, r5
 800c07a:	10a4      	asrs	r4, r4, #2
 800c07c:	2600      	movs	r6, #0
 800c07e:	42a6      	cmp	r6, r4
 800c080:	d105      	bne.n	800c08e <__libc_init_array+0x2e>
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	f855 3b04 	ldr.w	r3, [r5], #4
 800c088:	4798      	blx	r3
 800c08a:	3601      	adds	r6, #1
 800c08c:	e7ee      	b.n	800c06c <__libc_init_array+0xc>
 800c08e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c092:	4798      	blx	r3
 800c094:	3601      	adds	r6, #1
 800c096:	e7f2      	b.n	800c07e <__libc_init_array+0x1e>
 800c098:	0800c178 	.word	0x0800c178
 800c09c:	0800c178 	.word	0x0800c178
 800c0a0:	0800c178 	.word	0x0800c178
 800c0a4:	0800c190 	.word	0x0800c190

0800c0a8 <__retarget_lock_acquire_recursive>:
 800c0a8:	4770      	bx	lr

0800c0aa <__retarget_lock_release_recursive>:
 800c0aa:	4770      	bx	lr

0800c0ac <_free_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d041      	beq.n	800c138 <_free_r+0x8c>
 800c0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b8:	1f0c      	subs	r4, r1, #4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bfb8      	it	lt
 800c0be:	18e4      	addlt	r4, r4, r3
 800c0c0:	f7ff ff60 	bl	800bf84 <__malloc_lock>
 800c0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c13c <_free_r+0x90>)
 800c0c6:	6813      	ldr	r3, [r2, #0]
 800c0c8:	b933      	cbnz	r3, 800c0d8 <_free_r+0x2c>
 800c0ca:	6063      	str	r3, [r4, #4]
 800c0cc:	6014      	str	r4, [r2, #0]
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d4:	f7ff bf5c 	b.w	800bf90 <__malloc_unlock>
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d908      	bls.n	800c0ee <_free_r+0x42>
 800c0dc:	6820      	ldr	r0, [r4, #0]
 800c0de:	1821      	adds	r1, r4, r0
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	bf01      	itttt	eq
 800c0e4:	6819      	ldreq	r1, [r3, #0]
 800c0e6:	685b      	ldreq	r3, [r3, #4]
 800c0e8:	1809      	addeq	r1, r1, r0
 800c0ea:	6021      	streq	r1, [r4, #0]
 800c0ec:	e7ed      	b.n	800c0ca <_free_r+0x1e>
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	b10b      	cbz	r3, 800c0f8 <_free_r+0x4c>
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	d9fa      	bls.n	800c0ee <_free_r+0x42>
 800c0f8:	6811      	ldr	r1, [r2, #0]
 800c0fa:	1850      	adds	r0, r2, r1
 800c0fc:	42a0      	cmp	r0, r4
 800c0fe:	d10b      	bne.n	800c118 <_free_r+0x6c>
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	4401      	add	r1, r0
 800c104:	1850      	adds	r0, r2, r1
 800c106:	4283      	cmp	r3, r0
 800c108:	6011      	str	r1, [r2, #0]
 800c10a:	d1e0      	bne.n	800c0ce <_free_r+0x22>
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	6053      	str	r3, [r2, #4]
 800c112:	4408      	add	r0, r1
 800c114:	6010      	str	r0, [r2, #0]
 800c116:	e7da      	b.n	800c0ce <_free_r+0x22>
 800c118:	d902      	bls.n	800c120 <_free_r+0x74>
 800c11a:	230c      	movs	r3, #12
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	e7d6      	b.n	800c0ce <_free_r+0x22>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	1821      	adds	r1, r4, r0
 800c124:	428b      	cmp	r3, r1
 800c126:	bf04      	itt	eq
 800c128:	6819      	ldreq	r1, [r3, #0]
 800c12a:	685b      	ldreq	r3, [r3, #4]
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	bf04      	itt	eq
 800c130:	1809      	addeq	r1, r1, r0
 800c132:	6021      	streq	r1, [r4, #0]
 800c134:	6054      	str	r4, [r2, #4]
 800c136:	e7ca      	b.n	800c0ce <_free_r+0x22>
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	bf00      	nop
 800c13c:	20000434 	.word	0x20000434

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
